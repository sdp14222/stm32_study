
11. SDIO_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001f20  08001f20  00011f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f4c  08001f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f4c  08001f4c  00011f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f54  08001f54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f54  08001f54  00011f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f58  08001f58  00011f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000064  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000074c5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000120a  00000000  00000000  00027501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  00028710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005a0  00000000  00000000  00028d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f1e0  00000000  00000000  000292b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000746c  00000000  00000000  00048498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be5c9  00000000  00000000  0004f904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010decd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017b0  00000000  00000000  0010df20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f08 	.word	0x08001f08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f08 	.word	0x08001f08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 f9bb 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f821 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8b3 	bl	8000644 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f887 	bl	80005f0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char str[20] = "Hello World!!\n";
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <main+0x48>)
 80004e4:	1d3c      	adds	r4, r7, #4
 80004e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004e8:	c407      	stmia	r4!, {r0, r1, r2}
 80004ea:	8023      	strh	r3, [r4, #0]
 80004ec:	3402      	adds	r4, #2
 80004ee:	0c1b      	lsrs	r3, r3, #16
 80004f0:	7023      	strb	r3, [r4, #0]
 80004f2:	f107 0313 	add.w	r3, r7, #19
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	711a      	strb	r2, [r3, #4]
  while (1)
  {
	  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 80004fc:	1d39      	adds	r1, r7, #4
 80004fe:	230a      	movs	r3, #10
 8000500:	2214      	movs	r2, #20
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x4c>)
 8000504:	f001 f95f 	bl	80017c6 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050c:	f000 fa10 	bl	8000930 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, str, sizeof(str), 10);
 8000510:	e7f4      	b.n	80004fc <main+0x30>
 8000512:	bf00      	nop
 8000514:	08001f20 	.word	0x08001f20
 8000518:	20000028 	.word	0x20000028

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fce4 	bl	8001ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2310      	movs	r3, #16
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fc6b 	bl	8000e7c <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f872 	bl	8000694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2105      	movs	r1, #5
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fecc 	bl	800136c <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f85b 	bl	8000694 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART1_UART_Init+0x4c>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_USART1_UART_Init+0x50>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_USART1_UART_Init+0x4c>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART1_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART1_UART_Init+0x4c>)
 8000628:	f001 f880 	bl	800172c <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000632:	f000 f82f 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028
 8000640:	40011000 	.word	0x40011000

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_GPIO_Init+0x4c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <MX_GPIO_Init+0x4c>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_GPIO_Init+0x4c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_GPIO_Init+0x4c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <MX_GPIO_Init+0x4c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_GPIO_Init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <HAL_MspInit+0x4c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <HAL_MspInit+0x4c>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_MspInit+0x4c>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x4c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x4c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a19      	ldr	r2, [pc, #100]	; (8000774 <HAL_UART_MspInit+0x84>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d12c      	bne.n	800076c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <HAL_UART_MspInit+0x88>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <HAL_UART_MspInit+0x88>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6453      	str	r3, [r2, #68]	; 0x44
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_UART_MspInit+0x88>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_UART_MspInit+0x88>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <HAL_UART_MspInit+0x88>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_UART_MspInit+0x88>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800074a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800075c:	2307      	movs	r3, #7
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <HAL_UART_MspInit+0x8c>)
 8000768:	f000 f9ec 	bl	8000b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40011000 	.word	0x40011000
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f890 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007fe:	490e      	ldr	r1, [pc, #56]	; (8000838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000814:	4c0b      	ldr	r4, [pc, #44]	; (8000844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000822:	f7ff ffd7 	bl	80007d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f001 fb43 	bl	8001eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082a:	f7ff fe4f 	bl	80004cc <main>
  bx  lr    
 800082e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800083c:	08001f5c 	.word	0x08001f5c
  ldr r2, =_sbss
 8000840:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000844:	20000070 	.word	0x20000070

08000848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <HAL_Init+0x40>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_Init+0x40>)
 8000862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x40>)
 800086e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f931 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff ff0e 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f93b 	bl	8000b2a <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f911 	bl	8000af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x20>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_IncTick+0x24>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_IncTick+0x24>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008
 8000914:	2000006c 	.word	0x2000006c

08000918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <HAL_GetTick+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000006c 	.word	0x2000006c

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff ffee 	bl	8000918 <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffde 	bl	8000918 <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f7ff ff8e 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff47 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff5c 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff8e 	bl	8000a30 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5d 	bl	80009dc <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ffb0 	bl	8000a98 <SysTick_Config>
 8000b38:	4603      	mov	r3, r0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	e16b      	b.n	8000e38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b60:	2201      	movs	r2, #1
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	f040 815a 	bne.w	8000e32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d005      	beq.n	8000b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d130      	bne.n	8000bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4013      	ands	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	f003 0201 	and.w	r2, r3, #1
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d017      	beq.n	8000c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d123      	bne.n	8000c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	08da      	lsrs	r2, r3, #3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3208      	adds	r2, #8
 8000c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	f003 0307 	and.w	r3, r3, #7
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	08da      	lsrs	r2, r3, #3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3208      	adds	r2, #8
 8000c82:	69b9      	ldr	r1, [r7, #24]
 8000c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0203 	and.w	r2, r3, #3
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f000 80b4 	beq.w	8000e32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <HAL_GPIO_Init+0x30c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a5f      	ldr	r2, [pc, #380]	; (8000e50 <HAL_GPIO_Init+0x30c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <HAL_GPIO_Init+0x30c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce6:	4a5b      	ldr	r2, [pc, #364]	; (8000e54 <HAL_GPIO_Init+0x310>)
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a52      	ldr	r2, [pc, #328]	; (8000e58 <HAL_GPIO_Init+0x314>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d02b      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a51      	ldr	r2, [pc, #324]	; (8000e5c <HAL_GPIO_Init+0x318>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d025      	beq.n	8000d66 <HAL_GPIO_Init+0x222>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a50      	ldr	r2, [pc, #320]	; (8000e60 <HAL_GPIO_Init+0x31c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d01f      	beq.n	8000d62 <HAL_GPIO_Init+0x21e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d019      	beq.n	8000d5e <HAL_GPIO_Init+0x21a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4e      	ldr	r2, [pc, #312]	; (8000e68 <HAL_GPIO_Init+0x324>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x216>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4d      	ldr	r2, [pc, #308]	; (8000e6c <HAL_GPIO_Init+0x328>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_GPIO_Init+0x32c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x20e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <HAL_GPIO_Init+0x330>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x20a>
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	e00e      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d4e:	2308      	movs	r3, #8
 8000d50:	e00c      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d52:	2306      	movs	r3, #6
 8000d54:	e00a      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e008      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	f002 0203 	and.w	r2, r2, #3
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d7c:	4935      	ldr	r1, [pc, #212]	; (8000e54 <HAL_GPIO_Init+0x310>)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dae:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd8:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3301      	adds	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	f67f ae90 	bls.w	8000b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40021400 	.word	0x40021400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40021c00 	.word	0x40021c00
 8000e78:	40013c00 	.word	0x40013c00

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e267      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d075      	beq.n	8000f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e9a:	4b88      	ldr	r3, [pc, #544]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d00c      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ea6:	4b85      	ldr	r3, [pc, #532]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	d112      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eb2:	4b82      	ldr	r3, [pc, #520]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ebe:	d10b      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d05b      	beq.n	8000f84 <HAL_RCC_OscConfig+0x108>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d157      	bne.n	8000f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e242      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee0:	d106      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x74>
 8000ee2:	4b76      	ldr	r3, [pc, #472]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a75      	ldr	r2, [pc, #468]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e01d      	b.n	8000f2c <HAL_RCC_OscConfig+0xb0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x98>
 8000efa:	4b70      	ldr	r3, [pc, #448]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a6f      	ldr	r2, [pc, #444]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b6d      	ldr	r3, [pc, #436]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a6c      	ldr	r2, [pc, #432]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e00b      	b.n	8000f2c <HAL_RCC_OscConfig+0xb0>
 8000f14:	4b69      	ldr	r3, [pc, #420]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a68      	ldr	r2, [pc, #416]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b66      	ldr	r3, [pc, #408]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a65      	ldr	r2, [pc, #404]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d013      	beq.n	8000f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fcf0 	bl	8000918 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fcec 	bl	8000918 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	; 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e207      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	4b5b      	ldr	r3, [pc, #364]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0xc0>
 8000f5a:	e014      	b.n	8000f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fcdc 	bl	8000918 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fcd8 	bl	8000918 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e1f3      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0xe8>
 8000f82:	e000      	b.n	8000f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d063      	beq.n	800105a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f92:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00b      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f9e:	4b47      	ldr	r3, [pc, #284]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d11c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d116      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <HAL_RCC_OscConfig+0x152>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d001      	beq.n	8000fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e1c7      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4937      	ldr	r1, [pc, #220]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe2:	e03a      	b.n	800105a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d020      	beq.n	800102e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_RCC_OscConfig+0x244>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fc91 	bl	8000918 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fc8d 	bl	8000918 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e1a8      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4925      	ldr	r1, [pc, #148]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8001028:	4313      	orrs	r3, r2
 800102a:	600b      	str	r3, [r1, #0]
 800102c:	e015      	b.n	800105a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <HAL_RCC_OscConfig+0x244>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff fc70 	bl	8000918 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103c:	f7ff fc6c 	bl	8000918 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e187      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	2b00      	cmp	r3, #0
 8001064:	d036      	beq.n	80010d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d016      	beq.n	800109c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_RCC_OscConfig+0x248>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001074:	f7ff fc50 	bl	8000918 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fc4c 	bl	8000918 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e167      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_RCC_OscConfig+0x240>)
 8001090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x200>
 800109a:	e01b      	b.n	80010d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_RCC_OscConfig+0x248>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a2:	f7ff fc39 	bl	8000918 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a8:	e00e      	b.n	80010c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010aa:	f7ff fc35 	bl	8000918 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d907      	bls.n	80010c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e150      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
 80010bc:	40023800 	.word	0x40023800
 80010c0:	42470000 	.word	0x42470000
 80010c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c8:	4b88      	ldr	r3, [pc, #544]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 80010ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1ea      	bne.n	80010aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8097 	beq.w	8001210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e6:	4b81      	ldr	r3, [pc, #516]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10f      	bne.n	8001112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b7d      	ldr	r3, [pc, #500]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a7c      	ldr	r2, [pc, #496]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b7a      	ldr	r3, [pc, #488]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110e:	2301      	movs	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001112:	4b77      	ldr	r3, [pc, #476]	; (80012f0 <HAL_RCC_OscConfig+0x474>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	2b00      	cmp	r3, #0
 800111c:	d118      	bne.n	8001150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800111e:	4b74      	ldr	r3, [pc, #464]	; (80012f0 <HAL_RCC_OscConfig+0x474>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a73      	ldr	r2, [pc, #460]	; (80012f0 <HAL_RCC_OscConfig+0x474>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800112a:	f7ff fbf5 	bl	8000918 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001132:	f7ff fbf1 	bl	8000918 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e10c      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001144:	4b6a      	ldr	r3, [pc, #424]	; (80012f0 <HAL_RCC_OscConfig+0x474>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d106      	bne.n	8001166 <HAL_RCC_OscConfig+0x2ea>
 8001158:	4b64      	ldr	r3, [pc, #400]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 800115a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115c:	4a63      	ldr	r2, [pc, #396]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6713      	str	r3, [r2, #112]	; 0x70
 8001164:	e01c      	b.n	80011a0 <HAL_RCC_OscConfig+0x324>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	2b05      	cmp	r3, #5
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x30c>
 800116e:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 8001170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001172:	4a5e      	ldr	r2, [pc, #376]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6713      	str	r3, [r2, #112]	; 0x70
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 800117c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117e:	4a5b      	ldr	r2, [pc, #364]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6713      	str	r3, [r2, #112]	; 0x70
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0x324>
 8001188:	4b58      	ldr	r3, [pc, #352]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 800118a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118c:	4a57      	ldr	r2, [pc, #348]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6713      	str	r3, [r2, #112]	; 0x70
 8001194:	4b55      	ldr	r3, [pc, #340]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 8001196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001198:	4a54      	ldr	r2, [pc, #336]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 800119a:	f023 0304 	bic.w	r3, r3, #4
 800119e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d015      	beq.n	80011d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a8:	f7ff fbb6 	bl	8000918 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b0:	f7ff fbb2 	bl	8000918 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e0cb      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 80011c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0ee      	beq.n	80011b0 <HAL_RCC_OscConfig+0x334>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d4:	f7ff fba0 	bl	8000918 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011da:	e00a      	b.n	80011f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011dc:	f7ff fb9c 	bl	8000918 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e0b5      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f2:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 80011f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ee      	bne.n	80011dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d105      	bne.n	8001210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001204:	4b39      	ldr	r3, [pc, #228]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a38      	ldr	r2, [pc, #224]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 800120a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80a1 	beq.w	800135c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b08      	cmp	r3, #8
 8001224:	d05c      	beq.n	80012e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d141      	bne.n	80012b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122e:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <HAL_RCC_OscConfig+0x478>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fb70 	bl	8000918 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800123c:	f7ff fb6c 	bl	8000918 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e087      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69da      	ldr	r2, [r3, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	019b      	lsls	r3, r3, #6
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	3b01      	subs	r3, #1
 8001274:	041b      	lsls	r3, r3, #16
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	061b      	lsls	r3, r3, #24
 800127e:	491b      	ldr	r1, [pc, #108]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_RCC_OscConfig+0x478>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff fb45 	bl	8000918 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fb41 	bl	8000918 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e05c      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x416>
 80012b0:	e054      	b.n	800135c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_RCC_OscConfig+0x478>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fb2e 	bl	8000918 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c0:	f7ff fb2a 	bl	8000918 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e045      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_RCC_OscConfig+0x470>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x444>
 80012de:	e03d      	b.n	800135c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d107      	bne.n	80012f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e038      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000
 80012f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_RCC_OscConfig+0x4ec>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d028      	beq.n	8001358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d121      	bne.n	8001358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	429a      	cmp	r2, r3
 8001320:	d11a      	bne.n	8001358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001328:	4013      	ands	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800132e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001330:	4293      	cmp	r3, r2
 8001332:	d111      	bne.n	8001358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	3b01      	subs	r3, #1
 8001342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001344:	429a      	cmp	r2, r3
 8001346:	d107      	bne.n	8001358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0cc      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001380:	4b68      	ldr	r3, [pc, #416]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d90c      	bls.n	80013a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b65      	ldr	r3, [pc, #404]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0b8      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c0:	4b59      	ldr	r3, [pc, #356]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4a58      	ldr	r2, [pc, #352]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d8:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4a52      	ldr	r2, [pc, #328]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	494d      	ldr	r1, [pc, #308]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d044      	beq.n	800148c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d119      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e07f      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d003      	beq.n	800142a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001426:	2b03      	cmp	r3, #3
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142a:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e06f      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e067      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f023 0203 	bic.w	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4934      	ldr	r1, [pc, #208]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800145c:	f7ff fa5c 	bl	8000918 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	e00a      	b.n	800147a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001464:	f7ff fa58 	bl	8000918 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e04f      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 020c 	and.w	r2, r3, #12
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	429a      	cmp	r2, r3
 800148a:	d1eb      	bne.n	8001464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d20c      	bcs.n	80014b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e032      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4916      	ldr	r1, [pc, #88]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	490e      	ldr	r1, [pc, #56]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014f2:	f000 f821 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	490a      	ldr	r1, [pc, #40]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	5ccb      	ldrb	r3, [r1, r3]
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_ClockConfig+0x1c8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f9bc 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00
 8001528:	40023800 	.word	0x40023800
 800152c:	08001f34 	.word	0x08001f34
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800153c:	b090      	sub	sp, #64	; 0x40
 800153e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
 8001544:	2300      	movs	r3, #0
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b08      	cmp	r3, #8
 800155a:	d00d      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x40>
 800155c:	2b08      	cmp	r3, #8
 800155e:	f200 80a1 	bhi.w	80016a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x34>
 8001566:	2b04      	cmp	r3, #4
 8001568:	d003      	beq.n	8001572 <HAL_RCC_GetSysClockFreq+0x3a>
 800156a:	e09b      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_RCC_GetSysClockFreq+0x184>)
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001570:	e09b      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001572:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001576:	e098      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001578:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d028      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	099b      	lsrs	r3, r3, #6
 8001594:	2200      	movs	r2, #0
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	627a      	str	r2, [r7, #36]	; 0x24
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015a0:	2100      	movs	r1, #0
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80015a4:	fb03 f201 	mul.w	r2, r3, r1
 80015a8:	2300      	movs	r3, #0
 80015aa:	fb00 f303 	mul.w	r3, r0, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	4a43      	ldr	r2, [pc, #268]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80015b2:	fba0 1202 	umull	r1, r2, r0, r2
 80015b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015b8:	460a      	mov	r2, r1
 80015ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80015bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015be:	4413      	add	r3, r2
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c4:	2200      	movs	r2, #0
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	61fa      	str	r2, [r7, #28]
 80015ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015d2:	f7fe fdf9 	bl	80001c8 <__aeabi_uldivmod>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4613      	mov	r3, r2
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015de:	e053      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	099b      	lsrs	r3, r3, #6
 80015e6:	2200      	movs	r2, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	617a      	str	r2, [r7, #20]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015f2:	f04f 0b00 	mov.w	fp, #0
 80015f6:	4652      	mov	r2, sl
 80015f8:	465b      	mov	r3, fp
 80015fa:	f04f 0000 	mov.w	r0, #0
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	0159      	lsls	r1, r3, #5
 8001604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001608:	0150      	lsls	r0, r2, #5
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ebb2 080a 	subs.w	r8, r2, sl
 8001612:	eb63 090b 	sbc.w	r9, r3, fp
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001622:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001626:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800162a:	ebb2 0408 	subs.w	r4, r2, r8
 800162e:	eb63 0509 	sbc.w	r5, r3, r9
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	00eb      	lsls	r3, r5, #3
 800163c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001640:	00e2      	lsls	r2, r4, #3
 8001642:	4614      	mov	r4, r2
 8001644:	461d      	mov	r5, r3
 8001646:	eb14 030a 	adds.w	r3, r4, sl
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	eb45 030b 	adc.w	r3, r5, fp
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800165e:	4629      	mov	r1, r5
 8001660:	028b      	lsls	r3, r1, #10
 8001662:	4621      	mov	r1, r4
 8001664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001668:	4621      	mov	r1, r4
 800166a:	028a      	lsls	r2, r1, #10
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001672:	2200      	movs	r2, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	60fa      	str	r2, [r7, #12]
 8001678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800167c:	f7fe fda4 	bl	80001c8 <__aeabi_uldivmod>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4613      	mov	r3, r2
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	3301      	adds	r3, #1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016a2:	e002      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetSysClockFreq+0x184>)
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3740      	adds	r7, #64	; 0x40
 80016b0:	46bd      	mov	sp, r7
 80016b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	00f42400 	.word	0x00f42400
 80016c0:	017d7840 	.word	0x017d7840

080016c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000000 	.word	0x20000000

080016dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016e0:	f7ff fff0 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	0a9b      	lsrs	r3, r3, #10
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	4903      	ldr	r1, [pc, #12]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	08001f44 	.word	0x08001f44

08001704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001708:	f7ff ffdc 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	0b5b      	lsrs	r3, r3, #13
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4903      	ldr	r1, [pc, #12]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	08001f44 	.word	0x08001f44

0800172c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e03f      	b.n	80017be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7fe ffcc 	bl	80006f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2224      	movs	r2, #36	; 0x24
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800176e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f929 	bl	80019c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b08a      	sub	sp, #40	; 0x28
 80017ca:	af02      	add	r7, sp, #8
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4613      	mov	r3, r2
 80017d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d17c      	bne.n	80018e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_UART_Transmit+0x2c>
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e075      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_UART_Transmit+0x3e>
 8001800:	2302      	movs	r3, #2
 8001802:	e06e      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2221      	movs	r2, #33	; 0x21
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800181a:	f7ff f87d 	bl	8000918 <HAL_GetTick>
 800181e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	88fa      	ldrh	r2, [r7, #6]
 8001824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	88fa      	ldrh	r2, [r7, #6]
 800182a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001834:	d108      	bne.n	8001848 <HAL_UART_Transmit+0x82>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d104      	bne.n	8001848 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	e003      	b.n	8001850 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001858:	e02a      	b.n	80018b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f840 	bl	80018ea <UART_WaitOnFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e036      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10b      	bne.n	8001892 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	3302      	adds	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	e007      	b.n	80018a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	3301      	adds	r3, #1
 80018a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1cf      	bne.n	800185a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2200      	movs	r2, #0
 80018c2:	2140      	movs	r1, #64	; 0x40
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f810 	bl	80018ea <UART_WaitOnFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e006      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018e0:	2302      	movs	r3, #2
  }
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b090      	sub	sp, #64	; 0x40
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4613      	mov	r3, r2
 80018f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018fa:	e050      	b.n	800199e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001902:	d04c      	beq.n	800199e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <UART_WaitOnFlagUntilTimeout+0x30>
 800190a:	f7ff f805 	bl	8000918 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001916:	429a      	cmp	r2, r3
 8001918:	d241      	bcs.n	800199e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	330c      	adds	r3, #12
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	e853 3f00 	ldrex	r3, [r3]
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	330c      	adds	r3, #12
 8001938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800193a:	637a      	str	r2, [r7, #52]	; 0x34
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800193e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001942:	e841 2300 	strex	r3, r2, [r1]
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1e5      	bne.n	800191a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3314      	adds	r3, #20
 8001954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	e853 3f00 	ldrex	r3, [r3]
 800195c:	613b      	str	r3, [r7, #16]
   return(result);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3314      	adds	r3, #20
 800196c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800196e:	623a      	str	r2, [r7, #32]
 8001970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001972:	69f9      	ldr	r1, [r7, #28]
 8001974:	6a3a      	ldr	r2, [r7, #32]
 8001976:	e841 2300 	strex	r3, r2, [r1]
 800197a:	61bb      	str	r3, [r7, #24]
   return(result);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1e5      	bne.n	800194e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2220      	movs	r2, #32
 8001986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e00f      	b.n	80019be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4013      	ands	r3, r2
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d09f      	beq.n	80018fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3740      	adds	r7, #64	; 0x40
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019cc:	b0c0      	sub	sp, #256	; 0x100
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80019e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019e4:	68d9      	ldr	r1, [r3, #12]
 80019e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	ea40 0301 	orr.w	r3, r0, r1
 80019f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a20:	f021 010c 	bic.w	r1, r1, #12
 8001a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a42:	6999      	ldr	r1, [r3, #24]
 8001a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	ea40 0301 	orr.w	r3, r0, r1
 8001a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b8f      	ldr	r3, [pc, #572]	; (8001c94 <UART_SetConfig+0x2cc>)
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d005      	beq.n	8001a68 <UART_SetConfig+0xa0>
 8001a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b8d      	ldr	r3, [pc, #564]	; (8001c98 <UART_SetConfig+0x2d0>)
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d104      	bne.n	8001a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a68:	f7ff fe4c 	bl	8001704 <HAL_RCC_GetPCLK2Freq>
 8001a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001a70:	e003      	b.n	8001a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a72:	f7ff fe33 	bl	80016dc <HAL_RCC_GetPCLK1Freq>
 8001a76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a84:	f040 810c 	bne.w	8001ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001a92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	1891      	adds	r1, r2, r2
 8001aa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001aa2:	415b      	adcs	r3, r3
 8001aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001aaa:	4621      	mov	r1, r4
 8001aac:	eb12 0801 	adds.w	r8, r2, r1
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb43 0901 	adc.w	r9, r3, r1
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aca:	4690      	mov	r8, r2
 8001acc:	4699      	mov	r9, r3
 8001ace:	4623      	mov	r3, r4
 8001ad0:	eb18 0303 	adds.w	r3, r8, r3
 8001ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ad8:	462b      	mov	r3, r5
 8001ada:	eb49 0303 	adc.w	r3, r9, r3
 8001ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001aee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001af6:	460b      	mov	r3, r1
 8001af8:	18db      	adds	r3, r3, r3
 8001afa:	653b      	str	r3, [r7, #80]	; 0x50
 8001afc:	4613      	mov	r3, r2
 8001afe:	eb42 0303 	adc.w	r3, r2, r3
 8001b02:	657b      	str	r3, [r7, #84]	; 0x54
 8001b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b0c:	f7fe fb5c 	bl	80001c8 <__aeabi_uldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <UART_SetConfig+0x2d4>)
 8001b16:	fba3 2302 	umull	r2, r3, r3, r2
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	011c      	lsls	r4, r3, #4
 8001b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b22:	2200      	movs	r2, #0
 8001b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001b30:	4642      	mov	r2, r8
 8001b32:	464b      	mov	r3, r9
 8001b34:	1891      	adds	r1, r2, r2
 8001b36:	64b9      	str	r1, [r7, #72]	; 0x48
 8001b38:	415b      	adcs	r3, r3
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b40:	4641      	mov	r1, r8
 8001b42:	eb12 0a01 	adds.w	sl, r2, r1
 8001b46:	4649      	mov	r1, r9
 8001b48:	eb43 0b01 	adc.w	fp, r3, r1
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b60:	4692      	mov	sl, r2
 8001b62:	469b      	mov	fp, r3
 8001b64:	4643      	mov	r3, r8
 8001b66:	eb1a 0303 	adds.w	r3, sl, r3
 8001b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b6e:	464b      	mov	r3, r9
 8001b70:	eb4b 0303 	adc.w	r3, fp, r3
 8001b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	18db      	adds	r3, r3, r3
 8001b90:	643b      	str	r3, [r7, #64]	; 0x40
 8001b92:	4613      	mov	r3, r2
 8001b94:	eb42 0303 	adc.w	r3, r2, r3
 8001b98:	647b      	str	r3, [r7, #68]	; 0x44
 8001b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ba2:	f7fe fb11 	bl	80001c8 <__aeabi_uldivmod>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <UART_SetConfig+0x2d4>)
 8001bae:	fba3 2301 	umull	r2, r3, r3, r1
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2264      	movs	r2, #100	; 0x64
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <UART_SetConfig+0x2d4>)
 8001bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001bd0:	441c      	add	r4, r3
 8001bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001be4:	4642      	mov	r2, r8
 8001be6:	464b      	mov	r3, r9
 8001be8:	1891      	adds	r1, r2, r2
 8001bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8001bec:	415b      	adcs	r3, r3
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bf4:	4641      	mov	r1, r8
 8001bf6:	1851      	adds	r1, r2, r1
 8001bf8:	6339      	str	r1, [r7, #48]	; 0x30
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	414b      	adcs	r3, r1
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	00cb      	lsls	r3, r1, #3
 8001c10:	4651      	mov	r1, sl
 8001c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c16:	4651      	mov	r1, sl
 8001c18:	00ca      	lsls	r2, r1, #3
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4642      	mov	r2, r8
 8001c22:	189b      	adds	r3, r3, r2
 8001c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c28:	464b      	mov	r3, r9
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	eb42 0303 	adc.w	r3, r2, r3
 8001c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001c48:	460b      	mov	r3, r1
 8001c4a:	18db      	adds	r3, r3, r3
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4e:	4613      	mov	r3, r2
 8001c50:	eb42 0303 	adc.w	r3, r2, r3
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001c5e:	f7fe fab3 	bl	80001c8 <__aeabi_uldivmod>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <UART_SetConfig+0x2d4>)
 8001c68:	fba3 1302 	umull	r1, r3, r3, r2
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	2164      	movs	r1, #100	; 0x64
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	3332      	adds	r3, #50	; 0x32
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <UART_SetConfig+0x2d4>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	f003 0207 	and.w	r2, r3, #7
 8001c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4422      	add	r2, r4
 8001c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001c90:	e105      	b.n	8001e9e <UART_SetConfig+0x4d6>
 8001c92:	bf00      	nop
 8001c94:	40011000 	.word	0x40011000
 8001c98:	40011400 	.word	0x40011400
 8001c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001caa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001cb2:	4642      	mov	r2, r8
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	1891      	adds	r1, r2, r2
 8001cb8:	6239      	str	r1, [r7, #32]
 8001cba:	415b      	adcs	r3, r3
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	1854      	adds	r4, r2, r1
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	eb43 0501 	adc.w	r5, r3, r1
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	00eb      	lsls	r3, r5, #3
 8001cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cda:	00e2      	lsls	r2, r4, #3
 8001cdc:	4614      	mov	r4, r2
 8001cde:	461d      	mov	r5, r3
 8001ce0:	4643      	mov	r3, r8
 8001ce2:	18e3      	adds	r3, r4, r3
 8001ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ce8:	464b      	mov	r3, r9
 8001cea:	eb45 0303 	adc.w	r3, r5, r3
 8001cee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d0e:	4629      	mov	r1, r5
 8001d10:	008b      	lsls	r3, r1, #2
 8001d12:	4621      	mov	r1, r4
 8001d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d18:	4621      	mov	r1, r4
 8001d1a:	008a      	lsls	r2, r1, #2
 8001d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d20:	f7fe fa52 	bl	80001c8 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4b60      	ldr	r3, [pc, #384]	; (8001eac <UART_SetConfig+0x4e4>)
 8001d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	011c      	lsls	r4, r3, #4
 8001d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001d44:	4642      	mov	r2, r8
 8001d46:	464b      	mov	r3, r9
 8001d48:	1891      	adds	r1, r2, r2
 8001d4a:	61b9      	str	r1, [r7, #24]
 8001d4c:	415b      	adcs	r3, r3
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d54:	4641      	mov	r1, r8
 8001d56:	1851      	adds	r1, r2, r1
 8001d58:	6139      	str	r1, [r7, #16]
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	414b      	adcs	r3, r1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	00cb      	lsls	r3, r1, #3
 8001d70:	4651      	mov	r1, sl
 8001d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d76:	4651      	mov	r1, sl
 8001d78:	00ca      	lsls	r2, r1, #3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4642      	mov	r2, r8
 8001d82:	189b      	adds	r3, r3, r2
 8001d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d88:	464b      	mov	r3, r9
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	eb42 0303 	adc.w	r3, r2, r3
 8001d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001dac:	4649      	mov	r1, r9
 8001dae:	008b      	lsls	r3, r1, #2
 8001db0:	4641      	mov	r1, r8
 8001db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001db6:	4641      	mov	r1, r8
 8001db8:	008a      	lsls	r2, r1, #2
 8001dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001dbe:	f7fe fa03 	bl	80001c8 <__aeabi_uldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <UART_SetConfig+0x4e4>)
 8001dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	2164      	movs	r1, #100	; 0x64
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	3332      	adds	r3, #50	; 0x32
 8001dda:	4a34      	ldr	r2, [pc, #208]	; (8001eac <UART_SetConfig+0x4e4>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de6:	441c      	add	r4, r3
 8001de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dec:	2200      	movs	r2, #0
 8001dee:	673b      	str	r3, [r7, #112]	; 0x70
 8001df0:	677a      	str	r2, [r7, #116]	; 0x74
 8001df2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001df6:	4642      	mov	r2, r8
 8001df8:	464b      	mov	r3, r9
 8001dfa:	1891      	adds	r1, r2, r2
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	415b      	adcs	r3, r3
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e06:	4641      	mov	r1, r8
 8001e08:	1851      	adds	r1, r2, r1
 8001e0a:	6039      	str	r1, [r7, #0]
 8001e0c:	4649      	mov	r1, r9
 8001e0e:	414b      	adcs	r3, r1
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e1e:	4659      	mov	r1, fp
 8001e20:	00cb      	lsls	r3, r1, #3
 8001e22:	4651      	mov	r1, sl
 8001e24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e28:	4651      	mov	r1, sl
 8001e2a:	00ca      	lsls	r2, r1, #3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4603      	mov	r3, r0
 8001e32:	4642      	mov	r2, r8
 8001e34:	189b      	adds	r3, r3, r2
 8001e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e38:	464b      	mov	r3, r9
 8001e3a:	460a      	mov	r2, r1
 8001e3c:	eb42 0303 	adc.w	r3, r2, r3
 8001e40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e4c:	667a      	str	r2, [r7, #100]	; 0x64
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001e5a:	4649      	mov	r1, r9
 8001e5c:	008b      	lsls	r3, r1, #2
 8001e5e:	4641      	mov	r1, r8
 8001e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e64:	4641      	mov	r1, r8
 8001e66:	008a      	lsls	r2, r1, #2
 8001e68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e6c:	f7fe f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <UART_SetConfig+0x4e4>)
 8001e76:	fba3 1302 	umull	r1, r3, r3, r2
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2164      	movs	r1, #100	; 0x64
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	3332      	adds	r3, #50	; 0x32
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <UART_SetConfig+0x4e4>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	f003 020f 	and.w	r2, r3, #15
 8001e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4422      	add	r2, r4
 8001e9c:	609a      	str	r2, [r3, #8]
}
 8001e9e:	bf00      	nop
 8001ea0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eaa:	bf00      	nop
 8001eac:	51eb851f 	.word	0x51eb851f

08001eb0 <__libc_init_array>:
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4d0d      	ldr	r5, [pc, #52]	; (8001ee8 <__libc_init_array+0x38>)
 8001eb4:	4c0d      	ldr	r4, [pc, #52]	; (8001eec <__libc_init_array+0x3c>)
 8001eb6:	1b64      	subs	r4, r4, r5
 8001eb8:	10a4      	asrs	r4, r4, #2
 8001eba:	2600      	movs	r6, #0
 8001ebc:	42a6      	cmp	r6, r4
 8001ebe:	d109      	bne.n	8001ed4 <__libc_init_array+0x24>
 8001ec0:	4d0b      	ldr	r5, [pc, #44]	; (8001ef0 <__libc_init_array+0x40>)
 8001ec2:	4c0c      	ldr	r4, [pc, #48]	; (8001ef4 <__libc_init_array+0x44>)
 8001ec4:	f000 f820 	bl	8001f08 <_init>
 8001ec8:	1b64      	subs	r4, r4, r5
 8001eca:	10a4      	asrs	r4, r4, #2
 8001ecc:	2600      	movs	r6, #0
 8001ece:	42a6      	cmp	r6, r4
 8001ed0:	d105      	bne.n	8001ede <__libc_init_array+0x2e>
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
 8001ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed8:	4798      	blx	r3
 8001eda:	3601      	adds	r6, #1
 8001edc:	e7ee      	b.n	8001ebc <__libc_init_array+0xc>
 8001ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ee2:	4798      	blx	r3
 8001ee4:	3601      	adds	r6, #1
 8001ee6:	e7f2      	b.n	8001ece <__libc_init_array+0x1e>
 8001ee8:	08001f54 	.word	0x08001f54
 8001eec:	08001f54 	.word	0x08001f54
 8001ef0:	08001f54 	.word	0x08001f54
 8001ef4:	08001f58 	.word	0x08001f58

08001ef8 <memset>:
 8001ef8:	4402      	add	r2, r0
 8001efa:	4603      	mov	r3, r0
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d100      	bne.n	8001f02 <memset+0xa>
 8001f00:	4770      	bx	lr
 8001f02:	f803 1b01 	strb.w	r1, [r3], #1
 8001f06:	e7f9      	b.n	8001efc <memset+0x4>

08001f08 <_init>:
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0a:	bf00      	nop
 8001f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0e:	bc08      	pop	{r3}
 8001f10:	469e      	mov	lr, r3
 8001f12:	4770      	bx	lr

08001f14 <_fini>:
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f16:	bf00      	nop
 8001f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1a:	bc08      	pop	{r3}
 8001f1c:	469e      	mov	lr, r3
 8001f1e:	4770      	bx	lr
