
11. SDIO_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005088  08005088  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005090  08005090  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e57a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000267e  00000000  00000000  0002e5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  00030c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a70  00000000  00000000  000317c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022603  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5c3  00000000  00000000  00054833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8913  00000000  00000000  00063df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c709  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cfc  00000000  00000000  0012c75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005014 	.word	0x08005014

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005014 	.word	0x08005014

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_DMA_Init+0x4c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <MX_DMA_Init+0x4c>)
 80004dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <MX_DMA_Init+0x4c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	203b      	movs	r0, #59	; 0x3b
 80004f4:	f000 fc97 	bl	8000e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80004f8:	203b      	movs	r0, #59	; 0x3b
 80004fa:	f000 fcb0 	bl	8000e5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2045      	movs	r0, #69	; 0x45
 8000504:	f000 fc8f 	bl	8000e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000508:	2045      	movs	r0, #69	; 0x45
 800050a:	f000 fca8 	bl	8000e5e <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <MX_GPIO_Init+0x84>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <MX_GPIO_Init+0x84>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_GPIO_Init+0x84>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_GPIO_Init+0x84>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b08b      	sub	sp, #44	; 0x2c
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 facb 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f82b 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f7ff ffb3 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 80005b6:	f7ff ff89 	bl	80004cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 fa27 	bl	8000a0c <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 80005be:	f000 f893 	bl	80006e8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005c2:	f004 fa61 	bl	8004a88 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char str[40] = "Hello World!!\n";
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <main+0x5c>)
 80005c8:	463c      	mov	r4, r7
 80005ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005cc:	c407      	stmia	r4!, {r0, r1, r2}
 80005ce:	8023      	strh	r3, [r4, #0]
 80005d0:	3402      	adds	r4, #2
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	7023      	strb	r3, [r4, #0]
 80005d6:	f107 030f 	add.w	r3, r7, #15
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	761a      	strb	r2, [r3, #24]
  while (1)
  {
	  HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
 80005ea:	4639      	mov	r1, r7
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	2228      	movs	r2, #40	; 0x28
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <main+0x60>)
 80005f2:	f003 f961 	bl	80038b8 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fa:	f000 fb15 	bl	8000c28 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
 80005fe:	e7f4      	b.n	80005ea <main+0x46>
 8000600:	0800502c 	.word	0x0800502c
 8000604:	2000016c 	.word	0x2000016c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fcf4 	bl	8005004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f93b 	bl	8001908 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f820 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fb9c 	bl	8001df8 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f809 	bl	80006dc <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <MX_SDIO_SD_Init+0x3c>)
 80006f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	20000028 	.word	0x20000028
 8000724:	40012c00 	.word	0x40012c00

08000728 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a68      	ldr	r2, [pc, #416]	; (80008e8 <HAL_SD_MspInit+0x1c0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	f040 80c9 	bne.w	80008de <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	4b66      	ldr	r3, [pc, #408]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 8000752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000754:	4a65      	ldr	r2, [pc, #404]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 8000756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800075a:	6453      	str	r3, [r2, #68]	; 0x44
 800075c:	4b63      	ldr	r3, [pc, #396]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 800075e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	4b5f      	ldr	r3, [pc, #380]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a5e      	ldr	r2, [pc, #376]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
 8000778:	4b5c      	ldr	r3, [pc, #368]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b58      	ldr	r3, [pc, #352]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a57      	ldr	r2, [pc, #348]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
 8000794:	4b55      	ldr	r3, [pc, #340]	; (80008ec <HAL_SD_MspInit+0x1c4>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007a0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007a4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007b2:	230c      	movs	r3, #12
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	484c      	ldr	r0, [pc, #304]	; (80008f0 <HAL_SD_MspInit+0x1c8>)
 80007be:	f000 ff07 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c2:	2304      	movs	r3, #4
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007d2:	230c      	movs	r3, #12
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4845      	ldr	r0, [pc, #276]	; (80008f4 <HAL_SD_MspInit+0x1cc>)
 80007de:	f000 fef7 	bl	80015d0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 80007e4:	4a45      	ldr	r2, [pc, #276]	; (80008fc <HAL_SD_MspInit+0x1d4>)
 80007e6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80007e8:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 80007ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ee:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007f0:	4b41      	ldr	r3, [pc, #260]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 80007f2:	2240      	movs	r2, #64	; 0x40
 80007f4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f6:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007fc:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 80007fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000802:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000804:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 8000806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800080a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 800080e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000812:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 8000816:	2220      	movs	r2, #32
 8000818:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000820:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 8000822:	2204      	movs	r2, #4
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 8000828:	2203      	movs	r2, #3
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 800082e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000834:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 8000836:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800083c:	482e      	ldr	r0, [pc, #184]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 800083e:	f000 fb29 	bl	8000e94 <HAL_DMA_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000848:	f7ff ff48 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 8000850:	63da      	str	r2, [r3, #60]	; 0x3c
 8000852:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <HAL_SD_MspInit+0x1d0>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <HAL_SD_MspInit+0x1dc>)
 800085c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 8000860:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000864:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 8000874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000878:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 800087c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000880:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 8000884:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000888:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 800088c:	2220      	movs	r2, #32
 800088e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 8000898:	2204      	movs	r2, #4
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 800089e:	2203      	movs	r2, #3
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 80008a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 80008ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 80008b4:	f000 faee 	bl	8000e94 <HAL_DMA_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80008be:	f7ff ff0d 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 80008c6:	641a      	str	r2, [r3, #64]	; 0x40
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <HAL_SD_MspInit+0x1d8>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2031      	movs	r0, #49	; 0x31
 80008d4:	f000 faa7 	bl	8000e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80008d8:	2031      	movs	r0, #49	; 0x31
 80008da:	f000 fac0 	bl	8000e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40012c00 	.word	0x40012c00
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	200000ac 	.word	0x200000ac
 80008fc:	40026458 	.word	0x40026458
 8000900:	2000010c 	.word	0x2000010c
 8000904:	400264a0 	.word	0x400264a0

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <HAL_MspInit+0x4c>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f920 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <SDIO_IRQHandler+0x10>)
 80009b2:	f001 fe79 	bl	80026a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000028 	.word	0x20000028

080009c0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <DMA2_Stream3_IRQHandler+0x10>)
 80009c6:	f000 fb8d 	bl	80010e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000ac 	.word	0x200000ac

080009d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <DMA2_Stream6_IRQHandler+0x10>)
 80009da:	f000 fb83 	bl	80010e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000010c 	.word	0x2000010c

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART1_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f002 feeb 	bl	800381e <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f7ff fe45 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000016c 	.word	0x2000016c
 8000a5c:	40011000 	.word	0x40011000

08000a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12c      	bne.n	8000adc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000acc:	2307      	movs	r3, #7
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <HAL_UART_MspInit+0x8c>)
 8000ad8:	f000 fd7a 	bl	80015d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af6:	490e      	ldr	r1, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b0c:	4c0b      	ldr	r4, [pc, #44]	; (8000b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b1a:	f7ff ff65 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f004 fa4d 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fd3f 	bl	80005a4 <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b34:	08005098 	.word	0x08005098
  ldr r2, =_sbss
 8000b38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b3c:	200001d0 	.word	0x200001d0

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_Init+0x40>)
 8000b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_Init+0x40>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x40>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f94f 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff fec6 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023c00 	.word	0x40023c00

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f967 	bl	8000e7a <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f92f 	bl	8000e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	200001b0 	.word	0x200001b0

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200001b0 	.word	0x200001b0

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffde 	bl	8000c10 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff29 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff3e 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff8e 	bl	8000d64 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff31 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffa2 	bl	8000dcc <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff feb6 	bl	8000c10 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e099      	b.n	8000fe4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0201 	bic.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed0:	e00f      	b.n	8000ef2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ed2:	f7ff fe9d 	bl	8000c10 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d908      	bls.n	8000ef2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e078      	b.n	8000fe4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e8      	bne.n	8000ed2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	4b38      	ldr	r3, [pc, #224]	; (8000fec <HAL_DMA_Init+0x158>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d107      	bne.n	8000f5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4313      	orrs	r3, r2
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f023 0307 	bic.w	r3, r3, #7
 8000f72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d117      	bne.n	8000fb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00e      	beq.n	8000fb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fa9d 	bl	80014d8 <DMA_CheckFifoParam>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d008      	beq.n	8000fb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2240      	movs	r2, #64	; 0x40
 8000fa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e016      	b.n	8000fe4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fa54 	bl	800146c <DMA_CalcBaseAndBitshift>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fcc:	223f      	movs	r2, #63	; 0x3f
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	f010803f 	.word	0xf010803f

08000ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_DMA_Start_IT+0x26>
 8001012:	2302      	movs	r3, #2
 8001014:	e040      	b.n	8001098 <HAL_DMA_Start_IT+0xa8>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d12f      	bne.n	800108a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2202      	movs	r2, #2
 800102e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f9e6 	bl	8001410 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	223f      	movs	r2, #63	; 0x3f
 800104a:	409a      	lsls	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0216 	orr.w	r2, r2, #22
 800105e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	2b00      	cmp	r3, #0
 8001066:	d007      	beq.n	8001078 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0208 	orr.w	r2, r2, #8
 8001076:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0201 	orr.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e005      	b.n	8001096 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001092:	2302      	movs	r3, #2
 8001094:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001096:	7dfb      	ldrb	r3, [r7, #23]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d004      	beq.n	80010be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00c      	b.n	80010d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010f0:	4b8e      	ldr	r3, [pc, #568]	; (800132c <HAL_DMA_IRQHandler+0x248>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a8e      	ldr	r2, [pc, #568]	; (8001330 <HAL_DMA_IRQHandler+0x24c>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0a9b      	lsrs	r3, r3, #10
 80010fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110e:	2208      	movs	r2, #8
 8001110:	409a      	lsls	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d01a      	beq.n	8001150 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0204 	bic.w	r2, r2, #4
 8001136:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113c:	2208      	movs	r2, #8
 800113e:	409a      	lsls	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	2201      	movs	r2, #1
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d012      	beq.n	8001186 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001172:	2201      	movs	r2, #1
 8001174:	409a      	lsls	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117e:	f043 0202 	orr.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118a:	2204      	movs	r2, #4
 800118c:	409a      	lsls	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d012      	beq.n	80011bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00b      	beq.n	80011bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	2204      	movs	r2, #4
 80011aa:	409a      	lsls	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b4:	f043 0204 	orr.w	r2, r3, #4
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c0:	2210      	movs	r2, #16
 80011c2:	409a      	lsls	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d043      	beq.n	8001254 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d03c      	beq.n	8001254 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011de:	2210      	movs	r2, #16
 80011e0:	409a      	lsls	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d018      	beq.n	8001226 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d108      	bne.n	8001214 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d024      	beq.n	8001254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	4798      	blx	r3
 8001212:	e01f      	b.n	8001254 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01b      	beq.n	8001254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	4798      	blx	r3
 8001224:	e016      	b.n	8001254 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001230:	2b00      	cmp	r3, #0
 8001232:	d107      	bne.n	8001244 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0208 	bic.w	r2, r2, #8
 8001242:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001258:	2220      	movs	r2, #32
 800125a:	409a      	lsls	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4013      	ands	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 808f 	beq.w	8001384 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 8087 	beq.w	8001384 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	2220      	movs	r2, #32
 800127c:	409a      	lsls	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b05      	cmp	r3, #5
 800128c:	d136      	bne.n	80012fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0216 	bic.w	r2, r2, #22
 800129c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d103      	bne.n	80012be <HAL_DMA_IRQHandler+0x1da>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0208 	bic.w	r2, r2, #8
 80012cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d2:	223f      	movs	r2, #63	; 0x3f
 80012d4:	409a      	lsls	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d07e      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
        }
        return;
 80012fa:	e079      	b.n	80013f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01d      	beq.n	8001346 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10d      	bne.n	8001334 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	2b00      	cmp	r3, #0
 800131e:	d031      	beq.n	8001384 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4798      	blx	r3
 8001328:	e02c      	b.n	8001384 <HAL_DMA_IRQHandler+0x2a0>
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000
 8001330:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d023      	beq.n	8001384 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	4798      	blx	r3
 8001344:	e01e      	b.n	8001384 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10f      	bne.n	8001374 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0210 	bic.w	r2, r2, #16
 8001362:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	2b00      	cmp	r3, #0
 800138a:	d032      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d022      	beq.n	80013de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2205      	movs	r2, #5
 800139c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3301      	adds	r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d307      	bcc.n	80013cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f2      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x2cc>
 80013ca:	e000      	b.n	80013ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
 80013ee:	e000      	b.n	80013f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80013f0:	bf00      	nop
    }
  }
}
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800142c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b40      	cmp	r3, #64	; 0x40
 800143c:	d108      	bne.n	8001450 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800144e:	e007      	b.n	8001460 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3b10      	subs	r3, #16
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <DMA_CalcBaseAndBitshift+0x64>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d909      	bls.n	80014ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014a2:	f023 0303 	bic.w	r3, r3, #3
 80014a6:	1d1a      	adds	r2, r3, #4
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	659a      	str	r2, [r3, #88]	; 0x58
 80014ac:	e007      	b.n	80014be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	aaaaaaab 	.word	0xaaaaaaab
 80014d4:	0800506c 	.word	0x0800506c

080014d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d11f      	bne.n	8001532 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d856      	bhi.n	80015a6 <DMA_CheckFifoParam+0xce>
 80014f8:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <DMA_CheckFifoParam+0x28>)
 80014fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fe:	bf00      	nop
 8001500:	08001511 	.word	0x08001511
 8001504:	08001523 	.word	0x08001523
 8001508:	08001511 	.word	0x08001511
 800150c:	080015a7 	.word	0x080015a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d046      	beq.n	80015aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001520:	e043      	b.n	80015aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800152a:	d140      	bne.n	80015ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001530:	e03d      	b.n	80015ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800153a:	d121      	bne.n	8001580 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d837      	bhi.n	80015b2 <DMA_CheckFifoParam+0xda>
 8001542:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <DMA_CheckFifoParam+0x70>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	08001559 	.word	0x08001559
 800154c:	0800155f 	.word	0x0800155f
 8001550:	08001559 	.word	0x08001559
 8001554:	08001571 	.word	0x08001571
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
      break;
 800155c:	e030      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d025      	beq.n	80015b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800156e:	e022      	b.n	80015b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001578:	d11f      	bne.n	80015ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800157e:	e01c      	b.n	80015ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d903      	bls.n	800158e <DMA_CheckFifoParam+0xb6>
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d003      	beq.n	8001594 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800158c:	e018      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
      break;
 8001592:	e015      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
      break;
 80015a4:	e00b      	b.n	80015be <DMA_CheckFifoParam+0xe6>
      break;
 80015a6:	bf00      	nop
 80015a8:	e00a      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
      break;
 80015aa:	bf00      	nop
 80015ac:	e008      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
      break;
 80015ae:	bf00      	nop
 80015b0:	e006      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
      break;
 80015b2:	bf00      	nop
 80015b4:	e004      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
      break;
 80015b6:	bf00      	nop
 80015b8:	e002      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80015ba:	bf00      	nop
 80015bc:	e000      	b.n	80015c0 <DMA_CheckFifoParam+0xe8>
      break;
 80015be:	bf00      	nop
    }
  } 
  
  return status; 
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e16b      	b.n	80018c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	429a      	cmp	r2, r3
 8001606:	f040 815a 	bne.w	80018be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d005      	beq.n	8001622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161e:	2b02      	cmp	r3, #2
 8001620:	d130      	bne.n	8001684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 0201 	and.w	r2, r3, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b03      	cmp	r3, #3
 800168e:	d017      	beq.n	80016c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d123      	bne.n	8001714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	220f      	movs	r2, #15
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	08da      	lsrs	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3208      	adds	r2, #8
 800170e:	69b9      	ldr	r1, [r7, #24]
 8001710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0203 	and.w	r2, r3, #3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80b4 	beq.w	80018be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_GPIO_Init+0x30c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a5f      	ldr	r2, [pc, #380]	; (80018dc <HAL_GPIO_Init+0x30c>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <HAL_GPIO_Init+0x30c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001772:	4a5b      	ldr	r2, [pc, #364]	; (80018e0 <HAL_GPIO_Init+0x310>)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_GPIO_Init+0x314>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d02b      	beq.n	80017f6 <HAL_GPIO_Init+0x226>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <HAL_GPIO_Init+0x318>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d025      	beq.n	80017f2 <HAL_GPIO_Init+0x222>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a50      	ldr	r2, [pc, #320]	; (80018ec <HAL_GPIO_Init+0x31c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_GPIO_Init+0x21e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <HAL_GPIO_Init+0x320>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x21a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <HAL_GPIO_Init+0x324>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x216>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_GPIO_Init+0x328>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x212>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	; (80018fc <HAL_GPIO_Init+0x32c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x20e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_GPIO_Init+0x330>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x20a>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e00e      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017da:	2308      	movs	r3, #8
 80017dc:	e00c      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00a      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017f6:	2300      	movs	r3, #0
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	4935      	ldr	r1, [pc, #212]	; (80018e0 <HAL_GPIO_Init+0x310>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183a:	4a32      	ldr	r2, [pc, #200]	; (8001904 <HAL_GPIO_Init+0x334>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001864:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_GPIO_Init+0x334>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188e:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_GPIO_Init+0x334>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	f67f ae90 	bls.w	80015ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40021400 	.word	0x40021400
 80018fc:	40021800 	.word	0x40021800
 8001900:	40021c00 	.word	0x40021c00
 8001904:	40013c00 	.word	0x40013c00

08001908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e267      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d075      	beq.n	8001a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b04      	cmp	r3, #4
 8001930:	d00c      	beq.n	800194c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001932:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800193a:	2b08      	cmp	r3, #8
 800193c:	d112      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4b82      	ldr	r3, [pc, #520]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b7e      	ldr	r3, [pc, #504]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d05b      	beq.n	8001a10 <HAL_RCC_OscConfig+0x108>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d157      	bne.n	8001a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e242      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x74>
 800196e:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a75      	ldr	r2, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b70      	ldr	r3, [pc, #448]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6f      	ldr	r2, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6c      	ldr	r2, [pc, #432]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 80019a0:	4b69      	ldr	r3, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a68      	ldr	r2, [pc, #416]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b66      	ldr	r3, [pc, #408]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a65      	ldr	r2, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff f926 	bl	8000c10 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f922 	bl	8000c10 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e207      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xc0>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f912 	bl	8000c10 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff f90e 	bl	8000c10 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1f3      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	4b51      	ldr	r3, [pc, #324]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0xe8>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d063      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d11c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x152>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1c7      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4937      	ldr	r1, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	e03a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_OscConfig+0x244>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f8c7 	bl	8000c10 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff f8c3 	bl	8000c10 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1a8      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4925      	ldr	r1, [pc, #148]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_RCC_OscConfig+0x244>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f8a6 	bl	8000c10 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f8a2 	bl	8000c10 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e187      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d036      	beq.n	8001b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_RCC_OscConfig+0x248>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f886 	bl	8000c10 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff f882 	bl	8000c10 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e167      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x200>
 8001b26:	e01b      	b.n	8001b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_OscConfig+0x248>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f86f 	bl	8000c10 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	e00e      	b.n	8001b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff f86b 	bl	8000c10 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d907      	bls.n	8001b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e150      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	42470000 	.word	0x42470000
 8001b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ea      	bne.n	8001b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8097 	beq.w	8001c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b7d      	ldr	r3, [pc, #500]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a7c      	ldr	r2, [pc, #496]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b77      	ldr	r3, [pc, #476]	; (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a73      	ldr	r2, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f82b 	bl	8000c10 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7ff f827 	bl	8000c10 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e10c      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_OscConfig+0x474>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2ea>
 8001be4:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a63      	ldr	r2, [pc, #396]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x324>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x30c>
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a5e      	ldr	r2, [pc, #376]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	4b5c      	ldr	r3, [pc, #368]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a5b      	ldr	r2, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0x324>
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c20:	4b55      	ldr	r3, [pc, #340]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 0304 	bic.w	r3, r3, #4
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d015      	beq.n	8001c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7fe ffec 	bl	8000c10 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ffe8 	bl	8000c10 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0cb      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ee      	beq.n	8001c3c <HAL_RCC_OscConfig+0x334>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7fe ffd6 	bl	8000c10 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7fe ffd2 	bl	8000c10 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0b5      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ee      	bne.n	8001c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a1 	beq.w	8001de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca6:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d05c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d141      	bne.n	8001d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe ffa6 	bl	8000c10 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe ffa2 	bl	8000c10 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e087      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	061b      	lsls	r3, r3, #24
 8001d0a:	491b      	ldr	r1, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe ff7b 	bl	8000c10 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7fe ff77 	bl	8000c10 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e05c      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x416>
 8001d3c:	e054      	b.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_RCC_OscConfig+0x478>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe ff64 	bl	8000c10 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7fe ff60 	bl	8000c10 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e045      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x470>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x444>
 8001d6a:	e03d      	b.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e038      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x4ec>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d028      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d121      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d11a      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d111      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0cc      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d90c      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b8      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	494d      	ldr	r1, [pc, #308]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d044      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d119      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e06f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e067      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fe92 	bl	8000c10 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7fe fe8e 	bl	8000c10 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e04f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d20c      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4916      	ldr	r1, [pc, #88]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f7e:	f000 f821 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	490a      	ldr	r1, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fdf2 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08005054 	.word	0x08005054
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc8:	b090      	sub	sp, #64	; 0x40
 8001fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d00d      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x40>
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	f200 80a1 	bhi.w	8002130 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ff6:	e09b      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ffa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ffc:	e09b      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ffe:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 8002000:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002002:	e098      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d028      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201a:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	2200      	movs	r2, #0
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	627a      	str	r2, [r7, #36]	; 0x24
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800202c:	2100      	movs	r1, #0
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 8002030:	fb03 f201 	mul.w	r2, r3, r1
 8002034:	2300      	movs	r3, #0
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	4413      	add	r3, r2
 800203c:	4a43      	ldr	r2, [pc, #268]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 800203e:	fba0 1202 	umull	r1, r2, r0, r2
 8002042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002044:	460a      	mov	r2, r1
 8002046:	62ba      	str	r2, [r7, #40]	; 0x28
 8002048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204a:	4413      	add	r3, r2
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	2200      	movs	r2, #0
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	61fa      	str	r2, [r7, #28]
 8002056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800205e:	f7fe f8b3 	bl	80001c8 <__aeabi_uldivmod>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4613      	mov	r3, r2
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206a:	e053      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	2200      	movs	r2, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	617a      	str	r2, [r7, #20]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800207e:	f04f 0b00 	mov.w	fp, #0
 8002082:	4652      	mov	r2, sl
 8002084:	465b      	mov	r3, fp
 8002086:	f04f 0000 	mov.w	r0, #0
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	0159      	lsls	r1, r3, #5
 8002090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002094:	0150      	lsls	r0, r2, #5
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	ebb2 080a 	subs.w	r8, r2, sl
 800209e:	eb63 090b 	sbc.w	r9, r3, fp
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020b6:	ebb2 0408 	subs.w	r4, r2, r8
 80020ba:	eb63 0509 	sbc.w	r5, r3, r9
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	00eb      	lsls	r3, r5, #3
 80020c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020cc:	00e2      	lsls	r2, r4, #3
 80020ce:	4614      	mov	r4, r2
 80020d0:	461d      	mov	r5, r3
 80020d2:	eb14 030a 	adds.w	r3, r4, sl
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	eb45 030b 	adc.w	r3, r5, fp
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ea:	4629      	mov	r1, r5
 80020ec:	028b      	lsls	r3, r1, #10
 80020ee:	4621      	mov	r1, r4
 80020f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f4:	4621      	mov	r1, r4
 80020f6:	028a      	lsls	r2, r1, #10
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	2200      	movs	r2, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	60fa      	str	r2, [r7, #12]
 8002104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002108:	f7fe f85e 	bl	80001c8 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetSysClockFreq+0x184>)
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002138:	4618      	mov	r0, r3
 800213a:	3740      	adds	r7, #64	; 0x40
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	00f42400 	.word	0x00f42400
 800214c:	017d7840 	.word	0x017d7840

08002150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff0 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0a9b      	lsrs	r3, r3, #10
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	08005064 	.word	0x08005064

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002194:	f7ff ffdc 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0b5b      	lsrs	r3, r3, #13
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	08005064 	.word	0x08005064

080021b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e022      	b.n	8002210 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7fe faa3 	bl	8000728 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2203      	movs	r2, #3
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f814 	bl	8002218 <HAL_SD_InitCard>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00a      	b.n	8002210 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	b08e      	sub	sp, #56	; 0x38
 800221c:	af04      	add	r7, sp, #16
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002234:	2376      	movs	r3, #118	; 0x76
 8002236:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681d      	ldr	r5, [r3, #0]
 800223c:	466c      	mov	r4, sp
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002250:	4628      	mov	r0, r5
 8002252:	f001 fea5 	bl	8003fa0 <SDIO_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800225c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e04f      	b.n	8002308 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_SD_InitCard+0xf8>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fedd 	bl	8004032 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_SD_InitCard+0xf8>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800227e:	2002      	movs	r0, #2
 8002280:	f7fe fcd2 	bl	8000c28 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f001 f805 	bl	8003294 <SD_PowerON>
 800228a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e02e      	b.n	8002308 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 ff24 	bl	80030f8 <SD_InitCard>
 80022b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e01b      	b.n	8002308 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 ff3c 	bl	8004156 <SDMMC_CmdBlockLength>
 80022de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00f      	beq.n	8002306 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_SD_InitCard+0xfc>)
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bdb0      	pop	{r4, r5, r7, pc}
 8002310:	422580a0 	.word	0x422580a0
 8002314:	004005ff 	.word	0x004005ff

08002318 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	; 0x30
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0c0      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	f040 80b9 	bne.w	80024c0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	441a      	add	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	429a      	cmp	r2, r3
 8002360:	d907      	bls.n	8002372 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0a7      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2203      	movs	r2, #3
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800239c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80023a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2200      	movs	r2, #0
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3380      	adds	r3, #128	; 0x80
 80023dc:	4619      	mov	r1, r3
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	f7fe fe03 	bl	8000ff0 <HAL_DMA_Start_IT>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a33      	ldr	r2, [pc, #204]	; (80024d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e050      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	2b01      	cmp	r3, #1
 800242c:	d002      	beq.n	8002434 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	025b      	lsls	r3, r3, #9
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
 8002438:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	025b      	lsls	r3, r3, #9
 800243e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002440:	2390      	movs	r3, #144	; 0x90
 8002442:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002444:	2302      	movs	r3, #2
 8002446:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800244c:	2301      	movs	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f107 0210 	add.w	r2, r7, #16
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f001 fe4f 	bl	80040fe <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d90a      	bls.n	800247c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2282      	movs	r2, #130	; 0x82
 800246a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002472:	4618      	mov	r0, r3
 8002474:	f001 feb3 	bl	80041de <SDMMC_CmdReadMultiBlock>
 8002478:	62f8      	str	r0, [r7, #44]	; 0x2c
 800247a:	e009      	b.n	8002490 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2281      	movs	r2, #129	; 0x81
 8002480:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002488:	4618      	mov	r0, r3
 800248a:	f001 fe86 	bl	800419a <SDMMC_CmdReadSingleBlock>
 800248e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e002      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3730      	adds	r7, #48	; 0x30
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	08002f07 	.word	0x08002f07
 80024d0:	08002f79 	.word	0x08002f79
 80024d4:	004005ff 	.word	0x004005ff
 80024d8:	4225858c 	.word	0x4225858c

080024dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0c5      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	f040 80be 	bne.w	800268e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	441a      	add	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	429a      	cmp	r2, r3
 8002524:	d907      	bls.n	8002536 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0ac      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2203      	movs	r2, #3
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2200      	movs	r2, #0
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	4a4d      	ldr	r2, [pc, #308]	; (800269c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002568:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	2200      	movs	r2, #0
 8002570:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	2b01      	cmp	r3, #1
 8002578:	d002      	beq.n	8002580 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	025b      	lsls	r3, r3, #9
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d90a      	bls.n	800259c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	22a0      	movs	r2, #160	; 0xa0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002592:	4618      	mov	r0, r3
 8002594:	f001 fe67 	bl	8004266 <SDMMC_CmdWriteMultiBlock>
 8002598:	62f8      	str	r0, [r7, #44]	; 0x2c
 800259a:	e009      	b.n	80025b0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2290      	movs	r2, #144	; 0x90
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 fe3a 	bl	8004222 <SDMMC_CmdWriteSingleBlock>
 80025ae:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a39      	ldr	r2, [pc, #228]	; (80026a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e059      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80025dc:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3380      	adds	r3, #128	; 0x80
 8002612:	461a      	mov	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	025b      	lsls	r3, r3, #9
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	f7fe fce9 	bl	8000ff0 <HAL_DMA_Start_IT>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01c      	beq.n	800265e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002632:	f023 0302 	bic.w	r3, r3, #2
 8002636:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e018      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	025b      	lsls	r3, r3, #9
 8002668:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800266a:	2390      	movs	r3, #144	; 0x90
 800266c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002676:	2301      	movs	r3, #1
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f107 0210 	add.w	r2, r7, #16
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f001 fd3a 	bl	80040fe <SDIO_ConfigData>

      return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3730      	adds	r7, #48	; 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	08002edd 	.word	0x08002edd
 800269c:	08002f79 	.word	0x08002f79
 80026a0:	004005ff 	.word	0x004005ff
 80026a4:	4225858c 	.word	0x4225858c

080026a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_SD_IRQHandler+0x2e>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 ffff 	bl	80036d2 <SD_Read_IT>
 80026d4:	e165      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 808f 	beq.w	8002804 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80026fe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002702:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d039      	beq.n	8002792 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <HAL_SD_IRQHandler+0x8a>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d011      	beq.n	8002756 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fdb8 	bl	80042ac <SDMMC_CmdStopTransfer>
 800273c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f92f 	bl	80029b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f240 523a 	movw	r2, #1338	; 0x53a
 800275e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d104      	bne.n	8002782 <HAL_SD_IRQHandler+0xda>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f002 fa1e 	bl	8004bc4 <HAL_SD_RxCpltCallback>
 8002788:	e10b      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f002 fa10 	bl	8004bb0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002790:	e107      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8102 	beq.w	80029a2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d011      	beq.n	80027cc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 fd7d 	bl	80042ac <SDMMC_CmdStopTransfer>
 80027b2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8f4 	bl	80029b4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 80e5 	bne.w	80029a2 <HAL_SD_IRQHandler+0x2fa>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 80df 	bne.w	80029a2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0208 	bic.w	r2, r2, #8
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f002 f9d7 	bl	8004bb0 <HAL_SD_TxCpltCallback>
}
 8002802:	e0ce      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_SD_IRQHandler+0x17c>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 ffa9 	bl	8003774 <SD_Write_IT>
 8002822:	e0be      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282a:	f240 233a 	movw	r3, #570	; 0x23a
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80b6 	beq.w	80029a2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	f043 0202 	orr.w	r2, r3, #2
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	f043 0208 	orr.w	r2, r3, #8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	f043 0208 	orr.w	r2, r3, #8
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f240 723a 	movw	r2, #1850	; 0x73a
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80028d0:	f023 0302 	bic.w	r3, r3, #2
 80028d4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 fce6 	bl	80042ac <SDMMC_CmdStopTransfer>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f855 	bl	80029b4 <HAL_SD_ErrorCallback>
}
 800290a:	e04a      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d045      	beq.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <HAL_SD_IRQHandler+0x282>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d011      	beq.n	800294e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <HAL_SD_IRQHandler+0x304>)
 8002930:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fbb2 	bl	80010a0 <HAL_DMA_Abort_IT>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02f      	beq.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fb68 	bl	800301c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800294c:	e029      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_SD_IRQHandler+0x2ba>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d011      	beq.n	8002986 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_SD_IRQHandler+0x308>)
 8002968:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fb96 	bl	80010a0 <HAL_DMA_Abort_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d013      	beq.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fb83 	bl	800308a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002984:	e00d      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f002 f8fe 	bl	8004b9c <HAL_SD_AbortCallback>
}
 80029a0:	e7ff      	b.n	80029a2 <HAL_SD_IRQHandler+0x2fa>
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	0800301d 	.word	0x0800301d
 80029b0:	0800308b 	.word	0x0800308b

080029b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d6:	0f9b      	lsrs	r3, r3, #30
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f4:	0e1b      	lsrs	r3, r3, #24
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a28:	0d1b      	lsrs	r3, r3, #20
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a46:	0bdb      	lsrs	r3, r3, #15
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a58:	0b9b      	lsrs	r3, r3, #14
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a6a:	0b5b      	lsrs	r3, r3, #13
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7c:	0b1b      	lsrs	r3, r3, #12
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d163      	bne.n	8002b60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a9c:	009a      	lsls	r2, r3, #2
 8002a9e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002aa8:	0f92      	lsrs	r2, r2, #30
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab4:	0edb      	lsrs	r3, r3, #27
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	0e1b      	lsrs	r3, r3, #24
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad8:	0d5b      	lsrs	r3, r3, #21
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	0c9b      	lsrs	r3, r3, #18
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afc:	0bdb      	lsrs	r3, r3, #15
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	7e1b      	ldrb	r3, [r3, #24]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	3302      	adds	r3, #2
 8002b20:	2201      	movs	r2, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b2a:	fb03 f202 	mul.w	r2, r3, r2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	7a1b      	ldrb	r3, [r3, #8]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b4c:	0a52      	lsrs	r2, r2, #9
 8002b4e:	fb03 f202 	mul.w	r2, r3, r2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5c:	661a      	str	r2, [r3, #96]	; 0x60
 8002b5e:	e031      	b.n	8002bc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d11d      	bne.n	8002ba4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	3301      	adds	r3, #1
 8002b84:	029a      	lsls	r2, r3, #10
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b98:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	661a      	str	r2, [r3, #96]	; 0x60
 8002ba2:	e00f      	b.n	8002bc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_SD_GetCardCSD+0x344>)
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e09d      	b.n	8002d00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc8:	0b9b      	lsrs	r3, r3, #14
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bda:	09db      	lsrs	r3, r3, #7
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	0fdb      	lsrs	r3, r3, #31
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	0f5b      	lsrs	r3, r3, #29
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	0d9b      	lsrs	r3, r3, #22
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	0d5b      	lsrs	r3, r3, #21
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	0c1b      	lsrs	r3, r3, #16
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	0bdb      	lsrs	r3, r3, #15
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	0b9b      	lsrs	r3, r3, #14
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	0b1b      	lsrs	r3, r3, #12
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	004005ff 	.word	0x004005ff

08002d10 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b08e      	sub	sp, #56	; 0x38
 8002d6c:	af04      	add	r7, sp, #16
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d02e      	beq.n	8002de6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8e:	d106      	bne.n	8002d9e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9c:	e029      	b.n	8002df2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da4:	d10a      	bne.n	8002dbc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fb2a 	bl	8003400 <SD_WideBus_Enable>
 8002dac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dba:	e01a      	b.n	8002df2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fb67 	bl	8003496 <SD_WideBus_Disable>
 8002dc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd6:	e00c      	b.n	8002df2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
 8002de4:	e005      	b.n	8002df2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e10:	e01f      	b.n	8002e52 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681d      	ldr	r5, [r3, #0]
 8002e38:	466c      	mov	r4, sp
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f001 f8a7 	bl	8003fa0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 f97b 	bl	8004156 <SDMMC_CmdBlockLength>
 8002e60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bdb0      	pop	{r4, r5, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	004005ff 	.word	0x004005ff

08002e9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa7e 	bl	80033b0 <SD_SendStatus>
 8002eb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	0a5b      	lsrs	r3, r3, #9
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002ed2:	693b      	ldr	r3, [r7, #16]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	2b82      	cmp	r3, #130	; 0x82
 8002f1a:	d111      	bne.n	8002f40 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 f9c3 	bl	80042ac <SDMMC_CmdStopTransfer>
 8002f26:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff fd3a 	bl	80029b4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0208 	bic.w	r2, r2, #8
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f001 fe2b 	bl	8004bc4 <HAL_SD_RxCpltCallback>
#endif
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe fa36 	bl	80013f8 <HAL_DMA_GetError>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d03e      	beq.n	8003010 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <SD_DMAError+0x36>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d12d      	bne.n	800300a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a19      	ldr	r2, [pc, #100]	; (8003018 <SD_DMAError+0xa0>)
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002fd2:	6978      	ldr	r0, [r7, #20]
 8002fd4:	f7ff ff62 	bl	8002e9c <HAL_SD_GetCardState>
 8002fd8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d002      	beq.n	8002fe6 <SD_DMAError+0x6e>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10a      	bne.n	8002ffc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 f95e 	bl	80042ac <SDMMC_CmdStopTransfer>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7ff fcd2 	bl	80029b4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003010:	bf00      	nop
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	004005ff 	.word	0x004005ff

0800301c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003032:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff ff31 	bl	8002e9c <HAL_SD_GetCardState>
 800303a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b06      	cmp	r3, #6
 800304e:	d002      	beq.n	8003056 <SD_DMATxAbort+0x3a>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b05      	cmp	r3, #5
 8003054:	d10a      	bne.n	800306c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f001 f926 	bl	80042ac <SDMMC_CmdStopTransfer>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	431a      	orrs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f001 fd91 	bl	8004b9c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800307a:	e002      	b.n	8003082 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff fc99 	bl	80029b4 <HAL_SD_ErrorCallback>
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f240 523a 	movw	r2, #1338	; 0x53a
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fefa 	bl	8002e9c <HAL_SD_GetCardState>
 80030a8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d002      	beq.n	80030c4 <SD_DMARxAbort+0x3a>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10a      	bne.n	80030da <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 f8ef 	bl	80042ac <SDMMC_CmdStopTransfer>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f001 fd5a 	bl	8004b9c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80030e8:	e002      	b.n	80030f0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff fc62 	bl	80029b4 <HAL_SD_ErrorCallback>
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b094      	sub	sp, #80	; 0x50
 80030fc:	af04      	add	r7, sp, #16
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003100:	2301      	movs	r3, #1
 8003102:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 ffa0 	bl	800404e <SDIO_GetPowerState>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003114:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003118:	e0b8      	b.n	800328c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	2b03      	cmp	r3, #3
 8003120:	d02f      	beq.n	8003182 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f001 f9ca 	bl	80044c0 <SDMMC_CmdSendCID>
 800312c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <SD_InitCard+0x40>
    {
      return errorstate;
 8003134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003136:	e0a9      	b.n	800328c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 ffca 	bl	80040d8 <SDIO_GetResponse>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2104      	movs	r1, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f000 ffc1 	bl	80040d8 <SDIO_GetResponse>
 8003156:	4602      	mov	r2, r0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2108      	movs	r1, #8
 8003162:	4618      	mov	r0, r3
 8003164:	f000 ffb8 	bl	80040d8 <SDIO_GetResponse>
 8003168:	4602      	mov	r2, r0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	210c      	movs	r1, #12
 8003174:	4618      	mov	r0, r3
 8003176:	f000 ffaf 	bl	80040d8 <SDIO_GetResponse>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	2b03      	cmp	r3, #3
 8003188:	d00d      	beq.n	80031a6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f107 020e 	add.w	r2, r7, #14
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f001 f9d0 	bl	800453a <SDMMC_CmdSetRelAdd>
 800319a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <SD_InitCard+0xae>
    {
      return errorstate;
 80031a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a4:	e072      	b.n	800328c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d036      	beq.n	800321c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80031ae:	89fb      	ldrh	r3, [r7, #14]
 80031b0:	461a      	mov	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f001 f99a 	bl	80044fc <SDMMC_CmdSendCSD>
 80031c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80031d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d2:	e05b      	b.n	800328c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 ff7c 	bl	80040d8 <SDIO_GetResponse>
 80031e0:	4602      	mov	r2, r0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2104      	movs	r1, #4
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 ff73 	bl	80040d8 <SDIO_GetResponse>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2108      	movs	r1, #8
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 ff6a 	bl	80040d8 <SDIO_GetResponse>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	210c      	movs	r1, #12
 8003210:	4618      	mov	r0, r3
 8003212:	f000 ff61 	bl	80040d8 <SDIO_GetResponse>
 8003216:	4602      	mov	r2, r0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2104      	movs	r1, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f000 ff58 	bl	80040d8 <SDIO_GetResponse>
 8003228:	4603      	mov	r3, r0
 800322a:	0d1a      	lsrs	r2, r3, #20
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fbc6 	bl	80029c8 <HAL_SD_GetCardCSD>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003242:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003246:	e021      	b.n	800328c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6819      	ldr	r1, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	2200      	movs	r2, #0
 8003254:	461c      	mov	r4, r3
 8003256:	4615      	mov	r5, r2
 8003258:	4622      	mov	r2, r4
 800325a:	462b      	mov	r3, r5
 800325c:	4608      	mov	r0, r1
 800325e:	f001 f847 	bl	80042f0 <SDMMC_CmdSelDesel>
 8003262:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <SD_InitCard+0x176>
  {
    return errorstate;
 800326a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326c:	e00e      	b.n	800328c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681d      	ldr	r5, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	466c      	mov	r4, sp
 8003276:	f103 0210 	add.w	r2, r3, #16
 800327a:	ca07      	ldmia	r2, {r0, r1, r2}
 800327c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003280:	3304      	adds	r3, #4
 8003282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003284:	4628      	mov	r0, r5
 8003286:	f000 fe8b 	bl	8003fa0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3740      	adds	r7, #64	; 0x40
 8003290:	46bd      	mov	sp, r7
 8003292:	bdb0      	pop	{r4, r5, r7, pc}

08003294 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f842 	bl	8004336 <SDMMC_CmdGoIdleState>
 80032b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <SD_PowerON+0x2a>
  {
    return errorstate;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	e072      	b.n	80033a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 f855 	bl	8004372 <SDMMC_CmdOperCond>
 80032c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 f82b 	bl	8004336 <SDMMC_CmdGoIdleState>
 80032e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	e05b      	b.n	80033a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d137      	bne.n	800336a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f001 f855 	bl	80043b0 <SDMMC_CmdAppCommand>
 8003306:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02d      	beq.n	800336a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800330e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003312:	e047      	b.n	80033a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f001 f848 	bl	80043b0 <SDMMC_CmdAppCommand>
 8003320:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <SD_PowerON+0x98>
    {
      return errorstate;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	e03b      	b.n	80033a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	491e      	ldr	r1, [pc, #120]	; (80033ac <SD_PowerON+0x118>)
 8003332:	4618      	mov	r0, r3
 8003334:	f001 f85e 	bl	80043f4 <SDMMC_CmdAppOperCommand>
 8003338:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003340:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003344:	e02e      	b.n	80033a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fec3 	bl	80040d8 <SDIO_GetResponse>
 8003352:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	0fdb      	lsrs	r3, r3, #31
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <SD_PowerON+0xcc>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <SD_PowerON+0xce>
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]

    count++;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3301      	adds	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003370:	4293      	cmp	r3, r2
 8003372:	d802      	bhi.n	800337a <SD_PowerON+0xe6>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0cc      	beq.n	8003314 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003380:	4293      	cmp	r3, r2
 8003382:	d902      	bls.n	800338a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003388:	e00c      	b.n	80033a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
 800339a:	e002      	b.n	80033a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	c1100000 	.word	0xc1100000

080033b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80033c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033c4:	e018      	b.n	80033f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f001 f8d2 	bl	800457c <SDMMC_CmdSendStatus>
 80033d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	e009      	b.n	80033f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fe74 	bl	80040d8 <SDIO_GetResponse>
 80033f0:	4602      	mov	r2, r0
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fe5e 	bl	80040d8 <SDIO_GetResponse>
 800341c:	4603      	mov	r3, r0
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003426:	d102      	bne.n	800342e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003428:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800342c:	e02f      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f879 	bl	800352c <SD_FindSCR>
 800343a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	e023      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01c      	beq.n	800348a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f000 ffa7 	bl	80043b0 <SDMMC_CmdAppCommand>
 8003462:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	e00f      	b.n	800348e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 ffe0 	bl	800443a <SDMMC_CmdBusWidth>
 800347a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	e003      	b.n	800348e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	e001      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800348a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fe13 	bl	80040d8 <SDIO_GetResponse>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034bc:	d102      	bne.n	80034c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80034be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034c2:	e02f      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f82e 	bl	800352c <SD_FindSCR>
 80034d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	e023      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01c      	beq.n	8003520 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f000 ff5c 	bl	80043b0 <SDMMC_CmdAppCommand>
 80034f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	e00f      	b.n	8003524 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 ff95 	bl	800443a <SDMMC_CmdBusWidth>
 8003510:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	e003      	b.n	8003524 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800351c:	2300      	movs	r3, #0
 800351e:	e001      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003520:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b08f      	sub	sp, #60	; 0x3c
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003536:	f7fd fb6b 	bl	8000c10 <HAL_GetTick>
 800353a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2108      	movs	r1, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fdff 	bl	8004156 <SDMMC_CmdBlockLength>
 8003558:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	e0b2      	b.n	80036ca <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 ff1d 	bl	80043b0 <SDMMC_CmdAppCommand>
 8003576:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <SD_FindSCR+0x56>
  {
    return errorstate;
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	e0a3      	b.n	80036ca <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003588:	2308      	movs	r3, #8
 800358a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800358c:	2330      	movs	r3, #48	; 0x30
 800358e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003590:	2302      	movs	r3, #2
 8003592:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003594:	2300      	movs	r3, #0
 8003596:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003598:	2301      	movs	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f107 0210 	add.w	r2, r7, #16
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fda9 	bl	80040fe <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 ff64 	bl	800447e <SDMMC_CmdSendSCR>
 80035b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02a      	beq.n	8003614 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	e083      	b.n	80036ca <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00f      	beq.n	80035f0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f107 0208 	add.w	r2, r7, #8
 80035dc:	18d4      	adds	r4, r2, r3
 80035de:	4608      	mov	r0, r1
 80035e0:	f000 fd09 	bl	8003ff6 <SDIO_ReadFIFO>
 80035e4:	4603      	mov	r3, r0
 80035e6:	6023      	str	r3, [r4, #0]
      index++;
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	3301      	adds	r3, #1
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
 80035ee:	e006      	b.n	80035fe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d012      	beq.n	8003624 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80035fe:	f7fd fb07 	bl	8000c10 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d102      	bne.n	8003614 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800360e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003612:	e05a      	b.n	80036ca <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0cf      	beq.n	80035c2 <SD_FindSCR+0x96>
 8003622:	e000      	b.n	8003626 <SD_FindSCR+0xfa>
      break;
 8003624:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2208      	movs	r2, #8
 800363a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800363c:	2308      	movs	r3, #8
 800363e:	e044      	b.n	80036ca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2202      	movs	r2, #2
 8003654:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003656:	2302      	movs	r3, #2
 8003658:	e037      	b.n	80036ca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2220      	movs	r2, #32
 800366e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003670:	2320      	movs	r3, #32
 8003672:	e02a      	b.n	80036ca <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f240 523a 	movw	r2, #1338	; 0x53a
 800367c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	061a      	lsls	r2, r3, #24
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800368a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003694:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	0e1b      	lsrs	r3, r3, #24
 800369a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	601a      	str	r2, [r3, #0]
    scr++;
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	3304      	adds	r3, #4
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	061a      	lsls	r2, r3, #24
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0e1b      	lsrs	r3, r3, #24
 80036c2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	373c      	adds	r7, #60	; 0x3c
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd90      	pop	{r4, r7, pc}

080036d2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03f      	beq.n	800376c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e033      	b.n	800375a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fc7d 	bl	8003ff6 <SDIO_ReadFIFO>
 80036fc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3b01      	subs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	3b01      	subs	r3, #1
 8003726:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3b01      	subs	r3, #1
 800373c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	0e1b      	lsrs	r3, r3, #24
 8003742:	b2da      	uxtb	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3301      	adds	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	3b01      	subs	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3301      	adds	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b07      	cmp	r3, #7
 800375e:	d9c8      	bls.n	80036f2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800376c:	bf00      	nop
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d043      	beq.n	8003816 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e037      	b.n	8003804 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]
      tmp++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3301      	adds	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	021a      	lsls	r2, r3, #8
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3301      	adds	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	041a      	lsls	r2, r3, #16
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3301      	adds	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	061a      	lsls	r2, r3, #24
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3301      	adds	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f107 0208 	add.w	r2, r7, #8
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fc09 	bl	8004010 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b07      	cmp	r3, #7
 8003808:	d9c4      	bls.n	8003794 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e03f      	b.n	80038b0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd f90b 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2224      	movs	r2, #36	; 0x24
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003860:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f928 	bl	8003ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003876:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003886:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003896:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d17c      	bne.n	80039d2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_Transmit+0x2c>
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e075      	b.n	80039d4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit+0x3e>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e06e      	b.n	80039d4 <HAL_UART_Transmit+0x11c>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2221      	movs	r2, #33	; 0x21
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390c:	f7fd f980 	bl	8000c10 <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003926:	d108      	bne.n	800393a <HAL_UART_Transmit+0x82>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d104      	bne.n	800393a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e003      	b.n	8003942 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800394a:	e02a      	b.n	80039a2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2200      	movs	r2, #0
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f840 	bl	80039dc <UART_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e036      	b.n	80039d4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	3302      	adds	r3, #2
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	e007      	b.n	8003994 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3301      	adds	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1cf      	bne.n	800394c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2200      	movs	r2, #0
 80039b4:	2140      	movs	r1, #64	; 0x40
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f810 	bl	80039dc <UART_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e006      	b.n	80039d4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b090      	sub	sp, #64	; 0x40
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ec:	e050      	b.n	8003a90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d04c      	beq.n	8003a90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x30>
 80039fc:	f7fd f908 	bl	8000c10 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d241      	bcs.n	8003a90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a2c:	637a      	str	r2, [r7, #52]	; 0x34
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3314      	adds	r3, #20
 8003a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3314      	adds	r3, #20
 8003a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a60:	623a      	str	r2, [r7, #32]
 8003a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	69f9      	ldr	r1, [r7, #28]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e5      	bne.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e00f      	b.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d09f      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3740      	adds	r7, #64	; 0x40
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b0c0      	sub	sp, #256	; 0x100
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	68d9      	ldr	r1, [r3, #12]
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	ea40 0301 	orr.w	r3, r0, r1
 8003ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b10:	f021 010c 	bic.w	r1, r1, #12
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b32:	6999      	ldr	r1, [r3, #24]
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	ea40 0301 	orr.w	r3, r0, r1
 8003b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b8f      	ldr	r3, [pc, #572]	; (8003d84 <UART_SetConfig+0x2cc>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d005      	beq.n	8003b58 <UART_SetConfig+0xa0>
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b8d      	ldr	r3, [pc, #564]	; (8003d88 <UART_SetConfig+0x2d0>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d104      	bne.n	8003b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b58:	f7fe fb1a 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8003b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b60:	e003      	b.n	8003b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b62:	f7fe fb01 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003b66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b74:	f040 810c 	bne.w	8003d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	1891      	adds	r1, r2, r2
 8003b90:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b92:	415b      	adcs	r3, r3
 8003b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	eb12 0801 	adds.w	r8, r2, r1
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	eb43 0901 	adc.w	r9, r3, r1
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bba:	4690      	mov	r8, r2
 8003bbc:	4699      	mov	r9, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	eb18 0303 	adds.w	r3, r8, r3
 8003bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bc8:	462b      	mov	r3, r5
 8003bca:	eb49 0303 	adc.w	r3, r9, r3
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003be6:	460b      	mov	r3, r1
 8003be8:	18db      	adds	r3, r3, r3
 8003bea:	653b      	str	r3, [r7, #80]	; 0x50
 8003bec:	4613      	mov	r3, r2
 8003bee:	eb42 0303 	adc.w	r3, r2, r3
 8003bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bfc:	f7fc fae4 	bl	80001c8 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	011c      	lsls	r4, r3, #4
 8003c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	1891      	adds	r1, r2, r2
 8003c26:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c28:	415b      	adcs	r3, r3
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c30:	4641      	mov	r1, r8
 8003c32:	eb12 0a01 	adds.w	sl, r2, r1
 8003c36:	4649      	mov	r1, r9
 8003c38:	eb43 0b01 	adc.w	fp, r3, r1
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c50:	4692      	mov	sl, r2
 8003c52:	469b      	mov	fp, r3
 8003c54:	4643      	mov	r3, r8
 8003c56:	eb1a 0303 	adds.w	r3, sl, r3
 8003c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	eb4b 0303 	adc.w	r3, fp, r3
 8003c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	18db      	adds	r3, r3, r3
 8003c80:	643b      	str	r3, [r7, #64]	; 0x40
 8003c82:	4613      	mov	r3, r2
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c92:	f7fc fa99 	bl	80001c8 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2264      	movs	r2, #100	; 0x64
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	1acb      	subs	r3, r1, r3
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cb2:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cc0:	441c      	add	r4, r3
 8003cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	1891      	adds	r1, r2, r2
 8003cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	1851      	adds	r1, r2, r1
 8003ce8:	6339      	str	r1, [r7, #48]	; 0x30
 8003cea:	4649      	mov	r1, r9
 8003cec:	414b      	adcs	r3, r1
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	00cb      	lsls	r3, r1, #3
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d06:	4651      	mov	r1, sl
 8003d08:	00ca      	lsls	r2, r1, #3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4642      	mov	r2, r8
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d18:	464b      	mov	r3, r9
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	eb42 0303 	adc.w	r3, r2, r3
 8003d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d38:	460b      	mov	r3, r1
 8003d3a:	18db      	adds	r3, r3, r3
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3e:	4613      	mov	r3, r2
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d4e:	f7fc fa3b 	bl	80001c8 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003d58:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	2164      	movs	r1, #100	; 0x64
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	3332      	adds	r3, #50	; 0x32
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	f003 0207 	and.w	r2, r3, #7
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4422      	add	r2, r4
 8003d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d80:	e105      	b.n	8003f8e <UART_SetConfig+0x4d6>
 8003d82:	bf00      	nop
 8003d84:	40011000 	.word	0x40011000
 8003d88:	40011400 	.word	0x40011400
 8003d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003da2:	4642      	mov	r2, r8
 8003da4:	464b      	mov	r3, r9
 8003da6:	1891      	adds	r1, r2, r2
 8003da8:	6239      	str	r1, [r7, #32]
 8003daa:	415b      	adcs	r3, r3
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003db2:	4641      	mov	r1, r8
 8003db4:	1854      	adds	r4, r2, r1
 8003db6:	4649      	mov	r1, r9
 8003db8:	eb43 0501 	adc.w	r5, r3, r1
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	00eb      	lsls	r3, r5, #3
 8003dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dca:	00e2      	lsls	r2, r4, #3
 8003dcc:	4614      	mov	r4, r2
 8003dce:	461d      	mov	r5, r3
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	18e3      	adds	r3, r4, r3
 8003dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dd8:	464b      	mov	r3, r9
 8003dda:	eb45 0303 	adc.w	r3, r5, r3
 8003dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dfe:	4629      	mov	r1, r5
 8003e00:	008b      	lsls	r3, r1, #2
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e08:	4621      	mov	r1, r4
 8003e0a:	008a      	lsls	r2, r1, #2
 8003e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e10:	f7fc f9da 	bl	80001c8 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4b60      	ldr	r3, [pc, #384]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	011c      	lsls	r4, r3, #4
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	1891      	adds	r1, r2, r2
 8003e3a:	61b9      	str	r1, [r7, #24]
 8003e3c:	415b      	adcs	r3, r3
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e44:	4641      	mov	r1, r8
 8003e46:	1851      	adds	r1, r2, r1
 8003e48:	6139      	str	r1, [r7, #16]
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	414b      	adcs	r3, r1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	00cb      	lsls	r3, r1, #3
 8003e60:	4651      	mov	r1, sl
 8003e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e66:	4651      	mov	r1, sl
 8003e68:	00ca      	lsls	r2, r1, #3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4642      	mov	r2, r8
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e78:	464b      	mov	r3, r9
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	eb42 0303 	adc.w	r3, r2, r3
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	008b      	lsls	r3, r1, #2
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	008a      	lsls	r2, r1, #2
 8003eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eae:	f7fc f98b 	bl	80001c8 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	2164      	movs	r1, #100	; 0x64
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	3332      	adds	r3, #50	; 0x32
 8003eca:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed6:	441c      	add	r4, r3
 8003ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003edc:	2200      	movs	r2, #0
 8003ede:	673b      	str	r3, [r7, #112]	; 0x70
 8003ee0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ee2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ee6:	4642      	mov	r2, r8
 8003ee8:	464b      	mov	r3, r9
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	1851      	adds	r1, r2, r1
 8003efa:	6039      	str	r1, [r7, #0]
 8003efc:	4649      	mov	r1, r9
 8003efe:	414b      	adcs	r3, r1
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f0e:	4659      	mov	r1, fp
 8003f10:	00cb      	lsls	r3, r1, #3
 8003f12:	4651      	mov	r1, sl
 8003f14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f18:	4651      	mov	r1, sl
 8003f1a:	00ca      	lsls	r2, r1, #3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4603      	mov	r3, r0
 8003f22:	4642      	mov	r2, r8
 8003f24:	189b      	adds	r3, r3, r2
 8003f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f28:	464b      	mov	r3, r9
 8003f2a:	460a      	mov	r2, r1
 8003f2c:	eb42 0303 	adc.w	r3, r2, r3
 8003f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f3c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	008b      	lsls	r3, r1, #2
 8003f4e:	4641      	mov	r1, r8
 8003f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f54:	4641      	mov	r1, r8
 8003f56:	008a      	lsls	r2, r1, #2
 8003f58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f5c:	f7fc f934 	bl	80001c8 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003f66:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2164      	movs	r1, #100	; 0x64
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	3332      	adds	r3, #50	; 0x32
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4422      	add	r2, r4
 8003f8c:	609a      	str	r2, [r3, #8]
}
 8003f8e:	bf00      	nop
 8003f90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9a:	bf00      	nop
 8003f9c:	51eb851f 	.word	0x51eb851f

08003fa0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	f107 001c 	add.w	r0, r7, #28
 8003fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003fb6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003fba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003fbe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003fc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003fc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003fca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	b004      	add	sp, #16
 8003ff4:	4770      	bx	lr

08003ff6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2203      	movs	r2, #3
 800403e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0303 	and.w	r3, r3, #3
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004088:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800408e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004094:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80040a4:	f023 030f 	bic.w	r3, r3, #15
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	b2db      	uxtb	r3, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3314      	adds	r3, #20
 80040e6:	461a      	mov	r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4413      	add	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
}  
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004124:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800412a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004130:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004148:	2300      	movs	r3, #0

}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b088      	sub	sp, #32
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004164:	2310      	movs	r3, #16
 8004166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004168:	2340      	movs	r3, #64	; 0x40
 800416a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff74 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	2110      	movs	r1, #16
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fa19 	bl	80045c0 <SDMMC_GetCmdResp1>
 800418e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004190:	69fb      	ldr	r3, [r7, #28]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b088      	sub	sp, #32
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80041a8:	2311      	movs	r3, #17
 80041aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041ac:	2340      	movs	r3, #64	; 0x40
 80041ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041ba:	f107 0308 	add.w	r3, r7, #8
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff52 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	2111      	movs	r1, #17
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f9f7 	bl	80045c0 <SDMMC_GetCmdResp1>
 80041d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041d4:	69fb      	ldr	r3, [r7, #28]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b088      	sub	sp, #32
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80041ec:	2312      	movs	r3, #18
 80041ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041fe:	f107 0308 	add.w	r3, r7, #8
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff30 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	2112      	movs	r1, #18
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f9d5 	bl	80045c0 <SDMMC_GetCmdResp1>
 8004216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004218:	69fb      	ldr	r3, [r7, #28]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b088      	sub	sp, #32
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004230:	2318      	movs	r3, #24
 8004232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004234:	2340      	movs	r3, #64	; 0x40
 8004236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800423c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004240:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004242:	f107 0308 	add.w	r3, r7, #8
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff0e 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	2118      	movs	r1, #24
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f9b3 	bl	80045c0 <SDMMC_GetCmdResp1>
 800425a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800425c:	69fb      	ldr	r3, [r7, #28]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b088      	sub	sp, #32
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004274:	2319      	movs	r3, #25
 8004276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004278:	2340      	movs	r3, #64	; 0x40
 800427a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004284:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004286:	f107 0308 	add.w	r3, r7, #8
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff feec 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	2119      	movs	r1, #25
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f991 	bl	80045c0 <SDMMC_GetCmdResp1>
 800429e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042a0:	69fb      	ldr	r3, [r7, #28]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80042b8:	230c      	movs	r3, #12
 80042ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042bc:	2340      	movs	r3, #64	; 0x40
 80042be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff feca 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <SDMMC_CmdStopTransfer+0x40>)
 80042d8:	210c      	movs	r1, #12
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f970 	bl	80045c0 <SDMMC_GetCmdResp1>
 80042e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042e2:	69fb      	ldr	r3, [r7, #28]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	05f5e100 	.word	0x05f5e100

080042f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004300:	2307      	movs	r3, #7
 8004302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004304:	2340      	movs	r3, #64	; 0x40
 8004306:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800430c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004310:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004312:	f107 0310 	add.w	r3, r7, #16
 8004316:	4619      	mov	r1, r3
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff fea6 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800431e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004322:	2107      	movs	r1, #7
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f94b 	bl	80045c0 <SDMMC_GetCmdResp1>
 800432a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800432e:	4618      	mov	r0, r3
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b088      	sub	sp, #32
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800434e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004354:	f107 0308 	add.w	r3, r7, #8
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fe85 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fb65 	bl	8004a30 <SDMMC_GetCmdError>
 8004366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004368:	69fb      	ldr	r3, [r7, #28]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b088      	sub	sp, #32
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800437a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800437e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004380:	2308      	movs	r3, #8
 8004382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800438c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004392:	f107 0308 	add.w	r3, r7, #8
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fe66 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 faf8 	bl	8004994 <SDMMC_GetCmdResp7>
 80043a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043a6:	69fb      	ldr	r3, [r7, #28]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80043be:	2337      	movs	r3, #55	; 0x37
 80043c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043c2:	2340      	movs	r3, #64	; 0x40
 80043c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043d0:	f107 0308 	add.w	r3, r7, #8
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fe47 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	2137      	movs	r1, #55	; 0x37
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8ec 	bl	80045c0 <SDMMC_GetCmdResp1>
 80043e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043ea:	69fb      	ldr	r3, [r7, #28]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800440a:	2329      	movs	r3, #41	; 0x29
 800440c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800440e:	2340      	movs	r3, #64	; 0x40
 8004410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800441a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800441c:	f107 0308 	add.w	r3, r7, #8
 8004420:	4619      	mov	r1, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff fe21 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f9ff 	bl	800482c <SDMMC_GetCmdResp3>
 800442e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004430:	69fb      	ldr	r3, [r7, #28]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b088      	sub	sp, #32
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004448:	2306      	movs	r3, #6
 800444a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800444c:	2340      	movs	r3, #64	; 0x40
 800444e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004458:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fe02 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	2106      	movs	r1, #6
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8a7 	bl	80045c0 <SDMMC_GetCmdResp1>
 8004472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004474:	69fb      	ldr	r3, [r7, #28]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b088      	sub	sp, #32
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800448a:	2333      	movs	r3, #51	; 0x33
 800448c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800448e:	2340      	movs	r3, #64	; 0x40
 8004490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800449a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff fde1 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80044a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ac:	2133      	movs	r1, #51	; 0x33
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f886 	bl	80045c0 <SDMMC_GetCmdResp1>
 80044b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044b6:	69fb      	ldr	r3, [r7, #28]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80044cc:	2302      	movs	r3, #2
 80044ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80044d0:	23c0      	movs	r3, #192	; 0xc0
 80044d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044de:	f107 0308 	add.w	r3, r7, #8
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fdc0 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f956 	bl	800479c <SDMMC_GetCmdResp2>
 80044f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044f2:	69fb      	ldr	r3, [r7, #28]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800450a:	2309      	movs	r3, #9
 800450c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800450e:	23c0      	movs	r3, #192	; 0xc0
 8004510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800451a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800451c:	f107 0308 	add.w	r3, r7, #8
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fda1 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f937 	bl	800479c <SDMMC_GetCmdResp2>
 800452e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004530:	69fb      	ldr	r3, [r7, #28]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b088      	sub	sp, #32
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004548:	2303      	movs	r3, #3
 800454a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800454c:	2340      	movs	r3, #64	; 0x40
 800454e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004558:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fd82 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	2103      	movs	r1, #3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f99c 	bl	80048a8 <SDMMC_GetCmdResp6>
 8004570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004572:	69fb      	ldr	r3, [r7, #28]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800458a:	230d      	movs	r3, #13
 800458c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800458e:	2340      	movs	r3, #64	; 0x40
 8004590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800459a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800459c:	f107 0308 	add.w	r3, r7, #8
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fd61 	bl	800406a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	210d      	movs	r1, #13
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f806 	bl	80045c0 <SDMMC_GetCmdResp1>
 80045b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045b6:	69fb      	ldr	r3, [r7, #28]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	460b      	mov	r3, r1
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80045ce:	4b70      	ldr	r3, [pc, #448]	; (8004790 <SDMMC_GetCmdResp1+0x1d0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a70      	ldr	r2, [pc, #448]	; (8004794 <SDMMC_GetCmdResp1+0x1d4>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	0a5a      	lsrs	r2, r3, #9
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	1e5a      	subs	r2, r3, #1
 80045e6:	61fa      	str	r2, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045f0:	e0c9      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0ef      	beq.n	80045e2 <SDMMC_GetCmdResp1+0x22>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ea      	bne.n	80045e2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2204      	movs	r2, #4
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800461e:	2304      	movs	r3, #4
 8004620:	e0b1      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d004      	beq.n	8004638 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004634:	2301      	movs	r3, #1
 8004636:	e0a6      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	22c5      	movs	r2, #197	; 0xc5
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fd3d 	bl	80040be <SDIO_GetCommandResponse>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	4293      	cmp	r3, r2
 800464c:	d001      	beq.n	8004652 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800464e:	2301      	movs	r3, #1
 8004650:	e099      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004652:	2100      	movs	r1, #0
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fd3f 	bl	80040d8 <SDIO_GetResponse>
 800465a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4b4e      	ldr	r3, [pc, #312]	; (8004798 <SDMMC_GetCmdResp1+0x1d8>)
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004666:	2300      	movs	r3, #0
 8004668:	e08d      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da02      	bge.n	8004676 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004674:	e087      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004680:	2340      	movs	r3, #64	; 0x40
 8004682:	e080      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	e079      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800469c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046a0:	e071      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80046ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046b0:	e069      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80046bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c0:	e061      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80046cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046d0:	e059      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80046dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e0:	e051      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80046ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046f0:	e049      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80046fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004700:	e041      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800470c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004710:	e039      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800471c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004720:	e031      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800472c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004730:	e029      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800473c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004740:	e021      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800474c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004750:	e019      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800475c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004760:	e011      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800476c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004770:	e009      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800477c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004780:	e001      	b.n	8004786 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004786:	4618      	mov	r0, r3
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000000 	.word	0x20000000
 8004794:	10624dd3 	.word	0x10624dd3
 8004798:	fdffe008 	.word	0xfdffe008

0800479c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047a4:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <SDMMC_GetCmdResp2+0x88>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <SDMMC_GetCmdResp2+0x8c>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0a5b      	lsrs	r3, r3, #9
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	60fa      	str	r2, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047c8:	e026      	b.n	8004818 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0ef      	beq.n	80047ba <SDMMC_GetCmdResp2+0x1e>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ea      	bne.n	80047ba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2204      	movs	r2, #4
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047f6:	2304      	movs	r3, #4
 80047f8:	e00e      	b.n	8004818 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800480c:	2301      	movs	r3, #1
 800480e:	e003      	b.n	8004818 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	22c5      	movs	r2, #197	; 0xc5
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000000 	.word	0x20000000
 8004828:	10624dd3 	.word	0x10624dd3

0800482c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <SDMMC_GetCmdResp3+0x74>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <SDMMC_GetCmdResp3+0x78>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	0a5b      	lsrs	r3, r3, #9
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1e5a      	subs	r2, r3, #1
 800484e:	60fa      	str	r2, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004858:	e01b      	b.n	8004892 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ef      	beq.n	800484a <SDMMC_GetCmdResp3+0x1e>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ea      	bne.n	800484a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2204      	movs	r2, #4
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004886:	2304      	movs	r3, #4
 8004888:	e003      	b.n	8004892 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	22c5      	movs	r2, #197	; 0xc5
 800488e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000000 	.word	0x20000000
 80048a4:	10624dd3 	.word	0x10624dd3

080048a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	460b      	mov	r3, r1
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80048b6:	4b35      	ldr	r3, [pc, #212]	; (800498c <SDMMC_GetCmdResp6+0xe4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a35      	ldr	r2, [pc, #212]	; (8004990 <SDMMC_GetCmdResp6+0xe8>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	0a5b      	lsrs	r3, r3, #9
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	61fa      	str	r2, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048da:	e052      	b.n	8004982 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ef      	beq.n	80048cc <SDMMC_GetCmdResp6+0x24>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ea      	bne.n	80048cc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2204      	movs	r2, #4
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004908:	2304      	movs	r3, #4
 800490a:	e03a      	b.n	8004982 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800491e:	2301      	movs	r3, #1
 8004920:	e02f      	b.n	8004982 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff fbcb 	bl	80040be <SDIO_GetCommandResponse>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	7afb      	ldrb	r3, [r7, #11]
 800492e:	4293      	cmp	r3, r2
 8004930:	d001      	beq.n	8004936 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004932:	2301      	movs	r3, #1
 8004934:	e025      	b.n	8004982 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	22c5      	movs	r2, #197	; 0xc5
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800493c:	2100      	movs	r1, #0
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fbca 	bl	80040d8 <SDIO_GetResponse>
 8004944:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	0c1b      	lsrs	r3, r3, #16
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800495a:	2300      	movs	r3, #0
 800495c:	e011      	b.n	8004982 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800496c:	e009      	b.n	8004982 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497c:	e001      	b.n	8004982 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800497e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000000 	.word	0x20000000
 8004990:	10624dd3 	.word	0x10624dd3

08004994 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800499c:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <SDMMC_GetCmdResp7+0x94>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <SDMMC_GetCmdResp7+0x98>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	0a5b      	lsrs	r3, r3, #9
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1e5a      	subs	r2, r3, #1
 80049b6:	60fa      	str	r2, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049c0:	e02c      	b.n	8004a1c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ef      	beq.n	80049b2 <SDMMC_GetCmdResp7+0x1e>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ea      	bne.n	80049b2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2204      	movs	r2, #4
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049ee:	2304      	movs	r3, #4
 80049f0:	e014      	b.n	8004a1c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e009      	b.n	8004a1c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2240      	movs	r2, #64	; 0x40
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004a1a:	2300      	movs	r3, #0
  
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000000 	.word	0x20000000
 8004a2c:	10624dd3 	.word	0x10624dd3

08004a30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <SDMMC_GetCmdError+0x50>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <SDMMC_GetCmdError+0x54>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0a5b      	lsrs	r3, r3, #9
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1e5a      	subs	r2, r3, #1
 8004a52:	60fa      	str	r2, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a5c:	e009      	b.n	8004a72 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f1      	beq.n	8004a4e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	22c5      	movs	r2, #197	; 0xc5
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000000 	.word	0x20000000
 8004a84:	10624dd3 	.word	0x10624dd3

08004a88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004a8c:	4904      	ldr	r1, [pc, #16]	; (8004aa0 <MX_FATFS_Init+0x18>)
 8004a8e:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <MX_FATFS_Init+0x1c>)
 8004a90:	f000 fa84 	bl	8004f9c <FATFS_LinkDriver>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <MX_FATFS_Init+0x20>)
 8004a9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	200001b8 	.word	0x200001b8
 8004aa4:	08005074 	.word	0x08005074
 8004aa8:	200001b4 	.word	0x200001b4

08004aac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004ab6:	f000 f896 	bl	8004be6 <BSP_SD_IsDetected>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d001      	beq.n	8004ac4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e012      	b.n	8004aea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004ac4:	480b      	ldr	r0, [pc, #44]	; (8004af4 <BSP_SD_Init+0x48>)
 8004ac6:	f7fd fb77 	bl	80021b8 <HAL_SD_Init>
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004ad4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ad8:	4806      	ldr	r0, [pc, #24]	; (8004af4 <BSP_SD_Init+0x48>)
 8004ada:	f7fe f945 	bl	8002d68 <HAL_SD_ConfigWideBusOperation>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000028 	.word	0x20000028

08004af8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	4806      	ldr	r0, [pc, #24]	; (8004b28 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004b10:	f7fd fc02 	bl	8002318 <HAL_SD_ReadBlocks_DMA>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000028 	.word	0x20000028

08004b2c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	4806      	ldr	r0, [pc, #24]	; (8004b5c <BSP_SD_WriteBlocks_DMA+0x30>)
 8004b44:	f7fd fcca 	bl	80024dc <HAL_SD_WriteBlocks_DMA>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000028 	.word	0x20000028

08004b60 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004b64:	4805      	ldr	r0, [pc, #20]	; (8004b7c <BSP_SD_GetCardState+0x1c>)
 8004b66:	f7fe f999 	bl	8002e9c <HAL_SD_GetCardState>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000028 	.word	0x20000028

08004b80 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4803      	ldr	r0, [pc, #12]	; (8004b98 <BSP_SD_GetCardInfo+0x18>)
 8004b8c:	f7fe f8c0 	bl	8002d10 <HAL_SD_GetCardInfo>
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000028 	.word	0x20000028

08004b9c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004ba4:	f000 f818 	bl	8004bd8 <BSP_SD_AbortCallback>
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004bb8:	f000 f98c 	bl	8004ed4 <BSP_SD_WriteCpltCallback>
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004bcc:	f000 f98e 	bl	8004eec <BSP_SD_ReadCpltCallback>
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0

}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004bec:	2301      	movs	r3, #1
 8004bee:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	b2db      	uxtb	r3, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004c08:	f7fc f802 	bl	8000c10 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004c0e:	e006      	b.n	8004c1e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004c10:	f7ff ffa6 	bl	8004b60 <BSP_SD_GetCardState>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e009      	b.n	8004c32 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004c1e:	f7fb fff7 	bl	8000c10 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d8f0      	bhi.n	8004c10 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <SD_CheckStatus+0x38>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004c4c:	f7ff ff88 	bl	8004b60 <BSP_SD_GetCardState>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <SD_CheckStatus+0x38>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <SD_CheckStatus+0x38>)
 8004c64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004c66:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <SD_CheckStatus+0x38>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b2db      	uxtb	r3, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000009 	.word	0x20000009

08004c78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004c82:	f7ff ff13 	bl	8004aac <BSP_SD_Init>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff ffd4 	bl	8004c3c <SD_CheckStatus>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461a      	mov	r2, r3
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <SD_initialize+0x34>)
 8004c9a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <SD_initialize+0x34>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2db      	uxtb	r3, r3
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000009 	.word	0x20000009

08004cb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff ffbd 	bl	8004c3c <SD_CheckStatus>
 8004cc2:	4603      	mov	r3, r0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004ce0:	f247 5030 	movw	r0, #30000	; 0x7530
 8004ce4:	f7ff ff8c 	bl	8004c00 <SD_CheckStatusWithTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da01      	bge.n	8004cf2 <SD_read+0x26>
  {
    return res;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	e03b      	b.n	8004d6a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	68b8      	ldr	r0, [r7, #8]
 8004cf8:	f7ff fefe 	bl	8004af8 <BSP_SD_ReadBlocks_DMA>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d132      	bne.n	8004d68 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004d02:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <SD_read+0xa8>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004d08:	f7fb ff82 	bl	8000c10 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004d0e:	bf00      	nop
 8004d10:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <SD_read+0xa8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d108      	bne.n	8004d2a <SD_read+0x5e>
 8004d18:	f7fb ff7a 	bl	8000c10 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f247 522f 	movw	r2, #29999	; 0x752f
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d9f2      	bls.n	8004d10 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <SD_read+0xa8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
 8004d36:	e017      	b.n	8004d68 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <SD_read+0xa8>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004d3e:	f7fb ff67 	bl	8000c10 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004d44:	e007      	b.n	8004d56 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004d46:	f7ff ff0b 	bl	8004b60 <BSP_SD_GetCardState>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <SD_read+0x8a>
          {
            res = RES_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004d54:	e008      	b.n	8004d68 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004d56:	f7fb ff5b 	bl	8000c10 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f247 522f 	movw	r2, #29999	; 0x752f
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d9ee      	bls.n	8004d46 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	200001c0 	.word	0x200001c0

08004d78 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004d8c:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <SD_write+0xa8>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004d92:	f247 5030 	movw	r0, #30000	; 0x7530
 8004d96:	f7ff ff33 	bl	8004c00 <SD_CheckStatusWithTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	da01      	bge.n	8004da4 <SD_write+0x2c>
  {
    return res;
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	e038      	b.n	8004e16 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	68b8      	ldr	r0, [r7, #8]
 8004daa:	f7ff febf 	bl	8004b2c <BSP_SD_WriteBlocks_DMA>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d12f      	bne.n	8004e14 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004db4:	f7fb ff2c 	bl	8000c10 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004dba:	bf00      	nop
 8004dbc:	4b18      	ldr	r3, [pc, #96]	; (8004e20 <SD_write+0xa8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d108      	bne.n	8004dd6 <SD_write+0x5e>
 8004dc4:	f7fb ff24 	bl	8000c10 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f247 522f 	movw	r2, #29999	; 0x752f
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d9f2      	bls.n	8004dbc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004dd6:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <SD_write+0xa8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d102      	bne.n	8004de4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
 8004de2:	e017      	b.n	8004e14 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <SD_write+0xa8>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004dea:	f7fb ff11 	bl	8000c10 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004df0:	e007      	b.n	8004e02 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004df2:	f7ff feb5 	bl	8004b60 <BSP_SD_GetCardState>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <SD_write+0x8a>
          {
            res = RES_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
            break;
 8004e00:	e008      	b.n	8004e14 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004e02:	f7fb ff05 	bl	8000c10 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d9ee      	bls.n	8004df2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	200001bc 	.word	0x200001bc

08004e24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08c      	sub	sp, #48	; 0x30
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	603a      	str	r2, [r7, #0]
 8004e2e:	71fb      	strb	r3, [r7, #7]
 8004e30:	460b      	mov	r3, r1
 8004e32:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004e3a:	4b25      	ldr	r3, [pc, #148]	; (8004ed0 <SD_ioctl+0xac>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <SD_ioctl+0x28>
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e03c      	b.n	8004ec6 <SD_ioctl+0xa2>

  switch (cmd)
 8004e4c:	79bb      	ldrb	r3, [r7, #6]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d834      	bhi.n	8004ebc <SD_ioctl+0x98>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <SD_ioctl+0x34>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e71 	.word	0x08004e71
 8004e60:	08004e89 	.word	0x08004e89
 8004e64:	08004ea3 	.word	0x08004ea3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004e6e:	e028      	b.n	8004ec2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004e70:	f107 030c 	add.w	r3, r7, #12
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fe83 	bl	8004b80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004e86:	e01c      	b.n	8004ec2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004e88:	f107 030c 	add.w	r3, r7, #12
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fe77 	bl	8004b80 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004ea0:	e00f      	b.n	8004ec2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004ea2:	f107 030c 	add.w	r3, r7, #12
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fe6a 	bl	8004b80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	0a5a      	lsrs	r2, r3, #9
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004eba:	e002      	b.n	8004ec2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3730      	adds	r7, #48	; 0x30
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000009 	.word	0x20000009

08004ed4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <BSP_SD_WriteCpltCallback+0x14>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	200001bc 	.word	0x200001bc

08004eec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <BSP_SD_ReadCpltCallback+0x14>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	200001c0 	.word	0x200001c0

08004f04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f1c:	7a5b      	ldrb	r3, [r3, #9]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d131      	bne.n	8004f88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004f24:	4b1c      	ldr	r3, [pc, #112]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f26:	7a5b      	ldrb	r3, [r3, #9]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f2e:	2100      	movs	r1, #0
 8004f30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004f32:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f34:	7a5b      	ldrb	r3, [r3, #9]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f44:	7a5b      	ldrb	r3, [r3, #9]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f4c:	4413      	add	r3, r2
 8004f4e:	79fa      	ldrb	r2, [r7, #7]
 8004f50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f54:	7a5b      	ldrb	r3, [r3, #9]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	b2d1      	uxtb	r1, r2
 8004f5c:	4a0e      	ldr	r2, [pc, #56]	; (8004f98 <FATFS_LinkDriverEx+0x94>)
 8004f5e:	7251      	strb	r1, [r2, #9]
 8004f60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004f62:	7dbb      	ldrb	r3, [r7, #22]
 8004f64:	3330      	adds	r3, #48	; 0x30
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	223a      	movs	r2, #58	; 0x3a
 8004f72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	3302      	adds	r3, #2
 8004f78:	222f      	movs	r2, #47	; 0x2f
 8004f7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	3303      	adds	r3, #3
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	200001c4 	.word	0x200001c4

08004f9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ffaa 	bl	8004f04 <FATFS_LinkDriverEx>
 8004fb0:	4603      	mov	r3, r0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4d0b      	ldr	r5, [pc, #44]	; (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	; (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 f820 	bl	8005014 <_init>
 8004fd4:	1b64      	subs	r4, r4, r5
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2600      	movs	r6, #0
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	08005090 	.word	0x08005090
 8004ff8:	08005090 	.word	0x08005090
 8004ffc:	08005090 	.word	0x08005090
 8005000:	08005094 	.word	0x08005094

08005004 <memset>:
 8005004:	4402      	add	r2, r0
 8005006:	4603      	mov	r3, r0
 8005008:	4293      	cmp	r3, r2
 800500a:	d100      	bne.n	800500e <memset+0xa>
 800500c:	4770      	bx	lr
 800500e:	f803 1b01 	strb.w	r1, [r3], #1
 8005012:	e7f9      	b.n	8005008 <memset+0x4>

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
