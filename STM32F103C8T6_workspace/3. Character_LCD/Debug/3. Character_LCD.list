
3. Character_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000202c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002138  08002138  00012138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002214  08002214  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002214  08002214  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002214  08002214  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002214  08002214  00012214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002218  08002218  00012218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800221c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000070  0800228c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800228c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003586  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001246  00000000  00000000  0002361f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  00024868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00024d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b28  00000000  00000000  00025100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ae0  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f52d  00000000  00000000  00041708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0c35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001400  00000000  00000000  000c0c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002120 	.word	0x08002120

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002120 	.word	0x08002120

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CLCD_Pin_Set_Exec>:
static void CLCD_Write_Data_To_CG_OR_DDRAM(uint16_t data);
static void CLCD_Read_Data_From_CG_OR_DDRAM(void);
//void CLCD_Write(uint16_t row, uint16_t col, const uint8_t* str);

static void CLCD_Pin_Set_Exec(uint16_t clcd_pin)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	//	---- 0000 0000 0000
	int16_t last_pin_idx;
	uint16_t tmp_pin;

	if(fs_ctrl->d_l)
 8000166:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <CLCD_Pin_Set_Exec+0x88>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	b2db      	uxtb	r3, r3
 8000172:	2b00      	cmp	r3, #0
 8000174:	d00b      	beq.n	800018e <CLCD_Pin_Set_Exec+0x32>
	{
		last_pin_idx = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	81fb      	strh	r3, [r7, #14]
		CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 800017a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800017e:	88fb      	ldrh	r3, [r7, #6]
 8000180:	4611      	mov	r1, r2
 8000182:	4618      	mov	r0, r3
 8000184:	f000 f830 	bl	80001e8 <CLCD_GPIO_Set>
		CLCD_Inst_Exec();
 8000188:	f000 f8ba 	bl	8000300 <CLCD_Inst_Exec>
 800018c:	e027      	b.n	80001de <CLCD_Pin_Set_Exec+0x82>
	}
	else
	{
		last_pin_idx = 4;
 800018e:	2304      	movs	r3, #4
 8000190:	81fb      	strh	r3, [r7, #14]
		CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 8000192:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000196:	88fb      	ldrh	r3, [r7, #6]
 8000198:	4611      	mov	r1, r2
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f824 	bl	80001e8 <CLCD_GPIO_Set>
		CLCD_Inst_Exec();
 80001a0:	f000 f8ae 	bl	8000300 <CLCD_Inst_Exec>
		if(clcd_pin & CLCD_PIN_S_4_BIT_OP_ONCE)
 80001a4:	88fb      	ldrh	r3, [r7, #6]
 80001a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d116      	bne.n	80001dc <CLCD_Pin_Set_Exec+0x80>
			return;
		else
		{
			tmp_pin = (clcd_pin & 0x00f) << 4;
 80001ae:	88fb      	ldrh	r3, [r7, #6]
 80001b0:	011b      	lsls	r3, r3, #4
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	81bb      	strh	r3, [r7, #12]
			clcd_pin &= 0x600;
 80001b8:	88fb      	ldrh	r3, [r7, #6]
 80001ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80001be:	80fb      	strh	r3, [r7, #6]
			clcd_pin |= tmp_pin;
 80001c0:	88fa      	ldrh	r2, [r7, #6]
 80001c2:	89bb      	ldrh	r3, [r7, #12]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	80fb      	strh	r3, [r7, #6]
			CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 80001c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80001cc:	88fb      	ldrh	r3, [r7, #6]
 80001ce:	4611      	mov	r1, r2
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 f809 	bl	80001e8 <CLCD_GPIO_Set>
			CLCD_Inst_Exec();
 80001d6:	f000 f893 	bl	8000300 <CLCD_Inst_Exec>
 80001da:	e000      	b.n	80001de <CLCD_Pin_Set_Exec+0x82>
			return;
 80001dc:	bf00      	nop
		}
	}
}
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000098 	.word	0x20000098

080001e8 <CLCD_GPIO_Set>:

static void CLCD_GPIO_Set(uint16_t select_pin, int16_t last_pin_idx)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	460a      	mov	r2, r1
 80001f2:	80fb      	strh	r3, [r7, #6]
 80001f4:	4613      	mov	r3, r2
 80001f6:	80bb      	strh	r3, [r7, #4]
	int16_t i;
	int16_t start_pin_idx = 10;
 80001f8:	230a      	movs	r3, #10
 80001fa:	81bb      	strh	r3, [r7, #12]

	for(i = start_pin_idx; i >= last_pin_idx; i--)
 80001fc:	89bb      	ldrh	r3, [r7, #12]
 80001fe:	81fb      	strh	r3, [r7, #14]
 8000200:	e033      	b.n	800026a <CLCD_GPIO_Set+0x82>
	{
		if((select_pin >> i) & 0x001)
 8000202:	88fa      	ldrh	r2, [r7, #6]
 8000204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000208:	fa42 f303 	asr.w	r3, r2, r3
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d012      	beq.n	800023a <CLCD_GPIO_Set+0x52>
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_SET);
 8000214:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <CLCD_GPIO_Set+0x98>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	4413      	add	r3, r2
 8000220:	6818      	ldr	r0, [r3, #0]
 8000222:	4b17      	ldr	r3, [pc, #92]	; (8000280 <CLCD_GPIO_Set+0x98>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800022a:	00db      	lsls	r3, r3, #3
 800022c:	4413      	add	r3, r2
 800022e:	889b      	ldrh	r3, [r3, #4]
 8000230:	2201      	movs	r2, #1
 8000232:	4619      	mov	r1, r3
 8000234:	f000 fec8 	bl	8000fc8 <HAL_GPIO_WritePin>
 8000238:	e011      	b.n	800025e <CLCD_GPIO_Set+0x76>
		else
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_RESET);
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <CLCD_GPIO_Set+0x98>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	4413      	add	r3, r2
 8000246:	6818      	ldr	r0, [r3, #0]
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <CLCD_GPIO_Set+0x98>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000250:	00db      	lsls	r3, r3, #3
 8000252:	4413      	add	r3, r2
 8000254:	889b      	ldrh	r3, [r3, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	4619      	mov	r1, r3
 800025a:	f000 feb5 	bl	8000fc8 <HAL_GPIO_WritePin>
	for(i = start_pin_idx; i >= last_pin_idx; i--)
 800025e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000262:	b29b      	uxth	r3, r3
 8000264:	3b01      	subs	r3, #1
 8000266:	b29b      	uxth	r3, r3
 8000268:	81fb      	strh	r3, [r7, #14]
 800026a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800026e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000272:	429a      	cmp	r2, r3
 8000274:	dac5      	bge.n	8000202 <CLCD_GPIO_Set+0x1a>
	}
}
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000009c 	.word	0x2000009c

08000284 <CLCD_Config_Init>:

static void CLCD_Config_Init()
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
			{ CLCD_PIN_E_TYPE, 	CLCD_PIN_E_NUM 	},  // idx =  8
			{ CLCD_PIN_RW_TYPE, CLCD_PIN_RW_NUM },	// idx =  9
			{ CLCD_PIN_RS_TYPE, CLCD_PIN_RS_NUM }   // idx = 10
	};

	clcd_pin = clcd_pin_sc;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <CLCD_Config_Init+0x60>)
 800028a:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <CLCD_Config_Init+0x64>)
 800028c:	601a      	str	r2, [r3, #0]

	ems_ctrl.i_d = CLCD_I_EMS_I_D;
 800028e:	4a17      	ldr	r2, [pc, #92]	; (80002ec <CLCD_Config_Init+0x68>)
 8000290:	7813      	ldrb	r3, [r2, #0]
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	7013      	strb	r3, [r2, #0]
	ems_ctrl.s = CLCD_I_EMS_S;
 8000298:	4a14      	ldr	r2, [pc, #80]	; (80002ec <CLCD_Config_Init+0x68>)
 800029a:	7813      	ldrb	r3, [r2, #0]
 800029c:	f36f 0341 	bfc	r3, #1, #1
 80002a0:	7013      	strb	r3, [r2, #0]

	doc_ctrl.d = CLCD_I_DOC_D;
 80002a2:	4a13      	ldr	r2, [pc, #76]	; (80002f0 <CLCD_Config_Init+0x6c>)
 80002a4:	7813      	ldrb	r3, [r2, #0]
 80002a6:	f36f 0300 	bfc	r3, #0, #1
 80002aa:	7013      	strb	r3, [r2, #0]
	doc_ctrl.c = CLCD_I_DOC_C;
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <CLCD_Config_Init+0x6c>)
 80002ae:	7813      	ldrb	r3, [r2, #0]
 80002b0:	f36f 0341 	bfc	r3, #1, #1
 80002b4:	7013      	strb	r3, [r2, #0]
	doc_ctrl.b = CLCD_I_DOC_B;
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <CLCD_Config_Init+0x6c>)
 80002b8:	7813      	ldrb	r3, [r2, #0]
 80002ba:	f36f 0382 	bfc	r3, #2, #1
 80002be:	7013      	strb	r3, [r2, #0]

	cods_ctrl.s_c = CLCD_I_CODS_S_C;
 80002c0:	4a0c      	ldr	r2, [pc, #48]	; (80002f4 <CLCD_Config_Init+0x70>)
 80002c2:	7813      	ldrb	r3, [r2, #0]
 80002c4:	f36f 0300 	bfc	r3, #0, #1
 80002c8:	7013      	strb	r3, [r2, #0]
	cods_ctrl.r_l = CLCD_I_CODS_R_L;
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <CLCD_Config_Init+0x70>)
 80002cc:	7813      	ldrb	r3, [r2, #0]
 80002ce:	f36f 0341 	bfc	r3, #1, #1
 80002d2:	7013      	strb	r3, [r2, #0]
	static const CLCD_FS fs_ctrl_v = {
		CLCD_I_FS_D_L,
		CLCD_I_FS_N,
		CLCD_I_FS_F
	};
	fs_ctrl = &fs_ctrl_v;
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <CLCD_Config_Init+0x74>)
 80002d6:	4a09      	ldr	r2, [pc, #36]	; (80002fc <CLCD_Config_Init+0x78>)
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	2000009c 	.word	0x2000009c
 80002e8:	08002174 	.word	0x08002174
 80002ec:	2000008c 	.word	0x2000008c
 80002f0:	20000090 	.word	0x20000090
 80002f4:	20000094 	.word	0x20000094
 80002f8:	20000098 	.word	0x20000098
 80002fc:	080021cc 	.word	0x080021cc

08000300 <CLCD_Inst_Exec>:

static void CLCD_Inst_Exec(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
	uint16_t e_idx = 8;
 8000306:	2308      	movs	r3, #8
 8000308:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(clcd_pin[e_idx].lcd_gpio_type, clcd_pin[e_idx].pin_num, GPIO_PIN_SET);
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <CLCD_Inst_Exec+0x60>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	4413      	add	r3, r2
 8000314:	6818      	ldr	r0, [r3, #0]
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <CLCD_Inst_Exec+0x60>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	4413      	add	r3, r2
 8000320:	889b      	ldrh	r3, [r3, #4]
 8000322:	2201      	movs	r2, #1
 8000324:	4619      	mov	r1, r3
 8000326:	f000 fe4f 	bl	8000fc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fbc0 	bl	8000ab0 <HAL_Delay>
	HAL_GPIO_WritePin(clcd_pin[e_idx].lcd_gpio_type, clcd_pin[e_idx].pin_num, GPIO_PIN_RESET);
 8000330:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <CLCD_Inst_Exec+0x60>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	4413      	add	r3, r2
 800033a:	6818      	ldr	r0, [r3, #0]
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <CLCD_Inst_Exec+0x60>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	4413      	add	r3, r2
 8000346:	889b      	ldrh	r3, [r3, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	4619      	mov	r1, r3
 800034c:	f000 fe3c 	bl	8000fc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f000 fbad 	bl	8000ab0 <HAL_Delay>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000009c 	.word	0x2000009c

08000364 <CLCD_Init>:

void CLCD_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	CLCD_Config_Init();
 8000368:	f7ff ff8c 	bl	8000284 <CLCD_Config_Init>
	HAL_Delay(40);
 800036c:	2028      	movs	r0, #40	; 0x28
 800036e:	f000 fb9f 	bl	8000ab0 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 8000372:	2030      	movs	r0, #48	; 0x30
 8000374:	f7ff fef2 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(5);
 8000378:	2005      	movs	r0, #5
 800037a:	f000 fb99 	bl	8000ab0 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 800037e:	2030      	movs	r0, #48	; 0x30
 8000380:	f7ff feec 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f000 fb93 	bl	8000ab0 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 800038a:	2030      	movs	r0, #48	; 0x30
 800038c:	f7ff fee6 	bl	800015c <CLCD_Pin_Set_Exec>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_4_BIT_OP_ONCE | CLCD_PIN_S_DB5);
 8000390:	f44f 6002 	mov.w	r0, #2080	; 0x820
 8000394:	f7ff fee2 	bl	800015c <CLCD_Pin_Set_Exec>
	CLCD_Function_Set();
 8000398:	f000 f8bc 	bl	8000514 <CLCD_Function_Set>
	CLCD_Display_ON_OFF_Control(CLCD_DOC_S_NONE);
 800039c:	2000      	movs	r0, #0
 800039e:	f000 f85f 	bl	8000460 <CLCD_Display_ON_OFF_Control>
	CLCD_Clear_Display();
 80003a2:	f000 f808 	bl	80003b6 <CLCD_Clear_Display>
	CLCD_Entry_Mode_Set(CLCD_EMS_S_I_D);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 f80c 	bl	80003c4 <CLCD_Entry_Mode_Set>
	// Initialization Ends

	CLCD_Display_ON_OFF_Control(CLCD_DOC_S_D | CLCD_DOC_S_C);
 80003ac:	2003      	movs	r0, #3
 80003ae:	f000 f857 	bl	8000460 <CLCD_Display_ON_OFF_Control>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <CLCD_Clear_Display>:

void CLCD_Clear_Display(void)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB0);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff fece 	bl	800015c <CLCD_Pin_Set_Exec>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <CLCD_Entry_Mode_Set>:
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB1);
	HAL_Delay(1);
}

static void CLCD_Entry_Mode_Set(uint16_t select)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	80fb      	strh	r3, [r7, #6]
	uint16_t clcd_pin = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	81bb      	strh	r3, [r7, #12]
	uint16_t i = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	81fb      	strh	r3, [r7, #14]
	uint8_t *p = (uint16_t*)&ems_ctrl;
 80003d6:	4b21      	ldr	r3, [pc, #132]	; (800045c <CLCD_Entry_Mode_Set+0x98>)
 80003d8:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < 2; i++)
 80003da:	2300      	movs	r3, #0
 80003dc:	81fb      	strh	r3, [r7, #14]
 80003de:	e015      	b.n	800040c <CLCD_Entry_Mode_Set+0x48>
	{
		if(select & ((0x001) << i))
 80003e0:	88fa      	ldrh	r2, [r7, #6]
 80003e2:	89fb      	ldrh	r3, [r7, #14]
 80003e4:	fa42 f303 	asr.w	r3, r2, r3
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d005      	beq.n	80003fc <CLCD_Entry_Mode_Set+0x38>
			p[i] = 1;
 80003f0:	89fb      	ldrh	r3, [r7, #14]
 80003f2:	68ba      	ldr	r2, [r7, #8]
 80003f4:	4413      	add	r3, r2
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
 80003fa:	e004      	b.n	8000406 <CLCD_Entry_Mode_Set+0x42>
		else
			p[i] = 0;
 80003fc:	89fb      	ldrh	r3, [r7, #14]
 80003fe:	68ba      	ldr	r2, [r7, #8]
 8000400:	4413      	add	r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 8000406:	89fb      	ldrh	r3, [r7, #14]
 8000408:	3301      	adds	r3, #1
 800040a:	81fb      	strh	r3, [r7, #14]
 800040c:	89fb      	ldrh	r3, [r7, #14]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d9e6      	bls.n	80003e0 <CLCD_Entry_Mode_Set+0x1c>
	}

	clcd_pin |= CLCD_PIN_S_DB2;
 8000412:	89bb      	ldrh	r3, [r7, #12]
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (ems_ctrl.i_d ? CLCD_PIN_S_DB1 : 0);
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <CLCD_Entry_Mode_Set+0x98>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	b21b      	sxth	r3, r3
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	b21a      	sxth	r2, r3
 8000428:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800042c:	4313      	orrs	r3, r2
 800042e:	b21b      	sxth	r3, r3
 8000430:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (ems_ctrl.s ? CLCD_PIN_S_DB0 : 0);
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <CLCD_Entry_Mode_Set+0x98>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	085b      	lsrs	r3, r3, #1
 8000438:	b2db      	uxtb	r3, r3
 800043a:	b21b      	sxth	r3, r3
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	b21a      	sxth	r2, r3
 8000442:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000446:	4313      	orrs	r3, r2
 8000448:	b21b      	sxth	r3, r3
 800044a:	81bb      	strh	r3, [r7, #12]

	CLCD_Pin_Set_Exec(clcd_pin);
 800044c:	89bb      	ldrh	r3, [r7, #12]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff fe84 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	2000008c 	.word	0x2000008c

08000460 <CLCD_Display_ON_OFF_Control>:

static void CLCD_Display_ON_OFF_Control(uint16_t select)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	80fb      	strh	r3, [r7, #6]
	uint16_t clcd_pin = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	81bb      	strh	r3, [r7, #12]
	uint16_t i = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	81fb      	strh	r3, [r7, #14]
	uint8_t *p = (uint16_t*)&doc_ctrl;
 8000472:	4b27      	ldr	r3, [pc, #156]	; (8000510 <CLCD_Display_ON_OFF_Control+0xb0>)
 8000474:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < 3; i++)
 8000476:	2300      	movs	r3, #0
 8000478:	81fb      	strh	r3, [r7, #14]
 800047a:	e015      	b.n	80004a8 <CLCD_Display_ON_OFF_Control+0x48>
	{
		if(select & ((0x001) << i))
 800047c:	88fa      	ldrh	r2, [r7, #6]
 800047e:	89fb      	ldrh	r3, [r7, #14]
 8000480:	fa42 f303 	asr.w	r3, r2, r3
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <CLCD_Display_ON_OFF_Control+0x38>
			p[i] = 1;
 800048c:	89fb      	ldrh	r3, [r7, #14]
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	4413      	add	r3, r2
 8000492:	2201      	movs	r2, #1
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	e004      	b.n	80004a2 <CLCD_Display_ON_OFF_Control+0x42>
		else
			p[i] = 0;
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	68ba      	ldr	r2, [r7, #8]
 800049c:	4413      	add	r3, r2
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 3; i++)
 80004a2:	89fb      	ldrh	r3, [r7, #14]
 80004a4:	3301      	adds	r3, #1
 80004a6:	81fb      	strh	r3, [r7, #14]
 80004a8:	89fb      	ldrh	r3, [r7, #14]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d9e6      	bls.n	800047c <CLCD_Display_ON_OFF_Control+0x1c>
	}

	clcd_pin |= CLCD_PIN_S_DB3;
 80004ae:	89bb      	ldrh	r3, [r7, #12]
 80004b0:	f043 0308 	orr.w	r3, r3, #8
 80004b4:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (doc_ctrl.d ? CLCD_PIN_S_DB2 : 0);
 80004b6:	4b16      	ldr	r3, [pc, #88]	; (8000510 <CLCD_Display_ON_OFF_Control+0xb0>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	b21b      	sxth	r3, r3
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	b21a      	sxth	r2, r3
 80004c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (doc_ctrl.c ? CLCD_PIN_S_DB1 : 0);
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <CLCD_Display_ON_OFF_Control+0xb0>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b21b      	sxth	r3, r3
 80004d4:	f003 0302 	and.w	r3, r3, #2
 80004d8:	b21a      	sxth	r2, r3
 80004da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80004de:	4313      	orrs	r3, r2
 80004e0:	b21b      	sxth	r3, r3
 80004e2:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (doc_ctrl.b ? CLCD_PIN_S_DB0 : 0);
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <CLCD_Display_ON_OFF_Control+0xb0>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	089b      	lsrs	r3, r3, #2
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	b21a      	sxth	r2, r3
 80004f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	81bb      	strh	r3, [r7, #12]

	CLCD_Pin_Set_Exec(clcd_pin);
 80004fe:	89bb      	ldrh	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe2b 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000090 	.word	0x20000090

08000514 <CLCD_Function_Set>:

	CLCD_Pin_Set_Exec(clcd_pin);
}

static void CLCD_Function_Set(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	uint16_t clcd_pin = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	80fb      	strh	r3, [r7, #6]

	clcd_pin |= CLCD_PIN_S_DB5;
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	f043 0320 	orr.w	r3, r3, #32
 8000524:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->d_l ? CLCD_PIN_S_DB4 : 0);
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <CLCD_Function_Set+0x70>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	011b      	lsls	r3, r3, #4
 800052e:	b21b      	sxth	r3, r3
 8000530:	f003 0310 	and.w	r3, r3, #16
 8000534:	b21a      	sxth	r2, r3
 8000536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800053a:	4313      	orrs	r3, r2
 800053c:	b21b      	sxth	r3, r3
 800053e:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->n ? CLCD_PIN_S_DB3 : 0);
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <CLCD_Function_Set+0x70>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	b21b      	sxth	r3, r3
 800054a:	f003 0308 	and.w	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000554:	4313      	orrs	r3, r2
 8000556:	b21b      	sxth	r3, r3
 8000558:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->f ? CLCD_PIN_S_DB2 : 0);
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <CLCD_Function_Set+0x70>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b21b      	sxth	r3, r3
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	b21a      	sxth	r2, r3
 8000568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056c:	4313      	orrs	r3, r2
 800056e:	b21b      	sxth	r3, r3
 8000570:	80fb      	strh	r3, [r7, #6]

	CLCD_Pin_Set_Exec(clcd_pin);
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fdf1 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000098 	.word	0x20000098

08000588 <CLCD_Set_DDRAM_address>:
{

}

static void CLCD_Set_DDRAM_address(uint16_t row, uint16_t col)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	80fb      	strh	r3, [r7, #6]
 8000594:	4613      	mov	r3, r2
 8000596:	80bb      	strh	r3, [r7, #4]
	uint16_t pin_s = CLCD_PIN_S_DB7;
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	81fb      	strh	r3, [r7, #14]

	if(fs_ctrl->n)
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <CLCD_Set_DDRAM_address+0x60>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	f003 0302 	and.w	r3, r3, #2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00c      	beq.n	80005c6 <CLCD_Set_DDRAM_address+0x3e>
	{
		if(row)
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <CLCD_Set_DDRAM_address+0x2e>
			row = 0x40;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	80fb      	strh	r3, [r7, #6]
		pin_s |= (row | col);
 80005b6:	88fa      	ldrh	r2, [r7, #6]
 80005b8:	88bb      	ldrh	r3, [r7, #4]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b29a      	uxth	r2, r3
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	81fb      	strh	r3, [r7, #14]
 80005c4:	e006      	b.n	80005d4 <CLCD_Set_DDRAM_address+0x4c>
	}
	else
	{
		if(row)
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d108      	bne.n	80005de <CLCD_Set_DDRAM_address+0x56>
			return;
		else
			pin_s |= col;
 80005cc:	89fa      	ldrh	r2, [r7, #14]
 80005ce:	88bb      	ldrh	r3, [r7, #4]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	81fb      	strh	r3, [r7, #14]
	}
	CLCD_Pin_Set_Exec(pin_s);
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdc0 	bl	800015c <CLCD_Pin_Set_Exec>
 80005dc:	e000      	b.n	80005e0 <CLCD_Set_DDRAM_address+0x58>
			return;
 80005de:	bf00      	nop
}
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000098 	.word	0x20000098

080005ec <CLCD_Write_Data_To_CG_OR_DDRAM>:
{

}

static void CLCD_Write_Data_To_CG_OR_DDRAM(uint16_t data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	uint16_t pin_s = CLCD_PIN_S_RS;
 80005f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fa:	81fb      	strh	r3, [r7, #14]
	pin_s |= data;
 80005fc:	89fa      	ldrh	r2, [r7, #14]
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	4313      	orrs	r3, r2
 8000602:	81fb      	strh	r3, [r7, #14]
	CLCD_Pin_Set_Exec(pin_s);
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fda8 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <CLCD_Write>:
{

}

void CLCD_Write(uint16_t row, uint16_t col, const uint8_t* str)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
	int16_t i;
	int32_t str_size;
	str_size = strlen(str);
 8000624:	6838      	ldr	r0, [r7, #0]
 8000626:	f7ff fd91 	bl	800014c <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	60bb      	str	r3, [r7, #8]

	if(str_size > 16)
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	2b10      	cmp	r3, #16
 8000632:	dd01      	ble.n	8000638 <CLCD_Write+0x24>
		str_size = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	60bb      	str	r3, [r7, #8]

	CLCD_Set_DDRAM_address(row, col);
 8000638:	88ba      	ldrh	r2, [r7, #4]
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffa2 	bl	8000588 <CLCD_Set_DDRAM_address>

	for(i = 0; i < str_size; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	81fb      	strh	r3, [r7, #14]
 8000648:	e00e      	b.n	8000668 <CLCD_Write+0x54>
		CLCD_Write_Data_To_CG_OR_DDRAM(str[i]);
 800064a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	4413      	add	r3, r2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffc8 	bl	80005ec <CLCD_Write_Data_To_CG_OR_DDRAM>
	for(i = 0; i < str_size; i++)
 800065c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000660:	b29b      	uxth	r3, r3
 8000662:	3301      	adds	r3, #1
 8000664:	b29b      	uxth	r3, r3
 8000666:	81fb      	strh	r3, [r7, #14]
 8000668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	429a      	cmp	r2, r3
 8000670:	dceb      	bgt.n	800064a <CLCD_Write+0x36>
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000690:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <MX_GPIO_Init+0xcc>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a2c      	ldr	r2, [pc, #176]	; (8000748 <MX_GPIO_Init+0xcc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <MX_GPIO_Init+0xcc>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0310 	and.w	r3, r3, #16
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a26      	ldr	r2, [pc, #152]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0320 	and.w	r3, r3, #32
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a20      	ldr	r2, [pc, #128]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1a      	ldr	r2, [pc, #104]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_GPIO_Init+0xcc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006f6:	4815      	ldr	r0, [pc, #84]	; (800074c <MX_GPIO_Init+0xd0>)
 80006f8:	f000 fc66 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	211b      	movs	r1, #27
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <MX_GPIO_Init+0xd4>)
 8000702:	f000 fc61 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000706:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <MX_GPIO_Init+0xd0>)
 8000720:	f000 face 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000724:	231b      	movs	r3, #27
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_GPIO_Init+0xd4>)
 800073c:	f000 fac0 	bl	8000cc0 <HAL_GPIO_Init>

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010c00 	.word	0x40010c00

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 f947 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f83f 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f7ff ff8b 	bl	800067c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  	CLCD_Init();
 8000766:	f7ff fdfd 	bl	8000364 <CLCD_Init>
  	uint8_t str[] = "Hello World!!";
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <main+0x80>)
 800076c:	f107 0410 	add.w	r4, r7, #16
 8000770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000772:	c407      	stmia	r4!, {r0, r1, r2}
 8000774:	8023      	strh	r3, [r4, #0]
//  	uint8_t str[] = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xe0, 0xf0, 0xf1, 'f', 'F', 'e', 'E', 'i', 'I', 'j', 'J', 'y', 'Y' };
  	CLCD_Write(0, 0, str);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	461a      	mov	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff ff48 	bl	8000614 <CLCD_Write>
  	CLCD_Write(1, 0, str);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	461a      	mov	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff41 	bl	8000614 <CLCD_Write>
  	HAL_Delay(3000);
 8000792:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000796:	f000 f98b 	bl	8000ab0 <HAL_Delay>
  	CLCD_Write(0, 0, "Hawawa Hoee..");
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <main+0x84>)
 800079c:	2100      	movs	r1, #0
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff38 	bl	8000614 <CLCD_Write>

  	uint16_t cnt = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	83fb      	strh	r3, [r7, #30]
  	char str1[16];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	CLCD_Clear_Display();
 80007a8:	f7ff fe05 	bl	80003b6 <CLCD_Clear_Display>
  while (1)
  {
	  HAL_Delay(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f000 f97e 	bl	8000ab0 <HAL_Delay>
	  sprintf(str1, "cnt = %d", cnt);
 80007b4:	8bfa      	ldrh	r2, [r7, #30]
 80007b6:	463b      	mov	r3, r7
 80007b8:	4908      	ldr	r1, [pc, #32]	; (80007dc <main+0x88>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f836 	bl	800182c <siprintf>
	  CLCD_Write(1, 0, str1);
 80007c0:	463b      	mov	r3, r7
 80007c2:	461a      	mov	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff ff24 	bl	8000614 <CLCD_Write>
	  cnt++;
 80007cc:	8bfb      	ldrh	r3, [r7, #30]
 80007ce:	3301      	adds	r3, #1
 80007d0:	83fb      	strh	r3, [r7, #30]
  {
 80007d2:	e7eb      	b.n	80007ac <main+0x58>
 80007d4:	08002154 	.word	0x08002154
 80007d8:	08002138 	.word	0x08002138
 80007dc:	08002148 	.word	0x08002148

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	; 0x40
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	2228      	movs	r2, #40	; 0x28
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f814 	bl	800181c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800081e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fbe5 	bl	8000ff8 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000834:	f000 f819 	bl	800086a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2102      	movs	r1, #2
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fe52 	bl	80014fc <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800085e:	f000 f804 	bl	800086a <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3740      	adds	r7, #64	; 0x40
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086e:	b672      	cpsid	i
}
 8000870:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000872:	e7fe      	b.n	8000872 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_MspInit+0x5c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <HAL_MspInit+0x5c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x5c>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x5c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_MspInit+0x60>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_MspInit+0x60>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 f8ab 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f000 ff36 	bl	80017c8 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20005000 	.word	0x20005000
 8000988:	00000400 	.word	0x00000400
 800098c:	200000a0 	.word	0x200000a0
 8000990:	200000b8 	.word	0x200000b8

08000994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c6:	f7ff ffe5 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f000 ff03 	bl	80017d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fec1 	bl	8000754 <main>
  bx lr
 80009d2:	4770      	bx	lr
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009dc:	0800221c 	.word	0x0800221c
  ldr r2, =_sbss
 80009e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e4:	200000b8 	.word	0x200000b8

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_Init+0x28>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_Init+0x28>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f92b 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff ff34 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f935 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f90b 	bl	8000c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x20>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <HAL_IncTick+0x20>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000008 	.word	0x20000008
 8000a98:	200000a4 	.word	0x200000a4

08000a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <HAL_GetTick+0x10>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	200000a4 	.word	0x200000a4

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff fff0 	bl	8000a9c <HAL_GetTick>
 8000abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac8:	d005      	beq.n	8000ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_Delay+0x44>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad6:	bf00      	nop
 8000ad8:	f7ff ffe0 	bl	8000a9c <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <HAL_Delay+0x28>
  {
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db0a      	blt.n	8000b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <__NVIC_SetPriority+0x4c>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b84:	e00a      	b.n	8000b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <__NVIC_SetPriority+0x50>)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	3b04      	subs	r3, #4
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	440b      	add	r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	bf28      	it	cs
 8000bce:	2304      	movcs	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d902      	bls.n	8000be0 <NVIC_EncodePriority+0x30>
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	e000      	b.n	8000be2 <NVIC_EncodePriority+0x32>
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	4313      	orrs	r3, r2
         );
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f7ff ff90 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff49 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff5e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff90 	bl	8000bb0 <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5f 	bl	8000b5c <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffb0 	bl	8000c14 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e169      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8158 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a9a      	ldr	r2, [pc, #616]	; (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d05e      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000cfc:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d875      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d02:	4a98      	ldr	r2, [pc, #608]	; (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d058      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d08:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d86f      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d0e:	4a96      	ldr	r2, [pc, #600]	; (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d052      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d14:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d869      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d1a:	4a94      	ldr	r2, [pc, #592]	; (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d04c      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d20:	4a92      	ldr	r2, [pc, #584]	; (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d863      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d26:	4a92      	ldr	r2, [pc, #584]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d046      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d2c:	4a90      	ldr	r2, [pc, #576]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d85d      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d82a      	bhi.n	8000d8c <HAL_GPIO_Init+0xcc>
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d859      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d3a:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <HAL_GPIO_Init+0x80>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000dbb 	.word	0x08000dbb
 8000d44:	08000d95 	.word	0x08000d95
 8000d48:	08000da7 	.word	0x08000da7
 8000d4c:	08000de9 	.word	0x08000de9
 8000d50:	08000def 	.word	0x08000def
 8000d54:	08000def 	.word	0x08000def
 8000d58:	08000def 	.word	0x08000def
 8000d5c:	08000def 	.word	0x08000def
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000def 	.word	0x08000def
 8000d68:	08000def 	.word	0x08000def
 8000d6c:	08000def 	.word	0x08000def
 8000d70:	08000def 	.word	0x08000def
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000def 	.word	0x08000def
 8000d7c:	08000def 	.word	0x08000def
 8000d80:	08000def 	.word	0x08000def
 8000d84:	08000d9d 	.word	0x08000d9d
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	4a79      	ldr	r2, [pc, #484]	; (8000f74 <HAL_GPIO_Init+0x2b4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d92:	e02c      	b.n	8000dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e029      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	3304      	adds	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e024      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	3308      	adds	r3, #8
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e01f      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	330c      	adds	r3, #12
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e01a      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e013      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	611a      	str	r2, [r3, #16]
          break;
 8000dda:	e009      	b.n	8000df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	615a      	str	r2, [r3, #20]
          break;
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          break;
 8000dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2bff      	cmp	r3, #255	; 0xff
 8000df4:	d801      	bhi.n	8000dfa <HAL_GPIO_Init+0x13a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	e001      	b.n	8000dfe <HAL_GPIO_Init+0x13e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2bff      	cmp	r3, #255	; 0xff
 8000e04:	d802      	bhi.n	8000e0c <HAL_GPIO_Init+0x14c>
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0x152>
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	210f      	movs	r1, #15
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	401a      	ands	r2, r3
 8000e24:	6a39      	ldr	r1, [r7, #32]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80b1 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e40:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e58:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <HAL_GPIO_Init+0x2c0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d013      	beq.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a3f      	ldr	r2, [pc, #252]	; (8000f84 <HAL_GPIO_Init+0x2c4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00d      	beq.n	8000ea8 <HAL_GPIO_Init+0x1e8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3e      	ldr	r2, [pc, #248]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d101      	bne.n	8000ea0 <HAL_GPIO_Init+0x1e0>
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e004      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000eac:	2300      	movs	r3, #0
 8000eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb0:	f002 0203 	and.w	r2, r2, #3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ebe:	492f      	ldr	r1, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	492c      	ldr	r1, [pc, #176]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4928      	ldr	r1, [pc, #160]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	4922      	ldr	r1, [pc, #136]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	491e      	ldr	r1, [pc, #120]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	4918      	ldr	r1, [pc, #96]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	608b      	str	r3, [r1, #8]
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4914      	ldr	r1, [pc, #80]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d021      	beq.n	8000f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	490e      	ldr	r1, [pc, #56]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60cb      	str	r3, [r1, #12]
 8000f5c:	e021      	b.n	8000fa2 <HAL_GPIO_Init+0x2e2>
 8000f5e:	bf00      	nop
 8000f60:	10320000 	.word	0x10320000
 8000f64:	10310000 	.word	0x10310000
 8000f68:	10220000 	.word	0x10220000
 8000f6c:	10210000 	.word	0x10210000
 8000f70:	10120000 	.word	0x10120000
 8000f74:	10110000 	.word	0x10110000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40010800 	.word	0x40010800
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40011400 	.word	0x40011400
 8000f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4909      	ldr	r1, [pc, #36]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f47f ae8e 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	372c      	adds	r7, #44	; 0x2c
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	611a      	str	r2, [r3, #16]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e272      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8087 	beq.w	8001126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001018:	4b92      	ldr	r3, [pc, #584]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 030c 	and.w	r3, r3, #12
 8001020:	2b04      	cmp	r3, #4
 8001022:	d00c      	beq.n	800103e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001024:	4b8f      	ldr	r3, [pc, #572]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	2b08      	cmp	r3, #8
 800102e:	d112      	bne.n	8001056 <HAL_RCC_OscConfig+0x5e>
 8001030:	4b8c      	ldr	r3, [pc, #560]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103c:	d10b      	bne.n	8001056 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103e:	4b89      	ldr	r3, [pc, #548]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d06c      	beq.n	8001124 <HAL_RCC_OscConfig+0x12c>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d168      	bne.n	8001124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e24c      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105e:	d106      	bne.n	800106e <HAL_RCC_OscConfig+0x76>
 8001060:	4b80      	ldr	r3, [pc, #512]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a7f      	ldr	r2, [pc, #508]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	e02e      	b.n	80010cc <HAL_RCC_OscConfig+0xd4>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x98>
 8001076:	4b7b      	ldr	r3, [pc, #492]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a7a      	ldr	r2, [pc, #488]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 800107c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b78      	ldr	r3, [pc, #480]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a77      	ldr	r2, [pc, #476]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e01d      	b.n	80010cc <HAL_RCC_OscConfig+0xd4>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0xbc>
 800109a:	4b72      	ldr	r3, [pc, #456]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a71      	ldr	r2, [pc, #452]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a6e      	ldr	r2, [pc, #440]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e00b      	b.n	80010cc <HAL_RCC_OscConfig+0xd4>
 80010b4:	4b6b      	ldr	r3, [pc, #428]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a6a      	ldr	r2, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b68      	ldr	r3, [pc, #416]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a67      	ldr	r2, [pc, #412]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d013      	beq.n	80010fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fce2 	bl	8000a9c <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fcde 	bl	8000a9c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e200      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0xe4>
 80010fa:	e014      	b.n	8001126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcce 	bl	8000a9c <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fcca 	bl	8000a9c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e1ec      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x10c>
 8001122:	e000      	b.n	8001126 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d063      	beq.n	80011fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001132:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00b      	beq.n	8001156 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b08      	cmp	r3, #8
 8001148:	d11c      	bne.n	8001184 <HAL_RCC_OscConfig+0x18c>
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d116      	bne.n	8001184 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d005      	beq.n	800116e <HAL_RCC_OscConfig+0x176>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d001      	beq.n	800116e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e1c0      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116e:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4939      	ldr	r1, [pc, #228]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001182:	e03a      	b.n	80011fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d020      	beq.n	80011ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fc83 	bl	8000a9c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff fc7f 	bl	8000a9c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e1a1      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4927      	ldr	r1, [pc, #156]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
 80011cc:	e015      	b.n	80011fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fc62 	bl	8000a9c <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fc5e 	bl	8000a9c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e180      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d03a      	beq.n	800127c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d019      	beq.n	8001242 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_RCC_OscConfig+0x274>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001214:	f7ff fc42 	bl	8000a9c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121c:	f7ff fc3e 	bl	8000a9c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e160      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_RCC_OscConfig+0x26c>)
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800123a:	2001      	movs	r0, #1
 800123c:	f000 faa6 	bl	800178c <RCC_Delay>
 8001240:	e01c      	b.n	800127c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_RCC_OscConfig+0x274>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001248:	f7ff fc28 	bl	8000a9c <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124e:	e00f      	b.n	8001270 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001250:	f7ff fc24 	bl	8000a9c <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d908      	bls.n	8001270 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e146      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	42420000 	.word	0x42420000
 800126c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e9      	bne.n	8001250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a6 	beq.w	80013d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128e:	4b8b      	ldr	r3, [pc, #556]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10d      	bne.n	80012b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a87      	ldr	r2, [pc, #540]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b85      	ldr	r3, [pc, #532]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b2:	2301      	movs	r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b6:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <HAL_RCC_OscConfig+0x4c8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d118      	bne.n	80012f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c2:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <HAL_RCC_OscConfig+0x4c8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7e      	ldr	r2, [pc, #504]	; (80014c0 <HAL_RCC_OscConfig+0x4c8>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fbe5 	bl	8000a9c <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d6:	f7ff fbe1 	bl	8000a9c <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b64      	cmp	r3, #100	; 0x64
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e103      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b75      	ldr	r3, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0x4c8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x312>
 80012fc:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6213      	str	r3, [r2, #32]
 8001308:	e02d      	b.n	8001366 <HAL_RCC_OscConfig+0x36e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x334>
 8001312:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4a69      	ldr	r2, [pc, #420]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	4b67      	ldr	r3, [pc, #412]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a66      	ldr	r2, [pc, #408]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001324:	f023 0304 	bic.w	r3, r3, #4
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	e01c      	b.n	8001366 <HAL_RCC_OscConfig+0x36e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d10c      	bne.n	800134e <HAL_RCC_OscConfig+0x356>
 8001334:	4b61      	ldr	r3, [pc, #388]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4a60      	ldr	r2, [pc, #384]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6213      	str	r3, [r2, #32]
 8001340:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a5d      	ldr	r2, [pc, #372]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	e00b      	b.n	8001366 <HAL_RCC_OscConfig+0x36e>
 800134e:	4b5b      	ldr	r3, [pc, #364]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a5a      	ldr	r2, [pc, #360]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6213      	str	r3, [r2, #32]
 800135a:	4b58      	ldr	r3, [pc, #352]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a57      	ldr	r2, [pc, #348]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d015      	beq.n	800139a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb95 	bl	8000a9c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fb91 	bl	8000a9c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f241 3288 	movw	r2, #5000	; 0x1388
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0b1      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0ee      	beq.n	8001376 <HAL_RCC_OscConfig+0x37e>
 8001398:	e014      	b.n	80013c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fb7f 	bl	8000a9c <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	e00a      	b.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff fb7b 	bl	8000a9c <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e09b      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	4b40      	ldr	r3, [pc, #256]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ee      	bne.n	80013a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d105      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ca:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a3b      	ldr	r2, [pc, #236]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8087 	beq.w	80014ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e0:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d061      	beq.n	80014b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d146      	bne.n	8001482 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_RCC_OscConfig+0x4cc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb4f 	bl	8000a9c <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fb4b 	bl	8000a9c <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e06d      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	d108      	bne.n	800143c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	4921      	ldr	r1, [pc, #132]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a19      	ldr	r1, [r3, #32]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	430b      	orrs	r3, r1
 800144e:	491b      	ldr	r1, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x4cc>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fb1f 	bl	8000a9c <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff fb1b 	bl	8000a9c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e03d      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x46a>
 8001480:	e035      	b.n	80014ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_RCC_OscConfig+0x4cc>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fb08 	bl	8000a9c <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fb04 	bl	8000a9c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e026      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x498>
 80014ae:	e01e      	b.n	80014ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e019      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40007000 	.word	0x40007000
 80014c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x500>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0d0      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d910      	bls.n	8001540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 0207 	bic.w	r2, r3, #7
 8001526:	4965      	ldr	r1, [pc, #404]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b63      	ldr	r3, [pc, #396]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0b8      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d020      	beq.n	800158e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001562:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a52      	ldr	r2, [pc, #328]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800157a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	494d      	ldr	r1, [pc, #308]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d040      	beq.n	800161c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d115      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e07f      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e073      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e06b      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f023 0203 	bic.w	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4936      	ldr	r1, [pc, #216]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ec:	f7ff fa56 	bl	8000a9c <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	e00a      	b.n	800160a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f7ff fa52 	bl	8000a9c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e053      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 020c 	and.w	r2, r3, #12
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	429a      	cmp	r2, r3
 800161a:	d1eb      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d210      	bcs.n	800164c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 0207 	bic.w	r2, r3, #7
 8001632:	4922      	ldr	r1, [pc, #136]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e032      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4916      	ldr	r1, [pc, #88]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	490e      	ldr	r1, [pc, #56]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800168a:	f000 f821 	bl	80016d0 <HAL_RCC_GetSysClockFreq>
 800168e:	4602      	mov	r2, r0
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	490a      	ldr	r1, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	5ccb      	ldrb	r3, [r1, r3]
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_RCC_ClockConfig+0x1cc>)
 80016a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_ClockConfig+0x1d0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f9b4 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40022000 	.word	0x40022000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	080021d0 	.word	0x080021d0
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d0:	b490      	push	{r4, r7}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <HAL_RCC_GetSysClockFreq+0xac>)
 80016d8:	1d3c      	adds	r4, r7, #4
 80016da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016e0:	f240 2301 	movw	r3, #513	; 0x201
 80016e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b04      	cmp	r3, #4
 8001708:	d002      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x40>
 800170a:	2b08      	cmp	r3, #8
 800170c:	d003      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0x46>
 800170e:	e02b      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001712:	623b      	str	r3, [r7, #32]
      break;
 8001714:	e02b      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3328      	adds	r3, #40	; 0x28
 8001720:	443b      	add	r3, r7
 8001722:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001726:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	0c5b      	lsrs	r3, r3, #17
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	3328      	adds	r3, #40	; 0x28
 800173e:	443b      	add	r3, r7
 8001740:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001744:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_RCC_GetSysClockFreq+0xb4>)
 800174a:	fb03 f202 	mul.w	r2, r3, r2
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
 8001756:	e004      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	623b      	str	r3, [r7, #32]
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_RCC_GetSysClockFreq+0xb4>)
 800176a:	623b      	str	r3, [r7, #32]
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	6a3b      	ldr	r3, [r7, #32]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bc90      	pop	{r4, r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	08002164 	.word	0x08002164
 8001780:	40021000 	.word	0x40021000
 8001784:	007a1200 	.word	0x007a1200
 8001788:	003d0900 	.word	0x003d0900

0800178c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <RCC_Delay+0x34>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <RCC_Delay+0x38>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0a5b      	lsrs	r3, r3, #9
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017a8:	bf00      	nop
  }
  while (Delay --);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1e5a      	subs	r2, r3, #1
 80017ae:	60fa      	str	r2, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f9      	bne.n	80017a8 <RCC_Delay+0x1c>
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	20000000 	.word	0x20000000
 80017c4:	10624dd3 	.word	0x10624dd3

080017c8 <__errno>:
 80017c8:	4b01      	ldr	r3, [pc, #4]	; (80017d0 <__errno+0x8>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c

080017d4 <__libc_init_array>:
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	2600      	movs	r6, #0
 80017d8:	4d0c      	ldr	r5, [pc, #48]	; (800180c <__libc_init_array+0x38>)
 80017da:	4c0d      	ldr	r4, [pc, #52]	; (8001810 <__libc_init_array+0x3c>)
 80017dc:	1b64      	subs	r4, r4, r5
 80017de:	10a4      	asrs	r4, r4, #2
 80017e0:	42a6      	cmp	r6, r4
 80017e2:	d109      	bne.n	80017f8 <__libc_init_array+0x24>
 80017e4:	f000 fc9c 	bl	8002120 <_init>
 80017e8:	2600      	movs	r6, #0
 80017ea:	4d0a      	ldr	r5, [pc, #40]	; (8001814 <__libc_init_array+0x40>)
 80017ec:	4c0a      	ldr	r4, [pc, #40]	; (8001818 <__libc_init_array+0x44>)
 80017ee:	1b64      	subs	r4, r4, r5
 80017f0:	10a4      	asrs	r4, r4, #2
 80017f2:	42a6      	cmp	r6, r4
 80017f4:	d105      	bne.n	8001802 <__libc_init_array+0x2e>
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
 80017f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017fc:	4798      	blx	r3
 80017fe:	3601      	adds	r6, #1
 8001800:	e7ee      	b.n	80017e0 <__libc_init_array+0xc>
 8001802:	f855 3b04 	ldr.w	r3, [r5], #4
 8001806:	4798      	blx	r3
 8001808:	3601      	adds	r6, #1
 800180a:	e7f2      	b.n	80017f2 <__libc_init_array+0x1e>
 800180c:	08002214 	.word	0x08002214
 8001810:	08002214 	.word	0x08002214
 8001814:	08002214 	.word	0x08002214
 8001818:	08002218 	.word	0x08002218

0800181c <memset>:
 800181c:	4603      	mov	r3, r0
 800181e:	4402      	add	r2, r0
 8001820:	4293      	cmp	r3, r2
 8001822:	d100      	bne.n	8001826 <memset+0xa>
 8001824:	4770      	bx	lr
 8001826:	f803 1b01 	strb.w	r1, [r3], #1
 800182a:	e7f9      	b.n	8001820 <memset+0x4>

0800182c <siprintf>:
 800182c:	b40e      	push	{r1, r2, r3}
 800182e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001832:	b500      	push	{lr}
 8001834:	b09c      	sub	sp, #112	; 0x70
 8001836:	ab1d      	add	r3, sp, #116	; 0x74
 8001838:	9002      	str	r0, [sp, #8]
 800183a:	9006      	str	r0, [sp, #24]
 800183c:	9107      	str	r1, [sp, #28]
 800183e:	9104      	str	r1, [sp, #16]
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <siprintf+0x38>)
 8001842:	4909      	ldr	r1, [pc, #36]	; (8001868 <siprintf+0x3c>)
 8001844:	f853 2b04 	ldr.w	r2, [r3], #4
 8001848:	9105      	str	r1, [sp, #20]
 800184a:	6800      	ldr	r0, [r0, #0]
 800184c:	a902      	add	r1, sp, #8
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	f000 f868 	bl	8001924 <_svfiprintf_r>
 8001854:	2200      	movs	r2, #0
 8001856:	9b02      	ldr	r3, [sp, #8]
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	b01c      	add	sp, #112	; 0x70
 800185c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001860:	b003      	add	sp, #12
 8001862:	4770      	bx	lr
 8001864:	2000000c 	.word	0x2000000c
 8001868:	ffff0208 	.word	0xffff0208

0800186c <__ssputs_r>:
 800186c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001870:	688e      	ldr	r6, [r1, #8]
 8001872:	4682      	mov	sl, r0
 8001874:	429e      	cmp	r6, r3
 8001876:	460c      	mov	r4, r1
 8001878:	4690      	mov	r8, r2
 800187a:	461f      	mov	r7, r3
 800187c:	d838      	bhi.n	80018f0 <__ssputs_r+0x84>
 800187e:	898a      	ldrh	r2, [r1, #12]
 8001880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001884:	d032      	beq.n	80018ec <__ssputs_r+0x80>
 8001886:	6825      	ldr	r5, [r4, #0]
 8001888:	6909      	ldr	r1, [r1, #16]
 800188a:	3301      	adds	r3, #1
 800188c:	eba5 0901 	sub.w	r9, r5, r1
 8001890:	6965      	ldr	r5, [r4, #20]
 8001892:	444b      	add	r3, r9
 8001894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800189c:	106d      	asrs	r5, r5, #1
 800189e:	429d      	cmp	r5, r3
 80018a0:	bf38      	it	cc
 80018a2:	461d      	movcc	r5, r3
 80018a4:	0553      	lsls	r3, r2, #21
 80018a6:	d531      	bpl.n	800190c <__ssputs_r+0xa0>
 80018a8:	4629      	mov	r1, r5
 80018aa:	f000 fb6f 	bl	8001f8c <_malloc_r>
 80018ae:	4606      	mov	r6, r0
 80018b0:	b950      	cbnz	r0, 80018c8 <__ssputs_r+0x5c>
 80018b2:	230c      	movs	r3, #12
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f8ca 3000 	str.w	r3, [sl]
 80018bc:	89a3      	ldrh	r3, [r4, #12]
 80018be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c2:	81a3      	strh	r3, [r4, #12]
 80018c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c8:	464a      	mov	r2, r9
 80018ca:	6921      	ldr	r1, [r4, #16]
 80018cc:	f000 face 	bl	8001e6c <memcpy>
 80018d0:	89a3      	ldrh	r3, [r4, #12]
 80018d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80018d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018da:	81a3      	strh	r3, [r4, #12]
 80018dc:	6126      	str	r6, [r4, #16]
 80018de:	444e      	add	r6, r9
 80018e0:	6026      	str	r6, [r4, #0]
 80018e2:	463e      	mov	r6, r7
 80018e4:	6165      	str	r5, [r4, #20]
 80018e6:	eba5 0509 	sub.w	r5, r5, r9
 80018ea:	60a5      	str	r5, [r4, #8]
 80018ec:	42be      	cmp	r6, r7
 80018ee:	d900      	bls.n	80018f2 <__ssputs_r+0x86>
 80018f0:	463e      	mov	r6, r7
 80018f2:	4632      	mov	r2, r6
 80018f4:	4641      	mov	r1, r8
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	f000 fac6 	bl	8001e88 <memmove>
 80018fc:	68a3      	ldr	r3, [r4, #8]
 80018fe:	2000      	movs	r0, #0
 8001900:	1b9b      	subs	r3, r3, r6
 8001902:	60a3      	str	r3, [r4, #8]
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	4433      	add	r3, r6
 8001908:	6023      	str	r3, [r4, #0]
 800190a:	e7db      	b.n	80018c4 <__ssputs_r+0x58>
 800190c:	462a      	mov	r2, r5
 800190e:	f000 fbb1 	bl	8002074 <_realloc_r>
 8001912:	4606      	mov	r6, r0
 8001914:	2800      	cmp	r0, #0
 8001916:	d1e1      	bne.n	80018dc <__ssputs_r+0x70>
 8001918:	4650      	mov	r0, sl
 800191a:	6921      	ldr	r1, [r4, #16]
 800191c:	f000 face 	bl	8001ebc <_free_r>
 8001920:	e7c7      	b.n	80018b2 <__ssputs_r+0x46>
	...

08001924 <_svfiprintf_r>:
 8001924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001928:	4698      	mov	r8, r3
 800192a:	898b      	ldrh	r3, [r1, #12]
 800192c:	4607      	mov	r7, r0
 800192e:	061b      	lsls	r3, r3, #24
 8001930:	460d      	mov	r5, r1
 8001932:	4614      	mov	r4, r2
 8001934:	b09d      	sub	sp, #116	; 0x74
 8001936:	d50e      	bpl.n	8001956 <_svfiprintf_r+0x32>
 8001938:	690b      	ldr	r3, [r1, #16]
 800193a:	b963      	cbnz	r3, 8001956 <_svfiprintf_r+0x32>
 800193c:	2140      	movs	r1, #64	; 0x40
 800193e:	f000 fb25 	bl	8001f8c <_malloc_r>
 8001942:	6028      	str	r0, [r5, #0]
 8001944:	6128      	str	r0, [r5, #16]
 8001946:	b920      	cbnz	r0, 8001952 <_svfiprintf_r+0x2e>
 8001948:	230c      	movs	r3, #12
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	e0d1      	b.n	8001af6 <_svfiprintf_r+0x1d2>
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	616b      	str	r3, [r5, #20]
 8001956:	2300      	movs	r3, #0
 8001958:	9309      	str	r3, [sp, #36]	; 0x24
 800195a:	2320      	movs	r3, #32
 800195c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001960:	2330      	movs	r3, #48	; 0x30
 8001962:	f04f 0901 	mov.w	r9, #1
 8001966:	f8cd 800c 	str.w	r8, [sp, #12]
 800196a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001b10 <_svfiprintf_r+0x1ec>
 800196e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001972:	4623      	mov	r3, r4
 8001974:	469a      	mov	sl, r3
 8001976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800197a:	b10a      	cbz	r2, 8001980 <_svfiprintf_r+0x5c>
 800197c:	2a25      	cmp	r2, #37	; 0x25
 800197e:	d1f9      	bne.n	8001974 <_svfiprintf_r+0x50>
 8001980:	ebba 0b04 	subs.w	fp, sl, r4
 8001984:	d00b      	beq.n	800199e <_svfiprintf_r+0x7a>
 8001986:	465b      	mov	r3, fp
 8001988:	4622      	mov	r2, r4
 800198a:	4629      	mov	r1, r5
 800198c:	4638      	mov	r0, r7
 800198e:	f7ff ff6d 	bl	800186c <__ssputs_r>
 8001992:	3001      	adds	r0, #1
 8001994:	f000 80aa 	beq.w	8001aec <_svfiprintf_r+0x1c8>
 8001998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800199a:	445a      	add	r2, fp
 800199c:	9209      	str	r2, [sp, #36]	; 0x24
 800199e:	f89a 3000 	ldrb.w	r3, [sl]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80a2 	beq.w	8001aec <_svfiprintf_r+0x1c8>
 80019a8:	2300      	movs	r3, #0
 80019aa:	f04f 32ff 	mov.w	r2, #4294967295
 80019ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019b2:	f10a 0a01 	add.w	sl, sl, #1
 80019b6:	9304      	str	r3, [sp, #16]
 80019b8:	9307      	str	r3, [sp, #28]
 80019ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019be:	931a      	str	r3, [sp, #104]	; 0x68
 80019c0:	4654      	mov	r4, sl
 80019c2:	2205      	movs	r2, #5
 80019c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019c8:	4851      	ldr	r0, [pc, #324]	; (8001b10 <_svfiprintf_r+0x1ec>)
 80019ca:	f000 fa41 	bl	8001e50 <memchr>
 80019ce:	9a04      	ldr	r2, [sp, #16]
 80019d0:	b9d8      	cbnz	r0, 8001a0a <_svfiprintf_r+0xe6>
 80019d2:	06d0      	lsls	r0, r2, #27
 80019d4:	bf44      	itt	mi
 80019d6:	2320      	movmi	r3, #32
 80019d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019dc:	0711      	lsls	r1, r2, #28
 80019de:	bf44      	itt	mi
 80019e0:	232b      	movmi	r3, #43	; 0x2b
 80019e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019e6:	f89a 3000 	ldrb.w	r3, [sl]
 80019ea:	2b2a      	cmp	r3, #42	; 0x2a
 80019ec:	d015      	beq.n	8001a1a <_svfiprintf_r+0xf6>
 80019ee:	4654      	mov	r4, sl
 80019f0:	2000      	movs	r0, #0
 80019f2:	f04f 0c0a 	mov.w	ip, #10
 80019f6:	9a07      	ldr	r2, [sp, #28]
 80019f8:	4621      	mov	r1, r4
 80019fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019fe:	3b30      	subs	r3, #48	; 0x30
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d94e      	bls.n	8001aa2 <_svfiprintf_r+0x17e>
 8001a04:	b1b0      	cbz	r0, 8001a34 <_svfiprintf_r+0x110>
 8001a06:	9207      	str	r2, [sp, #28]
 8001a08:	e014      	b.n	8001a34 <_svfiprintf_r+0x110>
 8001a0a:	eba0 0308 	sub.w	r3, r0, r8
 8001a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	46a2      	mov	sl, r4
 8001a16:	9304      	str	r3, [sp, #16]
 8001a18:	e7d2      	b.n	80019c0 <_svfiprintf_r+0x9c>
 8001a1a:	9b03      	ldr	r3, [sp, #12]
 8001a1c:	1d19      	adds	r1, r3, #4
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	9103      	str	r1, [sp, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bfbb      	ittet	lt
 8001a26:	425b      	neglt	r3, r3
 8001a28:	f042 0202 	orrlt.w	r2, r2, #2
 8001a2c:	9307      	strge	r3, [sp, #28]
 8001a2e:	9307      	strlt	r3, [sp, #28]
 8001a30:	bfb8      	it	lt
 8001a32:	9204      	strlt	r2, [sp, #16]
 8001a34:	7823      	ldrb	r3, [r4, #0]
 8001a36:	2b2e      	cmp	r3, #46	; 0x2e
 8001a38:	d10c      	bne.n	8001a54 <_svfiprintf_r+0x130>
 8001a3a:	7863      	ldrb	r3, [r4, #1]
 8001a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a3e:	d135      	bne.n	8001aac <_svfiprintf_r+0x188>
 8001a40:	9b03      	ldr	r3, [sp, #12]
 8001a42:	3402      	adds	r4, #2
 8001a44:	1d1a      	adds	r2, r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	9203      	str	r2, [sp, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bfb8      	it	lt
 8001a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a52:	9305      	str	r3, [sp, #20]
 8001a54:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001b14 <_svfiprintf_r+0x1f0>
 8001a58:	2203      	movs	r2, #3
 8001a5a:	4650      	mov	r0, sl
 8001a5c:	7821      	ldrb	r1, [r4, #0]
 8001a5e:	f000 f9f7 	bl	8001e50 <memchr>
 8001a62:	b140      	cbz	r0, 8001a76 <_svfiprintf_r+0x152>
 8001a64:	2340      	movs	r3, #64	; 0x40
 8001a66:	eba0 000a 	sub.w	r0, r0, sl
 8001a6a:	fa03 f000 	lsl.w	r0, r3, r0
 8001a6e:	9b04      	ldr	r3, [sp, #16]
 8001a70:	3401      	adds	r4, #1
 8001a72:	4303      	orrs	r3, r0
 8001a74:	9304      	str	r3, [sp, #16]
 8001a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a7a:	2206      	movs	r2, #6
 8001a7c:	4826      	ldr	r0, [pc, #152]	; (8001b18 <_svfiprintf_r+0x1f4>)
 8001a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a82:	f000 f9e5 	bl	8001e50 <memchr>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d038      	beq.n	8001afc <_svfiprintf_r+0x1d8>
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <_svfiprintf_r+0x1f8>)
 8001a8c:	bb1b      	cbnz	r3, 8001ad6 <_svfiprintf_r+0x1b2>
 8001a8e:	9b03      	ldr	r3, [sp, #12]
 8001a90:	3307      	adds	r3, #7
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	3308      	adds	r3, #8
 8001a98:	9303      	str	r3, [sp, #12]
 8001a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a9c:	4433      	add	r3, r6
 8001a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8001aa0:	e767      	b.n	8001972 <_svfiprintf_r+0x4e>
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8001aaa:	e7a5      	b.n	80019f8 <_svfiprintf_r+0xd4>
 8001aac:	2300      	movs	r3, #0
 8001aae:	f04f 0c0a 	mov.w	ip, #10
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	3401      	adds	r4, #1
 8001ab6:	9305      	str	r3, [sp, #20]
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001abe:	3a30      	subs	r2, #48	; 0x30
 8001ac0:	2a09      	cmp	r2, #9
 8001ac2:	d903      	bls.n	8001acc <_svfiprintf_r+0x1a8>
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0c5      	beq.n	8001a54 <_svfiprintf_r+0x130>
 8001ac8:	9105      	str	r1, [sp, #20]
 8001aca:	e7c3      	b.n	8001a54 <_svfiprintf_r+0x130>
 8001acc:	4604      	mov	r4, r0
 8001ace:	2301      	movs	r3, #1
 8001ad0:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ad4:	e7f0      	b.n	8001ab8 <_svfiprintf_r+0x194>
 8001ad6:	ab03      	add	r3, sp, #12
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	462a      	mov	r2, r5
 8001adc:	4638      	mov	r0, r7
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_svfiprintf_r+0x1fc>)
 8001ae0:	a904      	add	r1, sp, #16
 8001ae2:	f3af 8000 	nop.w
 8001ae6:	1c42      	adds	r2, r0, #1
 8001ae8:	4606      	mov	r6, r0
 8001aea:	d1d6      	bne.n	8001a9a <_svfiprintf_r+0x176>
 8001aec:	89ab      	ldrh	r3, [r5, #12]
 8001aee:	065b      	lsls	r3, r3, #25
 8001af0:	f53f af2c 	bmi.w	800194c <_svfiprintf_r+0x28>
 8001af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001af6:	b01d      	add	sp, #116	; 0x74
 8001af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001afc:	ab03      	add	r3, sp, #12
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	462a      	mov	r2, r5
 8001b02:	4638      	mov	r0, r7
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <_svfiprintf_r+0x1fc>)
 8001b06:	a904      	add	r1, sp, #16
 8001b08:	f000 f87c 	bl	8001c04 <_printf_i>
 8001b0c:	e7eb      	b.n	8001ae6 <_svfiprintf_r+0x1c2>
 8001b0e:	bf00      	nop
 8001b10:	080021e0 	.word	0x080021e0
 8001b14:	080021e6 	.word	0x080021e6
 8001b18:	080021ea 	.word	0x080021ea
 8001b1c:	00000000 	.word	0x00000000
 8001b20:	0800186d 	.word	0x0800186d

08001b24 <_printf_common>:
 8001b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b28:	4616      	mov	r6, r2
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	688a      	ldr	r2, [r1, #8]
 8001b2e:	690b      	ldr	r3, [r1, #16]
 8001b30:	4607      	mov	r7, r0
 8001b32:	4293      	cmp	r3, r2
 8001b34:	bfb8      	it	lt
 8001b36:	4613      	movlt	r3, r2
 8001b38:	6033      	str	r3, [r6, #0]
 8001b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b3e:	460c      	mov	r4, r1
 8001b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b44:	b10a      	cbz	r2, 8001b4a <_printf_common+0x26>
 8001b46:	3301      	adds	r3, #1
 8001b48:	6033      	str	r3, [r6, #0]
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	0699      	lsls	r1, r3, #26
 8001b4e:	bf42      	ittt	mi
 8001b50:	6833      	ldrmi	r3, [r6, #0]
 8001b52:	3302      	addmi	r3, #2
 8001b54:	6033      	strmi	r3, [r6, #0]
 8001b56:	6825      	ldr	r5, [r4, #0]
 8001b58:	f015 0506 	ands.w	r5, r5, #6
 8001b5c:	d106      	bne.n	8001b6c <_printf_common+0x48>
 8001b5e:	f104 0a19 	add.w	sl, r4, #25
 8001b62:	68e3      	ldr	r3, [r4, #12]
 8001b64:	6832      	ldr	r2, [r6, #0]
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	42ab      	cmp	r3, r5
 8001b6a:	dc28      	bgt.n	8001bbe <_printf_common+0x9a>
 8001b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b70:	1e13      	subs	r3, r2, #0
 8001b72:	6822      	ldr	r2, [r4, #0]
 8001b74:	bf18      	it	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	0692      	lsls	r2, r2, #26
 8001b7a:	d42d      	bmi.n	8001bd8 <_printf_common+0xb4>
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	4638      	mov	r0, r7
 8001b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b84:	47c0      	blx	r8
 8001b86:	3001      	adds	r0, #1
 8001b88:	d020      	beq.n	8001bcc <_printf_common+0xa8>
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	68e5      	ldr	r5, [r4, #12]
 8001b8e:	f003 0306 	and.w	r3, r3, #6
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf18      	it	ne
 8001b96:	2500      	movne	r5, #0
 8001b98:	6832      	ldr	r2, [r6, #0]
 8001b9a:	f04f 0600 	mov.w	r6, #0
 8001b9e:	68a3      	ldr	r3, [r4, #8]
 8001ba0:	bf08      	it	eq
 8001ba2:	1aad      	subeq	r5, r5, r2
 8001ba4:	6922      	ldr	r2, [r4, #16]
 8001ba6:	bf08      	it	eq
 8001ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bac:	4293      	cmp	r3, r2
 8001bae:	bfc4      	itt	gt
 8001bb0:	1a9b      	subgt	r3, r3, r2
 8001bb2:	18ed      	addgt	r5, r5, r3
 8001bb4:	341a      	adds	r4, #26
 8001bb6:	42b5      	cmp	r5, r6
 8001bb8:	d11a      	bne.n	8001bf0 <_printf_common+0xcc>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e008      	b.n	8001bd0 <_printf_common+0xac>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	4652      	mov	r2, sl
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	4638      	mov	r0, r7
 8001bc6:	47c0      	blx	r8
 8001bc8:	3001      	adds	r0, #1
 8001bca:	d103      	bne.n	8001bd4 <_printf_common+0xb0>
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd4:	3501      	adds	r5, #1
 8001bd6:	e7c4      	b.n	8001b62 <_printf_common+0x3e>
 8001bd8:	2030      	movs	r0, #48	; 0x30
 8001bda:	18e1      	adds	r1, r4, r3
 8001bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001be6:	4422      	add	r2, r4
 8001be8:	3302      	adds	r3, #2
 8001bea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bee:	e7c5      	b.n	8001b7c <_printf_common+0x58>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	4638      	mov	r0, r7
 8001bf8:	47c0      	blx	r8
 8001bfa:	3001      	adds	r0, #1
 8001bfc:	d0e6      	beq.n	8001bcc <_printf_common+0xa8>
 8001bfe:	3601      	adds	r6, #1
 8001c00:	e7d9      	b.n	8001bb6 <_printf_common+0x92>
	...

08001c04 <_printf_i>:
 8001c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c08:	7e0f      	ldrb	r7, [r1, #24]
 8001c0a:	4691      	mov	r9, r2
 8001c0c:	2f78      	cmp	r7, #120	; 0x78
 8001c0e:	4680      	mov	r8, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	469a      	mov	sl, r3
 8001c14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c1a:	d807      	bhi.n	8001c2c <_printf_i+0x28>
 8001c1c:	2f62      	cmp	r7, #98	; 0x62
 8001c1e:	d80a      	bhi.n	8001c36 <_printf_i+0x32>
 8001c20:	2f00      	cmp	r7, #0
 8001c22:	f000 80d9 	beq.w	8001dd8 <_printf_i+0x1d4>
 8001c26:	2f58      	cmp	r7, #88	; 0x58
 8001c28:	f000 80a4 	beq.w	8001d74 <_printf_i+0x170>
 8001c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c34:	e03a      	b.n	8001cac <_printf_i+0xa8>
 8001c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c3a:	2b15      	cmp	r3, #21
 8001c3c:	d8f6      	bhi.n	8001c2c <_printf_i+0x28>
 8001c3e:	a101      	add	r1, pc, #4	; (adr r1, 8001c44 <_printf_i+0x40>)
 8001c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c44:	08001c9d 	.word	0x08001c9d
 8001c48:	08001cb1 	.word	0x08001cb1
 8001c4c:	08001c2d 	.word	0x08001c2d
 8001c50:	08001c2d 	.word	0x08001c2d
 8001c54:	08001c2d 	.word	0x08001c2d
 8001c58:	08001c2d 	.word	0x08001c2d
 8001c5c:	08001cb1 	.word	0x08001cb1
 8001c60:	08001c2d 	.word	0x08001c2d
 8001c64:	08001c2d 	.word	0x08001c2d
 8001c68:	08001c2d 	.word	0x08001c2d
 8001c6c:	08001c2d 	.word	0x08001c2d
 8001c70:	08001dbf 	.word	0x08001dbf
 8001c74:	08001ce1 	.word	0x08001ce1
 8001c78:	08001da1 	.word	0x08001da1
 8001c7c:	08001c2d 	.word	0x08001c2d
 8001c80:	08001c2d 	.word	0x08001c2d
 8001c84:	08001de1 	.word	0x08001de1
 8001c88:	08001c2d 	.word	0x08001c2d
 8001c8c:	08001ce1 	.word	0x08001ce1
 8001c90:	08001c2d 	.word	0x08001c2d
 8001c94:	08001c2d 	.word	0x08001c2d
 8001c98:	08001da9 	.word	0x08001da9
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	1d1a      	adds	r2, r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	602a      	str	r2, [r5, #0]
 8001ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0a4      	b.n	8001dfa <_printf_i+0x1f6>
 8001cb0:	6820      	ldr	r0, [r4, #0]
 8001cb2:	6829      	ldr	r1, [r5, #0]
 8001cb4:	0606      	lsls	r6, r0, #24
 8001cb6:	f101 0304 	add.w	r3, r1, #4
 8001cba:	d50a      	bpl.n	8001cd2 <_printf_i+0xce>
 8001cbc:	680e      	ldr	r6, [r1, #0]
 8001cbe:	602b      	str	r3, [r5, #0]
 8001cc0:	2e00      	cmp	r6, #0
 8001cc2:	da03      	bge.n	8001ccc <_printf_i+0xc8>
 8001cc4:	232d      	movs	r3, #45	; 0x2d
 8001cc6:	4276      	negs	r6, r6
 8001cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ccc:	230a      	movs	r3, #10
 8001cce:	485e      	ldr	r0, [pc, #376]	; (8001e48 <_printf_i+0x244>)
 8001cd0:	e019      	b.n	8001d06 <_printf_i+0x102>
 8001cd2:	680e      	ldr	r6, [r1, #0]
 8001cd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cd8:	602b      	str	r3, [r5, #0]
 8001cda:	bf18      	it	ne
 8001cdc:	b236      	sxthne	r6, r6
 8001cde:	e7ef      	b.n	8001cc0 <_printf_i+0xbc>
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	6820      	ldr	r0, [r4, #0]
 8001ce4:	1d19      	adds	r1, r3, #4
 8001ce6:	6029      	str	r1, [r5, #0]
 8001ce8:	0601      	lsls	r1, r0, #24
 8001cea:	d501      	bpl.n	8001cf0 <_printf_i+0xec>
 8001cec:	681e      	ldr	r6, [r3, #0]
 8001cee:	e002      	b.n	8001cf6 <_printf_i+0xf2>
 8001cf0:	0646      	lsls	r6, r0, #25
 8001cf2:	d5fb      	bpl.n	8001cec <_printf_i+0xe8>
 8001cf4:	881e      	ldrh	r6, [r3, #0]
 8001cf6:	2f6f      	cmp	r7, #111	; 0x6f
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2308      	moveq	r3, #8
 8001cfc:	230a      	movne	r3, #10
 8001cfe:	4852      	ldr	r0, [pc, #328]	; (8001e48 <_printf_i+0x244>)
 8001d00:	2100      	movs	r1, #0
 8001d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d06:	6865      	ldr	r5, [r4, #4]
 8001d08:	2d00      	cmp	r5, #0
 8001d0a:	bfa8      	it	ge
 8001d0c:	6821      	ldrge	r1, [r4, #0]
 8001d0e:	60a5      	str	r5, [r4, #8]
 8001d10:	bfa4      	itt	ge
 8001d12:	f021 0104 	bicge.w	r1, r1, #4
 8001d16:	6021      	strge	r1, [r4, #0]
 8001d18:	b90e      	cbnz	r6, 8001d1e <_printf_i+0x11a>
 8001d1a:	2d00      	cmp	r5, #0
 8001d1c:	d04d      	beq.n	8001dba <_printf_i+0x1b6>
 8001d1e:	4615      	mov	r5, r2
 8001d20:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d24:	fb03 6711 	mls	r7, r3, r1, r6
 8001d28:	5dc7      	ldrb	r7, [r0, r7]
 8001d2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d2e:	4637      	mov	r7, r6
 8001d30:	42bb      	cmp	r3, r7
 8001d32:	460e      	mov	r6, r1
 8001d34:	d9f4      	bls.n	8001d20 <_printf_i+0x11c>
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d10b      	bne.n	8001d52 <_printf_i+0x14e>
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	07de      	lsls	r6, r3, #31
 8001d3e:	d508      	bpl.n	8001d52 <_printf_i+0x14e>
 8001d40:	6923      	ldr	r3, [r4, #16]
 8001d42:	6861      	ldr	r1, [r4, #4]
 8001d44:	4299      	cmp	r1, r3
 8001d46:	bfde      	ittt	le
 8001d48:	2330      	movle	r3, #48	; 0x30
 8001d4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d52:	1b52      	subs	r2, r2, r5
 8001d54:	6122      	str	r2, [r4, #16]
 8001d56:	464b      	mov	r3, r9
 8001d58:	4621      	mov	r1, r4
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	f8cd a000 	str.w	sl, [sp]
 8001d60:	aa03      	add	r2, sp, #12
 8001d62:	f7ff fedf 	bl	8001b24 <_printf_common>
 8001d66:	3001      	adds	r0, #1
 8001d68:	d14c      	bne.n	8001e04 <_printf_i+0x200>
 8001d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6e:	b004      	add	sp, #16
 8001d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d74:	4834      	ldr	r0, [pc, #208]	; (8001e48 <_printf_i+0x244>)
 8001d76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001d7a:	6829      	ldr	r1, [r5, #0]
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d82:	6029      	str	r1, [r5, #0]
 8001d84:	061d      	lsls	r5, r3, #24
 8001d86:	d514      	bpl.n	8001db2 <_printf_i+0x1ae>
 8001d88:	07df      	lsls	r7, r3, #31
 8001d8a:	bf44      	itt	mi
 8001d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8001d90:	6023      	strmi	r3, [r4, #0]
 8001d92:	b91e      	cbnz	r6, 8001d9c <_printf_i+0x198>
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	f023 0320 	bic.w	r3, r3, #32
 8001d9a:	6023      	str	r3, [r4, #0]
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	e7af      	b.n	8001d00 <_printf_i+0xfc>
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	6023      	str	r3, [r4, #0]
 8001da8:	2378      	movs	r3, #120	; 0x78
 8001daa:	4828      	ldr	r0, [pc, #160]	; (8001e4c <_printf_i+0x248>)
 8001dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001db0:	e7e3      	b.n	8001d7a <_printf_i+0x176>
 8001db2:	0659      	lsls	r1, r3, #25
 8001db4:	bf48      	it	mi
 8001db6:	b2b6      	uxthmi	r6, r6
 8001db8:	e7e6      	b.n	8001d88 <_printf_i+0x184>
 8001dba:	4615      	mov	r5, r2
 8001dbc:	e7bb      	b.n	8001d36 <_printf_i+0x132>
 8001dbe:	682b      	ldr	r3, [r5, #0]
 8001dc0:	6826      	ldr	r6, [r4, #0]
 8001dc2:	1d18      	adds	r0, r3, #4
 8001dc4:	6961      	ldr	r1, [r4, #20]
 8001dc6:	6028      	str	r0, [r5, #0]
 8001dc8:	0635      	lsls	r5, r6, #24
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	d501      	bpl.n	8001dd2 <_printf_i+0x1ce>
 8001dce:	6019      	str	r1, [r3, #0]
 8001dd0:	e002      	b.n	8001dd8 <_printf_i+0x1d4>
 8001dd2:	0670      	lsls	r0, r6, #25
 8001dd4:	d5fb      	bpl.n	8001dce <_printf_i+0x1ca>
 8001dd6:	8019      	strh	r1, [r3, #0]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	4615      	mov	r5, r2
 8001ddc:	6123      	str	r3, [r4, #16]
 8001dde:	e7ba      	b.n	8001d56 <_printf_i+0x152>
 8001de0:	682b      	ldr	r3, [r5, #0]
 8001de2:	2100      	movs	r1, #0
 8001de4:	1d1a      	adds	r2, r3, #4
 8001de6:	602a      	str	r2, [r5, #0]
 8001de8:	681d      	ldr	r5, [r3, #0]
 8001dea:	6862      	ldr	r2, [r4, #4]
 8001dec:	4628      	mov	r0, r5
 8001dee:	f000 f82f 	bl	8001e50 <memchr>
 8001df2:	b108      	cbz	r0, 8001df8 <_printf_i+0x1f4>
 8001df4:	1b40      	subs	r0, r0, r5
 8001df6:	6060      	str	r0, [r4, #4]
 8001df8:	6863      	ldr	r3, [r4, #4]
 8001dfa:	6123      	str	r3, [r4, #16]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e02:	e7a8      	b.n	8001d56 <_printf_i+0x152>
 8001e04:	462a      	mov	r2, r5
 8001e06:	4649      	mov	r1, r9
 8001e08:	4640      	mov	r0, r8
 8001e0a:	6923      	ldr	r3, [r4, #16]
 8001e0c:	47d0      	blx	sl
 8001e0e:	3001      	adds	r0, #1
 8001e10:	d0ab      	beq.n	8001d6a <_printf_i+0x166>
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	079b      	lsls	r3, r3, #30
 8001e16:	d413      	bmi.n	8001e40 <_printf_i+0x23c>
 8001e18:	68e0      	ldr	r0, [r4, #12]
 8001e1a:	9b03      	ldr	r3, [sp, #12]
 8001e1c:	4298      	cmp	r0, r3
 8001e1e:	bfb8      	it	lt
 8001e20:	4618      	movlt	r0, r3
 8001e22:	e7a4      	b.n	8001d6e <_printf_i+0x16a>
 8001e24:	2301      	movs	r3, #1
 8001e26:	4632      	mov	r2, r6
 8001e28:	4649      	mov	r1, r9
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	47d0      	blx	sl
 8001e2e:	3001      	adds	r0, #1
 8001e30:	d09b      	beq.n	8001d6a <_printf_i+0x166>
 8001e32:	3501      	adds	r5, #1
 8001e34:	68e3      	ldr	r3, [r4, #12]
 8001e36:	9903      	ldr	r1, [sp, #12]
 8001e38:	1a5b      	subs	r3, r3, r1
 8001e3a:	42ab      	cmp	r3, r5
 8001e3c:	dcf2      	bgt.n	8001e24 <_printf_i+0x220>
 8001e3e:	e7eb      	b.n	8001e18 <_printf_i+0x214>
 8001e40:	2500      	movs	r5, #0
 8001e42:	f104 0619 	add.w	r6, r4, #25
 8001e46:	e7f5      	b.n	8001e34 <_printf_i+0x230>
 8001e48:	080021f1 	.word	0x080021f1
 8001e4c:	08002202 	.word	0x08002202

08001e50 <memchr>:
 8001e50:	4603      	mov	r3, r0
 8001e52:	b510      	push	{r4, lr}
 8001e54:	b2c9      	uxtb	r1, r1
 8001e56:	4402      	add	r2, r0
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	d101      	bne.n	8001e62 <memchr+0x12>
 8001e5e:	2000      	movs	r0, #0
 8001e60:	e003      	b.n	8001e6a <memchr+0x1a>
 8001e62:	7804      	ldrb	r4, [r0, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	428c      	cmp	r4, r1
 8001e68:	d1f6      	bne.n	8001e58 <memchr+0x8>
 8001e6a:	bd10      	pop	{r4, pc}

08001e6c <memcpy>:
 8001e6c:	440a      	add	r2, r1
 8001e6e:	4291      	cmp	r1, r2
 8001e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8001e74:	d100      	bne.n	8001e78 <memcpy+0xc>
 8001e76:	4770      	bx	lr
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e7e:	4291      	cmp	r1, r2
 8001e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e84:	d1f9      	bne.n	8001e7a <memcpy+0xe>
 8001e86:	bd10      	pop	{r4, pc}

08001e88 <memmove>:
 8001e88:	4288      	cmp	r0, r1
 8001e8a:	b510      	push	{r4, lr}
 8001e8c:	eb01 0402 	add.w	r4, r1, r2
 8001e90:	d902      	bls.n	8001e98 <memmove+0x10>
 8001e92:	4284      	cmp	r4, r0
 8001e94:	4623      	mov	r3, r4
 8001e96:	d807      	bhi.n	8001ea8 <memmove+0x20>
 8001e98:	1e43      	subs	r3, r0, #1
 8001e9a:	42a1      	cmp	r1, r4
 8001e9c:	d008      	beq.n	8001eb0 <memmove+0x28>
 8001e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ea6:	e7f8      	b.n	8001e9a <memmove+0x12>
 8001ea8:	4601      	mov	r1, r0
 8001eaa:	4402      	add	r2, r0
 8001eac:	428a      	cmp	r2, r1
 8001eae:	d100      	bne.n	8001eb2 <memmove+0x2a>
 8001eb0:	bd10      	pop	{r4, pc}
 8001eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001eba:	e7f7      	b.n	8001eac <memmove+0x24>

08001ebc <_free_r>:
 8001ebc:	b538      	push	{r3, r4, r5, lr}
 8001ebe:	4605      	mov	r5, r0
 8001ec0:	2900      	cmp	r1, #0
 8001ec2:	d040      	beq.n	8001f46 <_free_r+0x8a>
 8001ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ec8:	1f0c      	subs	r4, r1, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bfb8      	it	lt
 8001ece:	18e4      	addlt	r4, r4, r3
 8001ed0:	f000 f910 	bl	80020f4 <__malloc_lock>
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <_free_r+0x8c>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	b933      	cbnz	r3, 8001ee8 <_free_r+0x2c>
 8001eda:	6063      	str	r3, [r4, #4]
 8001edc:	6014      	str	r4, [r2, #0]
 8001ede:	4628      	mov	r0, r5
 8001ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ee4:	f000 b90c 	b.w	8002100 <__malloc_unlock>
 8001ee8:	42a3      	cmp	r3, r4
 8001eea:	d908      	bls.n	8001efe <_free_r+0x42>
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	1821      	adds	r1, r4, r0
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	bf01      	itttt	eq
 8001ef4:	6819      	ldreq	r1, [r3, #0]
 8001ef6:	685b      	ldreq	r3, [r3, #4]
 8001ef8:	1809      	addeq	r1, r1, r0
 8001efa:	6021      	streq	r1, [r4, #0]
 8001efc:	e7ed      	b.n	8001eda <_free_r+0x1e>
 8001efe:	461a      	mov	r2, r3
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	b10b      	cbz	r3, 8001f08 <_free_r+0x4c>
 8001f04:	42a3      	cmp	r3, r4
 8001f06:	d9fa      	bls.n	8001efe <_free_r+0x42>
 8001f08:	6811      	ldr	r1, [r2, #0]
 8001f0a:	1850      	adds	r0, r2, r1
 8001f0c:	42a0      	cmp	r0, r4
 8001f0e:	d10b      	bne.n	8001f28 <_free_r+0x6c>
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	4401      	add	r1, r0
 8001f14:	1850      	adds	r0, r2, r1
 8001f16:	4283      	cmp	r3, r0
 8001f18:	6011      	str	r1, [r2, #0]
 8001f1a:	d1e0      	bne.n	8001ede <_free_r+0x22>
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4401      	add	r1, r0
 8001f22:	6011      	str	r1, [r2, #0]
 8001f24:	6053      	str	r3, [r2, #4]
 8001f26:	e7da      	b.n	8001ede <_free_r+0x22>
 8001f28:	d902      	bls.n	8001f30 <_free_r+0x74>
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	602b      	str	r3, [r5, #0]
 8001f2e:	e7d6      	b.n	8001ede <_free_r+0x22>
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	1821      	adds	r1, r4, r0
 8001f34:	428b      	cmp	r3, r1
 8001f36:	bf01      	itttt	eq
 8001f38:	6819      	ldreq	r1, [r3, #0]
 8001f3a:	685b      	ldreq	r3, [r3, #4]
 8001f3c:	1809      	addeq	r1, r1, r0
 8001f3e:	6021      	streq	r1, [r4, #0]
 8001f40:	6063      	str	r3, [r4, #4]
 8001f42:	6054      	str	r4, [r2, #4]
 8001f44:	e7cb      	b.n	8001ede <_free_r+0x22>
 8001f46:	bd38      	pop	{r3, r4, r5, pc}
 8001f48:	200000a8 	.word	0x200000a8

08001f4c <sbrk_aligned>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	4e0e      	ldr	r6, [pc, #56]	; (8001f88 <sbrk_aligned+0x3c>)
 8001f50:	460c      	mov	r4, r1
 8001f52:	6831      	ldr	r1, [r6, #0]
 8001f54:	4605      	mov	r5, r0
 8001f56:	b911      	cbnz	r1, 8001f5e <sbrk_aligned+0x12>
 8001f58:	f000 f8bc 	bl	80020d4 <_sbrk_r>
 8001f5c:	6030      	str	r0, [r6, #0]
 8001f5e:	4621      	mov	r1, r4
 8001f60:	4628      	mov	r0, r5
 8001f62:	f000 f8b7 	bl	80020d4 <_sbrk_r>
 8001f66:	1c43      	adds	r3, r0, #1
 8001f68:	d00a      	beq.n	8001f80 <sbrk_aligned+0x34>
 8001f6a:	1cc4      	adds	r4, r0, #3
 8001f6c:	f024 0403 	bic.w	r4, r4, #3
 8001f70:	42a0      	cmp	r0, r4
 8001f72:	d007      	beq.n	8001f84 <sbrk_aligned+0x38>
 8001f74:	1a21      	subs	r1, r4, r0
 8001f76:	4628      	mov	r0, r5
 8001f78:	f000 f8ac 	bl	80020d4 <_sbrk_r>
 8001f7c:	3001      	adds	r0, #1
 8001f7e:	d101      	bne.n	8001f84 <sbrk_aligned+0x38>
 8001f80:	f04f 34ff 	mov.w	r4, #4294967295
 8001f84:	4620      	mov	r0, r4
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
 8001f88:	200000ac 	.word	0x200000ac

08001f8c <_malloc_r>:
 8001f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f90:	1ccd      	adds	r5, r1, #3
 8001f92:	f025 0503 	bic.w	r5, r5, #3
 8001f96:	3508      	adds	r5, #8
 8001f98:	2d0c      	cmp	r5, #12
 8001f9a:	bf38      	it	cc
 8001f9c:	250c      	movcc	r5, #12
 8001f9e:	2d00      	cmp	r5, #0
 8001fa0:	4607      	mov	r7, r0
 8001fa2:	db01      	blt.n	8001fa8 <_malloc_r+0x1c>
 8001fa4:	42a9      	cmp	r1, r5
 8001fa6:	d905      	bls.n	8001fb4 <_malloc_r+0x28>
 8001fa8:	230c      	movs	r3, #12
 8001faa:	2600      	movs	r6, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4630      	mov	r0, r6
 8001fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fb4:	4e2e      	ldr	r6, [pc, #184]	; (8002070 <_malloc_r+0xe4>)
 8001fb6:	f000 f89d 	bl	80020f4 <__malloc_lock>
 8001fba:	6833      	ldr	r3, [r6, #0]
 8001fbc:	461c      	mov	r4, r3
 8001fbe:	bb34      	cbnz	r4, 800200e <_malloc_r+0x82>
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	f7ff ffc2 	bl	8001f4c <sbrk_aligned>
 8001fc8:	1c43      	adds	r3, r0, #1
 8001fca:	4604      	mov	r4, r0
 8001fcc:	d14d      	bne.n	800206a <_malloc_r+0xde>
 8001fce:	6834      	ldr	r4, [r6, #0]
 8001fd0:	4626      	mov	r6, r4
 8001fd2:	2e00      	cmp	r6, #0
 8001fd4:	d140      	bne.n	8002058 <_malloc_r+0xcc>
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	4631      	mov	r1, r6
 8001fda:	4638      	mov	r0, r7
 8001fdc:	eb04 0803 	add.w	r8, r4, r3
 8001fe0:	f000 f878 	bl	80020d4 <_sbrk_r>
 8001fe4:	4580      	cmp	r8, r0
 8001fe6:	d13a      	bne.n	800205e <_malloc_r+0xd2>
 8001fe8:	6821      	ldr	r1, [r4, #0]
 8001fea:	3503      	adds	r5, #3
 8001fec:	1a6d      	subs	r5, r5, r1
 8001fee:	f025 0503 	bic.w	r5, r5, #3
 8001ff2:	3508      	adds	r5, #8
 8001ff4:	2d0c      	cmp	r5, #12
 8001ff6:	bf38      	it	cc
 8001ff8:	250c      	movcc	r5, #12
 8001ffa:	4638      	mov	r0, r7
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	f7ff ffa5 	bl	8001f4c <sbrk_aligned>
 8002002:	3001      	adds	r0, #1
 8002004:	d02b      	beq.n	800205e <_malloc_r+0xd2>
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	442b      	add	r3, r5
 800200a:	6023      	str	r3, [r4, #0]
 800200c:	e00e      	b.n	800202c <_malloc_r+0xa0>
 800200e:	6822      	ldr	r2, [r4, #0]
 8002010:	1b52      	subs	r2, r2, r5
 8002012:	d41e      	bmi.n	8002052 <_malloc_r+0xc6>
 8002014:	2a0b      	cmp	r2, #11
 8002016:	d916      	bls.n	8002046 <_malloc_r+0xba>
 8002018:	1961      	adds	r1, r4, r5
 800201a:	42a3      	cmp	r3, r4
 800201c:	6025      	str	r5, [r4, #0]
 800201e:	bf18      	it	ne
 8002020:	6059      	strne	r1, [r3, #4]
 8002022:	6863      	ldr	r3, [r4, #4]
 8002024:	bf08      	it	eq
 8002026:	6031      	streq	r1, [r6, #0]
 8002028:	5162      	str	r2, [r4, r5]
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	4638      	mov	r0, r7
 800202e:	f104 060b 	add.w	r6, r4, #11
 8002032:	f000 f865 	bl	8002100 <__malloc_unlock>
 8002036:	f026 0607 	bic.w	r6, r6, #7
 800203a:	1d23      	adds	r3, r4, #4
 800203c:	1af2      	subs	r2, r6, r3
 800203e:	d0b6      	beq.n	8001fae <_malloc_r+0x22>
 8002040:	1b9b      	subs	r3, r3, r6
 8002042:	50a3      	str	r3, [r4, r2]
 8002044:	e7b3      	b.n	8001fae <_malloc_r+0x22>
 8002046:	6862      	ldr	r2, [r4, #4]
 8002048:	42a3      	cmp	r3, r4
 800204a:	bf0c      	ite	eq
 800204c:	6032      	streq	r2, [r6, #0]
 800204e:	605a      	strne	r2, [r3, #4]
 8002050:	e7ec      	b.n	800202c <_malloc_r+0xa0>
 8002052:	4623      	mov	r3, r4
 8002054:	6864      	ldr	r4, [r4, #4]
 8002056:	e7b2      	b.n	8001fbe <_malloc_r+0x32>
 8002058:	4634      	mov	r4, r6
 800205a:	6876      	ldr	r6, [r6, #4]
 800205c:	e7b9      	b.n	8001fd2 <_malloc_r+0x46>
 800205e:	230c      	movs	r3, #12
 8002060:	4638      	mov	r0, r7
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	f000 f84c 	bl	8002100 <__malloc_unlock>
 8002068:	e7a1      	b.n	8001fae <_malloc_r+0x22>
 800206a:	6025      	str	r5, [r4, #0]
 800206c:	e7de      	b.n	800202c <_malloc_r+0xa0>
 800206e:	bf00      	nop
 8002070:	200000a8 	.word	0x200000a8

08002074 <_realloc_r>:
 8002074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002078:	4680      	mov	r8, r0
 800207a:	4614      	mov	r4, r2
 800207c:	460e      	mov	r6, r1
 800207e:	b921      	cbnz	r1, 800208a <_realloc_r+0x16>
 8002080:	4611      	mov	r1, r2
 8002082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002086:	f7ff bf81 	b.w	8001f8c <_malloc_r>
 800208a:	b92a      	cbnz	r2, 8002098 <_realloc_r+0x24>
 800208c:	f7ff ff16 	bl	8001ebc <_free_r>
 8002090:	4625      	mov	r5, r4
 8002092:	4628      	mov	r0, r5
 8002094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002098:	f000 f838 	bl	800210c <_malloc_usable_size_r>
 800209c:	4284      	cmp	r4, r0
 800209e:	4607      	mov	r7, r0
 80020a0:	d802      	bhi.n	80020a8 <_realloc_r+0x34>
 80020a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80020a6:	d812      	bhi.n	80020ce <_realloc_r+0x5a>
 80020a8:	4621      	mov	r1, r4
 80020aa:	4640      	mov	r0, r8
 80020ac:	f7ff ff6e 	bl	8001f8c <_malloc_r>
 80020b0:	4605      	mov	r5, r0
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d0ed      	beq.n	8002092 <_realloc_r+0x1e>
 80020b6:	42bc      	cmp	r4, r7
 80020b8:	4622      	mov	r2, r4
 80020ba:	4631      	mov	r1, r6
 80020bc:	bf28      	it	cs
 80020be:	463a      	movcs	r2, r7
 80020c0:	f7ff fed4 	bl	8001e6c <memcpy>
 80020c4:	4631      	mov	r1, r6
 80020c6:	4640      	mov	r0, r8
 80020c8:	f7ff fef8 	bl	8001ebc <_free_r>
 80020cc:	e7e1      	b.n	8002092 <_realloc_r+0x1e>
 80020ce:	4635      	mov	r5, r6
 80020d0:	e7df      	b.n	8002092 <_realloc_r+0x1e>
	...

080020d4 <_sbrk_r>:
 80020d4:	b538      	push	{r3, r4, r5, lr}
 80020d6:	2300      	movs	r3, #0
 80020d8:	4d05      	ldr	r5, [pc, #20]	; (80020f0 <_sbrk_r+0x1c>)
 80020da:	4604      	mov	r4, r0
 80020dc:	4608      	mov	r0, r1
 80020de:	602b      	str	r3, [r5, #0]
 80020e0:	f7fe fc22 	bl	8000928 <_sbrk>
 80020e4:	1c43      	adds	r3, r0, #1
 80020e6:	d102      	bne.n	80020ee <_sbrk_r+0x1a>
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	b103      	cbz	r3, 80020ee <_sbrk_r+0x1a>
 80020ec:	6023      	str	r3, [r4, #0]
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	200000b0 	.word	0x200000b0

080020f4 <__malloc_lock>:
 80020f4:	4801      	ldr	r0, [pc, #4]	; (80020fc <__malloc_lock+0x8>)
 80020f6:	f000 b811 	b.w	800211c <__retarget_lock_acquire_recursive>
 80020fa:	bf00      	nop
 80020fc:	200000b4 	.word	0x200000b4

08002100 <__malloc_unlock>:
 8002100:	4801      	ldr	r0, [pc, #4]	; (8002108 <__malloc_unlock+0x8>)
 8002102:	f000 b80c 	b.w	800211e <__retarget_lock_release_recursive>
 8002106:	bf00      	nop
 8002108:	200000b4 	.word	0x200000b4

0800210c <_malloc_usable_size_r>:
 800210c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002110:	1f18      	subs	r0, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	bfbc      	itt	lt
 8002116:	580b      	ldrlt	r3, [r1, r0]
 8002118:	18c0      	addlt	r0, r0, r3
 800211a:	4770      	bx	lr

0800211c <__retarget_lock_acquire_recursive>:
 800211c:	4770      	bx	lr

0800211e <__retarget_lock_release_recursive>:
 800211e:	4770      	bx	lr

08002120 <_init>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	bf00      	nop
 8002124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002126:	bc08      	pop	{r3}
 8002128:	469e      	mov	lr, r3
 800212a:	4770      	bx	lr

0800212c <_fini>:
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	bf00      	nop
 8002130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002132:	bc08      	pop	{r3}
 8002134:	469e      	mov	lr, r3
 8002136:	4770      	bx	lr
