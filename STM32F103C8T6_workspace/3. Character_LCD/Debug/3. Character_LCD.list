
3. Character_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001708  08001708  00011708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001798  08001798  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001798  08001798  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001798  08001798  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000000c  080017ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  080017ac  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033c7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001113  00000000  00000000  000233fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00024510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000418  00000000  00000000  000249d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167ee  00000000  00000000  00024de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058f9  00000000  00000000  0003b5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f0c3  00000000  00000000  00040ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bff92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001044  00000000  00000000  000bffe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080016f0 	.word	0x080016f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080016f0 	.word	0x080016f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CLCD_Pin_Set_Exec>:
static CLCD_CODS	cods_ctrl;
static const CLCD_FS*	fs_ctrl;
static CLCD_PIN* 	clcd_pin;

void CLCD_Pin_Set_Exec(uint16_t clcd_pin)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	//	---- 0000 0000 0000
	int16_t last_pin_idx;
	uint16_t tmp_pin;

	if(fs_ctrl->d_l)
 8000166:	4b1e      	ldr	r3, [pc, #120]	; (80001e0 <CLCD_Pin_Set_Exec+0x84>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	881b      	ldrh	r3, [r3, #0]
 800016c:	2b00      	cmp	r3, #0
 800016e:	d00b      	beq.n	8000188 <CLCD_Pin_Set_Exec+0x2c>
	{
		last_pin_idx = 0;
 8000170:	2300      	movs	r3, #0
 8000172:	81fb      	strh	r3, [r7, #14]
		CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 8000174:	88fb      	ldrh	r3, [r7, #6]
 8000176:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800017a:	4611      	mov	r1, r2
 800017c:	4618      	mov	r0, r3
 800017e:	f000 f831 	bl	80001e4 <CLCD_GPIO_Set>
		CLCD_Inst_Exec();
 8000182:	f000 f8ad 	bl	80002e0 <CLCD_Inst_Exec>
 8000186:	e027      	b.n	80001d8 <CLCD_Pin_Set_Exec+0x7c>
	}
	else
	{
		last_pin_idx = 4;
 8000188:	2304      	movs	r3, #4
 800018a:	81fb      	strh	r3, [r7, #14]
		CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 800018c:	88fb      	ldrh	r3, [r7, #6]
 800018e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000192:	4611      	mov	r1, r2
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f825 	bl	80001e4 <CLCD_GPIO_Set>
		CLCD_Inst_Exec();
 800019a:	f000 f8a1 	bl	80002e0 <CLCD_Inst_Exec>
		if(clcd_pin & CLCD_PIN_S_4_BIT_OP_ONCE)
 800019e:	88fb      	ldrh	r3, [r7, #6]
 80001a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d116      	bne.n	80001d6 <CLCD_Pin_Set_Exec+0x7a>
			return;
		else
		{
			tmp_pin = (clcd_pin & 0x00f) << 4;
 80001a8:	88fb      	ldrh	r3, [r7, #6]
 80001aa:	011b      	lsls	r3, r3, #4
 80001ac:	b29b      	uxth	r3, r3
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	81bb      	strh	r3, [r7, #12]
			clcd_pin &= 0x600;
 80001b2:	88fb      	ldrh	r3, [r7, #6]
 80001b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80001b8:	80fb      	strh	r3, [r7, #6]
			clcd_pin |= tmp_pin;
 80001ba:	88fa      	ldrh	r2, [r7, #6]
 80001bc:	89bb      	ldrh	r3, [r7, #12]
 80001be:	4313      	orrs	r3, r2
 80001c0:	80fb      	strh	r3, [r7, #6]
			CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 80001c2:	88fb      	ldrh	r3, [r7, #6]
 80001c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80001c8:	4611      	mov	r1, r2
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 f80a 	bl	80001e4 <CLCD_GPIO_Set>
			CLCD_Inst_Exec();
 80001d0:	f000 f886 	bl	80002e0 <CLCD_Inst_Exec>
 80001d4:	e000      	b.n	80001d8 <CLCD_Pin_Set_Exec+0x7c>
			return;
 80001d6:	bf00      	nop
		}
	}
}
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000038 	.word	0x20000038

080001e4 <CLCD_GPIO_Set>:

void CLCD_GPIO_Set(uint16_t select_pin, int16_t last_pin_idx)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	460a      	mov	r2, r1
 80001ee:	80fb      	strh	r3, [r7, #6]
 80001f0:	4613      	mov	r3, r2
 80001f2:	80bb      	strh	r3, [r7, #4]
	int16_t i;
	int16_t start_pin_idx = 10;
 80001f4:	230a      	movs	r3, #10
 80001f6:	81bb      	strh	r3, [r7, #12]

	for(i = start_pin_idx; i >= last_pin_idx; i--)
 80001f8:	89bb      	ldrh	r3, [r7, #12]
 80001fa:	81fb      	strh	r3, [r7, #14]
 80001fc:	e033      	b.n	8000266 <CLCD_GPIO_Set+0x82>
	{
		if((select_pin >> i) & 0x001)
 80001fe:	88fa      	ldrh	r2, [r7, #6]
 8000200:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000204:	fa42 f303 	asr.w	r3, r2, r3
 8000208:	f003 0301 	and.w	r3, r3, #1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d012      	beq.n	8000236 <CLCD_GPIO_Set+0x52>
		{
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_SET);
 8000210:	4b1a      	ldr	r3, [pc, #104]	; (800027c <CLCD_GPIO_Set+0x98>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000218:	00db      	lsls	r3, r3, #3
 800021a:	4413      	add	r3, r2
 800021c:	6818      	ldr	r0, [r3, #0]
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <CLCD_GPIO_Set+0x98>)
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000226:	00db      	lsls	r3, r3, #3
 8000228:	4413      	add	r3, r2
 800022a:	889b      	ldrh	r3, [r3, #4]
 800022c:	2201      	movs	r2, #1
 800022e:	4619      	mov	r1, r3
 8000230:	f000 fe32 	bl	8000e98 <HAL_GPIO_WritePin>
 8000234:	e011      	b.n	800025a <CLCD_GPIO_Set+0x76>
		}
		else
		{
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_RESET);
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <CLCD_GPIO_Set+0x98>)
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	4413      	add	r3, r2
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <CLCD_GPIO_Set+0x98>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	4413      	add	r3, r2
 8000250:	889b      	ldrh	r3, [r3, #4]
 8000252:	2200      	movs	r2, #0
 8000254:	4619      	mov	r1, r3
 8000256:	f000 fe1f 	bl	8000e98 <HAL_GPIO_WritePin>
	for(i = start_pin_idx; i >= last_pin_idx; i--)
 800025a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800025e:	b29b      	uxth	r3, r3
 8000260:	3b01      	subs	r3, #1
 8000262:	b29b      	uxth	r3, r3
 8000264:	81fb      	strh	r3, [r7, #14]
 8000266:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800026a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800026e:	429a      	cmp	r2, r3
 8000270:	dac5      	bge.n	80001fe <CLCD_GPIO_Set+0x1a>
		}
	}
}
 8000272:	bf00      	nop
 8000274:	bf00      	nop
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	2000003c 	.word	0x2000003c

08000280 <CLCD_Config_Init>:

void CLCD_Config_Init()
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
			{ CLCD_PIN_E_TYPE, 	CLCD_PIN_E_NUM 	},  // idx =  8
			{ CLCD_PIN_RW_TYPE, CLCD_PIN_RW_NUM },	// idx =  9
			{ CLCD_PIN_RS_TYPE, CLCD_PIN_RS_NUM }   // idx = 10
	};

	clcd_pin = clcd_pin_sc;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <CLCD_Config_Init+0x44>)
 8000286:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <CLCD_Config_Init+0x48>)
 8000288:	601a      	str	r2, [r3, #0]

	ems_ctrl.i_d = CLCD_I_EMS_I_D;
 800028a:	4b10      	ldr	r3, [pc, #64]	; (80002cc <CLCD_Config_Init+0x4c>)
 800028c:	2201      	movs	r2, #1
 800028e:	801a      	strh	r2, [r3, #0]
	ems_ctrl.s = CLCD_I_EMS_S;
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <CLCD_Config_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	805a      	strh	r2, [r3, #2]

	doc_ctrl.d = CLCD_I_DOC_D;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <CLCD_Config_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	801a      	strh	r2, [r3, #0]
	doc_ctrl.c = CLCD_I_DOC_C;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <CLCD_Config_Init+0x50>)
 800029e:	2200      	movs	r2, #0
 80002a0:	805a      	strh	r2, [r3, #2]
	doc_ctrl.b = CLCD_I_DOC_B;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <CLCD_Config_Init+0x50>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	809a      	strh	r2, [r3, #4]

	cods_ctrl.s_c = CLCD_I_CODS_S_C;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <CLCD_Config_Init+0x54>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	801a      	strh	r2, [r3, #0]
	cods_ctrl.r_l = CLCD_I_CODS_R_L;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <CLCD_Config_Init+0x54>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	805a      	strh	r2, [r3, #2]
	static const CLCD_FS fs_ctrl_v = {
		CLCD_I_FS_D_L,
		CLCD_I_FS_N,
		CLCD_I_FS_F
	};
	fs_ctrl = &fs_ctrl_v;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <CLCD_Config_Init+0x58>)
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <CLCD_Config_Init+0x5c>)
 80002b8:	601a      	str	r2, [r3, #0]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2000003c 	.word	0x2000003c
 80002c8:	08001728 	.word	0x08001728
 80002cc:	20000028 	.word	0x20000028
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	20000034 	.word	0x20000034
 80002d8:	20000038 	.word	0x20000038
 80002dc:	08001780 	.word	0x08001780

080002e0 <CLCD_Inst_Exec>:

void CLCD_Inst_Exec(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	uint16_t e_idx = 8;
 80002e6:	2308      	movs	r3, #8
 80002e8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(clcd_pin[e_idx].lcd_gpio_type, clcd_pin[e_idx].pin_num, GPIO_PIN_SET);
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <CLCD_Inst_Exec+0x60>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	88fb      	ldrh	r3, [r7, #6]
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	4413      	add	r3, r2
 80002f4:	6818      	ldr	r0, [r3, #0]
 80002f6:	4b12      	ldr	r3, [pc, #72]	; (8000340 <CLCD_Inst_Exec+0x60>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	4413      	add	r3, r2
 8000300:	889b      	ldrh	r3, [r3, #4]
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	f000 fdc7 	bl	8000e98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fb38 	bl	8000980 <HAL_Delay>
	HAL_GPIO_WritePin(clcd_pin[e_idx].lcd_gpio_type, clcd_pin[e_idx].pin_num, GPIO_PIN_RESET);
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <CLCD_Inst_Exec+0x60>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	00db      	lsls	r3, r3, #3
 8000318:	4413      	add	r3, r2
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <CLCD_Inst_Exec+0x60>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	88fb      	ldrh	r3, [r7, #6]
 8000322:	00db      	lsls	r3, r3, #3
 8000324:	4413      	add	r3, r2
 8000326:	889b      	ldrh	r3, [r3, #4]
 8000328:	2200      	movs	r2, #0
 800032a:	4619      	mov	r1, r3
 800032c:	f000 fdb4 	bl	8000e98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000330:	2001      	movs	r0, #1
 8000332:	f000 fb25 	bl	8000980 <HAL_Delay>
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000003c 	.word	0x2000003c

08000344 <CLCD_Init>:

void CLCD_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	CLCD_Config_Init();
 8000348:	f7ff ff9a 	bl	8000280 <CLCD_Config_Init>
	HAL_Delay(40);
 800034c:	2028      	movs	r0, #40	; 0x28
 800034e:	f000 fb17 	bl	8000980 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 8000352:	2030      	movs	r0, #48	; 0x30
 8000354:	f7ff ff02 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(5);
 8000358:	2005      	movs	r0, #5
 800035a:	f000 fb11 	bl	8000980 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 800035e:	2030      	movs	r0, #48	; 0x30
 8000360:	f7ff fefc 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fb0b 	bl	8000980 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 800036a:	2030      	movs	r0, #48	; 0x30
 800036c:	f7ff fef6 	bl	800015c <CLCD_Pin_Set_Exec>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_4_BIT_OP_ONCE | CLCD_PIN_S_DB5);
 8000370:	f44f 6002 	mov.w	r0, #2080	; 0x820
 8000374:	f7ff fef2 	bl	800015c <CLCD_Pin_Set_Exec>
	CLCD_Function_Set();
 8000378:	f000 f8c0 	bl	80004fc <CLCD_Function_Set>
	CLCD_Display_ON_OFF_Control(CLCD_DOC_S_NONE);
 800037c:	2000      	movs	r0, #0
 800037e:	f000 f861 	bl	8000444 <CLCD_Display_ON_OFF_Control>
	CLCD_Clear_Display();
 8000382:	f000 f808 	bl	8000396 <CLCD_Clear_Display>
	CLCD_Entry_Mode_Set(CLCD_EMS_S_I_D);
 8000386:	2001      	movs	r0, #1
 8000388:	f000 f80c 	bl	80003a4 <CLCD_Entry_Mode_Set>
	// Initialization Ends

	CLCD_Display_ON_OFF_Control(CLCD_DOC_S_D | CLCD_DOC_S_C);
 800038c:	2003      	movs	r0, #3
 800038e:	f000 f859 	bl	8000444 <CLCD_Display_ON_OFF_Control>
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}

08000396 <CLCD_Clear_Display>:

void CLCD_Clear_Display(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB0);
 800039a:	2001      	movs	r0, #1
 800039c:	f7ff fede 	bl	800015c <CLCD_Pin_Set_Exec>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <CLCD_Entry_Mode_Set>:
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB1);
	HAL_Delay(1);
}

void CLCD_Entry_Mode_Set(uint16_t select)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	80fb      	strh	r3, [r7, #6]
	uint16_t clcd_pin = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	81bb      	strh	r3, [r7, #12]
	uint16_t i = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	81fb      	strh	r3, [r7, #14]
	uint16_t *p = (uint16_t*)&ems_ctrl;
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <CLCD_Entry_Mode_Set+0x9c>)
 80003b8:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < 2; i++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	81fb      	strh	r3, [r7, #14]
 80003be:	e017      	b.n	80003f0 <CLCD_Entry_Mode_Set+0x4c>
	{
		if(select & ((0x001) << i))
 80003c0:	88fa      	ldrh	r2, [r7, #6]
 80003c2:	89fb      	ldrh	r3, [r7, #14]
 80003c4:	fa42 f303 	asr.w	r3, r2, r3
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d006      	beq.n	80003de <CLCD_Entry_Mode_Set+0x3a>
			p[i] = 1;
 80003d0:	89fb      	ldrh	r3, [r7, #14]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	68ba      	ldr	r2, [r7, #8]
 80003d6:	4413      	add	r3, r2
 80003d8:	2201      	movs	r2, #1
 80003da:	801a      	strh	r2, [r3, #0]
 80003dc:	e005      	b.n	80003ea <CLCD_Entry_Mode_Set+0x46>
		else
			p[i] = 0;
 80003de:	89fb      	ldrh	r3, [r7, #14]
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	4413      	add	r3, r2
 80003e6:	2200      	movs	r2, #0
 80003e8:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 80003ea:	89fb      	ldrh	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	81fb      	strh	r3, [r7, #14]
 80003f0:	89fb      	ldrh	r3, [r7, #14]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d9e4      	bls.n	80003c0 <CLCD_Entry_Mode_Set+0x1c>
	}

	clcd_pin |= CLCD_PIN_S_DB2;
 80003f6:	89bb      	ldrh	r3, [r7, #12]
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (ems_ctrl.i_d ? CLCD_PIN_S_DB1 : 0);
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <CLCD_Entry_Mode_Set+0x9c>)
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <CLCD_Entry_Mode_Set+0x66>
 8000406:	2202      	movs	r2, #2
 8000408:	e000      	b.n	800040c <CLCD_Entry_Mode_Set+0x68>
 800040a:	2200      	movs	r2, #0
 800040c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	b21b      	sxth	r3, r3
 8000414:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (ems_ctrl.s ? CLCD_PIN_S_DB0 : 0);
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <CLCD_Entry_Mode_Set+0x9c>)
 8000418:	885b      	ldrh	r3, [r3, #2]
 800041a:	2b00      	cmp	r3, #0
 800041c:	bf14      	ite	ne
 800041e:	2301      	movne	r3, #1
 8000420:	2300      	moveq	r3, #0
 8000422:	b2db      	uxtb	r3, r3
 8000424:	b21a      	sxth	r2, r3
 8000426:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800042a:	4313      	orrs	r3, r2
 800042c:	b21b      	sxth	r3, r3
 800042e:	81bb      	strh	r3, [r7, #12]

	CLCD_Pin_Set_Exec(clcd_pin);
 8000430:	89bb      	ldrh	r3, [r7, #12]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fe92 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000028 	.word	0x20000028

08000444 <CLCD_Display_ON_OFF_Control>:

void CLCD_Display_ON_OFF_Control(uint16_t select)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	80fb      	strh	r3, [r7, #6]
	uint16_t clcd_pin = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	81bb      	strh	r3, [r7, #12]
	uint16_t i = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	81fb      	strh	r3, [r7, #14]
	uint16_t *p = (uint16_t*)&doc_ctrl;
 8000456:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <CLCD_Display_ON_OFF_Control+0xb4>)
 8000458:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < 3; i++)
 800045a:	2300      	movs	r3, #0
 800045c:	81fb      	strh	r3, [r7, #14]
 800045e:	e017      	b.n	8000490 <CLCD_Display_ON_OFF_Control+0x4c>
	{
		if(select & ((0x001) << i))
 8000460:	88fa      	ldrh	r2, [r7, #6]
 8000462:	89fb      	ldrh	r3, [r7, #14]
 8000464:	fa42 f303 	asr.w	r3, r2, r3
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	2b00      	cmp	r3, #0
 800046e:	d006      	beq.n	800047e <CLCD_Display_ON_OFF_Control+0x3a>
			p[i] = 1;
 8000470:	89fb      	ldrh	r3, [r7, #14]
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	68ba      	ldr	r2, [r7, #8]
 8000476:	4413      	add	r3, r2
 8000478:	2201      	movs	r2, #1
 800047a:	801a      	strh	r2, [r3, #0]
 800047c:	e005      	b.n	800048a <CLCD_Display_ON_OFF_Control+0x46>
		else
			p[i] = 0;
 800047e:	89fb      	ldrh	r3, [r7, #14]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	4413      	add	r3, r2
 8000486:	2200      	movs	r2, #0
 8000488:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < 3; i++)
 800048a:	89fb      	ldrh	r3, [r7, #14]
 800048c:	3301      	adds	r3, #1
 800048e:	81fb      	strh	r3, [r7, #14]
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d9e4      	bls.n	8000460 <CLCD_Display_ON_OFF_Control+0x1c>
	}

	clcd_pin |= CLCD_PIN_S_DB3;
 8000496:	89bb      	ldrh	r3, [r7, #12]
 8000498:	f043 0308 	orr.w	r3, r3, #8
 800049c:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (doc_ctrl.d ? CLCD_PIN_S_DB2 : 0);
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <CLCD_Display_ON_OFF_Control+0xb4>)
 80004a0:	881b      	ldrh	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <CLCD_Display_ON_OFF_Control+0x66>
 80004a6:	2204      	movs	r2, #4
 80004a8:	e000      	b.n	80004ac <CLCD_Display_ON_OFF_Control+0x68>
 80004aa:	2200      	movs	r2, #0
 80004ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b21b      	sxth	r3, r3
 80004b4:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (doc_ctrl.c ? CLCD_PIN_S_DB1 : 0);
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <CLCD_Display_ON_OFF_Control+0xb4>)
 80004b8:	885b      	ldrh	r3, [r3, #2]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <CLCD_Display_ON_OFF_Control+0x7e>
 80004be:	2202      	movs	r2, #2
 80004c0:	e000      	b.n	80004c4 <CLCD_Display_ON_OFF_Control+0x80>
 80004c2:	2200      	movs	r2, #0
 80004c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	81bb      	strh	r3, [r7, #12]
	clcd_pin |= (doc_ctrl.b ? CLCD_PIN_S_DB0 : 0);
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <CLCD_Display_ON_OFF_Control+0xb4>)
 80004d0:	889b      	ldrh	r3, [r3, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	bf14      	ite	ne
 80004d6:	2301      	movne	r3, #1
 80004d8:	2300      	moveq	r3, #0
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	b21a      	sxth	r2, r3
 80004de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	81bb      	strh	r3, [r7, #12]

	CLCD_Pin_Set_Exec(clcd_pin);
 80004e8:	89bb      	ldrh	r3, [r7, #12]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe36 	bl	800015c <CLCD_Pin_Set_Exec>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000002c 	.word	0x2000002c

080004fc <CLCD_Function_Set>:

	CLCD_Pin_Set_Exec(clcd_pin);
}

void CLCD_Function_Set(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	uint16_t clcd_pin = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	80fb      	strh	r3, [r7, #6]

	clcd_pin |= CLCD_PIN_S_DB5;
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->d_l ? CLCD_PIN_S_DB4 : 0);
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <CLCD_Function_Set+0x70>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <CLCD_Function_Set+0x20>
 8000518:	2210      	movs	r2, #16
 800051a:	e000      	b.n	800051e <CLCD_Function_Set+0x22>
 800051c:	2200      	movs	r2, #0
 800051e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000522:	4313      	orrs	r3, r2
 8000524:	b21b      	sxth	r3, r3
 8000526:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->n ? CLCD_PIN_S_DB3 : 0);
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <CLCD_Function_Set+0x70>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	885b      	ldrh	r3, [r3, #2]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <CLCD_Function_Set+0x3a>
 8000532:	2208      	movs	r2, #8
 8000534:	e000      	b.n	8000538 <CLCD_Function_Set+0x3c>
 8000536:	2200      	movs	r2, #0
 8000538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800053c:	4313      	orrs	r3, r2
 800053e:	b21b      	sxth	r3, r3
 8000540:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->f ? CLCD_PIN_S_DB2 : 0);
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <CLCD_Function_Set+0x70>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	889b      	ldrh	r3, [r3, #4]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <CLCD_Function_Set+0x54>
 800054c:	2204      	movs	r2, #4
 800054e:	e000      	b.n	8000552 <CLCD_Function_Set+0x56>
 8000550:	2200      	movs	r2, #0
 8000552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000556:	4313      	orrs	r3, r2
 8000558:	b21b      	sxth	r3, r3
 800055a:	80fb      	strh	r3, [r7, #6]

	CLCD_Pin_Set_Exec(clcd_pin);
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fdfc 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000038 	.word	0x20000038

08000570 <CLCD_Write>:
{

}

void CLCD_Write(uint16_t row, uint16_t col, const char* str)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	603a      	str	r2, [r7, #0]
 800057a:	80fb      	strh	r3, [r7, #6]
 800057c:	460b      	mov	r3, r1
 800057e:	80bb      	strh	r3, [r7, #4]
	int16_t i, ch, pin_loop;
	uint16_t pin_s;
	int32_t str_size;
	str_size = strlen(str);
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f7ff fde3 	bl	800014c <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	60fb      	str	r3, [r7, #12]

	if(str_size > 16)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b10      	cmp	r3, #16
 800058e:	dd01      	ble.n	8000594 <CLCD_Write+0x24>
		str_size = 16;
 8000590:	2310      	movs	r3, #16
 8000592:	60fb      	str	r3, [r7, #12]

	for(i = 0; i < str_size; i++)
 8000594:	2300      	movs	r3, #0
 8000596:	82fb      	strh	r3, [r7, #22]
 8000598:	e037      	b.n	800060a <CLCD_Write+0x9a>
	{
		ch = str[i];
 800059a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	4413      	add	r3, r2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	82bb      	strh	r3, [r7, #20]
		if(ch < 0x21 || ch > 0x7D)
 80005a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005aa:	2b20      	cmp	r3, #32
 80005ac:	dd03      	ble.n	80005b6 <CLCD_Write+0x46>
 80005ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005b2:	2b7d      	cmp	r3, #125	; 0x7d
 80005b4:	dd01      	ble.n	80005ba <CLCD_Write+0x4a>
		{
			ch = 0x20;
 80005b6:	2320      	movs	r3, #32
 80005b8:	82bb      	strh	r3, [r7, #20]
		}

		pin_s = CLCD_PIN_S_RS;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	823b      	strh	r3, [r7, #16]
		for(pin_loop = 0; pin_loop < 8; pin_loop++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	827b      	strh	r3, [r7, #18]
 80005c4:	e013      	b.n	80005ee <CLCD_Write+0x7e>
		{
			pin_s |= (ch & (0x080 >> pin_loop));
 80005c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	fa42 f303 	asr.w	r3, r2, r3
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	8abb      	ldrh	r3, [r7, #20]
 80005d4:	4013      	ands	r3, r2
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80005dc:	4313      	orrs	r3, r2
 80005de:	b21b      	sxth	r3, r3
 80005e0:	823b      	strh	r3, [r7, #16]
		for(pin_loop = 0; pin_loop < 8; pin_loop++)
 80005e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3301      	adds	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	827b      	strh	r3, [r7, #18]
 80005ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	dde7      	ble.n	80005c6 <CLCD_Write+0x56>
		}

		CLCD_Pin_Set_Exec(pin_s);
 80005f6:	8a3b      	ldrh	r3, [r7, #16]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fdaf 	bl	800015c <CLCD_Pin_Set_Exec>
	for(i = 0; i < str_size; i++)
 80005fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000602:	b29b      	uxth	r3, r3
 8000604:	3301      	adds	r3, #1
 8000606:	b29b      	uxth	r3, r3
 8000608:	82fb      	strh	r3, [r7, #22]
 800060a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	429a      	cmp	r2, r3
 8000612:	dcc2      	bgt.n	800059a <CLCD_Write+0x2a>
	}
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <MX_GPIO_Init+0xcc>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <MX_GPIO_Init+0xcc>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <MX_GPIO_Init+0xcc>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_GPIO_Init+0xcc>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <MX_GPIO_Init+0xcc>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_GPIO_Init+0xcc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_GPIO_Init+0xcc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <MX_GPIO_Init+0xcc>)
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_GPIO_Init+0xcc>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_GPIO_Init+0xcc>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <MX_GPIO_Init+0xcc>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_GPIO_Init+0xcc>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <MX_GPIO_Init+0xd0>)
 800069c:	f000 fbfc 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	211b      	movs	r1, #27
 80006a4:	4813      	ldr	r0, [pc, #76]	; (80006f4 <MX_GPIO_Init+0xd4>)
 80006a6:	f000 fbf7 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0xd0>)
 80006c4:	f000 fa64 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80006c8:	231b      	movs	r3, #27
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_GPIO_Init+0xd4>)
 80006e0:	f000 fa56 	bl	8000b90 <HAL_GPIO_Init>

}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40011000 	.word	0x40011000
 80006f4:	40010c00 	.word	0x40010c00

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 f8de 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f80c 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f7ff ff8c 	bl	8000620 <MX_GPIO_Init>
//  Entry_mode_set();
//  HAL_Delay(1000);
//  Write_data_to_CGRAM_DDRAM();
//  HAL_Delay(1000);

  	CLCD_Init();
 8000708:	f7ff fe1c 	bl	8000344 <CLCD_Init>
  	CLCD_Write(0, 0, "Hello World!!");
 800070c:	4a02      	ldr	r2, [pc, #8]	; (8000718 <main+0x20>)
 800070e:	2100      	movs	r1, #0
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ff2d 	bl	8000570 <CLCD_Write>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000716:	e7fe      	b.n	8000716 <main+0x1e>
 8000718:	08001708 	.word	0x08001708

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b090      	sub	sp, #64	; 0x40
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	2228      	movs	r2, #40	; 0x28
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ffd8 	bl	80016e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800075a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fbaf 	bl	8000ec8 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000770:	f000 f819 	bl	80007a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fe1c 	bl	80013cc <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800079a:	f000 f804 	bl	80007a6 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3740      	adds	r7, #64	; 0x40
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007aa:	b672      	cpsid	i
}
 80007ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ae:	e7fe      	b.n	80007ae <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_MspInit+0x5c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <HAL_MspInit+0x5c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_MspInit+0x5c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x5c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x5c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x5c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_MspInit+0x60>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_MspInit+0x60>)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000
 8000810:	40010000 	.word	0x40010000

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085a:	f000 f875 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}

08000862 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	; (80008a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	; (80008b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000896:	f7ff ffe4 	bl	8000862 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f000 fefd 	bl	8001698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089e:	f7ff ff2b 	bl	80006f8 <main>
  bx lr
 80008a2:	4770      	bx	lr
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008ac:	080017a0 	.word	0x080017a0
  ldr r2, =_sbss
 80008b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b4:	20000044 	.word	0x20000044

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x28>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f92b 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	200f      	movs	r0, #15
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff ff6a 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f935 	bl	8000b76 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f000 f90b 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a03      	ldr	r2, [pc, #12]	; (8000968 <HAL_IncTick+0x20>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000008 	.word	0x20000008
 8000968:	20000040 	.word	0x20000040

0800096c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000040 	.word	0x20000040

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff fff0 	bl	800096c <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffe0 	bl	800096c <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff49 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff5e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffb0 	bl	8000ae4 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b08b      	sub	sp, #44	; 0x2c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e169      	b.n	8000e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 8158 	bne.w	8000e72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a9a      	ldr	r2, [pc, #616]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d05e      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d875      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bd2:	4a98      	ldr	r2, [pc, #608]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d058      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bd8:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d86f      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bde:	4a96      	ldr	r2, [pc, #600]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d052      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000be4:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d869      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bea:	4a94      	ldr	r2, [pc, #592]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d04c      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bf0:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d863      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bf6:	4a92      	ldr	r2, [pc, #584]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d046      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bfc:	4a90      	ldr	r2, [pc, #576]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d85d      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d82a      	bhi.n	8000c5c <HAL_GPIO_Init+0xcc>
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d859      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <HAL_GPIO_Init+0x80>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c8b 	.word	0x08000c8b
 8000c14:	08000c65 	.word	0x08000c65
 8000c18:	08000c77 	.word	0x08000c77
 8000c1c:	08000cb9 	.word	0x08000cb9
 8000c20:	08000cbf 	.word	0x08000cbf
 8000c24:	08000cbf 	.word	0x08000cbf
 8000c28:	08000cbf 	.word	0x08000cbf
 8000c2c:	08000cbf 	.word	0x08000cbf
 8000c30:	08000cbf 	.word	0x08000cbf
 8000c34:	08000cbf 	.word	0x08000cbf
 8000c38:	08000cbf 	.word	0x08000cbf
 8000c3c:	08000cbf 	.word	0x08000cbf
 8000c40:	08000cbf 	.word	0x08000cbf
 8000c44:	08000cbf 	.word	0x08000cbf
 8000c48:	08000cbf 	.word	0x08000cbf
 8000c4c:	08000cbf 	.word	0x08000cbf
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000c6d 	.word	0x08000c6d
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	4a79      	ldr	r2, [pc, #484]	; (8000e44 <HAL_GPIO_Init+0x2b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c62:	e02c      	b.n	8000cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e029      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	3304      	adds	r3, #4
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e024      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e01f      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	330c      	adds	r3, #12
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e01a      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c92:	2304      	movs	r3, #4
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e013      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d105      	bne.n	8000cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	611a      	str	r2, [r3, #16]
          break;
 8000caa:	e009      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	615a      	str	r2, [r3, #20]
          break;
 8000cb6:	e003      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          break;
 8000cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d801      	bhi.n	8000cca <HAL_GPIO_Init+0x13a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	e001      	b.n	8000cce <HAL_GPIO_Init+0x13e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2bff      	cmp	r3, #255	; 0xff
 8000cd4:	d802      	bhi.n	8000cdc <HAL_GPIO_Init+0x14c>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3b08      	subs	r3, #8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	210f      	movs	r1, #15
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	6a39      	ldr	r1, [r7, #32]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a4c      	ldr	r2, [pc, #304]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <HAL_GPIO_Init+0x2c0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <HAL_GPIO_Init+0x2c4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1e8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <HAL_GPIO_Init+0x2c8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1e4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1e0>
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e006      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e004      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d80:	f002 0203 	and.w	r2, r2, #3
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	4093      	lsls	r3, r2
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	492c      	ldr	r1, [pc, #176]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4928      	ldr	r1, [pc, #160]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	491e      	ldr	r1, [pc, #120]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	4918      	ldr	r1, [pc, #96]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4914      	ldr	r1, [pc, #80]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d021      	beq.n	8000e64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	490e      	ldr	r1, [pc, #56]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
 8000e2c:	e021      	b.n	8000e72 <HAL_GPIO_Init+0x2e2>
 8000e2e:	bf00      	nop
 8000e30:	10320000 	.word	0x10320000
 8000e34:	10310000 	.word	0x10310000
 8000e38:	10220000 	.word	0x10220000
 8000e3c:	10210000 	.word	0x10210000
 8000e40:	10120000 	.word	0x10120000
 8000e44:	10110000 	.word	0x10110000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4909      	ldr	r1, [pc, #36]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f ae8e 	bne.w	8000ba4 <HAL_GPIO_Init+0x14>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	372c      	adds	r7, #44	; 0x2c
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	611a      	str	r2, [r3, #16]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e272      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	4b92      	ldr	r3, [pc, #584]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d00c      	beq.n	8000f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d112      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
 8000f00:	4b8c      	ldr	r3, [pc, #560]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b89      	ldr	r3, [pc, #548]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d06c      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d168      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e24c      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x76>
 8000f30:	4b80      	ldr	r3, [pc, #512]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a7f      	ldr	r2, [pc, #508]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e02e      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x98>
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7a      	ldr	r2, [pc, #488]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a77      	ldr	r2, [pc, #476]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0xbc>
 8000f6a:	4b72      	ldr	r3, [pc, #456]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a71      	ldr	r2, [pc, #452]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6e      	ldr	r2, [pc, #440]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f84:	4b6b      	ldr	r3, [pc, #428]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a6a      	ldr	r2, [pc, #424]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a67      	ldr	r2, [pc, #412]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fce2 	bl	800096c <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fcde 	bl	800096c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e200      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0xe4>
 8000fca:	e014      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fcce 	bl	800096c <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fcca 	bl	800096c <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1ec      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x10c>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d063      	beq.n	80010ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001002:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d11c      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d116      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d001      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e1c0      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4939      	ldr	r1, [pc, #228]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	e03a      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <HAL_RCC_OscConfig+0x270>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fc83 	bl	800096c <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fc7f 	bl	800096c <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e1a1      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4927      	ldr	r1, [pc, #156]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_RCC_OscConfig+0x270>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc62 	bl	800096c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc5e 	bl	800096c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e180      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03a      	beq.n	800114c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d019      	beq.n	8001112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_RCC_OscConfig+0x274>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fc42 	bl	800096c <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc3e 	bl	800096c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e160      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 faa6 	bl	800165c <RCC_Delay>
 8001110:	e01c      	b.n	800114c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_RCC_OscConfig+0x274>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fc28 	bl	800096c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111e:	e00f      	b.n	8001140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fc24 	bl	800096c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d908      	bls.n	8001140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e146      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	42420000 	.word	0x42420000
 800113c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e9      	bne.n	8001120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a6 	beq.w	80012a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b8b      	ldr	r3, [pc, #556]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a87      	ldr	r2, [pc, #540]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b85      	ldr	r3, [pc, #532]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b82      	ldr	r3, [pc, #520]	; (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001192:	4b7f      	ldr	r3, [pc, #508]	; (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a7e      	ldr	r2, [pc, #504]	; (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119e:	f7ff fbe5 	bl	800096c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a6:	f7ff fbe1 	bl	800096c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e103      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b75      	ldr	r3, [pc, #468]	; (8001390 <HAL_RCC_OscConfig+0x4c8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x312>
 80011cc:	4b6f      	ldr	r3, [pc, #444]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a6e      	ldr	r2, [pc, #440]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	e02d      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x334>
 80011e2:	4b6a      	ldr	r3, [pc, #424]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a69      	ldr	r2, [pc, #420]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b67      	ldr	r3, [pc, #412]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a66      	ldr	r2, [pc, #408]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	e01c      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x356>
 8001204:	4b61      	ldr	r3, [pc, #388]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a60      	ldr	r2, [pc, #384]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	4b5e      	ldr	r3, [pc, #376]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a5d      	ldr	r2, [pc, #372]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6213      	str	r3, [r2, #32]
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 800121e:	4b5b      	ldr	r3, [pc, #364]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a5a      	ldr	r2, [pc, #360]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a57      	ldr	r2, [pc, #348]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fb95 	bl	800096c <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fb91 	bl	800096c <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0b1      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ee      	beq.n	8001246 <HAL_RCC_OscConfig+0x37e>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fb7f 	bl	800096c <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fb7b 	bl	800096c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e09b      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	4b40      	ldr	r3, [pc, #256]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ee      	bne.n	8001272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129a:	4b3c      	ldr	r3, [pc, #240]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a3b      	ldr	r2, [pc, #236]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8087 	beq.w	80013be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d061      	beq.n	8001380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d146      	bne.n	8001352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_RCC_OscConfig+0x4cc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb4f 	bl	800096c <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fb4b 	bl	800096c <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e06d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d108      	bne.n	800130c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4921      	ldr	r1, [pc, #132]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a19      	ldr	r1, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	430b      	orrs	r3, r1
 800131e:	491b      	ldr	r1, [pc, #108]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_RCC_OscConfig+0x4cc>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb1f 	bl	800096c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fb1b 	bl	800096c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e03d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x46a>
 8001350:	e035      	b.n	80013be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_RCC_OscConfig+0x4cc>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb08 	bl	800096c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fb04 	bl	800096c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e026      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x498>
 800137e:	e01e      	b.n	80013be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d107      	bne.n	8001398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e019      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
 8001394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0d0      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d910      	bls.n	8001410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4965      	ldr	r1, [pc, #404]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800144a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d040      	beq.n	80014ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d115      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e073      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e06b      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4936      	ldr	r1, [pc, #216]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fa56 	bl	800096c <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff fa52 	bl	800096c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e053      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d210      	bcs.n	800151c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0207 	bic.w	r2, r3, #7
 8001502:	4922      	ldr	r1, [pc, #136]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x1c8>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1cc>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1d0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9b4 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000
 8001590:	40021000 	.word	0x40021000
 8001594:	08001788 	.word	0x08001788
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	b490      	push	{r4, r7}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_RCC_GetSysClockFreq+0xac>)
 80015a8:	1d3c      	adds	r4, r7, #4
 80015aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015b0:	f240 2301 	movw	r3, #513	; 0x201
 80015b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x40>
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x46>
 80015de:	e02b      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015e2:	623b      	str	r3, [r7, #32]
      break;
 80015e4:	e02b      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3328      	adds	r3, #40	; 0x28
 80015f0:	443b      	add	r3, r7
 80015f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0c5b      	lsrs	r3, r3, #17
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	3328      	adds	r3, #40	; 0x28
 800160e:	443b      	add	r3, r7
 8001610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb4>)
 800161a:	fb03 f202 	mul.w	r2, r3, r2
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	e004      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_RCC_GetSysClockFreq+0xb8>)
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	623b      	str	r3, [r7, #32]
      break;
 8001636:	e002      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb4>)
 800163a:	623b      	str	r3, [r7, #32]
      break;
 800163c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800163e:	6a3b      	ldr	r3, [r7, #32]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bc90      	pop	{r4, r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	08001718 	.word	0x08001718
 8001650:	40021000 	.word	0x40021000
 8001654:	007a1200 	.word	0x007a1200
 8001658:	003d0900 	.word	0x003d0900

0800165c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <RCC_Delay+0x34>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <RCC_Delay+0x38>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0a5b      	lsrs	r3, r3, #9
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001678:	bf00      	nop
  }
  while (Delay --);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	60fa      	str	r2, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f9      	bne.n	8001678 <RCC_Delay+0x1c>
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000000 	.word	0x20000000
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <__libc_init_array>:
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	2600      	movs	r6, #0
 800169c:	4d0c      	ldr	r5, [pc, #48]	; (80016d0 <__libc_init_array+0x38>)
 800169e:	4c0d      	ldr	r4, [pc, #52]	; (80016d4 <__libc_init_array+0x3c>)
 80016a0:	1b64      	subs	r4, r4, r5
 80016a2:	10a4      	asrs	r4, r4, #2
 80016a4:	42a6      	cmp	r6, r4
 80016a6:	d109      	bne.n	80016bc <__libc_init_array+0x24>
 80016a8:	f000 f822 	bl	80016f0 <_init>
 80016ac:	2600      	movs	r6, #0
 80016ae:	4d0a      	ldr	r5, [pc, #40]	; (80016d8 <__libc_init_array+0x40>)
 80016b0:	4c0a      	ldr	r4, [pc, #40]	; (80016dc <__libc_init_array+0x44>)
 80016b2:	1b64      	subs	r4, r4, r5
 80016b4:	10a4      	asrs	r4, r4, #2
 80016b6:	42a6      	cmp	r6, r4
 80016b8:	d105      	bne.n	80016c6 <__libc_init_array+0x2e>
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
 80016bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80016c0:	4798      	blx	r3
 80016c2:	3601      	adds	r6, #1
 80016c4:	e7ee      	b.n	80016a4 <__libc_init_array+0xc>
 80016c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ca:	4798      	blx	r3
 80016cc:	3601      	adds	r6, #1
 80016ce:	e7f2      	b.n	80016b6 <__libc_init_array+0x1e>
 80016d0:	08001798 	.word	0x08001798
 80016d4:	08001798 	.word	0x08001798
 80016d8:	08001798 	.word	0x08001798
 80016dc:	0800179c 	.word	0x0800179c

080016e0 <memset>:
 80016e0:	4603      	mov	r3, r0
 80016e2:	4402      	add	r2, r0
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d100      	bne.n	80016ea <memset+0xa>
 80016e8:	4770      	bx	lr
 80016ea:	f803 1b01 	strb.w	r1, [r3], #1
 80016ee:	e7f9      	b.n	80016e4 <memset+0x4>

080016f0 <_init>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr

080016fc <_fini>:
 80016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fe:	bf00      	nop
 8001700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001702:	bc08      	pop	{r3}
 8001704:	469e      	mov	lr, r3
 8001706:	4770      	bx	lr
