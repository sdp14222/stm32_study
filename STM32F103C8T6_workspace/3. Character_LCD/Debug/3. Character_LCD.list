
3. Character_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001fe4  08001fe4  00011fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800209c  0800209c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800209c  0800209c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800209c  0800209c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800209c  0800209c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020a0  080020a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080020a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000070  08002114  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002114  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003607  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001211  00000000  00000000  000236a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  000248b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00024d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eee  00000000  00000000  00025150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005be1  00000000  00000000  0003c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080253  00000000  00000000  00041c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1e72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013f8  00000000  00000000  000c1ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fcc 	.word	0x08001fcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001fcc 	.word	0x08001fcc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CLCD_Pin_Set_Exec>:
static void CLCD_Read_Busy_Flag_And_Address(void);
static void CLCD_Write_Data_To_CG_OR_DDRAM(uint16_t data);
static void CLCD_Read_Data_From_CG_OR_DDRAM(void);

static void CLCD_Pin_Set_Exec(CLCD_PIN_S clcd_pin)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
#if CLCD_I_FS_D_L == 1
	CLCD_GPIO_Set(clcd_pin);
	CLCD_Inst_Exec();
#else
	CLCD_PIN_S tmp_pin;
	CLCD_GPIO_Set(clcd_pin);
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	4618      	mov	r0, r3
 800016a:	f000 f819 	bl	80001a0 <CLCD_GPIO_Set>
	CLCD_Inst_Exec();
 800016e:	f000 f897 	bl	80002a0 <CLCD_Inst_Exec>

	tmp_pin = (clcd_pin & 0x00f) << 4;
 8000172:	88fb      	ldrh	r3, [r7, #6]
 8000174:	011b      	lsls	r3, r3, #4
 8000176:	b29b      	uxth	r3, r3
 8000178:	b2db      	uxtb	r3, r3
 800017a:	81fb      	strh	r3, [r7, #14]
	clcd_pin &= 0x600;
 800017c:	88fb      	ldrh	r3, [r7, #6]
 800017e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000182:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= tmp_pin;
 8000184:	88fa      	ldrh	r2, [r7, #6]
 8000186:	89fb      	ldrh	r3, [r7, #14]
 8000188:	4313      	orrs	r3, r2
 800018a:	80fb      	strh	r3, [r7, #6]
	CLCD_GPIO_Set(clcd_pin);
 800018c:	88fb      	ldrh	r3, [r7, #6]
 800018e:	4618      	mov	r0, r3
 8000190:	f000 f806 	bl	80001a0 <CLCD_GPIO_Set>
	CLCD_Inst_Exec();
 8000194:	f000 f884 	bl	80002a0 <CLCD_Inst_Exec>
#endif
}
 8000198:	bf00      	nop
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}

080001a0 <CLCD_GPIO_Set>:

static void CLCD_GPIO_Set(CLCD_PIN_S select_pin)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b084      	sub	sp, #16
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	80fb      	strh	r3, [r7, #6]
	int16_t i;
#if CLCD_I_FS_D_L == 1
	for(i = 10; i >= 0; i--)
#else
	select_pin = select_pin >> 4;
 80001aa:	88fb      	ldrh	r3, [r7, #6]
 80001ac:	091b      	lsrs	r3, r3, #4
 80001ae:	80fb      	strh	r3, [r7, #6]
	for(i = 6; i >= 0; i--)
 80001b0:	2306      	movs	r3, #6
 80001b2:	81fb      	strh	r3, [r7, #14]
 80001b4:	e033      	b.n	800021e <CLCD_GPIO_Set+0x7e>
#endif
	{
		if((select_pin >> i) & 0x001)
 80001b6:	88fa      	ldrh	r2, [r7, #6]
 80001b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001bc:	fa42 f303 	asr.w	r3, r2, r3
 80001c0:	f003 0301 	and.w	r3, r3, #1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d012      	beq.n	80001ee <CLCD_GPIO_Set+0x4e>
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_SET);
 80001c8:	4b19      	ldr	r3, [pc, #100]	; (8000230 <CLCD_GPIO_Set+0x90>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001d0:	00db      	lsls	r3, r3, #3
 80001d2:	4413      	add	r3, r2
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	4b16      	ldr	r3, [pc, #88]	; (8000230 <CLCD_GPIO_Set+0x90>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001de:	00db      	lsls	r3, r3, #3
 80001e0:	4413      	add	r3, r2
 80001e2:	889b      	ldrh	r3, [r3, #4]
 80001e4:	2201      	movs	r2, #1
 80001e6:	4619      	mov	r1, r3
 80001e8:	f000 fe44 	bl	8000e74 <HAL_GPIO_WritePin>
 80001ec:	e011      	b.n	8000212 <CLCD_GPIO_Set+0x72>
		else
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_RESET);
 80001ee:	4b10      	ldr	r3, [pc, #64]	; (8000230 <CLCD_GPIO_Set+0x90>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001f6:	00db      	lsls	r3, r3, #3
 80001f8:	4413      	add	r3, r2
 80001fa:	6818      	ldr	r0, [r3, #0]
 80001fc:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <CLCD_GPIO_Set+0x90>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	4413      	add	r3, r2
 8000208:	889b      	ldrh	r3, [r3, #4]
 800020a:	2200      	movs	r2, #0
 800020c:	4619      	mov	r1, r3
 800020e:	f000 fe31 	bl	8000e74 <HAL_GPIO_WritePin>
	for(i = 6; i >= 0; i--)
 8000212:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000216:	b29b      	uxth	r3, r3
 8000218:	3b01      	subs	r3, #1
 800021a:	b29b      	uxth	r3, r3
 800021c:	81fb      	strh	r3, [r7, #14]
 800021e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000222:	2b00      	cmp	r3, #0
 8000224:	dac7      	bge.n	80001b6 <CLCD_GPIO_Set+0x16>
	}
}
 8000226:	bf00      	nop
 8000228:	bf00      	nop
 800022a:	3710      	adds	r7, #16
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000098 	.word	0x20000098

08000234 <CLCD_Config_Init>:

static void CLCD_Config_Init()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
		{ CLCD_PIN_E_TYPE , CLCD_PIN_E_NUM  },  // idx =  8, 4
		{ CLCD_PIN_RW_TYPE, CLCD_PIN_RW_NUM },	// idx =  9, 5
		{ CLCD_PIN_RS_TYPE, CLCD_PIN_RS_NUM },  // idx = 10, 6
	};

	clcd_pin = clcd_pin_sc;
 8000238:	4b14      	ldr	r3, [pc, #80]	; (800028c <CLCD_Config_Init+0x58>)
 800023a:	4a15      	ldr	r2, [pc, #84]	; (8000290 <CLCD_Config_Init+0x5c>)
 800023c:	601a      	str	r2, [r3, #0]

	ems_ctrl.i_d = CLCD_I_EMS_I_D;
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <CLCD_Config_Init+0x60>)
 8000240:	7813      	ldrb	r3, [r2, #0]
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	7013      	strb	r3, [r2, #0]
	ems_ctrl.s = CLCD_I_EMS_S;
 8000248:	4a12      	ldr	r2, [pc, #72]	; (8000294 <CLCD_Config_Init+0x60>)
 800024a:	7813      	ldrb	r3, [r2, #0]
 800024c:	f36f 0341 	bfc	r3, #1, #1
 8000250:	7013      	strb	r3, [r2, #0]

	doc_ctrl.d = CLCD_I_DOC_D;
 8000252:	4a11      	ldr	r2, [pc, #68]	; (8000298 <CLCD_Config_Init+0x64>)
 8000254:	7813      	ldrb	r3, [r2, #0]
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	7013      	strb	r3, [r2, #0]
	doc_ctrl.c = CLCD_I_DOC_C;
 800025c:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <CLCD_Config_Init+0x64>)
 800025e:	7813      	ldrb	r3, [r2, #0]
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	7013      	strb	r3, [r2, #0]
	doc_ctrl.b = CLCD_I_DOC_B;
 8000266:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <CLCD_Config_Init+0x64>)
 8000268:	7813      	ldrb	r3, [r2, #0]
 800026a:	f36f 0382 	bfc	r3, #2, #1
 800026e:	7013      	strb	r3, [r2, #0]

	cods_ctrl.s_c = CLCD_I_CODS_S_C;
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <CLCD_Config_Init+0x68>)
 8000272:	7813      	ldrb	r3, [r2, #0]
 8000274:	f36f 0300 	bfc	r3, #0, #1
 8000278:	7013      	strb	r3, [r2, #0]
	cods_ctrl.r_l = CLCD_I_CODS_R_L;
 800027a:	4a08      	ldr	r2, [pc, #32]	; (800029c <CLCD_Config_Init+0x68>)
 800027c:	7813      	ldrb	r3, [r2, #0]
 800027e:	f36f 0341 	bfc	r3, #1, #1
 8000282:	7013      	strb	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	20000098 	.word	0x20000098
 8000290:	08002020 	.word	0x08002020
 8000294:	2000008c 	.word	0x2000008c
 8000298:	20000090 	.word	0x20000090
 800029c:	20000094 	.word	0x20000094

080002a0 <CLCD_Inst_Exec>:

static void CLCD_Inst_Exec(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLCD_PIN_E_TYPE, CLCD_PIN_E_NUM, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <CLCD_Inst_Exec+0x2c>)
 80002ac:	f000 fde2 	bl	8000e74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 fb53 	bl	800095c <HAL_Delay>
	HAL_GPIO_WritePin(CLCD_PIN_E_TYPE, CLCD_PIN_E_NUM, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <CLCD_Inst_Exec+0x2c>)
 80002be:	f000 fdd9 	bl	8000e74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 fb4a 	bl	800095c <HAL_Delay>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40011000 	.word	0x40011000

080002d0 <CLCD_Init>:

void CLCD_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	CLCD_Config_Init();
 80002d4:	f7ff ffae 	bl	8000234 <CLCD_Config_Init>
	HAL_Delay(40);
 80002d8:	2028      	movs	r0, #40	; 0x28
 80002da:	f000 fb3f 	bl	800095c <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 80002de:	2030      	movs	r0, #48	; 0x30
 80002e0:	f7ff ff3c 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(5);
 80002e4:	2005      	movs	r0, #5
 80002e6:	f000 fb39 	bl	800095c <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 80002ea:	2030      	movs	r0, #48	; 0x30
 80002ec:	f7ff ff36 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(1);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fb33 	bl	800095c <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 80002f6:	2030      	movs	r0, #48	; 0x30
 80002f8:	f7ff ff30 	bl	800015c <CLCD_Pin_Set_Exec>
#if CLCD_I_FS_D_L == 0
	CLCD_GPIO_Set(CLCD_PIN_S_DB5);
 80002fc:	2020      	movs	r0, #32
 80002fe:	f7ff ff4f 	bl	80001a0 <CLCD_GPIO_Set>
	CLCD_Inst_Exec();
 8000302:	f7ff ffcd 	bl	80002a0 <CLCD_Inst_Exec>
#endif
	CLCD_Function_Set();
 8000306:	f000 f887 	bl	8000418 <CLCD_Function_Set>
	CLCD_Display_ON_OFF_Control(CLCD_DOC_E_NONE);
 800030a:	2000      	movs	r0, #0
 800030c:	f000 f84a 	bl	80003a4 <CLCD_Display_ON_OFF_Control>
	CLCD_Clear_Display();
 8000310:	f000 f808 	bl	8000324 <CLCD_Clear_Display>
	CLCD_Entry_Mode_Set(CLCD_EMS_E_INIT);
 8000314:	2001      	movs	r0, #1
 8000316:	f000 f817 	bl	8000348 <CLCD_Entry_Mode_Set>
	// Initialization Ends

	CLCD_Display_ON_OFF_Control(CLCD_DOC_E_INIT);
 800031a:	2003      	movs	r0, #3
 800031c:	f000 f842 	bl	80003a4 <CLCD_Display_ON_OFF_Control>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <CLCD_Clear_Display>:

void CLCD_Clear_Display(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB0);
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ff17 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}

08000332 <CLCD_Return_Home>:

void CLCD_Return_Home(void)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB1);
 8000336:	2002      	movs	r0, #2
 8000338:	f7ff ff10 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f000 fb0d 	bl	800095c <HAL_Delay>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <CLCD_Entry_Mode_Set>:

void CLCD_Entry_Mode_Set(CLCD_EMS_E select)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	CLCD_EMS_E clcd_pin = CLCD_PIN_S_DB2;
 8000352:	2304      	movs	r3, #4
 8000354:	73fb      	strb	r3, [r7, #15]

	ems_ctrl.bits = select;
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <CLCD_Entry_Mode_Set+0x58>)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	7013      	strb	r3, [r2, #0]
	clcd_pin |= (ems_ctrl.i_d ? CLCD_PIN_S_DB1 : 0);
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <CLCD_Entry_Mode_Set+0x58>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	b25b      	sxtb	r3, r3
 8000364:	f003 0302 	and.w	r3, r3, #2
 8000368:	b25a      	sxtb	r2, r3
 800036a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800036e:	4313      	orrs	r3, r2
 8000370:	b25b      	sxtb	r3, r3
 8000372:	73fb      	strb	r3, [r7, #15]
	clcd_pin |= (ems_ctrl.s ? CLCD_PIN_S_DB0 : 0);
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <CLCD_Entry_Mode_Set+0x58>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	085b      	lsrs	r3, r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	b25b      	sxtb	r3, r3
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	b25a      	sxtb	r2, r3
 8000384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000388:	4313      	orrs	r3, r2
 800038a:	b25b      	sxtb	r3, r3
 800038c:	73fb      	strb	r3, [r7, #15]

	CLCD_Pin_Set_Exec(clcd_pin);
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	b29b      	uxth	r3, r3
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff fee2 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000008c 	.word	0x2000008c

080003a4 <CLCD_Display_ON_OFF_Control>:

static void CLCD_Display_ON_OFF_Control(CLCD_DOC_E select)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	CLCD_DOC_E clcd_pin = CLCD_PIN_S_DB3;
 80003ae:	2308      	movs	r3, #8
 80003b0:	73fb      	strb	r3, [r7, #15]

	doc_ctrl.bits = select;
 80003b2:	4a18      	ldr	r2, [pc, #96]	; (8000414 <CLCD_Display_ON_OFF_Control+0x70>)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	7013      	strb	r3, [r2, #0]
	clcd_pin |= (doc_ctrl.d ? CLCD_PIN_S_DB2 : 0);
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <CLCD_Display_ON_OFF_Control+0x70>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	b25a      	sxtb	r2, r3
 80003c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ca:	4313      	orrs	r3, r2
 80003cc:	b25b      	sxtb	r3, r3
 80003ce:	73fb      	strb	r3, [r7, #15]
	clcd_pin |= (doc_ctrl.c ? CLCD_PIN_S_DB1 : 0);
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <CLCD_Display_ON_OFF_Control+0x70>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	b25a      	sxtb	r2, r3
 80003dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b25b      	sxtb	r3, r3
 80003e4:	73fb      	strb	r3, [r7, #15]
	clcd_pin |= (doc_ctrl.b ? CLCD_PIN_S_DB0 : 0);
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <CLCD_Display_ON_OFF_Control+0x70>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	089b      	lsrs	r3, r3, #2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	b25b      	sxtb	r3, r3
 80003f0:	f003 0301 	and.w	r3, r3, #1
 80003f4:	b25a      	sxtb	r2, r3
 80003f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b25b      	sxtb	r3, r3
 80003fe:	73fb      	strb	r3, [r7, #15]

	CLCD_Pin_Set_Exec(clcd_pin);
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	b29b      	uxth	r3, r3
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fea9 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000090 	.word	0x20000090

08000418 <CLCD_Function_Set>:

	CLCD_Pin_Set_Exec(clcd_pin);
}

static void CLCD_Function_Set(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
	uint16_t clcd_pin = CLCD_PIN_S_DB5;
 800041e:	2320      	movs	r3, #32
 8000420:	80fb      	strh	r3, [r7, #6]

	clcd_pin |= (CLCD_I_FS_D_L ? CLCD_PIN_S_DB4 : 0);
	clcd_pin |= (CLCD_I_FS_N ? CLCD_PIN_S_DB3 : 0);
 8000422:	88fb      	ldrh	r3, [r7, #6]
 8000424:	f043 0308 	orr.w	r3, r3, #8
 8000428:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (CLCD_I_FS_F ? CLCD_PIN_S_DB2 : 0);

	CLCD_Pin_Set_Exec(clcd_pin);
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff fe95 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <CLCD_Set_DDRAM_address>:
{

}

static void CLCD_Set_DDRAM_address(uint16_t row, uint16_t col)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b084      	sub	sp, #16
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	460a      	mov	r2, r1
 8000444:	80fb      	strh	r3, [r7, #6]
 8000446:	4613      	mov	r3, r2
 8000448:	80bb      	strh	r3, [r7, #4]
	uint16_t pin_s = CLCD_PIN_S_DB7;
 800044a:	2380      	movs	r3, #128	; 0x80
 800044c:	81fb      	strh	r3, [r7, #14]

#if CLCD_I_FS_N == 1
	if(row)
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <CLCD_Set_DDRAM_address+0x1e>
		row = 0x40;
 8000454:	2340      	movs	r3, #64	; 0x40
 8000456:	80fb      	strh	r3, [r7, #6]
	pin_s |= (row | col);
 8000458:	88fa      	ldrh	r2, [r7, #6]
 800045a:	88bb      	ldrh	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	b29a      	uxth	r2, r3
 8000460:	89fb      	ldrh	r3, [r7, #14]
 8000462:	4313      	orrs	r3, r2
 8000464:	81fb      	strh	r3, [r7, #14]
		return;
	else
		pin_s |= col;
	}
#endif
	CLCD_Pin_Set_Exec(pin_s);
 8000466:	89fb      	ldrh	r3, [r7, #14]
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe77 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <CLCD_Write_Data_To_CG_OR_DDRAM>:
{

}

static void CLCD_Write_Data_To_CG_OR_DDRAM(uint16_t data)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b084      	sub	sp, #16
 800047a:	af00      	add	r7, sp, #0
 800047c:	4603      	mov	r3, r0
 800047e:	80fb      	strh	r3, [r7, #6]
	uint16_t pin_s = CLCD_PIN_S_RS;
 8000480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000484:	81fb      	strh	r3, [r7, #14]
	pin_s |= data;
 8000486:	89fa      	ldrh	r2, [r7, #14]
 8000488:	88fb      	ldrh	r3, [r7, #6]
 800048a:	4313      	orrs	r3, r2
 800048c:	81fb      	strh	r3, [r7, #14]
	CLCD_Pin_Set_Exec(pin_s);
 800048e:	89fb      	ldrh	r3, [r7, #14]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fe63 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <CLCD_Write>:
{

}

void CLCD_Write(CLCD_ADDR_SET_BOOL addr_set, uint16_t row, uint16_t col, const char* str)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	4603      	mov	r3, r0
 80004a8:	73fb      	strb	r3, [r7, #15]
 80004aa:	460b      	mov	r3, r1
 80004ac:	81bb      	strh	r3, [r7, #12]
 80004ae:	4613      	mov	r3, r2
 80004b0:	817b      	strh	r3, [r7, #10]
	int16_t i;
	int32_t str_size;
	str_size = strlen(str);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff fe4a 	bl	800014c <strlen>
 80004b8:	4603      	mov	r3, r0
 80004ba:	613b      	str	r3, [r7, #16]

	if(str_size > 16)
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	2b10      	cmp	r3, #16
 80004c0:	dd01      	ble.n	80004c6 <CLCD_Write+0x28>
		str_size = 16;
 80004c2:	2310      	movs	r3, #16
 80004c4:	613b      	str	r3, [r7, #16]

	if(addr_set)
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d005      	beq.n	80004d8 <CLCD_Write+0x3a>
		CLCD_Set_DDRAM_address(row, col);
 80004cc:	897a      	ldrh	r2, [r7, #10]
 80004ce:	89bb      	ldrh	r3, [r7, #12]
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ffb1 	bl	800043a <CLCD_Set_DDRAM_address>

	for(i = 0; i < str_size; i++)
 80004d8:	2300      	movs	r3, #0
 80004da:	82fb      	strh	r3, [r7, #22]
 80004dc:	e00e      	b.n	80004fc <CLCD_Write+0x5e>
		CLCD_Write_Data_To_CG_OR_DDRAM(str[i]);
 80004de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ffc3 	bl	8000476 <CLCD_Write_Data_To_CG_OR_DDRAM>
	for(i = 0; i < str_size; i++)
 80004f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	3301      	adds	r3, #1
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	82fb      	strh	r3, [r7, #22]
 80004fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	429a      	cmp	r2, r3
 8000504:	dceb      	bgt.n	80004de <CLCD_Write+0x40>
}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <MX_GPIO_Init+0xcc>)
 800052a:	f043 0310 	orr.w	r3, r3, #16
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0310 	and.w	r3, r3, #16
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <MX_GPIO_Init+0xcc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a26      	ldr	r2, [pc, #152]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <MX_GPIO_Init+0xcc>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <MX_GPIO_Init+0xcc>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_GPIO_Init+0xcc>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_GPIO_Init+0xcc>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <MX_GPIO_Init+0xd0>)
 800058c:	f000 fc72 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	211b      	movs	r1, #27
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000596:	f000 fc6d 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800059a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <MX_GPIO_Init+0xd0>)
 80005b4:	f000 fada 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80005b8:	231b      	movs	r3, #27
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_GPIO_Init+0xd4>)
 80005d0:	f000 facc 	bl	8000b6c <HAL_GPIO_Init>

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40011000 	.word	0x40011000
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 f953 	bl	8000898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f84b 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f7ff ff8b 	bl	8000510 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  	CLCD_Init();
 80005fa:	f7ff fe69 	bl	80002d0 <CLCD_Init>
  	char str[] = "Hello World!!";
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <main+0x98>)
 8000600:	f107 0410 	add.w	r4, r7, #16
 8000604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000606:	c407      	stmia	r4!, {r0, r1, r2}
 8000608:	8023      	strh	r3, [r4, #0]
//  	char str[] = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xe0, 0xf0, 0xf1, 'f', 'F', 'e', 'E', 'i', 'I', 'j', 'J', 'y', 'Y' };
  	CLCD_Write(CLCD_ADDR_SET, 0, 0, str);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff43 	bl	800049e <CLCD_Write>
  	CLCD_Write(CLCD_ADDR_SET, 1, 0, str);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	2200      	movs	r2, #0
 800061e:	2101      	movs	r1, #1
 8000620:	2001      	movs	r0, #1
 8000622:	f7ff ff3c 	bl	800049e <CLCD_Write>
  	HAL_Delay(3000);
 8000626:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800062a:	f000 f997 	bl	800095c <HAL_Delay>
  	CLCD_Write(CLCD_ADDR_SET, 0, 0, "Hawawa Hoee..");
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <main+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ff32 	bl	800049e <CLCD_Write>
  	HAL_Delay(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063e:	f000 f98d 	bl	800095c <HAL_Delay>

  	uint16_t cnt = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	83fb      	strh	r3, [r7, #30]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	CLCD_Clear_Display();
 8000646:	f7ff fe6d 	bl	8000324 <CLCD_Clear_Display>

  while (1)
  {
	  HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f000 f985 	bl	800095c <HAL_Delay>
	  sprintf(str1, "cnt = %d", cnt);
 8000652:	8bfa      	ldrh	r2, [r7, #30]
 8000654:	463b      	mov	r3, r7
 8000656:	490c      	ldr	r1, [pc, #48]	; (8000688 <main+0xa0>)
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f83d 	bl	80016d8 <siprintf>
	  CLCD_Write(CLCD_ADDR_SET, 1, 0, str1);
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	2001      	movs	r0, #1
 8000666:	f7ff ff1a 	bl	800049e <CLCD_Write>
	  cnt++;
 800066a:	8bfb      	ldrh	r3, [r7, #30]
 800066c:	3301      	adds	r3, #1
 800066e:	83fb      	strh	r3, [r7, #30]
	  HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000674:	f000 f972 	bl	800095c <HAL_Delay>
	  CLCD_Return_Home();
 8000678:	f7ff fe5b 	bl	8000332 <CLCD_Return_Home>
	  HAL_Delay(1000);
 800067c:	e7e5      	b.n	800064a <main+0x62>
 800067e:	bf00      	nop
 8000680:	08002000 	.word	0x08002000
 8000684:	08001fe4 	.word	0x08001fe4
 8000688:	08001ff4 	.word	0x08001ff4

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	; 0x40
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2228      	movs	r2, #40	; 0x28
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f814 	bl	80016c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fbe5 	bl	8000ea4 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006e0:	f000 f819 	bl	8000716 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fe52 	bl	80013a8 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800070a:	f000 f804 	bl	8000716 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071a:	b672      	cpsid	i
}
 800071c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071e:	e7fe      	b.n	800071e <Error_Handler+0x8>

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_MspInit+0x5c>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <HAL_MspInit+0x5c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x5c>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_MspInit+0x5c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_MspInit+0x60>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <HAL_MspInit+0x60>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000
 8000780:	40010000 	.word	0x40010000

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler+0x4>

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ca:	f000 f8ab 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <_sbrk+0x5c>)
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <_sbrk+0x60>)
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x64>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <_sbrk+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d207      	bcs.n	8000814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000804:	f000 ff36 	bl	8001674 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	e009      	b.n	8000828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <_sbrk+0x64>)
 8000824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20005000 	.word	0x20005000
 8000834:	00000400 	.word	0x00000400
 8000838:	2000009c 	.word	0x2000009c
 800083c:	200000b8 	.word	0x200000b8

08000840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000872:	f7ff ffe5 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000876:	f000 ff03 	bl	8001680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087a:	f7ff feb5 	bl	80005e8 <main>
  bx lr
 800087e:	4770      	bx	lr
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000888:	080020a4 	.word	0x080020a4
  ldr r2, =_sbss
 800088c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000890:	200000b4 	.word	0x200000b4

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>
	...

08000898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_Init+0x28>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_Init+0x28>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f92b 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	200f      	movs	r0, #15
 80008b0:	f000 f808 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff ff34 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40022000 	.word	0x40022000

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f935 	bl	8000b52 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 f90b 	bl	8000b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_IncTick+0x1c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x20>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a03      	ldr	r2, [pc, #12]	; (8000944 <HAL_IncTick+0x20>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	20000008 	.word	0x20000008
 8000944:	200000a0 	.word	0x200000a0

08000948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <HAL_GetTick+0x10>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	200000a0 	.word	0x200000a0

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fff0 	bl	8000948 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffe0 	bl	8000948 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000008 	.word	0x20000008

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	; (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad0:	d301      	bcc.n	8000ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00f      	b.n	8000af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <SysTick_Config+0x40>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ade:	210f      	movs	r1, #15
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f7ff ff90 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <SysTick_Config+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SysTick_Config+0x40>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff49 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff5e 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff90 	bl	8000a5c <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5f 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffb0 	bl	8000ac0 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	e169      	b.n	8000e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b80:	2201      	movs	r2, #1
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	f040 8158 	bne.w	8000e4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a9a      	ldr	r2, [pc, #616]	; (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d05e      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a98      	ldr	r2, [pc, #608]	; (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d875      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bae:	4a98      	ldr	r2, [pc, #608]	; (8000e10 <HAL_GPIO_Init+0x2a4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d058      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bb4:	4a96      	ldr	r2, [pc, #600]	; (8000e10 <HAL_GPIO_Init+0x2a4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d86f      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bba:	4a96      	ldr	r2, [pc, #600]	; (8000e14 <HAL_GPIO_Init+0x2a8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d052      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bc0:	4a94      	ldr	r2, [pc, #592]	; (8000e14 <HAL_GPIO_Init+0x2a8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d869      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bc6:	4a94      	ldr	r2, [pc, #592]	; (8000e18 <HAL_GPIO_Init+0x2ac>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d04c      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bcc:	4a92      	ldr	r2, [pc, #584]	; (8000e18 <HAL_GPIO_Init+0x2ac>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d863      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bd2:	4a92      	ldr	r2, [pc, #584]	; (8000e1c <HAL_GPIO_Init+0x2b0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d046      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bd8:	4a90      	ldr	r2, [pc, #576]	; (8000e1c <HAL_GPIO_Init+0x2b0>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d85d      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d82a      	bhi.n	8000c38 <HAL_GPIO_Init+0xcc>
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d859      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000be6:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <HAL_GPIO_Init+0x80>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c41 	.word	0x08000c41
 8000bf4:	08000c53 	.word	0x08000c53
 8000bf8:	08000c95 	.word	0x08000c95
 8000bfc:	08000c9b 	.word	0x08000c9b
 8000c00:	08000c9b 	.word	0x08000c9b
 8000c04:	08000c9b 	.word	0x08000c9b
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000c9b 	.word	0x08000c9b
 8000c10:	08000c9b 	.word	0x08000c9b
 8000c14:	08000c9b 	.word	0x08000c9b
 8000c18:	08000c9b 	.word	0x08000c9b
 8000c1c:	08000c9b 	.word	0x08000c9b
 8000c20:	08000c9b 	.word	0x08000c9b
 8000c24:	08000c9b 	.word	0x08000c9b
 8000c28:	08000c9b 	.word	0x08000c9b
 8000c2c:	08000c9b 	.word	0x08000c9b
 8000c30:	08000c49 	.word	0x08000c49
 8000c34:	08000c5d 	.word	0x08000c5d
 8000c38:	4a79      	ldr	r2, [pc, #484]	; (8000e20 <HAL_GPIO_Init+0x2b4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c3e:	e02c      	b.n	8000c9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e029      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e024      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	3308      	adds	r3, #8
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e01f      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	330c      	adds	r3, #12
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e01a      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e013      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d105      	bne.n	8000c88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	611a      	str	r2, [r3, #16]
          break;
 8000c86:	e009      	b.n	8000c9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	615a      	str	r2, [r3, #20]
          break;
 8000c92:	e003      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          break;
 8000c9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2bff      	cmp	r3, #255	; 0xff
 8000ca0:	d801      	bhi.n	8000ca6 <HAL_GPIO_Init+0x13a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	e001      	b.n	8000caa <HAL_GPIO_Init+0x13e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2bff      	cmp	r3, #255	; 0xff
 8000cb0:	d802      	bhi.n	8000cb8 <HAL_GPIO_Init+0x14c>
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_Init+0x152>
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	3b08      	subs	r3, #8
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	401a      	ands	r2, r3
 8000cd0:	6a39      	ldr	r1, [r7, #32]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 80b1 	beq.w	8000e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cec:	4b4d      	ldr	r3, [pc, #308]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a4c      	ldr	r2, [pc, #304]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d04:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a40      	ldr	r2, [pc, #256]	; (8000e2c <HAL_GPIO_Init+0x2c0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d013      	beq.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a3f      	ldr	r2, [pc, #252]	; (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_GPIO_Init+0x1e8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	; (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x1e4>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d101      	bne.n	8000d4c <HAL_GPIO_Init+0x1e0>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d6a:	492f      	ldr	r1, [pc, #188]	; (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	492c      	ldr	r1, [pc, #176]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	600b      	str	r3, [r1, #0]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4928      	ldr	r1, [pc, #160]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	4922      	ldr	r1, [pc, #136]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	604b      	str	r3, [r1, #4]
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	491e      	ldr	r1, [pc, #120]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	4918      	ldr	r1, [pc, #96]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4914      	ldr	r1, [pc, #80]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d021      	beq.n	8000e40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	490e      	ldr	r1, [pc, #56]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	60cb      	str	r3, [r1, #12]
 8000e08:	e021      	b.n	8000e4e <HAL_GPIO_Init+0x2e2>
 8000e0a:	bf00      	nop
 8000e0c:	10320000 	.word	0x10320000
 8000e10:	10310000 	.word	0x10310000
 8000e14:	10220000 	.word	0x10220000
 8000e18:	10210000 	.word	0x10210000
 8000e1c:	10120000 	.word	0x10120000
 8000e20:	10110000 	.word	0x10110000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40010c00 	.word	0x40010c00
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40011400 	.word	0x40011400
 8000e3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_GPIO_Init+0x304>)
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <HAL_GPIO_Init+0x304>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	3301      	adds	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f47f ae8e 	bne.w	8000b80 <HAL_GPIO_Init+0x14>
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	372c      	adds	r7, #44	; 0x2c
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e90:	e003      	b.n	8000e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e272      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8087 	beq.w	8000fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec4:	4b92      	ldr	r3, [pc, #584]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d00c      	beq.n	8000eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed0:	4b8f      	ldr	r3, [pc, #572]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d112      	bne.n	8000f02 <HAL_RCC_OscConfig+0x5e>
 8000edc:	4b8c      	ldr	r3, [pc, #560]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee8:	d10b      	bne.n	8000f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eea:	4b89      	ldr	r3, [pc, #548]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d06c      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x12c>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d168      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e24c      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0a:	d106      	bne.n	8000f1a <HAL_RCC_OscConfig+0x76>
 8000f0c:	4b80      	ldr	r3, [pc, #512]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a7f      	ldr	r2, [pc, #508]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	e02e      	b.n	8000f78 <HAL_RCC_OscConfig+0xd4>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x98>
 8000f22:	4b7b      	ldr	r3, [pc, #492]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a7a      	ldr	r2, [pc, #488]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b78      	ldr	r3, [pc, #480]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a77      	ldr	r2, [pc, #476]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e01d      	b.n	8000f78 <HAL_RCC_OscConfig+0xd4>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0xbc>
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a71      	ldr	r2, [pc, #452]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a6e      	ldr	r2, [pc, #440]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0xd4>
 8000f60:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a6a      	ldr	r2, [pc, #424]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b68      	ldr	r3, [pc, #416]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a67      	ldr	r2, [pc, #412]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d013      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fce2 	bl	8000948 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fcde 	bl	8000948 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e200      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0xe4>
 8000fa6:	e014      	b.n	8000fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fcce 	bl	8000948 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fcca 	bl	8000948 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1ec      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	4b53      	ldr	r3, [pc, #332]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x10c>
 8000fce:	e000      	b.n	8000fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d063      	beq.n	80010a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d11c      	bne.n	8001030 <HAL_RCC_OscConfig+0x18c>
 8000ff6:	4b46      	ldr	r3, [pc, #280]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d116      	bne.n	8001030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_RCC_OscConfig+0x176>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e1c0      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4939      	ldr	r1, [pc, #228]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	e03a      	b.n	80010a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d020      	beq.n	800107a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fc83 	bl	8000948 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fc7f 	bl	8000948 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1a1      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4927      	ldr	r1, [pc, #156]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
 8001078:	e015      	b.n	80010a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fc62 	bl	8000948 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001088:	f7ff fc5e 	bl	8000948 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e180      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d03a      	beq.n	8001128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d019      	beq.n	80010ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_RCC_OscConfig+0x274>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc42 	bl	8000948 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc3e 	bl	8000948 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e160      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 faa6 	bl	8001638 <RCC_Delay>
 80010ec:	e01c      	b.n	8001128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_RCC_OscConfig+0x274>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f4:	f7ff fc28 	bl	8000948 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fa:	e00f      	b.n	800111c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010fc:	f7ff fc24 	bl	8000948 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d908      	bls.n	800111c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e146      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	42420000 	.word	0x42420000
 8001118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111c:	4b92      	ldr	r3, [pc, #584]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1e9      	bne.n	80010fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80a6 	beq.w	8001282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113a:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10d      	bne.n	8001162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a87      	ldr	r2, [pc, #540]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b85      	ldr	r3, [pc, #532]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115e:	2301      	movs	r3, #1
 8001160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001162:	4b82      	ldr	r3, [pc, #520]	; (800136c <HAL_RCC_OscConfig+0x4c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116a:	2b00      	cmp	r3, #0
 800116c:	d118      	bne.n	80011a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116e:	4b7f      	ldr	r3, [pc, #508]	; (800136c <HAL_RCC_OscConfig+0x4c8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a7e      	ldr	r2, [pc, #504]	; (800136c <HAL_RCC_OscConfig+0x4c8>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117a:	f7ff fbe5 	bl	8000948 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001182:	f7ff fbe1 	bl	8000948 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b64      	cmp	r3, #100	; 0x64
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e103      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001194:	4b75      	ldr	r3, [pc, #468]	; (800136c <HAL_RCC_OscConfig+0x4c8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x312>
 80011a8:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4a6e      	ldr	r2, [pc, #440]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6213      	str	r3, [r2, #32]
 80011b4:	e02d      	b.n	8001212 <HAL_RCC_OscConfig+0x36e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x334>
 80011be:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a69      	ldr	r2, [pc, #420]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	f023 0301 	bic.w	r3, r3, #1
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4a66      	ldr	r2, [pc, #408]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	f023 0304 	bic.w	r3, r3, #4
 80011d4:	6213      	str	r3, [r2, #32]
 80011d6:	e01c      	b.n	8001212 <HAL_RCC_OscConfig+0x36e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d10c      	bne.n	80011fa <HAL_RCC_OscConfig+0x356>
 80011e0:	4b61      	ldr	r3, [pc, #388]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a60      	ldr	r2, [pc, #384]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a5d      	ldr	r2, [pc, #372]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6213      	str	r3, [r2, #32]
 80011f8:	e00b      	b.n	8001212 <HAL_RCC_OscConfig+0x36e>
 80011fa:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a5a      	ldr	r2, [pc, #360]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6213      	str	r3, [r2, #32]
 8001206:	4b58      	ldr	r3, [pc, #352]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a57      	ldr	r2, [pc, #348]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f023 0304 	bic.w	r3, r3, #4
 8001210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d015      	beq.n	8001246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fb95 	bl	8000948 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fb91 	bl	8000948 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e0b1      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001238:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0ee      	beq.n	8001222 <HAL_RCC_OscConfig+0x37e>
 8001244:	e014      	b.n	8001270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fb7f 	bl	8000948 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fb7b 	bl	8000948 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f241 3288 	movw	r2, #5000	; 0x1388
 800125c:	4293      	cmp	r3, r2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e09b      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001264:	4b40      	ldr	r3, [pc, #256]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ee      	bne.n	800124e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d105      	bne.n	8001282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001276:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a3b      	ldr	r2, [pc, #236]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8087 	beq.w	800139a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b08      	cmp	r3, #8
 8001296:	d061      	beq.n	800135c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d146      	bne.n	800132e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a0:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_RCC_OscConfig+0x4cc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb4f 	bl	8000948 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ae:	f7ff fb4b 	bl	8000948 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e06d      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d108      	bne.n	80012e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	4921      	ldr	r1, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a19      	ldr	r1, [r3, #32]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	430b      	orrs	r3, r1
 80012fa:	491b      	ldr	r1, [pc, #108]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_RCC_OscConfig+0x4cc>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fb1f 	bl	8000948 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff fb1b 	bl	8000948 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e03d      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x46a>
 800132c:	e035      	b.n	800139a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_RCC_OscConfig+0x4cc>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fb08 	bl	8000948 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fb04 	bl	8000948 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e026      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x498>
 800135a:	e01e      	b.n	800139a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e019      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
 8001368:	40021000 	.word	0x40021000
 800136c:	40007000 	.word	0x40007000
 8001370:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_RCC_OscConfig+0x500>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	429a      	cmp	r2, r3
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0d0      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d910      	bls.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b67      	ldr	r3, [pc, #412]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 0207 	bic.w	r2, r3, #7
 80013d2:	4965      	ldr	r1, [pc, #404]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b8      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001404:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800140e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	494d      	ldr	r1, [pc, #308]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d040      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d115      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e07f      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e073      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	4b3d      	ldr	r3, [pc, #244]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e06b      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001486:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f023 0203 	bic.w	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4936      	ldr	r1, [pc, #216]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff fa56 	bl	8000948 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff fa52 	bl	8000948 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e053      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 020c 	and.w	r2, r3, #12
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1eb      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d210      	bcs.n	80014f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 0207 	bic.w	r2, r3, #7
 80014de:	4922      	ldr	r1, [pc, #136]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e032      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4916      	ldr	r1, [pc, #88]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001536:	f000 f821 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800153a:	4602      	mov	r2, r0
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	490a      	ldr	r1, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	5ccb      	ldrb	r3, [r1, r3]
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_RCC_ClockConfig+0x1cc>)
 8001550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1d0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f9b4 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022000 	.word	0x40022000
 800156c:	40021000 	.word	0x40021000
 8001570:	08002058 	.word	0x08002058
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b490      	push	{r4, r7}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_RCC_GetSysClockFreq+0xac>)
 8001584:	1d3c      	adds	r4, r7, #4
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800158c:	f240 2301 	movw	r3, #513	; 0x201
 8001590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d002      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x40>
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d003      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x46>
 80015ba:	e02b      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015be:	623b      	str	r3, [r7, #32]
      break;
 80015c0:	e02b      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3328      	adds	r3, #40	; 0x28
 80015cc:	443b      	add	r3, r7
 80015ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d012      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	0c5b      	lsrs	r3, r3, #17
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	3328      	adds	r3, #40	; 0x28
 80015ea:	443b      	add	r3, r7
 80015ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015f6:	fb03 f202 	mul.w	r2, r3, r2
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	e004      	b.n	800160e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	623b      	str	r3, [r7, #32]
      break;
 8001612:	e002      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001616:	623b      	str	r3, [r7, #32]
      break;
 8001618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800161a:	6a3b      	ldr	r3, [r7, #32]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bc90      	pop	{r4, r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	08002010 	.word	0x08002010
 800162c:	40021000 	.word	0x40021000
 8001630:	007a1200 	.word	0x007a1200
 8001634:	003d0900 	.word	0x003d0900

08001638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <RCC_Delay+0x34>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <RCC_Delay+0x38>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0a5b      	lsrs	r3, r3, #9
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001654:	bf00      	nop
  }
  while (Delay --);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	60fa      	str	r2, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f9      	bne.n	8001654 <RCC_Delay+0x1c>
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000000 	.word	0x20000000
 8001670:	10624dd3 	.word	0x10624dd3

08001674 <__errno>:
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <__errno+0x8>)
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000000c 	.word	0x2000000c

08001680 <__libc_init_array>:
 8001680:	b570      	push	{r4, r5, r6, lr}
 8001682:	2600      	movs	r6, #0
 8001684:	4d0c      	ldr	r5, [pc, #48]	; (80016b8 <__libc_init_array+0x38>)
 8001686:	4c0d      	ldr	r4, [pc, #52]	; (80016bc <__libc_init_array+0x3c>)
 8001688:	1b64      	subs	r4, r4, r5
 800168a:	10a4      	asrs	r4, r4, #2
 800168c:	42a6      	cmp	r6, r4
 800168e:	d109      	bne.n	80016a4 <__libc_init_array+0x24>
 8001690:	f000 fc9c 	bl	8001fcc <_init>
 8001694:	2600      	movs	r6, #0
 8001696:	4d0a      	ldr	r5, [pc, #40]	; (80016c0 <__libc_init_array+0x40>)
 8001698:	4c0a      	ldr	r4, [pc, #40]	; (80016c4 <__libc_init_array+0x44>)
 800169a:	1b64      	subs	r4, r4, r5
 800169c:	10a4      	asrs	r4, r4, #2
 800169e:	42a6      	cmp	r6, r4
 80016a0:	d105      	bne.n	80016ae <__libc_init_array+0x2e>
 80016a2:	bd70      	pop	{r4, r5, r6, pc}
 80016a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016a8:	4798      	blx	r3
 80016aa:	3601      	adds	r6, #1
 80016ac:	e7ee      	b.n	800168c <__libc_init_array+0xc>
 80016ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b2:	4798      	blx	r3
 80016b4:	3601      	adds	r6, #1
 80016b6:	e7f2      	b.n	800169e <__libc_init_array+0x1e>
 80016b8:	0800209c 	.word	0x0800209c
 80016bc:	0800209c 	.word	0x0800209c
 80016c0:	0800209c 	.word	0x0800209c
 80016c4:	080020a0 	.word	0x080020a0

080016c8 <memset>:
 80016c8:	4603      	mov	r3, r0
 80016ca:	4402      	add	r2, r0
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d100      	bne.n	80016d2 <memset+0xa>
 80016d0:	4770      	bx	lr
 80016d2:	f803 1b01 	strb.w	r1, [r3], #1
 80016d6:	e7f9      	b.n	80016cc <memset+0x4>

080016d8 <siprintf>:
 80016d8:	b40e      	push	{r1, r2, r3}
 80016da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016de:	b500      	push	{lr}
 80016e0:	b09c      	sub	sp, #112	; 0x70
 80016e2:	ab1d      	add	r3, sp, #116	; 0x74
 80016e4:	9002      	str	r0, [sp, #8]
 80016e6:	9006      	str	r0, [sp, #24]
 80016e8:	9107      	str	r1, [sp, #28]
 80016ea:	9104      	str	r1, [sp, #16]
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <siprintf+0x38>)
 80016ee:	4909      	ldr	r1, [pc, #36]	; (8001714 <siprintf+0x3c>)
 80016f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80016f4:	9105      	str	r1, [sp, #20]
 80016f6:	6800      	ldr	r0, [r0, #0]
 80016f8:	a902      	add	r1, sp, #8
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f000 f868 	bl	80017d0 <_svfiprintf_r>
 8001700:	2200      	movs	r2, #0
 8001702:	9b02      	ldr	r3, [sp, #8]
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	b01c      	add	sp, #112	; 0x70
 8001708:	f85d eb04 	ldr.w	lr, [sp], #4
 800170c:	b003      	add	sp, #12
 800170e:	4770      	bx	lr
 8001710:	2000000c 	.word	0x2000000c
 8001714:	ffff0208 	.word	0xffff0208

08001718 <__ssputs_r>:
 8001718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800171c:	688e      	ldr	r6, [r1, #8]
 800171e:	4682      	mov	sl, r0
 8001720:	429e      	cmp	r6, r3
 8001722:	460c      	mov	r4, r1
 8001724:	4690      	mov	r8, r2
 8001726:	461f      	mov	r7, r3
 8001728:	d838      	bhi.n	800179c <__ssputs_r+0x84>
 800172a:	898a      	ldrh	r2, [r1, #12]
 800172c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001730:	d032      	beq.n	8001798 <__ssputs_r+0x80>
 8001732:	6825      	ldr	r5, [r4, #0]
 8001734:	6909      	ldr	r1, [r1, #16]
 8001736:	3301      	adds	r3, #1
 8001738:	eba5 0901 	sub.w	r9, r5, r1
 800173c:	6965      	ldr	r5, [r4, #20]
 800173e:	444b      	add	r3, r9
 8001740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001748:	106d      	asrs	r5, r5, #1
 800174a:	429d      	cmp	r5, r3
 800174c:	bf38      	it	cc
 800174e:	461d      	movcc	r5, r3
 8001750:	0553      	lsls	r3, r2, #21
 8001752:	d531      	bpl.n	80017b8 <__ssputs_r+0xa0>
 8001754:	4629      	mov	r1, r5
 8001756:	f000 fb6f 	bl	8001e38 <_malloc_r>
 800175a:	4606      	mov	r6, r0
 800175c:	b950      	cbnz	r0, 8001774 <__ssputs_r+0x5c>
 800175e:	230c      	movs	r3, #12
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f8ca 3000 	str.w	r3, [sl]
 8001768:	89a3      	ldrh	r3, [r4, #12]
 800176a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176e:	81a3      	strh	r3, [r4, #12]
 8001770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001774:	464a      	mov	r2, r9
 8001776:	6921      	ldr	r1, [r4, #16]
 8001778:	f000 face 	bl	8001d18 <memcpy>
 800177c:	89a3      	ldrh	r3, [r4, #12]
 800177e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001786:	81a3      	strh	r3, [r4, #12]
 8001788:	6126      	str	r6, [r4, #16]
 800178a:	444e      	add	r6, r9
 800178c:	6026      	str	r6, [r4, #0]
 800178e:	463e      	mov	r6, r7
 8001790:	6165      	str	r5, [r4, #20]
 8001792:	eba5 0509 	sub.w	r5, r5, r9
 8001796:	60a5      	str	r5, [r4, #8]
 8001798:	42be      	cmp	r6, r7
 800179a:	d900      	bls.n	800179e <__ssputs_r+0x86>
 800179c:	463e      	mov	r6, r7
 800179e:	4632      	mov	r2, r6
 80017a0:	4641      	mov	r1, r8
 80017a2:	6820      	ldr	r0, [r4, #0]
 80017a4:	f000 fac6 	bl	8001d34 <memmove>
 80017a8:	68a3      	ldr	r3, [r4, #8]
 80017aa:	2000      	movs	r0, #0
 80017ac:	1b9b      	subs	r3, r3, r6
 80017ae:	60a3      	str	r3, [r4, #8]
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	4433      	add	r3, r6
 80017b4:	6023      	str	r3, [r4, #0]
 80017b6:	e7db      	b.n	8001770 <__ssputs_r+0x58>
 80017b8:	462a      	mov	r2, r5
 80017ba:	f000 fbb1 	bl	8001f20 <_realloc_r>
 80017be:	4606      	mov	r6, r0
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d1e1      	bne.n	8001788 <__ssputs_r+0x70>
 80017c4:	4650      	mov	r0, sl
 80017c6:	6921      	ldr	r1, [r4, #16]
 80017c8:	f000 face 	bl	8001d68 <_free_r>
 80017cc:	e7c7      	b.n	800175e <__ssputs_r+0x46>
	...

080017d0 <_svfiprintf_r>:
 80017d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d4:	4698      	mov	r8, r3
 80017d6:	898b      	ldrh	r3, [r1, #12]
 80017d8:	4607      	mov	r7, r0
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	460d      	mov	r5, r1
 80017de:	4614      	mov	r4, r2
 80017e0:	b09d      	sub	sp, #116	; 0x74
 80017e2:	d50e      	bpl.n	8001802 <_svfiprintf_r+0x32>
 80017e4:	690b      	ldr	r3, [r1, #16]
 80017e6:	b963      	cbnz	r3, 8001802 <_svfiprintf_r+0x32>
 80017e8:	2140      	movs	r1, #64	; 0x40
 80017ea:	f000 fb25 	bl	8001e38 <_malloc_r>
 80017ee:	6028      	str	r0, [r5, #0]
 80017f0:	6128      	str	r0, [r5, #16]
 80017f2:	b920      	cbnz	r0, 80017fe <_svfiprintf_r+0x2e>
 80017f4:	230c      	movs	r3, #12
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	e0d1      	b.n	80019a2 <_svfiprintf_r+0x1d2>
 80017fe:	2340      	movs	r3, #64	; 0x40
 8001800:	616b      	str	r3, [r5, #20]
 8001802:	2300      	movs	r3, #0
 8001804:	9309      	str	r3, [sp, #36]	; 0x24
 8001806:	2320      	movs	r3, #32
 8001808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800180c:	2330      	movs	r3, #48	; 0x30
 800180e:	f04f 0901 	mov.w	r9, #1
 8001812:	f8cd 800c 	str.w	r8, [sp, #12]
 8001816:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80019bc <_svfiprintf_r+0x1ec>
 800181a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800181e:	4623      	mov	r3, r4
 8001820:	469a      	mov	sl, r3
 8001822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001826:	b10a      	cbz	r2, 800182c <_svfiprintf_r+0x5c>
 8001828:	2a25      	cmp	r2, #37	; 0x25
 800182a:	d1f9      	bne.n	8001820 <_svfiprintf_r+0x50>
 800182c:	ebba 0b04 	subs.w	fp, sl, r4
 8001830:	d00b      	beq.n	800184a <_svfiprintf_r+0x7a>
 8001832:	465b      	mov	r3, fp
 8001834:	4622      	mov	r2, r4
 8001836:	4629      	mov	r1, r5
 8001838:	4638      	mov	r0, r7
 800183a:	f7ff ff6d 	bl	8001718 <__ssputs_r>
 800183e:	3001      	adds	r0, #1
 8001840:	f000 80aa 	beq.w	8001998 <_svfiprintf_r+0x1c8>
 8001844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001846:	445a      	add	r2, fp
 8001848:	9209      	str	r2, [sp, #36]	; 0x24
 800184a:	f89a 3000 	ldrb.w	r3, [sl]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80a2 	beq.w	8001998 <_svfiprintf_r+0x1c8>
 8001854:	2300      	movs	r3, #0
 8001856:	f04f 32ff 	mov.w	r2, #4294967295
 800185a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800185e:	f10a 0a01 	add.w	sl, sl, #1
 8001862:	9304      	str	r3, [sp, #16]
 8001864:	9307      	str	r3, [sp, #28]
 8001866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800186a:	931a      	str	r3, [sp, #104]	; 0x68
 800186c:	4654      	mov	r4, sl
 800186e:	2205      	movs	r2, #5
 8001870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001874:	4851      	ldr	r0, [pc, #324]	; (80019bc <_svfiprintf_r+0x1ec>)
 8001876:	f000 fa41 	bl	8001cfc <memchr>
 800187a:	9a04      	ldr	r2, [sp, #16]
 800187c:	b9d8      	cbnz	r0, 80018b6 <_svfiprintf_r+0xe6>
 800187e:	06d0      	lsls	r0, r2, #27
 8001880:	bf44      	itt	mi
 8001882:	2320      	movmi	r3, #32
 8001884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001888:	0711      	lsls	r1, r2, #28
 800188a:	bf44      	itt	mi
 800188c:	232b      	movmi	r3, #43	; 0x2b
 800188e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001892:	f89a 3000 	ldrb.w	r3, [sl]
 8001896:	2b2a      	cmp	r3, #42	; 0x2a
 8001898:	d015      	beq.n	80018c6 <_svfiprintf_r+0xf6>
 800189a:	4654      	mov	r4, sl
 800189c:	2000      	movs	r0, #0
 800189e:	f04f 0c0a 	mov.w	ip, #10
 80018a2:	9a07      	ldr	r2, [sp, #28]
 80018a4:	4621      	mov	r1, r4
 80018a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018aa:	3b30      	subs	r3, #48	; 0x30
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d94e      	bls.n	800194e <_svfiprintf_r+0x17e>
 80018b0:	b1b0      	cbz	r0, 80018e0 <_svfiprintf_r+0x110>
 80018b2:	9207      	str	r2, [sp, #28]
 80018b4:	e014      	b.n	80018e0 <_svfiprintf_r+0x110>
 80018b6:	eba0 0308 	sub.w	r3, r0, r8
 80018ba:	fa09 f303 	lsl.w	r3, r9, r3
 80018be:	4313      	orrs	r3, r2
 80018c0:	46a2      	mov	sl, r4
 80018c2:	9304      	str	r3, [sp, #16]
 80018c4:	e7d2      	b.n	800186c <_svfiprintf_r+0x9c>
 80018c6:	9b03      	ldr	r3, [sp, #12]
 80018c8:	1d19      	adds	r1, r3, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	9103      	str	r1, [sp, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bfbb      	ittet	lt
 80018d2:	425b      	neglt	r3, r3
 80018d4:	f042 0202 	orrlt.w	r2, r2, #2
 80018d8:	9307      	strge	r3, [sp, #28]
 80018da:	9307      	strlt	r3, [sp, #28]
 80018dc:	bfb8      	it	lt
 80018de:	9204      	strlt	r2, [sp, #16]
 80018e0:	7823      	ldrb	r3, [r4, #0]
 80018e2:	2b2e      	cmp	r3, #46	; 0x2e
 80018e4:	d10c      	bne.n	8001900 <_svfiprintf_r+0x130>
 80018e6:	7863      	ldrb	r3, [r4, #1]
 80018e8:	2b2a      	cmp	r3, #42	; 0x2a
 80018ea:	d135      	bne.n	8001958 <_svfiprintf_r+0x188>
 80018ec:	9b03      	ldr	r3, [sp, #12]
 80018ee:	3402      	adds	r4, #2
 80018f0:	1d1a      	adds	r2, r3, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	9203      	str	r2, [sp, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bfb8      	it	lt
 80018fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80018fe:	9305      	str	r3, [sp, #20]
 8001900:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80019c0 <_svfiprintf_r+0x1f0>
 8001904:	2203      	movs	r2, #3
 8001906:	4650      	mov	r0, sl
 8001908:	7821      	ldrb	r1, [r4, #0]
 800190a:	f000 f9f7 	bl	8001cfc <memchr>
 800190e:	b140      	cbz	r0, 8001922 <_svfiprintf_r+0x152>
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	eba0 000a 	sub.w	r0, r0, sl
 8001916:	fa03 f000 	lsl.w	r0, r3, r0
 800191a:	9b04      	ldr	r3, [sp, #16]
 800191c:	3401      	adds	r4, #1
 800191e:	4303      	orrs	r3, r0
 8001920:	9304      	str	r3, [sp, #16]
 8001922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001926:	2206      	movs	r2, #6
 8001928:	4826      	ldr	r0, [pc, #152]	; (80019c4 <_svfiprintf_r+0x1f4>)
 800192a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800192e:	f000 f9e5 	bl	8001cfc <memchr>
 8001932:	2800      	cmp	r0, #0
 8001934:	d038      	beq.n	80019a8 <_svfiprintf_r+0x1d8>
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <_svfiprintf_r+0x1f8>)
 8001938:	bb1b      	cbnz	r3, 8001982 <_svfiprintf_r+0x1b2>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	3307      	adds	r3, #7
 800193e:	f023 0307 	bic.w	r3, r3, #7
 8001942:	3308      	adds	r3, #8
 8001944:	9303      	str	r3, [sp, #12]
 8001946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001948:	4433      	add	r3, r6
 800194a:	9309      	str	r3, [sp, #36]	; 0x24
 800194c:	e767      	b.n	800181e <_svfiprintf_r+0x4e>
 800194e:	460c      	mov	r4, r1
 8001950:	2001      	movs	r0, #1
 8001952:	fb0c 3202 	mla	r2, ip, r2, r3
 8001956:	e7a5      	b.n	80018a4 <_svfiprintf_r+0xd4>
 8001958:	2300      	movs	r3, #0
 800195a:	f04f 0c0a 	mov.w	ip, #10
 800195e:	4619      	mov	r1, r3
 8001960:	3401      	adds	r4, #1
 8001962:	9305      	str	r3, [sp, #20]
 8001964:	4620      	mov	r0, r4
 8001966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800196a:	3a30      	subs	r2, #48	; 0x30
 800196c:	2a09      	cmp	r2, #9
 800196e:	d903      	bls.n	8001978 <_svfiprintf_r+0x1a8>
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0c5      	beq.n	8001900 <_svfiprintf_r+0x130>
 8001974:	9105      	str	r1, [sp, #20]
 8001976:	e7c3      	b.n	8001900 <_svfiprintf_r+0x130>
 8001978:	4604      	mov	r4, r0
 800197a:	2301      	movs	r3, #1
 800197c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001980:	e7f0      	b.n	8001964 <_svfiprintf_r+0x194>
 8001982:	ab03      	add	r3, sp, #12
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	462a      	mov	r2, r5
 8001988:	4638      	mov	r0, r7
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <_svfiprintf_r+0x1fc>)
 800198c:	a904      	add	r1, sp, #16
 800198e:	f3af 8000 	nop.w
 8001992:	1c42      	adds	r2, r0, #1
 8001994:	4606      	mov	r6, r0
 8001996:	d1d6      	bne.n	8001946 <_svfiprintf_r+0x176>
 8001998:	89ab      	ldrh	r3, [r5, #12]
 800199a:	065b      	lsls	r3, r3, #25
 800199c:	f53f af2c 	bmi.w	80017f8 <_svfiprintf_r+0x28>
 80019a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019a2:	b01d      	add	sp, #116	; 0x74
 80019a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a8:	ab03      	add	r3, sp, #12
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	462a      	mov	r2, r5
 80019ae:	4638      	mov	r0, r7
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <_svfiprintf_r+0x1fc>)
 80019b2:	a904      	add	r1, sp, #16
 80019b4:	f000 f87c 	bl	8001ab0 <_printf_i>
 80019b8:	e7eb      	b.n	8001992 <_svfiprintf_r+0x1c2>
 80019ba:	bf00      	nop
 80019bc:	08002068 	.word	0x08002068
 80019c0:	0800206e 	.word	0x0800206e
 80019c4:	08002072 	.word	0x08002072
 80019c8:	00000000 	.word	0x00000000
 80019cc:	08001719 	.word	0x08001719

080019d0 <_printf_common>:
 80019d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019d4:	4616      	mov	r6, r2
 80019d6:	4699      	mov	r9, r3
 80019d8:	688a      	ldr	r2, [r1, #8]
 80019da:	690b      	ldr	r3, [r1, #16]
 80019dc:	4607      	mov	r7, r0
 80019de:	4293      	cmp	r3, r2
 80019e0:	bfb8      	it	lt
 80019e2:	4613      	movlt	r3, r2
 80019e4:	6033      	str	r3, [r6, #0]
 80019e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019ea:	460c      	mov	r4, r1
 80019ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019f0:	b10a      	cbz	r2, 80019f6 <_printf_common+0x26>
 80019f2:	3301      	adds	r3, #1
 80019f4:	6033      	str	r3, [r6, #0]
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	0699      	lsls	r1, r3, #26
 80019fa:	bf42      	ittt	mi
 80019fc:	6833      	ldrmi	r3, [r6, #0]
 80019fe:	3302      	addmi	r3, #2
 8001a00:	6033      	strmi	r3, [r6, #0]
 8001a02:	6825      	ldr	r5, [r4, #0]
 8001a04:	f015 0506 	ands.w	r5, r5, #6
 8001a08:	d106      	bne.n	8001a18 <_printf_common+0x48>
 8001a0a:	f104 0a19 	add.w	sl, r4, #25
 8001a0e:	68e3      	ldr	r3, [r4, #12]
 8001a10:	6832      	ldr	r2, [r6, #0]
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	42ab      	cmp	r3, r5
 8001a16:	dc28      	bgt.n	8001a6a <_printf_common+0x9a>
 8001a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a1c:	1e13      	subs	r3, r2, #0
 8001a1e:	6822      	ldr	r2, [r4, #0]
 8001a20:	bf18      	it	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	0692      	lsls	r2, r2, #26
 8001a26:	d42d      	bmi.n	8001a84 <_printf_common+0xb4>
 8001a28:	4649      	mov	r1, r9
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a30:	47c0      	blx	r8
 8001a32:	3001      	adds	r0, #1
 8001a34:	d020      	beq.n	8001a78 <_printf_common+0xa8>
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	68e5      	ldr	r5, [r4, #12]
 8001a3a:	f003 0306 	and.w	r3, r3, #6
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf18      	it	ne
 8001a42:	2500      	movne	r5, #0
 8001a44:	6832      	ldr	r2, [r6, #0]
 8001a46:	f04f 0600 	mov.w	r6, #0
 8001a4a:	68a3      	ldr	r3, [r4, #8]
 8001a4c:	bf08      	it	eq
 8001a4e:	1aad      	subeq	r5, r5, r2
 8001a50:	6922      	ldr	r2, [r4, #16]
 8001a52:	bf08      	it	eq
 8001a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	bfc4      	itt	gt
 8001a5c:	1a9b      	subgt	r3, r3, r2
 8001a5e:	18ed      	addgt	r5, r5, r3
 8001a60:	341a      	adds	r4, #26
 8001a62:	42b5      	cmp	r5, r6
 8001a64:	d11a      	bne.n	8001a9c <_printf_common+0xcc>
 8001a66:	2000      	movs	r0, #0
 8001a68:	e008      	b.n	8001a7c <_printf_common+0xac>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4652      	mov	r2, sl
 8001a6e:	4649      	mov	r1, r9
 8001a70:	4638      	mov	r0, r7
 8001a72:	47c0      	blx	r8
 8001a74:	3001      	adds	r0, #1
 8001a76:	d103      	bne.n	8001a80 <_printf_common+0xb0>
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a80:	3501      	adds	r5, #1
 8001a82:	e7c4      	b.n	8001a0e <_printf_common+0x3e>
 8001a84:	2030      	movs	r0, #48	; 0x30
 8001a86:	18e1      	adds	r1, r4, r3
 8001a88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a92:	4422      	add	r2, r4
 8001a94:	3302      	adds	r3, #2
 8001a96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a9a:	e7c5      	b.n	8001a28 <_printf_common+0x58>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	4638      	mov	r0, r7
 8001aa4:	47c0      	blx	r8
 8001aa6:	3001      	adds	r0, #1
 8001aa8:	d0e6      	beq.n	8001a78 <_printf_common+0xa8>
 8001aaa:	3601      	adds	r6, #1
 8001aac:	e7d9      	b.n	8001a62 <_printf_common+0x92>
	...

08001ab0 <_printf_i>:
 8001ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ab4:	7e0f      	ldrb	r7, [r1, #24]
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	2f78      	cmp	r7, #120	; 0x78
 8001aba:	4680      	mov	r8, r0
 8001abc:	460c      	mov	r4, r1
 8001abe:	469a      	mov	sl, r3
 8001ac0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ac6:	d807      	bhi.n	8001ad8 <_printf_i+0x28>
 8001ac8:	2f62      	cmp	r7, #98	; 0x62
 8001aca:	d80a      	bhi.n	8001ae2 <_printf_i+0x32>
 8001acc:	2f00      	cmp	r7, #0
 8001ace:	f000 80d9 	beq.w	8001c84 <_printf_i+0x1d4>
 8001ad2:	2f58      	cmp	r7, #88	; 0x58
 8001ad4:	f000 80a4 	beq.w	8001c20 <_printf_i+0x170>
 8001ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ae0:	e03a      	b.n	8001b58 <_printf_i+0xa8>
 8001ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ae6:	2b15      	cmp	r3, #21
 8001ae8:	d8f6      	bhi.n	8001ad8 <_printf_i+0x28>
 8001aea:	a101      	add	r1, pc, #4	; (adr r1, 8001af0 <_printf_i+0x40>)
 8001aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001af0:	08001b49 	.word	0x08001b49
 8001af4:	08001b5d 	.word	0x08001b5d
 8001af8:	08001ad9 	.word	0x08001ad9
 8001afc:	08001ad9 	.word	0x08001ad9
 8001b00:	08001ad9 	.word	0x08001ad9
 8001b04:	08001ad9 	.word	0x08001ad9
 8001b08:	08001b5d 	.word	0x08001b5d
 8001b0c:	08001ad9 	.word	0x08001ad9
 8001b10:	08001ad9 	.word	0x08001ad9
 8001b14:	08001ad9 	.word	0x08001ad9
 8001b18:	08001ad9 	.word	0x08001ad9
 8001b1c:	08001c6b 	.word	0x08001c6b
 8001b20:	08001b8d 	.word	0x08001b8d
 8001b24:	08001c4d 	.word	0x08001c4d
 8001b28:	08001ad9 	.word	0x08001ad9
 8001b2c:	08001ad9 	.word	0x08001ad9
 8001b30:	08001c8d 	.word	0x08001c8d
 8001b34:	08001ad9 	.word	0x08001ad9
 8001b38:	08001b8d 	.word	0x08001b8d
 8001b3c:	08001ad9 	.word	0x08001ad9
 8001b40:	08001ad9 	.word	0x08001ad9
 8001b44:	08001c55 	.word	0x08001c55
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	1d1a      	adds	r2, r3, #4
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	602a      	str	r2, [r5, #0]
 8001b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0a4      	b.n	8001ca6 <_printf_i+0x1f6>
 8001b5c:	6820      	ldr	r0, [r4, #0]
 8001b5e:	6829      	ldr	r1, [r5, #0]
 8001b60:	0606      	lsls	r6, r0, #24
 8001b62:	f101 0304 	add.w	r3, r1, #4
 8001b66:	d50a      	bpl.n	8001b7e <_printf_i+0xce>
 8001b68:	680e      	ldr	r6, [r1, #0]
 8001b6a:	602b      	str	r3, [r5, #0]
 8001b6c:	2e00      	cmp	r6, #0
 8001b6e:	da03      	bge.n	8001b78 <_printf_i+0xc8>
 8001b70:	232d      	movs	r3, #45	; 0x2d
 8001b72:	4276      	negs	r6, r6
 8001b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b78:	230a      	movs	r3, #10
 8001b7a:	485e      	ldr	r0, [pc, #376]	; (8001cf4 <_printf_i+0x244>)
 8001b7c:	e019      	b.n	8001bb2 <_printf_i+0x102>
 8001b7e:	680e      	ldr	r6, [r1, #0]
 8001b80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	bf18      	it	ne
 8001b88:	b236      	sxthne	r6, r6
 8001b8a:	e7ef      	b.n	8001b6c <_printf_i+0xbc>
 8001b8c:	682b      	ldr	r3, [r5, #0]
 8001b8e:	6820      	ldr	r0, [r4, #0]
 8001b90:	1d19      	adds	r1, r3, #4
 8001b92:	6029      	str	r1, [r5, #0]
 8001b94:	0601      	lsls	r1, r0, #24
 8001b96:	d501      	bpl.n	8001b9c <_printf_i+0xec>
 8001b98:	681e      	ldr	r6, [r3, #0]
 8001b9a:	e002      	b.n	8001ba2 <_printf_i+0xf2>
 8001b9c:	0646      	lsls	r6, r0, #25
 8001b9e:	d5fb      	bpl.n	8001b98 <_printf_i+0xe8>
 8001ba0:	881e      	ldrh	r6, [r3, #0]
 8001ba2:	2f6f      	cmp	r7, #111	; 0x6f
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2308      	moveq	r3, #8
 8001ba8:	230a      	movne	r3, #10
 8001baa:	4852      	ldr	r0, [pc, #328]	; (8001cf4 <_printf_i+0x244>)
 8001bac:	2100      	movs	r1, #0
 8001bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001bb2:	6865      	ldr	r5, [r4, #4]
 8001bb4:	2d00      	cmp	r5, #0
 8001bb6:	bfa8      	it	ge
 8001bb8:	6821      	ldrge	r1, [r4, #0]
 8001bba:	60a5      	str	r5, [r4, #8]
 8001bbc:	bfa4      	itt	ge
 8001bbe:	f021 0104 	bicge.w	r1, r1, #4
 8001bc2:	6021      	strge	r1, [r4, #0]
 8001bc4:	b90e      	cbnz	r6, 8001bca <_printf_i+0x11a>
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	d04d      	beq.n	8001c66 <_printf_i+0x1b6>
 8001bca:	4615      	mov	r5, r2
 8001bcc:	fbb6 f1f3 	udiv	r1, r6, r3
 8001bd0:	fb03 6711 	mls	r7, r3, r1, r6
 8001bd4:	5dc7      	ldrb	r7, [r0, r7]
 8001bd6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001bda:	4637      	mov	r7, r6
 8001bdc:	42bb      	cmp	r3, r7
 8001bde:	460e      	mov	r6, r1
 8001be0:	d9f4      	bls.n	8001bcc <_printf_i+0x11c>
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d10b      	bne.n	8001bfe <_printf_i+0x14e>
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	07de      	lsls	r6, r3, #31
 8001bea:	d508      	bpl.n	8001bfe <_printf_i+0x14e>
 8001bec:	6923      	ldr	r3, [r4, #16]
 8001bee:	6861      	ldr	r1, [r4, #4]
 8001bf0:	4299      	cmp	r1, r3
 8001bf2:	bfde      	ittt	le
 8001bf4:	2330      	movle	r3, #48	; 0x30
 8001bf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001bfe:	1b52      	subs	r2, r2, r5
 8001c00:	6122      	str	r2, [r4, #16]
 8001c02:	464b      	mov	r3, r9
 8001c04:	4621      	mov	r1, r4
 8001c06:	4640      	mov	r0, r8
 8001c08:	f8cd a000 	str.w	sl, [sp]
 8001c0c:	aa03      	add	r2, sp, #12
 8001c0e:	f7ff fedf 	bl	80019d0 <_printf_common>
 8001c12:	3001      	adds	r0, #1
 8001c14:	d14c      	bne.n	8001cb0 <_printf_i+0x200>
 8001c16:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1a:	b004      	add	sp, #16
 8001c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c20:	4834      	ldr	r0, [pc, #208]	; (8001cf4 <_printf_i+0x244>)
 8001c22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001c26:	6829      	ldr	r1, [r5, #0]
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8001c2e:	6029      	str	r1, [r5, #0]
 8001c30:	061d      	lsls	r5, r3, #24
 8001c32:	d514      	bpl.n	8001c5e <_printf_i+0x1ae>
 8001c34:	07df      	lsls	r7, r3, #31
 8001c36:	bf44      	itt	mi
 8001c38:	f043 0320 	orrmi.w	r3, r3, #32
 8001c3c:	6023      	strmi	r3, [r4, #0]
 8001c3e:	b91e      	cbnz	r6, 8001c48 <_printf_i+0x198>
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	f023 0320 	bic.w	r3, r3, #32
 8001c46:	6023      	str	r3, [r4, #0]
 8001c48:	2310      	movs	r3, #16
 8001c4a:	e7af      	b.n	8001bac <_printf_i+0xfc>
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	f043 0320 	orr.w	r3, r3, #32
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	2378      	movs	r3, #120	; 0x78
 8001c56:	4828      	ldr	r0, [pc, #160]	; (8001cf8 <_printf_i+0x248>)
 8001c58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c5c:	e7e3      	b.n	8001c26 <_printf_i+0x176>
 8001c5e:	0659      	lsls	r1, r3, #25
 8001c60:	bf48      	it	mi
 8001c62:	b2b6      	uxthmi	r6, r6
 8001c64:	e7e6      	b.n	8001c34 <_printf_i+0x184>
 8001c66:	4615      	mov	r5, r2
 8001c68:	e7bb      	b.n	8001be2 <_printf_i+0x132>
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	6826      	ldr	r6, [r4, #0]
 8001c6e:	1d18      	adds	r0, r3, #4
 8001c70:	6961      	ldr	r1, [r4, #20]
 8001c72:	6028      	str	r0, [r5, #0]
 8001c74:	0635      	lsls	r5, r6, #24
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	d501      	bpl.n	8001c7e <_printf_i+0x1ce>
 8001c7a:	6019      	str	r1, [r3, #0]
 8001c7c:	e002      	b.n	8001c84 <_printf_i+0x1d4>
 8001c7e:	0670      	lsls	r0, r6, #25
 8001c80:	d5fb      	bpl.n	8001c7a <_printf_i+0x1ca>
 8001c82:	8019      	strh	r1, [r3, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	4615      	mov	r5, r2
 8001c88:	6123      	str	r3, [r4, #16]
 8001c8a:	e7ba      	b.n	8001c02 <_printf_i+0x152>
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	2100      	movs	r1, #0
 8001c90:	1d1a      	adds	r2, r3, #4
 8001c92:	602a      	str	r2, [r5, #0]
 8001c94:	681d      	ldr	r5, [r3, #0]
 8001c96:	6862      	ldr	r2, [r4, #4]
 8001c98:	4628      	mov	r0, r5
 8001c9a:	f000 f82f 	bl	8001cfc <memchr>
 8001c9e:	b108      	cbz	r0, 8001ca4 <_printf_i+0x1f4>
 8001ca0:	1b40      	subs	r0, r0, r5
 8001ca2:	6060      	str	r0, [r4, #4]
 8001ca4:	6863      	ldr	r3, [r4, #4]
 8001ca6:	6123      	str	r3, [r4, #16]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cae:	e7a8      	b.n	8001c02 <_printf_i+0x152>
 8001cb0:	462a      	mov	r2, r5
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	4640      	mov	r0, r8
 8001cb6:	6923      	ldr	r3, [r4, #16]
 8001cb8:	47d0      	blx	sl
 8001cba:	3001      	adds	r0, #1
 8001cbc:	d0ab      	beq.n	8001c16 <_printf_i+0x166>
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	079b      	lsls	r3, r3, #30
 8001cc2:	d413      	bmi.n	8001cec <_printf_i+0x23c>
 8001cc4:	68e0      	ldr	r0, [r4, #12]
 8001cc6:	9b03      	ldr	r3, [sp, #12]
 8001cc8:	4298      	cmp	r0, r3
 8001cca:	bfb8      	it	lt
 8001ccc:	4618      	movlt	r0, r3
 8001cce:	e7a4      	b.n	8001c1a <_printf_i+0x16a>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	4632      	mov	r2, r6
 8001cd4:	4649      	mov	r1, r9
 8001cd6:	4640      	mov	r0, r8
 8001cd8:	47d0      	blx	sl
 8001cda:	3001      	adds	r0, #1
 8001cdc:	d09b      	beq.n	8001c16 <_printf_i+0x166>
 8001cde:	3501      	adds	r5, #1
 8001ce0:	68e3      	ldr	r3, [r4, #12]
 8001ce2:	9903      	ldr	r1, [sp, #12]
 8001ce4:	1a5b      	subs	r3, r3, r1
 8001ce6:	42ab      	cmp	r3, r5
 8001ce8:	dcf2      	bgt.n	8001cd0 <_printf_i+0x220>
 8001cea:	e7eb      	b.n	8001cc4 <_printf_i+0x214>
 8001cec:	2500      	movs	r5, #0
 8001cee:	f104 0619 	add.w	r6, r4, #25
 8001cf2:	e7f5      	b.n	8001ce0 <_printf_i+0x230>
 8001cf4:	08002079 	.word	0x08002079
 8001cf8:	0800208a 	.word	0x0800208a

08001cfc <memchr>:
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b510      	push	{r4, lr}
 8001d00:	b2c9      	uxtb	r1, r1
 8001d02:	4402      	add	r2, r0
 8001d04:	4293      	cmp	r3, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	d101      	bne.n	8001d0e <memchr+0x12>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e003      	b.n	8001d16 <memchr+0x1a>
 8001d0e:	7804      	ldrb	r4, [r0, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	428c      	cmp	r4, r1
 8001d14:	d1f6      	bne.n	8001d04 <memchr+0x8>
 8001d16:	bd10      	pop	{r4, pc}

08001d18 <memcpy>:
 8001d18:	440a      	add	r2, r1
 8001d1a:	4291      	cmp	r1, r2
 8001d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001d20:	d100      	bne.n	8001d24 <memcpy+0xc>
 8001d22:	4770      	bx	lr
 8001d24:	b510      	push	{r4, lr}
 8001d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d2a:	4291      	cmp	r1, r2
 8001d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d30:	d1f9      	bne.n	8001d26 <memcpy+0xe>
 8001d32:	bd10      	pop	{r4, pc}

08001d34 <memmove>:
 8001d34:	4288      	cmp	r0, r1
 8001d36:	b510      	push	{r4, lr}
 8001d38:	eb01 0402 	add.w	r4, r1, r2
 8001d3c:	d902      	bls.n	8001d44 <memmove+0x10>
 8001d3e:	4284      	cmp	r4, r0
 8001d40:	4623      	mov	r3, r4
 8001d42:	d807      	bhi.n	8001d54 <memmove+0x20>
 8001d44:	1e43      	subs	r3, r0, #1
 8001d46:	42a1      	cmp	r1, r4
 8001d48:	d008      	beq.n	8001d5c <memmove+0x28>
 8001d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001d52:	e7f8      	b.n	8001d46 <memmove+0x12>
 8001d54:	4601      	mov	r1, r0
 8001d56:	4402      	add	r2, r0
 8001d58:	428a      	cmp	r2, r1
 8001d5a:	d100      	bne.n	8001d5e <memmove+0x2a>
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001d66:	e7f7      	b.n	8001d58 <memmove+0x24>

08001d68 <_free_r>:
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	2900      	cmp	r1, #0
 8001d6e:	d040      	beq.n	8001df2 <_free_r+0x8a>
 8001d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d74:	1f0c      	subs	r4, r1, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bfb8      	it	lt
 8001d7a:	18e4      	addlt	r4, r4, r3
 8001d7c:	f000 f910 	bl	8001fa0 <__malloc_lock>
 8001d80:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <_free_r+0x8c>)
 8001d82:	6813      	ldr	r3, [r2, #0]
 8001d84:	b933      	cbnz	r3, 8001d94 <_free_r+0x2c>
 8001d86:	6063      	str	r3, [r4, #4]
 8001d88:	6014      	str	r4, [r2, #0]
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d90:	f000 b90c 	b.w	8001fac <__malloc_unlock>
 8001d94:	42a3      	cmp	r3, r4
 8001d96:	d908      	bls.n	8001daa <_free_r+0x42>
 8001d98:	6820      	ldr	r0, [r4, #0]
 8001d9a:	1821      	adds	r1, r4, r0
 8001d9c:	428b      	cmp	r3, r1
 8001d9e:	bf01      	itttt	eq
 8001da0:	6819      	ldreq	r1, [r3, #0]
 8001da2:	685b      	ldreq	r3, [r3, #4]
 8001da4:	1809      	addeq	r1, r1, r0
 8001da6:	6021      	streq	r1, [r4, #0]
 8001da8:	e7ed      	b.n	8001d86 <_free_r+0x1e>
 8001daa:	461a      	mov	r2, r3
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	b10b      	cbz	r3, 8001db4 <_free_r+0x4c>
 8001db0:	42a3      	cmp	r3, r4
 8001db2:	d9fa      	bls.n	8001daa <_free_r+0x42>
 8001db4:	6811      	ldr	r1, [r2, #0]
 8001db6:	1850      	adds	r0, r2, r1
 8001db8:	42a0      	cmp	r0, r4
 8001dba:	d10b      	bne.n	8001dd4 <_free_r+0x6c>
 8001dbc:	6820      	ldr	r0, [r4, #0]
 8001dbe:	4401      	add	r1, r0
 8001dc0:	1850      	adds	r0, r2, r1
 8001dc2:	4283      	cmp	r3, r0
 8001dc4:	6011      	str	r1, [r2, #0]
 8001dc6:	d1e0      	bne.n	8001d8a <_free_r+0x22>
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4401      	add	r1, r0
 8001dce:	6011      	str	r1, [r2, #0]
 8001dd0:	6053      	str	r3, [r2, #4]
 8001dd2:	e7da      	b.n	8001d8a <_free_r+0x22>
 8001dd4:	d902      	bls.n	8001ddc <_free_r+0x74>
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	602b      	str	r3, [r5, #0]
 8001dda:	e7d6      	b.n	8001d8a <_free_r+0x22>
 8001ddc:	6820      	ldr	r0, [r4, #0]
 8001dde:	1821      	adds	r1, r4, r0
 8001de0:	428b      	cmp	r3, r1
 8001de2:	bf01      	itttt	eq
 8001de4:	6819      	ldreq	r1, [r3, #0]
 8001de6:	685b      	ldreq	r3, [r3, #4]
 8001de8:	1809      	addeq	r1, r1, r0
 8001dea:	6021      	streq	r1, [r4, #0]
 8001dec:	6063      	str	r3, [r4, #4]
 8001dee:	6054      	str	r4, [r2, #4]
 8001df0:	e7cb      	b.n	8001d8a <_free_r+0x22>
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
 8001df4:	200000a4 	.word	0x200000a4

08001df8 <sbrk_aligned>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	4e0e      	ldr	r6, [pc, #56]	; (8001e34 <sbrk_aligned+0x3c>)
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	6831      	ldr	r1, [r6, #0]
 8001e00:	4605      	mov	r5, r0
 8001e02:	b911      	cbnz	r1, 8001e0a <sbrk_aligned+0x12>
 8001e04:	f000 f8bc 	bl	8001f80 <_sbrk_r>
 8001e08:	6030      	str	r0, [r6, #0]
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f000 f8b7 	bl	8001f80 <_sbrk_r>
 8001e12:	1c43      	adds	r3, r0, #1
 8001e14:	d00a      	beq.n	8001e2c <sbrk_aligned+0x34>
 8001e16:	1cc4      	adds	r4, r0, #3
 8001e18:	f024 0403 	bic.w	r4, r4, #3
 8001e1c:	42a0      	cmp	r0, r4
 8001e1e:	d007      	beq.n	8001e30 <sbrk_aligned+0x38>
 8001e20:	1a21      	subs	r1, r4, r0
 8001e22:	4628      	mov	r0, r5
 8001e24:	f000 f8ac 	bl	8001f80 <_sbrk_r>
 8001e28:	3001      	adds	r0, #1
 8001e2a:	d101      	bne.n	8001e30 <sbrk_aligned+0x38>
 8001e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8001e30:	4620      	mov	r0, r4
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
 8001e34:	200000a8 	.word	0x200000a8

08001e38 <_malloc_r>:
 8001e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3c:	1ccd      	adds	r5, r1, #3
 8001e3e:	f025 0503 	bic.w	r5, r5, #3
 8001e42:	3508      	adds	r5, #8
 8001e44:	2d0c      	cmp	r5, #12
 8001e46:	bf38      	it	cc
 8001e48:	250c      	movcc	r5, #12
 8001e4a:	2d00      	cmp	r5, #0
 8001e4c:	4607      	mov	r7, r0
 8001e4e:	db01      	blt.n	8001e54 <_malloc_r+0x1c>
 8001e50:	42a9      	cmp	r1, r5
 8001e52:	d905      	bls.n	8001e60 <_malloc_r+0x28>
 8001e54:	230c      	movs	r3, #12
 8001e56:	2600      	movs	r6, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e60:	4e2e      	ldr	r6, [pc, #184]	; (8001f1c <_malloc_r+0xe4>)
 8001e62:	f000 f89d 	bl	8001fa0 <__malloc_lock>
 8001e66:	6833      	ldr	r3, [r6, #0]
 8001e68:	461c      	mov	r4, r3
 8001e6a:	bb34      	cbnz	r4, 8001eba <_malloc_r+0x82>
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	4638      	mov	r0, r7
 8001e70:	f7ff ffc2 	bl	8001df8 <sbrk_aligned>
 8001e74:	1c43      	adds	r3, r0, #1
 8001e76:	4604      	mov	r4, r0
 8001e78:	d14d      	bne.n	8001f16 <_malloc_r+0xde>
 8001e7a:	6834      	ldr	r4, [r6, #0]
 8001e7c:	4626      	mov	r6, r4
 8001e7e:	2e00      	cmp	r6, #0
 8001e80:	d140      	bne.n	8001f04 <_malloc_r+0xcc>
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	4631      	mov	r1, r6
 8001e86:	4638      	mov	r0, r7
 8001e88:	eb04 0803 	add.w	r8, r4, r3
 8001e8c:	f000 f878 	bl	8001f80 <_sbrk_r>
 8001e90:	4580      	cmp	r8, r0
 8001e92:	d13a      	bne.n	8001f0a <_malloc_r+0xd2>
 8001e94:	6821      	ldr	r1, [r4, #0]
 8001e96:	3503      	adds	r5, #3
 8001e98:	1a6d      	subs	r5, r5, r1
 8001e9a:	f025 0503 	bic.w	r5, r5, #3
 8001e9e:	3508      	adds	r5, #8
 8001ea0:	2d0c      	cmp	r5, #12
 8001ea2:	bf38      	it	cc
 8001ea4:	250c      	movcc	r5, #12
 8001ea6:	4638      	mov	r0, r7
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f7ff ffa5 	bl	8001df8 <sbrk_aligned>
 8001eae:	3001      	adds	r0, #1
 8001eb0:	d02b      	beq.n	8001f0a <_malloc_r+0xd2>
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	442b      	add	r3, r5
 8001eb6:	6023      	str	r3, [r4, #0]
 8001eb8:	e00e      	b.n	8001ed8 <_malloc_r+0xa0>
 8001eba:	6822      	ldr	r2, [r4, #0]
 8001ebc:	1b52      	subs	r2, r2, r5
 8001ebe:	d41e      	bmi.n	8001efe <_malloc_r+0xc6>
 8001ec0:	2a0b      	cmp	r2, #11
 8001ec2:	d916      	bls.n	8001ef2 <_malloc_r+0xba>
 8001ec4:	1961      	adds	r1, r4, r5
 8001ec6:	42a3      	cmp	r3, r4
 8001ec8:	6025      	str	r5, [r4, #0]
 8001eca:	bf18      	it	ne
 8001ecc:	6059      	strne	r1, [r3, #4]
 8001ece:	6863      	ldr	r3, [r4, #4]
 8001ed0:	bf08      	it	eq
 8001ed2:	6031      	streq	r1, [r6, #0]
 8001ed4:	5162      	str	r2, [r4, r5]
 8001ed6:	604b      	str	r3, [r1, #4]
 8001ed8:	4638      	mov	r0, r7
 8001eda:	f104 060b 	add.w	r6, r4, #11
 8001ede:	f000 f865 	bl	8001fac <__malloc_unlock>
 8001ee2:	f026 0607 	bic.w	r6, r6, #7
 8001ee6:	1d23      	adds	r3, r4, #4
 8001ee8:	1af2      	subs	r2, r6, r3
 8001eea:	d0b6      	beq.n	8001e5a <_malloc_r+0x22>
 8001eec:	1b9b      	subs	r3, r3, r6
 8001eee:	50a3      	str	r3, [r4, r2]
 8001ef0:	e7b3      	b.n	8001e5a <_malloc_r+0x22>
 8001ef2:	6862      	ldr	r2, [r4, #4]
 8001ef4:	42a3      	cmp	r3, r4
 8001ef6:	bf0c      	ite	eq
 8001ef8:	6032      	streq	r2, [r6, #0]
 8001efa:	605a      	strne	r2, [r3, #4]
 8001efc:	e7ec      	b.n	8001ed8 <_malloc_r+0xa0>
 8001efe:	4623      	mov	r3, r4
 8001f00:	6864      	ldr	r4, [r4, #4]
 8001f02:	e7b2      	b.n	8001e6a <_malloc_r+0x32>
 8001f04:	4634      	mov	r4, r6
 8001f06:	6876      	ldr	r6, [r6, #4]
 8001f08:	e7b9      	b.n	8001e7e <_malloc_r+0x46>
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	4638      	mov	r0, r7
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	f000 f84c 	bl	8001fac <__malloc_unlock>
 8001f14:	e7a1      	b.n	8001e5a <_malloc_r+0x22>
 8001f16:	6025      	str	r5, [r4, #0]
 8001f18:	e7de      	b.n	8001ed8 <_malloc_r+0xa0>
 8001f1a:	bf00      	nop
 8001f1c:	200000a4 	.word	0x200000a4

08001f20 <_realloc_r>:
 8001f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f24:	4680      	mov	r8, r0
 8001f26:	4614      	mov	r4, r2
 8001f28:	460e      	mov	r6, r1
 8001f2a:	b921      	cbnz	r1, 8001f36 <_realloc_r+0x16>
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f32:	f7ff bf81 	b.w	8001e38 <_malloc_r>
 8001f36:	b92a      	cbnz	r2, 8001f44 <_realloc_r+0x24>
 8001f38:	f7ff ff16 	bl	8001d68 <_free_r>
 8001f3c:	4625      	mov	r5, r4
 8001f3e:	4628      	mov	r0, r5
 8001f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f44:	f000 f838 	bl	8001fb8 <_malloc_usable_size_r>
 8001f48:	4284      	cmp	r4, r0
 8001f4a:	4607      	mov	r7, r0
 8001f4c:	d802      	bhi.n	8001f54 <_realloc_r+0x34>
 8001f4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f52:	d812      	bhi.n	8001f7a <_realloc_r+0x5a>
 8001f54:	4621      	mov	r1, r4
 8001f56:	4640      	mov	r0, r8
 8001f58:	f7ff ff6e 	bl	8001e38 <_malloc_r>
 8001f5c:	4605      	mov	r5, r0
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d0ed      	beq.n	8001f3e <_realloc_r+0x1e>
 8001f62:	42bc      	cmp	r4, r7
 8001f64:	4622      	mov	r2, r4
 8001f66:	4631      	mov	r1, r6
 8001f68:	bf28      	it	cs
 8001f6a:	463a      	movcs	r2, r7
 8001f6c:	f7ff fed4 	bl	8001d18 <memcpy>
 8001f70:	4631      	mov	r1, r6
 8001f72:	4640      	mov	r0, r8
 8001f74:	f7ff fef8 	bl	8001d68 <_free_r>
 8001f78:	e7e1      	b.n	8001f3e <_realloc_r+0x1e>
 8001f7a:	4635      	mov	r5, r6
 8001f7c:	e7df      	b.n	8001f3e <_realloc_r+0x1e>
	...

08001f80 <_sbrk_r>:
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	2300      	movs	r3, #0
 8001f84:	4d05      	ldr	r5, [pc, #20]	; (8001f9c <_sbrk_r+0x1c>)
 8001f86:	4604      	mov	r4, r0
 8001f88:	4608      	mov	r0, r1
 8001f8a:	602b      	str	r3, [r5, #0]
 8001f8c:	f7fe fc22 	bl	80007d4 <_sbrk>
 8001f90:	1c43      	adds	r3, r0, #1
 8001f92:	d102      	bne.n	8001f9a <_sbrk_r+0x1a>
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	b103      	cbz	r3, 8001f9a <_sbrk_r+0x1a>
 8001f98:	6023      	str	r3, [r4, #0]
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}
 8001f9c:	200000ac 	.word	0x200000ac

08001fa0 <__malloc_lock>:
 8001fa0:	4801      	ldr	r0, [pc, #4]	; (8001fa8 <__malloc_lock+0x8>)
 8001fa2:	f000 b811 	b.w	8001fc8 <__retarget_lock_acquire_recursive>
 8001fa6:	bf00      	nop
 8001fa8:	200000b0 	.word	0x200000b0

08001fac <__malloc_unlock>:
 8001fac:	4801      	ldr	r0, [pc, #4]	; (8001fb4 <__malloc_unlock+0x8>)
 8001fae:	f000 b80c 	b.w	8001fca <__retarget_lock_release_recursive>
 8001fb2:	bf00      	nop
 8001fb4:	200000b0 	.word	0x200000b0

08001fb8 <_malloc_usable_size_r>:
 8001fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fbc:	1f18      	subs	r0, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bfbc      	itt	lt
 8001fc2:	580b      	ldrlt	r3, [r1, r0]
 8001fc4:	18c0      	addlt	r0, r0, r3
 8001fc6:	4770      	bx	lr

08001fc8 <__retarget_lock_acquire_recursive>:
 8001fc8:	4770      	bx	lr

08001fca <__retarget_lock_release_recursive>:
 8001fca:	4770      	bx	lr

08001fcc <_init>:
 8001fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fce:	bf00      	nop
 8001fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd2:	bc08      	pop	{r3}
 8001fd4:	469e      	mov	lr, r3
 8001fd6:	4770      	bx	lr

08001fd8 <_fini>:
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	bf00      	nop
 8001fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fde:	bc08      	pop	{r3}
 8001fe0:	469e      	mov	lr, r3
 8001fe2:	4770      	bx	lr
