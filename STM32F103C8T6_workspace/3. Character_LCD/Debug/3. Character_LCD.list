
3. Character_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002104  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002210  08002210  00012210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002230  08002230  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002230  08002230  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002230  08002230  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002230  08002230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002234  08002234  00012234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08002244  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08002244  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e2d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fa7  00000000  00000000  00022e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  00023e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000390  00000000  00000000  00024248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015be5  00000000  00000000  000245d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005355  00000000  00000000  0003a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ba29  00000000  00000000  0003f512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000baf3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e14  00000000  00000000  000baf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080021f8 	.word	0x080021f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080021f8 	.word	0x080021f8

0800014c <Character_LCD_init>:
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
}

void Character_LCD_init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 8000150:	200f      	movs	r0, #15
 8000152:	f001 f999 	bl	8001488 <HAL_Delay>

	// 000011
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 8000156:	2200      	movs	r2, #0
 8000158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015c:	48d9      	ldr	r0, [pc, #868]	; (80004c4 <Character_LCD_init+0x378>)
 800015e:	f001 fc1f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000162:	2200      	movs	r2, #0
 8000164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000168:	48d6      	ldr	r0, [pc, #856]	; (80004c4 <Character_LCD_init+0x378>)
 800016a:	f001 fc19 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 800016e:	2200      	movs	r2, #0
 8000170:	2110      	movs	r1, #16
 8000172:	48d5      	ldr	r0, [pc, #852]	; (80004c8 <Character_LCD_init+0x37c>)
 8000174:	f001 fc14 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	48d2      	ldr	r0, [pc, #840]	; (80004c8 <Character_LCD_init+0x37c>)
 800017e:	f001 fc0f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 8000182:	2201      	movs	r2, #1
 8000184:	2102      	movs	r1, #2
 8000186:	48d0      	ldr	r0, [pc, #832]	; (80004c8 <Character_LCD_init+0x37c>)
 8000188:	f001 fc0a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 800018c:	2201      	movs	r2, #1
 800018e:	2101      	movs	r1, #1
 8000190:	48cd      	ldr	r0, [pc, #820]	; (80004c8 <Character_LCD_init+0x37c>)
 8000192:	f001 fc05 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000196:	2201      	movs	r2, #1
 8000198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800019c:	48c9      	ldr	r0, [pc, #804]	; (80004c4 <Character_LCD_init+0x378>)
 800019e:	f001 fbff 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001a2:	2001      	movs	r0, #1
 80001a4:	f001 f970 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ae:	48c5      	ldr	r0, [pc, #788]	; (80004c4 <Character_LCD_init+0x378>)
 80001b0:	f001 fbf6 	bl	80019a0 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 80001b4:	2005      	movs	r0, #5
 80001b6:	f001 f967 	bl	8001488 <HAL_Delay>

	// 000011
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c0:	48c0      	ldr	r0, [pc, #768]	; (80004c4 <Character_LCD_init+0x378>)
 80001c2:	f001 fbed 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001cc:	48bd      	ldr	r0, [pc, #756]	; (80004c4 <Character_LCD_init+0x378>)
 80001ce:	f001 fbe7 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80001d2:	2200      	movs	r2, #0
 80001d4:	2110      	movs	r1, #16
 80001d6:	48bc      	ldr	r0, [pc, #752]	; (80004c8 <Character_LCD_init+0x37c>)
 80001d8:	f001 fbe2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 80001dc:	2200      	movs	r2, #0
 80001de:	2108      	movs	r1, #8
 80001e0:	48b9      	ldr	r0, [pc, #740]	; (80004c8 <Character_LCD_init+0x37c>)
 80001e2:	f001 fbdd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 80001e6:	2201      	movs	r2, #1
 80001e8:	2102      	movs	r1, #2
 80001ea:	48b7      	ldr	r0, [pc, #732]	; (80004c8 <Character_LCD_init+0x37c>)
 80001ec:	f001 fbd8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 80001f0:	2201      	movs	r2, #1
 80001f2:	2101      	movs	r1, #1
 80001f4:	48b4      	ldr	r0, [pc, #720]	; (80004c8 <Character_LCD_init+0x37c>)
 80001f6:	f001 fbd3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000200:	48b0      	ldr	r0, [pc, #704]	; (80004c4 <Character_LCD_init+0x378>)
 8000202:	f001 fbcd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000206:	2001      	movs	r0, #1
 8000208:	f001 f93e 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000212:	48ac      	ldr	r0, [pc, #688]	; (80004c4 <Character_LCD_init+0x378>)
 8000214:	f001 fbc4 	bl	80019a0 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000218:	2001      	movs	r0, #1
 800021a:	f001 f935 	bl	8001488 <HAL_Delay>

	// 000011
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	48a7      	ldr	r0, [pc, #668]	; (80004c4 <Character_LCD_init+0x378>)
 8000226:	f001 fbbb 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000230:	48a4      	ldr	r0, [pc, #656]	; (80004c4 <Character_LCD_init+0x378>)
 8000232:	f001 fbb5 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000236:	2200      	movs	r2, #0
 8000238:	2110      	movs	r1, #16
 800023a:	48a3      	ldr	r0, [pc, #652]	; (80004c8 <Character_LCD_init+0x37c>)
 800023c:	f001 fbb0 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000240:	2200      	movs	r2, #0
 8000242:	2108      	movs	r1, #8
 8000244:	48a0      	ldr	r0, [pc, #640]	; (80004c8 <Character_LCD_init+0x37c>)
 8000246:	f001 fbab 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 800024a:	2201      	movs	r2, #1
 800024c:	2102      	movs	r1, #2
 800024e:	489e      	ldr	r0, [pc, #632]	; (80004c8 <Character_LCD_init+0x37c>)
 8000250:	f001 fba6 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	489b      	ldr	r0, [pc, #620]	; (80004c8 <Character_LCD_init+0x37c>)
 800025a:	f001 fba1 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000264:	4897      	ldr	r0, [pc, #604]	; (80004c4 <Character_LCD_init+0x378>)
 8000266:	f001 fb9b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800026a:	2001      	movs	r0, #1
 800026c:	f001 f90c 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000276:	4893      	ldr	r0, [pc, #588]	; (80004c4 <Character_LCD_init+0x378>)
 8000278:	f001 fb92 	bl	80019a0 <HAL_GPIO_WritePin>

	// 000010
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000282:	4890      	ldr	r0, [pc, #576]	; (80004c4 <Character_LCD_init+0x378>)
 8000284:	f001 fb8c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	488d      	ldr	r0, [pc, #564]	; (80004c4 <Character_LCD_init+0x378>)
 8000290:	f001 fb86 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000294:	2200      	movs	r2, #0
 8000296:	2110      	movs	r1, #16
 8000298:	488b      	ldr	r0, [pc, #556]	; (80004c8 <Character_LCD_init+0x37c>)
 800029a:	f001 fb81 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 800029e:	2200      	movs	r2, #0
 80002a0:	2108      	movs	r1, #8
 80002a2:	4889      	ldr	r0, [pc, #548]	; (80004c8 <Character_LCD_init+0x37c>)
 80002a4:	f001 fb7c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 80002a8:	2201      	movs	r2, #1
 80002aa:	2102      	movs	r1, #2
 80002ac:	4886      	ldr	r0, [pc, #536]	; (80004c8 <Character_LCD_init+0x37c>)
 80002ae:	f001 fb77 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 80002b2:	2200      	movs	r2, #0
 80002b4:	2101      	movs	r1, #1
 80002b6:	4884      	ldr	r0, [pc, #528]	; (80004c8 <Character_LCD_init+0x37c>)
 80002b8:	f001 fb72 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c2:	4880      	ldr	r0, [pc, #512]	; (80004c4 <Character_LCD_init+0x378>)
 80002c4:	f001 fb6c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f001 f8dd 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d4:	487b      	ldr	r0, [pc, #492]	; (80004c4 <Character_LCD_init+0x378>)
 80002d6:	f001 fb63 	bl	80019a0 <HAL_GPIO_WritePin>
	// 00NF**
	// DL = 0; Sets the interface data length. 8-bit lengths = 1, 4-bit lengths = 0
	// N = 1; 2-line display
	// F = 0; 5x8 dot character font)
	// Function Set
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e0:	4878      	ldr	r0, [pc, #480]	; (80004c4 <Character_LCD_init+0x378>)
 80002e2:	f001 fb5d 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ec:	4875      	ldr	r0, [pc, #468]	; (80004c4 <Character_LCD_init+0x378>)
 80002ee:	f001 fb57 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80002f2:	2200      	movs	r2, #0
 80002f4:	2110      	movs	r1, #16
 80002f6:	4874      	ldr	r0, [pc, #464]	; (80004c8 <Character_LCD_init+0x37c>)
 80002f8:	f001 fb52 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 80002fc:	2200      	movs	r2, #0
 80002fe:	2108      	movs	r1, #8
 8000300:	4871      	ldr	r0, [pc, #452]	; (80004c8 <Character_LCD_init+0x37c>)
 8000302:	f001 fb4d 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 8000306:	2201      	movs	r2, #1
 8000308:	2102      	movs	r1, #2
 800030a:	486f      	ldr	r0, [pc, #444]	; (80004c8 <Character_LCD_init+0x37c>)
 800030c:	f001 fb48 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000310:	2200      	movs	r2, #0
 8000312:	2101      	movs	r1, #1
 8000314:	486c      	ldr	r0, [pc, #432]	; (80004c8 <Character_LCD_init+0x37c>)
 8000316:	f001 fb43 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 800031a:	2201      	movs	r2, #1
 800031c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000320:	4868      	ldr	r0, [pc, #416]	; (80004c4 <Character_LCD_init+0x378>)
 8000322:	f001 fb3d 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000326:	2001      	movs	r0, #1
 8000328:	f001 f8ae 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000332:	4864      	ldr	r0, [pc, #400]	; (80004c4 <Character_LCD_init+0x378>)
 8000334:	f001 fb34 	bl	80019a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033e:	4861      	ldr	r0, [pc, #388]	; (80004c4 <Character_LCD_init+0x378>)
 8000340:	f001 fb2e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800034a:	485e      	ldr	r0, [pc, #376]	; (80004c4 <Character_LCD_init+0x378>)
 800034c:	f001 fb28 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 8000350:	2201      	movs	r2, #1
 8000352:	2110      	movs	r1, #16
 8000354:	485c      	ldr	r0, [pc, #368]	; (80004c8 <Character_LCD_init+0x37c>)
 8000356:	f001 fb23 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	485a      	ldr	r0, [pc, #360]	; (80004c8 <Character_LCD_init+0x37c>)
 8000360:	f001 fb1e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000364:	2200      	movs	r2, #0
 8000366:	2102      	movs	r1, #2
 8000368:	4857      	ldr	r0, [pc, #348]	; (80004c8 <Character_LCD_init+0x37c>)
 800036a:	f001 fb19 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 800036e:	2200      	movs	r2, #0
 8000370:	2101      	movs	r1, #1
 8000372:	4855      	ldr	r0, [pc, #340]	; (80004c8 <Character_LCD_init+0x37c>)
 8000374:	f001 fb14 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037e:	4851      	ldr	r0, [pc, #324]	; (80004c4 <Character_LCD_init+0x378>)
 8000380:	f001 fb0e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f001 f87f 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000390:	484c      	ldr	r0, [pc, #304]	; (80004c4 <Character_LCD_init+0x378>)
 8000392:	f001 fb05 	bl	80019a0 <HAL_GPIO_WritePin>
	// 000000
	// 001DCB
	// D = 0; Display off
	// C = 0; Cursor off
	// B = 0; Blink off
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039c:	4849      	ldr	r0, [pc, #292]	; (80004c4 <Character_LCD_init+0x378>)
 800039e:	f001 faff 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a8:	4846      	ldr	r0, [pc, #280]	; (80004c4 <Character_LCD_init+0x378>)
 80003aa:	f001 faf9 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	4845      	ldr	r0, [pc, #276]	; (80004c8 <Character_LCD_init+0x37c>)
 80003b4:	f001 faf4 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 80003b8:	2200      	movs	r2, #0
 80003ba:	2108      	movs	r1, #8
 80003bc:	4842      	ldr	r0, [pc, #264]	; (80004c8 <Character_LCD_init+0x37c>)
 80003be:	f001 faef 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 80003c2:	2200      	movs	r2, #0
 80003c4:	2102      	movs	r1, #2
 80003c6:	4840      	ldr	r0, [pc, #256]	; (80004c8 <Character_LCD_init+0x37c>)
 80003c8:	f001 faea 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	483d      	ldr	r0, [pc, #244]	; (80004c8 <Character_LCD_init+0x37c>)
 80003d2:	f001 fae5 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003dc:	4839      	ldr	r0, [pc, #228]	; (80004c4 <Character_LCD_init+0x378>)
 80003de:	f001 fadf 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f001 f850 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ee:	4835      	ldr	r0, [pc, #212]	; (80004c4 <Character_LCD_init+0x378>)
 80003f0:	f001 fad6 	bl	80019a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	4832      	ldr	r0, [pc, #200]	; (80004c4 <Character_LCD_init+0x378>)
 80003fc:	f001 fad0 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000406:	482f      	ldr	r0, [pc, #188]	; (80004c4 <Character_LCD_init+0x378>)
 8000408:	f001 faca 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 800040c:	2201      	movs	r2, #1
 800040e:	2110      	movs	r1, #16
 8000410:	482d      	ldr	r0, [pc, #180]	; (80004c8 <Character_LCD_init+0x37c>)
 8000412:	f001 fac5 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000416:	2200      	movs	r2, #0
 8000418:	2108      	movs	r1, #8
 800041a:	482b      	ldr	r0, [pc, #172]	; (80004c8 <Character_LCD_init+0x37c>)
 800041c:	f001 fac0 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	4828      	ldr	r0, [pc, #160]	; (80004c8 <Character_LCD_init+0x37c>)
 8000426:	f001 fabb 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 800042a:	2200      	movs	r2, #0
 800042c:	2101      	movs	r1, #1
 800042e:	4826      	ldr	r0, [pc, #152]	; (80004c8 <Character_LCD_init+0x37c>)
 8000430:	f001 fab6 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000434:	2201      	movs	r2, #1
 8000436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800043a:	4822      	ldr	r0, [pc, #136]	; (80004c4 <Character_LCD_init+0x378>)
 800043c:	f001 fab0 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000440:	2001      	movs	r0, #1
 8000442:	f001 f821 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800044c:	481d      	ldr	r0, [pc, #116]	; (80004c4 <Character_LCD_init+0x378>)
 800044e:	f001 faa7 	bl	80019a0 <HAL_GPIO_WritePin>

	// 000000
	// 000001
	// Display Clear
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000458:	481a      	ldr	r0, [pc, #104]	; (80004c4 <Character_LCD_init+0x378>)
 800045a:	f001 faa1 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000464:	4817      	ldr	r0, [pc, #92]	; (80004c4 <Character_LCD_init+0x378>)
 8000466:	f001 fa9b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 800046a:	2200      	movs	r2, #0
 800046c:	2110      	movs	r1, #16
 800046e:	4816      	ldr	r0, [pc, #88]	; (80004c8 <Character_LCD_init+0x37c>)
 8000470:	f001 fa96 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000474:	2200      	movs	r2, #0
 8000476:	2108      	movs	r1, #8
 8000478:	4813      	ldr	r0, [pc, #76]	; (80004c8 <Character_LCD_init+0x37c>)
 800047a:	f001 fa91 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 800047e:	2200      	movs	r2, #0
 8000480:	2102      	movs	r1, #2
 8000482:	4811      	ldr	r0, [pc, #68]	; (80004c8 <Character_LCD_init+0x37c>)
 8000484:	f001 fa8c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000488:	2200      	movs	r2, #0
 800048a:	2101      	movs	r1, #1
 800048c:	480e      	ldr	r0, [pc, #56]	; (80004c8 <Character_LCD_init+0x37c>)
 800048e:	f001 fa87 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000492:	2201      	movs	r2, #1
 8000494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000498:	480a      	ldr	r0, [pc, #40]	; (80004c4 <Character_LCD_init+0x378>)
 800049a:	f001 fa81 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 fff2 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004aa:	4806      	ldr	r0, [pc, #24]	; (80004c4 <Character_LCD_init+0x378>)
 80004ac:	f001 fa78 	bl	80019a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b6:	4803      	ldr	r0, [pc, #12]	; (80004c4 <Character_LCD_init+0x378>)
 80004b8:	f001 fa72 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c2:	e003      	b.n	80004cc <Character_LCD_init+0x380>
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	4842      	ldr	r0, [pc, #264]	; (80005d8 <Character_LCD_init+0x48c>)
 80004ce:	f001 fa67 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80004d2:	2200      	movs	r2, #0
 80004d4:	2110      	movs	r1, #16
 80004d6:	4841      	ldr	r0, [pc, #260]	; (80005dc <Character_LCD_init+0x490>)
 80004d8:	f001 fa62 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 80004dc:	2200      	movs	r2, #0
 80004de:	2108      	movs	r1, #8
 80004e0:	483e      	ldr	r0, [pc, #248]	; (80005dc <Character_LCD_init+0x490>)
 80004e2:	f001 fa5d 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 80004e6:	2200      	movs	r2, #0
 80004e8:	2102      	movs	r1, #2
 80004ea:	483c      	ldr	r0, [pc, #240]	; (80005dc <Character_LCD_init+0x490>)
 80004ec:	f001 fa58 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 80004f0:	2201      	movs	r2, #1
 80004f2:	2101      	movs	r1, #1
 80004f4:	4839      	ldr	r0, [pc, #228]	; (80005dc <Character_LCD_init+0x490>)
 80004f6:	f001 fa53 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000500:	4835      	ldr	r0, [pc, #212]	; (80005d8 <Character_LCD_init+0x48c>)
 8000502:	f001 fa4d 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f000 ffbe 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000512:	4831      	ldr	r0, [pc, #196]	; (80005d8 <Character_LCD_init+0x48c>)
 8000514:	f001 fa44 	bl	80019a0 <HAL_GPIO_WritePin>
	// 000000
	// 0001(I/D)S
	// I = 1; Increment by 1
	// S = 0; No shift
	// Entry Mode Set
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051e:	482e      	ldr	r0, [pc, #184]	; (80005d8 <Character_LCD_init+0x48c>)
 8000520:	f001 fa3e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052a:	482b      	ldr	r0, [pc, #172]	; (80005d8 <Character_LCD_init+0x48c>)
 800052c:	f001 fa38 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000530:	2200      	movs	r2, #0
 8000532:	2110      	movs	r1, #16
 8000534:	4829      	ldr	r0, [pc, #164]	; (80005dc <Character_LCD_init+0x490>)
 8000536:	f001 fa33 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	4827      	ldr	r0, [pc, #156]	; (80005dc <Character_LCD_init+0x490>)
 8000540:	f001 fa2e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000544:	2200      	movs	r2, #0
 8000546:	2102      	movs	r1, #2
 8000548:	4824      	ldr	r0, [pc, #144]	; (80005dc <Character_LCD_init+0x490>)
 800054a:	f001 fa29 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 800054e:	2200      	movs	r2, #0
 8000550:	2101      	movs	r1, #1
 8000552:	4822      	ldr	r0, [pc, #136]	; (80005dc <Character_LCD_init+0x490>)
 8000554:	f001 fa24 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800055e:	481e      	ldr	r0, [pc, #120]	; (80005d8 <Character_LCD_init+0x48c>)
 8000560:	f001 fa1e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 ff8f 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	4819      	ldr	r0, [pc, #100]	; (80005d8 <Character_LCD_init+0x48c>)
 8000572:	f001 fa15 	bl	80019a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	4816      	ldr	r0, [pc, #88]	; (80005d8 <Character_LCD_init+0x48c>)
 800057e:	f001 fa0f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <Character_LCD_init+0x48c>)
 800058a:	f001 fa09 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 800058e:	2200      	movs	r2, #0
 8000590:	2110      	movs	r1, #16
 8000592:	4812      	ldr	r0, [pc, #72]	; (80005dc <Character_LCD_init+0x490>)
 8000594:	f001 fa04 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000598:	2201      	movs	r2, #1
 800059a:	2108      	movs	r1, #8
 800059c:	480f      	ldr	r0, [pc, #60]	; (80005dc <Character_LCD_init+0x490>)
 800059e:	f001 f9ff 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 80005a2:	2201      	movs	r2, #1
 80005a4:	2102      	movs	r1, #2
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <Character_LCD_init+0x490>)
 80005a8:	f001 f9fa 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <Character_LCD_init+0x490>)
 80005b2:	f001 f9f5 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <Character_LCD_init+0x48c>)
 80005be:	f001 f9ef 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 ff60 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ce:	4802      	ldr	r0, [pc, #8]	; (80005d8 <Character_LCD_init+0x48c>)
 80005d0:	f001 f9e6 	bl	80019a0 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40011000 	.word	0x40011000
 80005dc:	40010c00 	.word	0x40010c00

080005e0 <Display_on_off_control>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0

}

void Display_on_off_control(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// 000000
	// 001DCB
	// D = 1; Display On
	// C = 1; Cursor On
	// B = 0; Blink Off
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	482e      	ldr	r0, [pc, #184]	; (80006a4 <Display_on_off_control+0xc4>)
 80005ec:	f001 f9d8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	482b      	ldr	r0, [pc, #172]	; (80006a4 <Display_on_off_control+0xc4>)
 80005f8:	f001 f9d2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80005fc:	2200      	movs	r2, #0
 80005fe:	2110      	movs	r1, #16
 8000600:	4829      	ldr	r0, [pc, #164]	; (80006a8 <Display_on_off_control+0xc8>)
 8000602:	f001 f9cd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000606:	2200      	movs	r2, #0
 8000608:	2108      	movs	r1, #8
 800060a:	4827      	ldr	r0, [pc, #156]	; (80006a8 <Display_on_off_control+0xc8>)
 800060c:	f001 f9c8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000610:	2200      	movs	r2, #0
 8000612:	2102      	movs	r1, #2
 8000614:	4824      	ldr	r0, [pc, #144]	; (80006a8 <Display_on_off_control+0xc8>)
 8000616:	f001 f9c3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4822      	ldr	r0, [pc, #136]	; (80006a8 <Display_on_off_control+0xc8>)
 8000620:	f001 f9be 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // DB2 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // DB1 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062a:	481e      	ldr	r0, [pc, #120]	; (80006a4 <Display_on_off_control+0xc4>)
 800062c:	f001 f9b8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 ff29 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063c:	4819      	ldr	r0, [pc, #100]	; (80006a4 <Display_on_off_control+0xc4>)
 800063e:	f001 f9af 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1000);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000648:	4816      	ldr	r0, [pc, #88]	; (80006a4 <Display_on_off_control+0xc4>)
 800064a:	f001 f9a9 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <Display_on_off_control+0xc4>)
 8000656:	f001 f9a3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 800065a:	2201      	movs	r2, #1
 800065c:	2110      	movs	r1, #16
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <Display_on_off_control+0xc8>)
 8000660:	f001 f99e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000664:	2201      	movs	r2, #1
 8000666:	2108      	movs	r1, #8
 8000668:	480f      	ldr	r0, [pc, #60]	; (80006a8 <Display_on_off_control+0xc8>)
 800066a:	f001 f999 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 800066e:	2201      	movs	r2, #1
 8000670:	2102      	movs	r1, #2
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <Display_on_off_control+0xc8>)
 8000674:	f001 f994 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000678:	2200      	movs	r2, #0
 800067a:	2101      	movs	r1, #1
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <Display_on_off_control+0xc8>)
 800067e:	f001 f98f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <Display_on_off_control+0xc4>)
 800068a:	f001 f989 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 fefa 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069a:	4802      	ldr	r0, [pc, #8]	; (80006a4 <Display_on_off_control+0xc4>)
 800069c:	f001 f980 	bl	80019a0 <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40011000 	.word	0x40011000
 80006a8:	40010c00 	.word	0x40010c00

080006ac <Entry_mode_set>:

void Entry_mode_set(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
//	Reset_LCD_func();
	// 000000
	// 0001(I/D)S
	// I = 1; Increment by 1
	// S = 0; No shift
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	482e      	ldr	r0, [pc, #184]	; (8000770 <Entry_mode_set+0xc4>)
 80006b8:	f001 f972 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c2:	482b      	ldr	r0, [pc, #172]	; (8000770 <Entry_mode_set+0xc4>)
 80006c4:	f001 f96c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80006c8:	2200      	movs	r2, #0
 80006ca:	2110      	movs	r1, #16
 80006cc:	4829      	ldr	r0, [pc, #164]	; (8000774 <Entry_mode_set+0xc8>)
 80006ce:	f001 f967 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 80006d2:	2200      	movs	r2, #0
 80006d4:	2108      	movs	r1, #8
 80006d6:	4827      	ldr	r0, [pc, #156]	; (8000774 <Entry_mode_set+0xc8>)
 80006d8:	f001 f962 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 80006dc:	2200      	movs	r2, #0
 80006de:	2102      	movs	r1, #2
 80006e0:	4824      	ldr	r0, [pc, #144]	; (8000774 <Entry_mode_set+0xc8>)
 80006e2:	f001 f95d 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 80006e6:	2200      	movs	r2, #0
 80006e8:	2101      	movs	r1, #1
 80006ea:	4822      	ldr	r0, [pc, #136]	; (8000774 <Entry_mode_set+0xc8>)
 80006ec:	f001 f958 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // DB3 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // DB2 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // DB1 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	481e      	ldr	r0, [pc, #120]	; (8000770 <Entry_mode_set+0xc4>)
 80006f8:	f001 f952 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fec3 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000708:	4819      	ldr	r0, [pc, #100]	; (8000770 <Entry_mode_set+0xc4>)
 800070a:	f001 f949 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1000);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // RS = 0
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000714:	4816      	ldr	r0, [pc, #88]	; (8000770 <Entry_mode_set+0xc4>)
 8000716:	f001 f943 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000720:	4813      	ldr	r0, [pc, #76]	; (8000770 <Entry_mode_set+0xc4>)
 8000722:	f001 f93d 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <Entry_mode_set+0xc8>)
 800072c:	f001 f938 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000730:	2201      	movs	r2, #1
 8000732:	2108      	movs	r1, #8
 8000734:	480f      	ldr	r0, [pc, #60]	; (8000774 <Entry_mode_set+0xc8>)
 8000736:	f001 f933 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 800073a:	2201      	movs	r2, #1
 800073c:	2102      	movs	r1, #2
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <Entry_mode_set+0xc8>)
 8000740:	f001 f92e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000744:	2200      	movs	r2, #0
 8000746:	2101      	movs	r1, #1
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <Entry_mode_set+0xc8>)
 800074a:	f001 f929 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <Entry_mode_set+0xc4>)
 8000756:	f001 f923 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800075a:	2001      	movs	r0, #1
 800075c:	f000 fe94 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000766:	4802      	ldr	r0, [pc, #8]	; (8000770 <Entry_mode_set+0xc4>)
 8000768:	f001 f91a 	bl	80019a0 <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40011000 	.word	0x40011000
 8000774:	40010c00 	.word	0x40010c00

08000778 <Write_data_to_CGRAM_DDRAM>:

void Write_data_to_CGRAM_DDRAM(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
//	Reset_LCD_func();
	// 10(Write data)
	// 10(Write data)
	// Write data = 01001000(H)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000782:	48d9      	ldr	r0, [pc, #868]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000784:	f001 f90c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078e:	48d6      	ldr	r0, [pc, #856]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000790:	f001 f906 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000794:	2200      	movs	r2, #0
 8000796:	2110      	movs	r1, #16
 8000798:	48d4      	ldr	r0, [pc, #848]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 800079a:	f001 f901 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 800079e:	2201      	movs	r2, #1
 80007a0:	2108      	movs	r1, #8
 80007a2:	48d2      	ldr	r0, [pc, #840]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80007a4:	f001 f8fc 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 80007a8:	2200      	movs	r2, #0
 80007aa:	2102      	movs	r1, #2
 80007ac:	48cf      	ldr	r0, [pc, #828]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80007ae:	f001 f8f7 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	48cd      	ldr	r0, [pc, #820]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80007b8:	f001 f8f2 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c2:	48c9      	ldr	r0, [pc, #804]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80007c4:	f001 f8ec 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fe5d 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d4:	48c4      	ldr	r0, [pc, #784]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80007d6:	f001 f8e3 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e0:	48c1      	ldr	r0, [pc, #772]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80007e2:	f001 f8dd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ec:	48be      	ldr	r0, [pc, #760]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80007ee:	f001 f8d7 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 80007f2:	2201      	movs	r2, #1
 80007f4:	2110      	movs	r1, #16
 80007f6:	48bd      	ldr	r0, [pc, #756]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80007f8:	f001 f8d2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 80007fc:	2200      	movs	r2, #0
 80007fe:	2108      	movs	r1, #8
 8000800:	48ba      	ldr	r0, [pc, #744]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000802:	f001 f8cd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000806:	2200      	movs	r2, #0
 8000808:	2102      	movs	r1, #2
 800080a:	48b8      	ldr	r0, [pc, #736]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 800080c:	f001 f8c8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000810:	2200      	movs	r2, #0
 8000812:	2101      	movs	r1, #1
 8000814:	48b5      	ldr	r0, [pc, #724]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000816:	f001 f8c3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000820:	48b1      	ldr	r0, [pc, #708]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000822:	f001 f8bd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f000 fe2e 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	48ad      	ldr	r0, [pc, #692]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000834:	f001 f8b4 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01000101(E)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	48aa      	ldr	r0, [pc, #680]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000840:	f001 f8ae 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	48a7      	ldr	r0, [pc, #668]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 800084c:	f001 f8a8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000850:	2200      	movs	r2, #0
 8000852:	2110      	movs	r1, #16
 8000854:	48a5      	ldr	r0, [pc, #660]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000856:	f001 f8a3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 800085a:	2201      	movs	r2, #1
 800085c:	2108      	movs	r1, #8
 800085e:	48a3      	ldr	r0, [pc, #652]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000860:	f001 f89e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	48a0      	ldr	r0, [pc, #640]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 800086a:	f001 f899 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 800086e:	2200      	movs	r2, #0
 8000870:	2101      	movs	r1, #1
 8000872:	489e      	ldr	r0, [pc, #632]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000874:	f001 f894 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	489a      	ldr	r0, [pc, #616]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000880:	f001 f88e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 fdff 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000890:	4895      	ldr	r0, [pc, #596]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000892:	f001 f885 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4892      	ldr	r0, [pc, #584]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 800089e:	f001 f87f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a8:	488f      	ldr	r0, [pc, #572]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80008aa:	f001 f879 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80008ae:	2200      	movs	r2, #0
 80008b0:	2110      	movs	r1, #16
 80008b2:	488e      	ldr	r0, [pc, #568]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80008b4:	f001 f874 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 80008b8:	2201      	movs	r2, #1
 80008ba:	2108      	movs	r1, #8
 80008bc:	488b      	ldr	r0, [pc, #556]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80008be:	f001 f86f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 80008c2:	2200      	movs	r2, #0
 80008c4:	2102      	movs	r1, #2
 80008c6:	4889      	ldr	r0, [pc, #548]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80008c8:	f001 f86a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4886      	ldr	r0, [pc, #536]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80008d2:	f001 f865 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008dc:	4882      	ldr	r0, [pc, #520]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80008de:	f001 f85f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f000 fdd0 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ee:	487e      	ldr	r0, [pc, #504]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80008f0:	f001 f856 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01001100(L)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fa:	487b      	ldr	r0, [pc, #492]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80008fc:	f001 f850 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000906:	4878      	ldr	r0, [pc, #480]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000908:	f001 f84a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 800090c:	2200      	movs	r2, #0
 800090e:	2110      	movs	r1, #16
 8000910:	4876      	ldr	r0, [pc, #472]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000912:	f001 f845 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000916:	2201      	movs	r2, #1
 8000918:	2108      	movs	r1, #8
 800091a:	4874      	ldr	r0, [pc, #464]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 800091c:	f001 f840 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000920:	2200      	movs	r2, #0
 8000922:	2102      	movs	r1, #2
 8000924:	4871      	ldr	r0, [pc, #452]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000926:	f001 f83b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	486f      	ldr	r0, [pc, #444]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000930:	f001 f836 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	486b      	ldr	r0, [pc, #428]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 800093c:	f001 f830 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f000 fda1 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800094c:	4866      	ldr	r0, [pc, #408]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 800094e:	f001 f827 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	4863      	ldr	r0, [pc, #396]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 800095a:	f001 f821 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	4860      	ldr	r0, [pc, #384]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000966:	f001 f81b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 800096a:	2201      	movs	r2, #1
 800096c:	2110      	movs	r1, #16
 800096e:	485f      	ldr	r0, [pc, #380]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000970:	f001 f816 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000974:	2201      	movs	r2, #1
 8000976:	2108      	movs	r1, #8
 8000978:	485c      	ldr	r0, [pc, #368]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 800097a:	f001 f811 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	485a      	ldr	r0, [pc, #360]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000984:	f001 f80c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000988:	2200      	movs	r2, #0
 800098a:	2101      	movs	r1, #1
 800098c:	4857      	ldr	r0, [pc, #348]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 800098e:	f001 f807 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	4853      	ldr	r0, [pc, #332]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 800099a:	f001 f801 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 fd72 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009aa:	484f      	ldr	r0, [pc, #316]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80009ac:	f000 fff8 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01001100(L)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b6:	484c      	ldr	r0, [pc, #304]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80009b8:	f000 fff2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c2:	4849      	ldr	r0, [pc, #292]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80009c4:	f000 ffec 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80009c8:	2200      	movs	r2, #0
 80009ca:	2110      	movs	r1, #16
 80009cc:	4847      	ldr	r0, [pc, #284]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80009ce:	f000 ffe7 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 80009d2:	2201      	movs	r2, #1
 80009d4:	2108      	movs	r1, #8
 80009d6:	4845      	ldr	r0, [pc, #276]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80009d8:	f000 ffe2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 80009dc:	2200      	movs	r2, #0
 80009de:	2102      	movs	r1, #2
 80009e0:	4842      	ldr	r0, [pc, #264]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80009e2:	f000 ffdd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 80009e6:	2200      	movs	r2, #0
 80009e8:	2101      	movs	r1, #1
 80009ea:	4840      	ldr	r0, [pc, #256]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 80009ec:	f000 ffd8 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f6:	483c      	ldr	r0, [pc, #240]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 80009f8:	f000 ffd2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 fd43 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a08:	4837      	ldr	r0, [pc, #220]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000a0a:	f000 ffc9 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	4834      	ldr	r0, [pc, #208]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000a16:	f000 ffc3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	4831      	ldr	r0, [pc, #196]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000a22:	f000 ffbd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 8000a26:	2201      	movs	r2, #1
 8000a28:	2110      	movs	r1, #16
 8000a2a:	4830      	ldr	r0, [pc, #192]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000a2c:	f000 ffb8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000a30:	2201      	movs	r2, #1
 8000a32:	2108      	movs	r1, #8
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000a36:	f000 ffb3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	482b      	ldr	r0, [pc, #172]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000a40:	f000 ffae 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000a44:	2200      	movs	r2, #0
 8000a46:	2101      	movs	r1, #1
 8000a48:	4828      	ldr	r0, [pc, #160]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000a4a:	f000 ffa9 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	4824      	ldr	r0, [pc, #144]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000a56:	f000 ffa3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fd14 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a66:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000a68:	f000 ff9a 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01001111(O)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a72:	481d      	ldr	r0, [pc, #116]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000a74:	f000 ff94 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7e:	481a      	ldr	r0, [pc, #104]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000a80:	f000 ff8e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000a84:	2200      	movs	r2, #0
 8000a86:	2110      	movs	r1, #16
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000a8a:	f000 ff89 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2108      	movs	r1, #8
 8000a92:	4816      	ldr	r0, [pc, #88]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000a94:	f000 ff84 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4813      	ldr	r0, [pc, #76]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000a9e:	f000 ff7f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <Write_data_to_CGRAM_DDRAM+0x374>)
 8000aa8:	f000 ff7a 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000ab4:	f000 ff74 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 fce5 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000ac6:	f000 ff6b 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000ad2:	f000 ff65 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <Write_data_to_CGRAM_DDRAM+0x370>)
 8000ade:	f000 ff5f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	e003      	b.n	8000af0 <Write_data_to_CGRAM_DDRAM+0x378>
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	48d8      	ldr	r0, [pc, #864]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000af2:	f000 ff55 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000af6:	2201      	movs	r2, #1
 8000af8:	2108      	movs	r1, #8
 8000afa:	48d6      	ldr	r0, [pc, #856]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000afc:	f000 ff50 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 8000b00:	2201      	movs	r2, #1
 8000b02:	2102      	movs	r1, #2
 8000b04:	48d3      	ldr	r0, [pc, #844]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000b06:	f000 ff4b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	48d1      	ldr	r0, [pc, #836]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000b10:	f000 ff46 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1a:	48cf      	ldr	r0, [pc, #828]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000b1c:	f000 ff40 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 fcb1 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2c:	48ca      	ldr	r0, [pc, #808]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000b2e:	f000 ff37 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 10100000(space)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b38:	48c7      	ldr	r0, [pc, #796]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000b3a:	f000 ff31 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b44:	48c4      	ldr	r0, [pc, #784]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000b46:	f000 ff2b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	48c1      	ldr	r0, [pc, #772]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000b50:	f000 ff26 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000b54:	2200      	movs	r2, #0
 8000b56:	2108      	movs	r1, #8
 8000b58:	48be      	ldr	r0, [pc, #760]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000b5a:	f000 ff21 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2102      	movs	r1, #2
 8000b62:	48bc      	ldr	r0, [pc, #752]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000b64:	f000 ff1c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	48b9      	ldr	r0, [pc, #740]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000b6e:	f000 ff17 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b78:	48b7      	ldr	r0, [pc, #732]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000b7a:	f000 ff11 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f000 fc82 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8a:	48b3      	ldr	r0, [pc, #716]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000b8c:	f000 ff08 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	48b0      	ldr	r0, [pc, #704]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000b98:	f000 ff02 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba2:	48ad      	ldr	r0, [pc, #692]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000ba4:	f000 fefc 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2110      	movs	r1, #16
 8000bac:	48a9      	ldr	r0, [pc, #676]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000bae:	f000 fef7 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	48a7      	ldr	r0, [pc, #668]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000bb8:	f000 fef2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	48a4      	ldr	r0, [pc, #656]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000bc2:	f000 feed 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	48a2      	ldr	r0, [pc, #648]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000bcc:	f000 fee8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd6:	48a0      	ldr	r0, [pc, #640]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000bd8:	f000 fee2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 fc53 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be8:	489b      	ldr	r0, [pc, #620]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000bea:	f000 fed9 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01010111(W)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	4898      	ldr	r0, [pc, #608]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000bf6:	f000 fed3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c00:	4895      	ldr	r0, [pc, #596]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000c02:	f000 fecd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000c06:	2200      	movs	r2, #0
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4892      	ldr	r0, [pc, #584]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000c0c:	f000 fec8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000c10:	2201      	movs	r2, #1
 8000c12:	2108      	movs	r1, #8
 8000c14:	488f      	ldr	r0, [pc, #572]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000c16:	f000 fec3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	488d      	ldr	r0, [pc, #564]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000c20:	f000 febe 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 8000c24:	2201      	movs	r2, #1
 8000c26:	2101      	movs	r1, #1
 8000c28:	488a      	ldr	r0, [pc, #552]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000c2a:	f000 feb9 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c34:	4888      	ldr	r0, [pc, #544]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000c36:	f000 feb3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f000 fc24 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c46:	4884      	ldr	r0, [pc, #528]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000c48:	f000 feaa 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c52:	4881      	ldr	r0, [pc, #516]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000c54:	f000 fea4 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5e:	487e      	ldr	r0, [pc, #504]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000c60:	f000 fe9e 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000c64:	2200      	movs	r2, #0
 8000c66:	2110      	movs	r1, #16
 8000c68:	487a      	ldr	r0, [pc, #488]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000c6a:	f000 fe99 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2108      	movs	r1, #8
 8000c72:	4878      	ldr	r0, [pc, #480]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000c74:	f000 fe94 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4875      	ldr	r0, [pc, #468]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000c7e:	f000 fe8f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 8000c82:	2201      	movs	r2, #1
 8000c84:	2101      	movs	r1, #1
 8000c86:	4873      	ldr	r0, [pc, #460]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000c88:	f000 fe8a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c92:	4871      	ldr	r0, [pc, #452]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000c94:	f000 fe84 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fbf5 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca4:	486c      	ldr	r0, [pc, #432]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000ca6:	f000 fe7b 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01001111(O)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	4869      	ldr	r0, [pc, #420]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000cb2:	f000 fe75 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbc:	4866      	ldr	r0, [pc, #408]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000cbe:	f000 fe6f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	4863      	ldr	r0, [pc, #396]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000cc8:	f000 fe6a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2108      	movs	r1, #8
 8000cd0:	4860      	ldr	r0, [pc, #384]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000cd2:	f000 fe65 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2102      	movs	r1, #2
 8000cda:	485e      	ldr	r0, [pc, #376]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000cdc:	f000 fe60 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	485b      	ldr	r0, [pc, #364]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000ce6:	f000 fe5b 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf0:	4859      	ldr	r0, [pc, #356]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000cf2:	f000 fe55 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f000 fbc6 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d02:	4855      	ldr	r0, [pc, #340]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000d04:	f000 fe4c 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	4852      	ldr	r0, [pc, #328]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000d10:	f000 fe46 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	484f      	ldr	r0, [pc, #316]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000d1c:	f000 fe40 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 8000d20:	2201      	movs	r2, #1
 8000d22:	2110      	movs	r1, #16
 8000d24:	484b      	ldr	r0, [pc, #300]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000d26:	f000 fe3b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	4849      	ldr	r0, [pc, #292]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000d30:	f000 fe36 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 8000d34:	2201      	movs	r2, #1
 8000d36:	2102      	movs	r1, #2
 8000d38:	4846      	ldr	r0, [pc, #280]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000d3a:	f000 fe31 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2101      	movs	r1, #1
 8000d42:	4844      	ldr	r0, [pc, #272]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000d44:	f000 fe2c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4e:	4842      	ldr	r0, [pc, #264]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000d50:	f000 fe26 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 fb97 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d60:	483d      	ldr	r0, [pc, #244]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000d62:	f000 fe1d 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01010010(R)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6c:	483a      	ldr	r0, [pc, #232]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000d6e:	f000 fe17 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d78:	4837      	ldr	r0, [pc, #220]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000d7a:	f000 fe11 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2110      	movs	r1, #16
 8000d82:	4834      	ldr	r0, [pc, #208]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000d84:	f000 fe0c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	4831      	ldr	r0, [pc, #196]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000d8e:	f000 fe07 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000d92:	2200      	movs	r2, #0
 8000d94:	2102      	movs	r1, #2
 8000d96:	482f      	ldr	r0, [pc, #188]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000d98:	f000 fe02 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2101      	movs	r1, #1
 8000da0:	482c      	ldr	r0, [pc, #176]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000da2:	f000 fdfd 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dac:	482a      	ldr	r0, [pc, #168]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000dae:	f000 fdf7 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 fb68 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbe:	4826      	ldr	r0, [pc, #152]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000dc0:	f000 fdee 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dca:	4823      	ldr	r0, [pc, #140]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000dcc:	f000 fde8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd6:	4820      	ldr	r0, [pc, #128]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000dd8:	f000 fde2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	481c      	ldr	r0, [pc, #112]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000de2:	f000 fddd 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	481a      	ldr	r0, [pc, #104]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000dec:	f000 fdd8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 8000df0:	2201      	movs	r2, #1
 8000df2:	2102      	movs	r1, #2
 8000df4:	4817      	ldr	r0, [pc, #92]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000df6:	f000 fdd3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000e00:	f000 fdce 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000e0c:	f000 fdc8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fb39 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	480e      	ldr	r0, [pc, #56]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000e1e:	f000 fdbf 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01001100(L)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000e2a:	f000 fdb9 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <Write_data_to_CGRAM_DDRAM+0x6e0>)
 8000e36:	f000 fdb3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000e40:	f000 fdae 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000e44:	2201      	movs	r2, #1
 8000e46:	2108      	movs	r1, #8
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <Write_data_to_CGRAM_DDRAM+0x6dc>)
 8000e4a:	f000 fda9 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2102      	movs	r1, #2
 8000e52:	e003      	b.n	8000e5c <Write_data_to_CGRAM_DDRAM+0x6e4>
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	48b0      	ldr	r0, [pc, #704]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000e5e:	f000 fd9f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000e62:	2200      	movs	r2, #0
 8000e64:	2101      	movs	r1, #1
 8000e66:	48ae      	ldr	r0, [pc, #696]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000e68:	f000 fd9a 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	48ac      	ldr	r0, [pc, #688]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000e74:	f000 fd94 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f000 fb05 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e84:	48a7      	ldr	r0, [pc, #668]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000e86:	f000 fd8b 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e90:	48a4      	ldr	r0, [pc, #656]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000e92:	f000 fd85 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9c:	48a1      	ldr	r0, [pc, #644]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000e9e:	f000 fd7f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // DB7 = 1
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	489e      	ldr	r0, [pc, #632]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000ea8:	f000 fd7a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000eac:	2201      	movs	r2, #1
 8000eae:	2108      	movs	r1, #8
 8000eb0:	489b      	ldr	r0, [pc, #620]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000eb2:	f000 fd75 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4899      	ldr	r0, [pc, #612]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000ebc:	f000 fd70 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4896      	ldr	r0, [pc, #600]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000ec6:	f000 fd6b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed0:	4894      	ldr	r0, [pc, #592]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000ed2:	f000 fd65 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 fad6 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee2:	4890      	ldr	r0, [pc, #576]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000ee4:	f000 fd5c 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 01000100(D)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eee:	488d      	ldr	r0, [pc, #564]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000ef0:	f000 fd56 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efa:	488a      	ldr	r0, [pc, #552]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000efc:	f000 fd50 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000f00:	2200      	movs	r2, #0
 8000f02:	2110      	movs	r1, #16
 8000f04:	4886      	ldr	r0, [pc, #536]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000f06:	f000 fd4b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4884      	ldr	r0, [pc, #528]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000f10:	f000 fd46 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000f14:	2200      	movs	r2, #0
 8000f16:	2102      	movs	r1, #2
 8000f18:	4881      	ldr	r0, [pc, #516]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000f1a:	f000 fd41 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2101      	movs	r1, #1
 8000f22:	487f      	ldr	r0, [pc, #508]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000f24:	f000 fd3c 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2e:	487d      	ldr	r0, [pc, #500]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000f30:	f000 fd36 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 faa7 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f40:	4878      	ldr	r0, [pc, #480]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000f42:	f000 fd2d 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4875      	ldr	r0, [pc, #468]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000f4e:	f000 fd27 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f58:	4872      	ldr	r0, [pc, #456]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000f5a:	f000 fd21 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2110      	movs	r1, #16
 8000f62:	486f      	ldr	r0, [pc, #444]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000f64:	f000 fd1c 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // DB6 = 1
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	486c      	ldr	r0, [pc, #432]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000f6e:	f000 fd17 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 8000f72:	2200      	movs	r2, #0
 8000f74:	2102      	movs	r1, #2
 8000f76:	486a      	ldr	r0, [pc, #424]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000f78:	f000 fd12 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4867      	ldr	r0, [pc, #412]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000f82:	f000 fd0d 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f8c:	4865      	ldr	r0, [pc, #404]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000f8e:	f000 fd07 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fa78 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9e:	4861      	ldr	r0, [pc, #388]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000fa0:	f000 fcfe 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 00100001(!)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	485e      	ldr	r0, [pc, #376]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000fac:	f000 fcf8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb6:	485b      	ldr	r0, [pc, #364]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000fb8:	f000 fcf2 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	4857      	ldr	r0, [pc, #348]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000fc2:	f000 fced 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2108      	movs	r1, #8
 8000fca:	4855      	ldr	r0, [pc, #340]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000fcc:	f000 fce8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4852      	ldr	r0, [pc, #328]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000fd6:	f000 fce3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4850      	ldr	r0, [pc, #320]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8000fe0:	f000 fcde 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fea:	484e      	ldr	r0, [pc, #312]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000fec:	f000 fcd8 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 fa49 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	4849      	ldr	r0, [pc, #292]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8000ffe:	f000 fccf 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4846      	ldr	r0, [pc, #280]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 800100a:	f000 fcc9 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001014:	4843      	ldr	r0, [pc, #268]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8001016:	f000 fcc3 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	4840      	ldr	r0, [pc, #256]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8001020:	f000 fcbe 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8001024:	2200      	movs	r2, #0
 8001026:	2108      	movs	r1, #8
 8001028:	483d      	ldr	r0, [pc, #244]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 800102a:	f000 fcb9 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 800102e:	2200      	movs	r2, #0
 8001030:	2102      	movs	r1, #2
 8001032:	483b      	ldr	r0, [pc, #236]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8001034:	f000 fcb4 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	4838      	ldr	r0, [pc, #224]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 800103e:	f000 fcaf 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001048:	4836      	ldr	r0, [pc, #216]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 800104a:	f000 fca9 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fa1a 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800105a:	4832      	ldr	r0, [pc, #200]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 800105c:	f000 fca0 	bl	80019a0 <HAL_GPIO_WritePin>

	//////////////////////////////////////////////////////////////////////////
	// Write data = 00100001(!)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001066:	482f      	ldr	r0, [pc, #188]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8001068:	f000 fc9a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001072:	482c      	ldr	r0, [pc, #176]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8001074:	f000 fc94 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 8001078:	2200      	movs	r2, #0
 800107a:	2110      	movs	r1, #16
 800107c:	4828      	ldr	r0, [pc, #160]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 800107e:	f000 fc8f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 8001082:	2200      	movs	r2, #0
 8001084:	2108      	movs	r1, #8
 8001086:	4826      	ldr	r0, [pc, #152]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8001088:	f000 fc8a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DB5 = 1
 800108c:	2201      	movs	r2, #1
 800108e:	2102      	movs	r1, #2
 8001090:	4823      	ldr	r0, [pc, #140]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 8001092:	f000 fc85 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // DB4 = 0
 8001096:	2200      	movs	r2, #0
 8001098:	2101      	movs	r1, #1
 800109a:	4821      	ldr	r0, [pc, #132]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 800109c:	f000 fc80 	bl	80019a0 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // DB3 = 1
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // DB2 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // DB1 = 0
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // DB0 = 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	481f      	ldr	r0, [pc, #124]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 80010a8:	f000 fc7a 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f000 f9eb 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 80010ba:	f000 fc71 	bl	80019a0 <HAL_GPIO_WritePin>

//	HAL_Delay(1);
//	Reset_LCD_func();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // RS = 1
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	4817      	ldr	r0, [pc, #92]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 80010c6:	f000 fc6b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // RW = 0
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d0:	4814      	ldr	r0, [pc, #80]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 80010d2:	f000 fc65 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // DB7 = 0
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 80010dc:	f000 fc60 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // DB6 = 0
 80010e0:	2200      	movs	r2, #0
 80010e2:	2108      	movs	r1, #8
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 80010e6:	f000 fc5b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // DB5 = 0
 80010ea:	2200      	movs	r2, #0
 80010ec:	2102      	movs	r1, #2
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 80010f0:	f000 fc56 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // DB4 = 1
 80010f4:	2201      	movs	r2, #1
 80010f6:	2101      	movs	r1, #1
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <Write_data_to_CGRAM_DDRAM+0x9a8>)
 80010fa:	f000 fc51 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // E = 1
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8001106:	f000 fc4b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f9bc 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // E = 0
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001116:	4803      	ldr	r0, [pc, #12]	; (8001124 <Write_data_to_CGRAM_DDRAM+0x9ac>)
 8001118:	f000 fc42 	bl	80019a0 <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010c00 	.word	0x40010c00
 8001124:	40011000 	.word	0x40011000

08001128 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_GPIO_Init+0xcc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a2c      	ldr	r2, [pc, #176]	; (80011f4 <MX_GPIO_Init+0xcc>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_GPIO_Init+0xcc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_GPIO_Init+0xcc>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <MX_GPIO_Init+0xcc>)
 800115a:	f043 0320 	orr.w	r3, r3, #32
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <MX_GPIO_Init+0xcc>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_GPIO_Init+0xcc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <MX_GPIO_Init+0xcc>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <MX_GPIO_Init+0xcc>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_GPIO_Init+0xcc>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <MX_GPIO_Init+0xcc>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_GPIO_Init+0xcc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011a2:	4815      	ldr	r0, [pc, #84]	; (80011f8 <MX_GPIO_Init+0xd0>)
 80011a4:	f000 fbfc 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	211b      	movs	r1, #27
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_GPIO_Init+0xd4>)
 80011ae:	f000 fbf7 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	480b      	ldr	r0, [pc, #44]	; (80011f8 <MX_GPIO_Init+0xd0>)
 80011cc:	f000 fa64 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80011d0:	231b      	movs	r3, #27
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2302      	movs	r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_GPIO_Init+0xd4>)
 80011e8:	f000 fa56 	bl	8001698 <HAL_GPIO_Init>

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40010c00 	.word	0x40010c00

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 f8de 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f80b 	bl	8001222 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f7ff ff8c 	bl	8001128 <MX_GPIO_Init>
//  Entry_mode_set();
//  HAL_Delay(1000);
//  Write_data_to_CGRAM_DDRAM();
//  HAL_Delay(1000);

  	Character_LCD_init();
 8001210:	f7fe ff9c 	bl	800014c <Character_LCD_init>
//  	Function_set();
//  	Function_set();
//  	Function_set();
	Display_on_off_control();
 8001214:	f7ff f9e4 	bl	80005e0 <Display_on_off_control>
	Entry_mode_set();
 8001218:	f7ff fa48 	bl	80006ac <Entry_mode_set>
	Write_data_to_CGRAM_DDRAM();
 800121c:	f7ff faac 	bl	8000778 <Write_data_to_CGRAM_DDRAM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001220:	e7fe      	b.n	8001220 <main+0x20>

08001222 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b090      	sub	sp, #64	; 0x40
 8001226:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	2228      	movs	r2, #40	; 0x28
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f000 ffd9 	bl	80021e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001244:	2301      	movs	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001252:	2301      	movs	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001260:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fbb0 	bl	80019d0 <HAL_RCC_OscConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001276:	f000 f819 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127a:	230f      	movs	r3, #15
 800127c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127e:	2302      	movs	r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fe1d 	bl	8001ed4 <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012a0:	f000 f804 	bl	80012ac <Error_Handler>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3740      	adds	r7, #64	; 0x40
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_MspInit+0x5c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <HAL_MspInit+0x5c>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_MspInit+0x5c>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_MspInit+0x5c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_MspInit+0x5c>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_MspInit+0x5c>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_MspInit+0x60>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_MspInit+0x60>)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001362:	f000 f875 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}

0800136a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
	...

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	; (80013bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139e:	f7ff ffe4 	bl	800136a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f000 fefd 	bl	80021a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff ff2b 	bl	8001200 <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b4:	08002238 	.word	0x08002238
  ldr r2, =_sbss
 80013b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013bc:	2000002c 	.word	0x2000002c

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f92b 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff ff6a 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f935 	bl	800167e <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f90b 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <HAL_IncTick+0x20>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000008 	.word	0x20000008
 8001470:	20000028 	.word	0x20000028

08001474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <HAL_GetTick+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000028 	.word	0x20000028

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff fff0 	bl	8001474 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffe0 	bl	8001474 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff90 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff49 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001658:	f7ff ff5e 	bl	8001518 <__NVIC_GetPriorityGrouping>
 800165c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f7ff ff90 	bl	8001588 <NVIC_EncodePriority>
 8001668:	4602      	mov	r2, r0
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff5f 	bl	8001534 <__NVIC_SetPriority>
}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffb0 	bl	80015ec <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b08b      	sub	sp, #44	; 0x2c
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e169      	b.n	8001980 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016ac:	2201      	movs	r2, #1
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8158 	bne.w	800197a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4a9a      	ldr	r2, [pc, #616]	; (8001938 <HAL_GPIO_Init+0x2a0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d05e      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 80016d4:	4a98      	ldr	r2, [pc, #608]	; (8001938 <HAL_GPIO_Init+0x2a0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d875      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 80016da:	4a98      	ldr	r2, [pc, #608]	; (800193c <HAL_GPIO_Init+0x2a4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d058      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 80016e0:	4a96      	ldr	r2, [pc, #600]	; (800193c <HAL_GPIO_Init+0x2a4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d86f      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 80016e6:	4a96      	ldr	r2, [pc, #600]	; (8001940 <HAL_GPIO_Init+0x2a8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d052      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 80016ec:	4a94      	ldr	r2, [pc, #592]	; (8001940 <HAL_GPIO_Init+0x2a8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d869      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 80016f2:	4a94      	ldr	r2, [pc, #592]	; (8001944 <HAL_GPIO_Init+0x2ac>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d04c      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 80016f8:	4a92      	ldr	r2, [pc, #584]	; (8001944 <HAL_GPIO_Init+0x2ac>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d863      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 80016fe:	4a92      	ldr	r2, [pc, #584]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d046      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 8001704:	4a90      	ldr	r2, [pc, #576]	; (8001948 <HAL_GPIO_Init+0x2b0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d85d      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 800170a:	2b12      	cmp	r3, #18
 800170c:	d82a      	bhi.n	8001764 <HAL_GPIO_Init+0xcc>
 800170e:	2b12      	cmp	r3, #18
 8001710:	d859      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_GPIO_Init+0x80>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001793 	.word	0x08001793
 800171c:	0800176d 	.word	0x0800176d
 8001720:	0800177f 	.word	0x0800177f
 8001724:	080017c1 	.word	0x080017c1
 8001728:	080017c7 	.word	0x080017c7
 800172c:	080017c7 	.word	0x080017c7
 8001730:	080017c7 	.word	0x080017c7
 8001734:	080017c7 	.word	0x080017c7
 8001738:	080017c7 	.word	0x080017c7
 800173c:	080017c7 	.word	0x080017c7
 8001740:	080017c7 	.word	0x080017c7
 8001744:	080017c7 	.word	0x080017c7
 8001748:	080017c7 	.word	0x080017c7
 800174c:	080017c7 	.word	0x080017c7
 8001750:	080017c7 	.word	0x080017c7
 8001754:	080017c7 	.word	0x080017c7
 8001758:	080017c7 	.word	0x080017c7
 800175c:	08001775 	.word	0x08001775
 8001760:	08001789 	.word	0x08001789
 8001764:	4a79      	ldr	r2, [pc, #484]	; (800194c <HAL_GPIO_Init+0x2b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d013      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800176a:	e02c      	b.n	80017c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e029      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	3304      	adds	r3, #4
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e024      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	3308      	adds	r3, #8
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e01f      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	330c      	adds	r3, #12
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	e01a      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800179a:	2304      	movs	r3, #4
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e013      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a8:	2308      	movs	r3, #8
 80017aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	611a      	str	r2, [r3, #16]
          break;
 80017b2:	e009      	b.n	80017c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	615a      	str	r2, [r3, #20]
          break;
 80017be:	e003      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          break;
 80017c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2bff      	cmp	r3, #255	; 0xff
 80017cc:	d801      	bhi.n	80017d2 <HAL_GPIO_Init+0x13a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	e001      	b.n	80017d6 <HAL_GPIO_Init+0x13e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3304      	adds	r3, #4
 80017d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2bff      	cmp	r3, #255	; 0xff
 80017dc:	d802      	bhi.n	80017e4 <HAL_GPIO_Init+0x14c>
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	e002      	b.n	80017ea <HAL_GPIO_Init+0x152>
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	3b08      	subs	r3, #8
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	210f      	movs	r1, #15
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	401a      	ands	r2, r3
 80017fc:	6a39      	ldr	r1, [r7, #32]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	431a      	orrs	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80b1 	beq.w	800197a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001818:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <HAL_GPIO_Init+0x2b8>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a4c      	ldr	r2, [pc, #304]	; (8001950 <HAL_GPIO_Init+0x2b8>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <HAL_GPIO_Init+0x2b8>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001830:	4a48      	ldr	r2, [pc, #288]	; (8001954 <HAL_GPIO_Init+0x2bc>)
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a40      	ldr	r2, [pc, #256]	; (8001958 <HAL_GPIO_Init+0x2c0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d013      	beq.n	8001884 <HAL_GPIO_Init+0x1ec>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a3f      	ldr	r2, [pc, #252]	; (800195c <HAL_GPIO_Init+0x2c4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00d      	beq.n	8001880 <HAL_GPIO_Init+0x1e8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3e      	ldr	r2, [pc, #248]	; (8001960 <HAL_GPIO_Init+0x2c8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d007      	beq.n	800187c <HAL_GPIO_Init+0x1e4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <HAL_GPIO_Init+0x2cc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_GPIO_Init+0x1e0>
 8001874:	2303      	movs	r3, #3
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 8001878:	2304      	movs	r3, #4
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 800187c:	2302      	movs	r3, #2
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 8001884:	2300      	movs	r3, #0
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001896:	492f      	ldr	r1, [pc, #188]	; (8001954 <HAL_GPIO_Init+0x2bc>)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	492c      	ldr	r1, [pc, #176]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4928      	ldr	r1, [pc, #160]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4922      	ldr	r1, [pc, #136]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	491e      	ldr	r1, [pc, #120]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	4918      	ldr	r1, [pc, #96]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	4914      	ldr	r1, [pc, #80]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 8001918:	4013      	ands	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d021      	beq.n	800196c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	490e      	ldr	r1, [pc, #56]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e021      	b.n	800197a <HAL_GPIO_Init+0x2e2>
 8001936:	bf00      	nop
 8001938:	10320000 	.word	0x10320000
 800193c:	10310000 	.word	0x10310000
 8001940:	10220000 	.word	0x10220000
 8001944:	10210000 	.word	0x10210000
 8001948:	10120000 	.word	0x10120000
 800194c:	10110000 	.word	0x10110000
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000
 8001958:	40010800 	.word	0x40010800
 800195c:	40010c00 	.word	0x40010c00
 8001960:	40011000 	.word	0x40011000
 8001964:	40011400 	.word	0x40011400
 8001968:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_GPIO_Init+0x304>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	43db      	mvns	r3, r3
 8001974:	4909      	ldr	r1, [pc, #36]	; (800199c <HAL_GPIO_Init+0x304>)
 8001976:	4013      	ands	r3, r2
 8001978:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	3301      	adds	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	f47f ae8e 	bne.w	80016ac <HAL_GPIO_Init+0x14>
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	372c      	adds	r7, #44	; 0x2c
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e272      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8087 	beq.w	8001afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f0:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d00c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d112      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5e>
 8001a08:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d10b      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	4b89      	ldr	r3, [pc, #548]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d06c      	beq.n	8001afc <HAL_RCC_OscConfig+0x12c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d168      	bne.n	8001afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e24c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x76>
 8001a38:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a7f      	ldr	r2, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e02e      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x98>
 8001a4e:	4b7b      	ldr	r3, [pc, #492]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7a      	ldr	r2, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a77      	ldr	r2, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e01d      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0xbc>
 8001a72:	4b72      	ldr	r3, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a71      	ldr	r2, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a8c:	4b6b      	ldr	r3, [pc, #428]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a67      	ldr	r2, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fce2 	bl	8001474 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fcde 	bl	8001474 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e200      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fcce 	bl	8001474 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fcca 	bl	8001474 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1ec      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x10c>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d063      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b16:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d11c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x18c>
 8001b22:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x176>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1c0      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4939      	ldr	r1, [pc, #228]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	e03a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fc83 	bl	8001474 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff fc7f 	bl	8001474 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1a1      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e015      	b.n	8001bd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fc62 	bl	8001474 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fc5e 	bl	8001474 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e180      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d03a      	beq.n	8001c54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d019      	beq.n	8001c1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fc42 	bl	8001474 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fc3e 	bl	8001474 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e160      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f000 faa6 	bl	8002164 <RCC_Delay>
 8001c18:	e01c      	b.n	8001c54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff fc28 	bl	8001474 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c26:	e00f      	b.n	8001c48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff fc24 	bl	8001474 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d908      	bls.n	8001c48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e146      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	42420000 	.word	0x42420000
 8001c44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b92      	ldr	r3, [pc, #584]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e9      	bne.n	8001c28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80a6 	beq.w	8001dae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10d      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a87      	ldr	r2, [pc, #540]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b82      	ldr	r3, [pc, #520]	; (8001e98 <HAL_RCC_OscConfig+0x4c8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d118      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x4c8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7e      	ldr	r2, [pc, #504]	; (8001e98 <HAL_RCC_OscConfig+0x4c8>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fbe5 	bl	8001474 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7ff fbe1 	bl	8001474 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b64      	cmp	r3, #100	; 0x64
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e103      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4c8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x312>
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a6e      	ldr	r2, [pc, #440]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	e02d      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x334>
 8001cea:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a69      	ldr	r2, [pc, #420]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a66      	ldr	r2, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	e01c      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCC_OscConfig+0x356>
 8001d0c:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a60      	ldr	r2, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4a5d      	ldr	r2, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6213      	str	r3, [r2, #32]
 8001d24:	e00b      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a5a      	ldr	r2, [pc, #360]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f023 0304 	bic.w	r3, r3, #4
 8001d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d015      	beq.n	8001d72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fb95 	bl	8001474 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff fb91 	bl	8001474 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0b1      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ee      	beq.n	8001d4e <HAL_RCC_OscConfig+0x37e>
 8001d70:	e014      	b.n	8001d9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fb7f 	bl	8001474 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fb7b 	bl	8001474 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e09b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ee      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d105      	bne.n	8001dae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8087 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d061      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d146      	bne.n	8001e5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_RCC_OscConfig+0x4cc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fb4f 	bl	8001474 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff fb4b 	bl	8001474 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e06d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d108      	bne.n	8001e14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4921      	ldr	r1, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a19      	ldr	r1, [r3, #32]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	430b      	orrs	r3, r1
 8001e26:	491b      	ldr	r1, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fb1f 	bl	8001474 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7ff fb1b 	bl	8001474 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e03d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x46a>
 8001e58:	e035      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x4cc>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fb08 	bl	8001474 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff fb04 	bl	8001474 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e026      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x498>
 8001e86:	e01e      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e019      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_OscConfig+0x500>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0d0      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4965      	ldr	r1, [pc, #404]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b8      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a58      	ldr	r2, [pc, #352]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b50      	ldr	r3, [pc, #320]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	494d      	ldr	r1, [pc, #308]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d040      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d115      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07f      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e073      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e06b      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4936      	ldr	r1, [pc, #216]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff fa56 	bl	8001474 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff fa52 	bl	8001474 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e053      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d210      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4922      	ldr	r1, [pc, #136]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e032      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4916      	ldr	r1, [pc, #88]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	490e      	ldr	r1, [pc, #56]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002062:	f000 f821 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	490a      	ldr	r1, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	5ccb      	ldrb	r3, [r1, r3]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1cc>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f9b4 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000
 8002098:	40021000 	.word	0x40021000
 800209c:	08002220 	.word	0x08002220
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000004 	.word	0x20000004

080020a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b490      	push	{r4, r7}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_GetSysClockFreq+0xac>)
 80020b0:	1d3c      	adds	r4, r7, #4
 80020b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b8:	f240 2301 	movw	r3, #513	; 0x201
 80020bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x40>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x46>
 80020e6:	e02b      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ea:	623b      	str	r3, [r7, #32]
      break;
 80020ec:	e02b      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3328      	adds	r3, #40	; 0x28
 80020f8:	443b      	add	r3, r7
 80020fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb0>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	0c5b      	lsrs	r3, r3, #17
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	3328      	adds	r3, #40	; 0x28
 8002116:	443b      	add	r3, r7
 8002118:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800211c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002122:	fb03 f202 	mul.w	r2, r3, r2
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	e004      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	623b      	str	r3, [r7, #32]
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002142:	623b      	str	r3, [r7, #32]
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	6a3b      	ldr	r3, [r7, #32]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bc90      	pop	{r4, r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	08002210 	.word	0x08002210
 8002158:	40021000 	.word	0x40021000
 800215c:	007a1200 	.word	0x007a1200
 8002160:	003d0900 	.word	0x003d0900

08002164 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <RCC_Delay+0x34>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <RCC_Delay+0x38>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0a5b      	lsrs	r3, r3, #9
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002180:	bf00      	nop
  }
  while (Delay --);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	60fa      	str	r2, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f9      	bne.n	8002180 <RCC_Delay+0x1c>
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000000 	.word	0x20000000
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <__libc_init_array>:
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	2600      	movs	r6, #0
 80021a4:	4d0c      	ldr	r5, [pc, #48]	; (80021d8 <__libc_init_array+0x38>)
 80021a6:	4c0d      	ldr	r4, [pc, #52]	; (80021dc <__libc_init_array+0x3c>)
 80021a8:	1b64      	subs	r4, r4, r5
 80021aa:	10a4      	asrs	r4, r4, #2
 80021ac:	42a6      	cmp	r6, r4
 80021ae:	d109      	bne.n	80021c4 <__libc_init_array+0x24>
 80021b0:	f000 f822 	bl	80021f8 <_init>
 80021b4:	2600      	movs	r6, #0
 80021b6:	4d0a      	ldr	r5, [pc, #40]	; (80021e0 <__libc_init_array+0x40>)
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <__libc_init_array+0x44>)
 80021ba:	1b64      	subs	r4, r4, r5
 80021bc:	10a4      	asrs	r4, r4, #2
 80021be:	42a6      	cmp	r6, r4
 80021c0:	d105      	bne.n	80021ce <__libc_init_array+0x2e>
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
 80021c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c8:	4798      	blx	r3
 80021ca:	3601      	adds	r6, #1
 80021cc:	e7ee      	b.n	80021ac <__libc_init_array+0xc>
 80021ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d2:	4798      	blx	r3
 80021d4:	3601      	adds	r6, #1
 80021d6:	e7f2      	b.n	80021be <__libc_init_array+0x1e>
 80021d8:	08002230 	.word	0x08002230
 80021dc:	08002230 	.word	0x08002230
 80021e0:	08002230 	.word	0x08002230
 80021e4:	08002234 	.word	0x08002234

080021e8 <memset>:
 80021e8:	4603      	mov	r3, r0
 80021ea:	4402      	add	r2, r0
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d100      	bne.n	80021f2 <memset+0xa>
 80021f0:	4770      	bx	lr
 80021f2:	f803 1b01 	strb.w	r1, [r3], #1
 80021f6:	e7f9      	b.n	80021ec <memset+0x4>

080021f8 <_init>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	bf00      	nop
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr

08002204 <_fini>:
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	bf00      	nop
 8002208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220a:	bc08      	pop	{r3}
 800220c:	469e      	mov	lr, r3
 800220e:	4770      	bx	lr
