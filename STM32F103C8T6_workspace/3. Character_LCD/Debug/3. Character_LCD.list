
3. Character_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a4  080021a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080021a4  080021a4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a4  080021a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000070  0800221c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800221c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036e2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011fe  00000000  00000000  0002377b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  00024980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00024e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169e0  00000000  00000000  00025218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a78  00000000  00000000  0003bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f3a2  00000000  00000000  00041670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0a12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001400  00000000  00000000  000c0a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080020b0 	.word	0x080020b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080020b0 	.word	0x080020b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CLCD_Pin_Set_Exec>:
static void CLCD_Read_Busy_Flag_And_Address(void);
static void CLCD_Write_Data_To_CG_OR_DDRAM(uint16_t data);
static void CLCD_Read_Data_From_CG_OR_DDRAM(void);

static void CLCD_Pin_Set_Exec(CLCD_PIN_S clcd_pin)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	//	---- 0000 0000 0000
	int16_t last_pin_idx;
	uint16_t tmp_pin;

	if(fs_ctrl->d_l)
 8000166:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <CLCD_Pin_Set_Exec+0x88>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	b2db      	uxtb	r3, r3
 8000172:	2b00      	cmp	r3, #0
 8000174:	d00b      	beq.n	800018e <CLCD_Pin_Set_Exec+0x32>
	{
		last_pin_idx = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	81fb      	strh	r3, [r7, #14]
		CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 800017a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800017e:	88fb      	ldrh	r3, [r7, #6]
 8000180:	4611      	mov	r1, r2
 8000182:	4618      	mov	r0, r3
 8000184:	f000 f830 	bl	80001e8 <CLCD_GPIO_Set>
		CLCD_Inst_Exec();
 8000188:	f000 f8ba 	bl	8000300 <CLCD_Inst_Exec>
 800018c:	e027      	b.n	80001de <CLCD_Pin_Set_Exec+0x82>
	}
	else
	{
		last_pin_idx = 4;
 800018e:	2304      	movs	r3, #4
 8000190:	81fb      	strh	r3, [r7, #14]
		CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 8000192:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000196:	88fb      	ldrh	r3, [r7, #6]
 8000198:	4611      	mov	r1, r2
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f824 	bl	80001e8 <CLCD_GPIO_Set>
		CLCD_Inst_Exec();
 80001a0:	f000 f8ae 	bl	8000300 <CLCD_Inst_Exec>
		if(clcd_pin & CLCD_PIN_S_4_BIT_OP_ONCE)
 80001a4:	88fb      	ldrh	r3, [r7, #6]
 80001a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d116      	bne.n	80001dc <CLCD_Pin_Set_Exec+0x80>
			return;
		else
		{
			tmp_pin = (clcd_pin & 0x00f) << 4;
 80001ae:	88fb      	ldrh	r3, [r7, #6]
 80001b0:	011b      	lsls	r3, r3, #4
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	81bb      	strh	r3, [r7, #12]
			clcd_pin &= 0x600;
 80001b8:	88fb      	ldrh	r3, [r7, #6]
 80001ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80001be:	80fb      	strh	r3, [r7, #6]
			clcd_pin |= tmp_pin;
 80001c0:	88fa      	ldrh	r2, [r7, #6]
 80001c2:	89bb      	ldrh	r3, [r7, #12]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	80fb      	strh	r3, [r7, #6]
			CLCD_GPIO_Set(clcd_pin, last_pin_idx);
 80001c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80001cc:	88fb      	ldrh	r3, [r7, #6]
 80001ce:	4611      	mov	r1, r2
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 f809 	bl	80001e8 <CLCD_GPIO_Set>
			CLCD_Inst_Exec();
 80001d6:	f000 f893 	bl	8000300 <CLCD_Inst_Exec>
 80001da:	e000      	b.n	80001de <CLCD_Pin_Set_Exec+0x82>
			return;
 80001dc:	bf00      	nop
		}
	}
}
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000098 	.word	0x20000098

080001e8 <CLCD_GPIO_Set>:

static void CLCD_GPIO_Set(uint16_t select_pin, int16_t last_pin_idx)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	460a      	mov	r2, r1
 80001f2:	80fb      	strh	r3, [r7, #6]
 80001f4:	4613      	mov	r3, r2
 80001f6:	80bb      	strh	r3, [r7, #4]
	int16_t i;
	int16_t start_pin_idx = 10;
 80001f8:	230a      	movs	r3, #10
 80001fa:	81bb      	strh	r3, [r7, #12]

	for(i = start_pin_idx; i >= last_pin_idx; i--)
 80001fc:	89bb      	ldrh	r3, [r7, #12]
 80001fe:	81fb      	strh	r3, [r7, #14]
 8000200:	e033      	b.n	800026a <CLCD_GPIO_Set+0x82>
	{
		if((select_pin >> i) & 0x001)
 8000202:	88fa      	ldrh	r2, [r7, #6]
 8000204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000208:	fa42 f303 	asr.w	r3, r2, r3
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d012      	beq.n	800023a <CLCD_GPIO_Set+0x52>
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_SET);
 8000214:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <CLCD_GPIO_Set+0x98>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	4413      	add	r3, r2
 8000220:	6818      	ldr	r0, [r3, #0]
 8000222:	4b17      	ldr	r3, [pc, #92]	; (8000280 <CLCD_GPIO_Set+0x98>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800022a:	00db      	lsls	r3, r3, #3
 800022c:	4413      	add	r3, r2
 800022e:	889b      	ldrh	r3, [r3, #4]
 8000230:	2201      	movs	r2, #1
 8000232:	4619      	mov	r1, r3
 8000234:	f000 fe90 	bl	8000f58 <HAL_GPIO_WritePin>
 8000238:	e011      	b.n	800025e <CLCD_GPIO_Set+0x76>
		else
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_RESET);
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <CLCD_GPIO_Set+0x98>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	4413      	add	r3, r2
 8000246:	6818      	ldr	r0, [r3, #0]
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <CLCD_GPIO_Set+0x98>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000250:	00db      	lsls	r3, r3, #3
 8000252:	4413      	add	r3, r2
 8000254:	889b      	ldrh	r3, [r3, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	4619      	mov	r1, r3
 800025a:	f000 fe7d 	bl	8000f58 <HAL_GPIO_WritePin>
	for(i = start_pin_idx; i >= last_pin_idx; i--)
 800025e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000262:	b29b      	uxth	r3, r3
 8000264:	3b01      	subs	r3, #1
 8000266:	b29b      	uxth	r3, r3
 8000268:	81fb      	strh	r3, [r7, #14]
 800026a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800026e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000272:	429a      	cmp	r2, r3
 8000274:	dac5      	bge.n	8000202 <CLCD_GPIO_Set+0x1a>
	}
}
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000009c 	.word	0x2000009c

08000284 <CLCD_Config_Init>:

static void CLCD_Config_Init()
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
			{ CLCD_PIN_E_TYPE, 	CLCD_PIN_E_NUM 	},  // idx =  8
			{ CLCD_PIN_RW_TYPE, CLCD_PIN_RW_NUM },	// idx =  9
			{ CLCD_PIN_RS_TYPE, CLCD_PIN_RS_NUM }   // idx = 10
	};

	clcd_pin = clcd_pin_sc;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <CLCD_Config_Init+0x60>)
 800028a:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <CLCD_Config_Init+0x64>)
 800028c:	601a      	str	r2, [r3, #0]

	ems_ctrl.i_d = CLCD_I_EMS_I_D;
 800028e:	4a17      	ldr	r2, [pc, #92]	; (80002ec <CLCD_Config_Init+0x68>)
 8000290:	7813      	ldrb	r3, [r2, #0]
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	7013      	strb	r3, [r2, #0]
	ems_ctrl.s = CLCD_I_EMS_S;
 8000298:	4a14      	ldr	r2, [pc, #80]	; (80002ec <CLCD_Config_Init+0x68>)
 800029a:	7813      	ldrb	r3, [r2, #0]
 800029c:	f36f 0341 	bfc	r3, #1, #1
 80002a0:	7013      	strb	r3, [r2, #0]

	doc_ctrl.d = CLCD_I_DOC_D;
 80002a2:	4a13      	ldr	r2, [pc, #76]	; (80002f0 <CLCD_Config_Init+0x6c>)
 80002a4:	7813      	ldrb	r3, [r2, #0]
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	7013      	strb	r3, [r2, #0]
	doc_ctrl.c = CLCD_I_DOC_C;
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <CLCD_Config_Init+0x6c>)
 80002ae:	7813      	ldrb	r3, [r2, #0]
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	7013      	strb	r3, [r2, #0]
	doc_ctrl.b = CLCD_I_DOC_B;
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <CLCD_Config_Init+0x6c>)
 80002b8:	7813      	ldrb	r3, [r2, #0]
 80002ba:	f36f 0382 	bfc	r3, #2, #1
 80002be:	7013      	strb	r3, [r2, #0]

	cods_ctrl.s_c = CLCD_I_CODS_S_C;
 80002c0:	4a0c      	ldr	r2, [pc, #48]	; (80002f4 <CLCD_Config_Init+0x70>)
 80002c2:	7813      	ldrb	r3, [r2, #0]
 80002c4:	f36f 0300 	bfc	r3, #0, #1
 80002c8:	7013      	strb	r3, [r2, #0]
	cods_ctrl.r_l = CLCD_I_CODS_R_L;
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <CLCD_Config_Init+0x70>)
 80002cc:	7813      	ldrb	r3, [r2, #0]
 80002ce:	f36f 0341 	bfc	r3, #1, #1
 80002d2:	7013      	strb	r3, [r2, #0]
	static const CLCD_FS fs_ctrl_v = {
		CLCD_I_FS_D_L,
		CLCD_I_FS_N,
		CLCD_I_FS_F
	};
	fs_ctrl = &fs_ctrl_v;
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <CLCD_Config_Init+0x74>)
 80002d6:	4a09      	ldr	r2, [pc, #36]	; (80002fc <CLCD_Config_Init+0x78>)
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	2000009c 	.word	0x2000009c
 80002e8:	08002104 	.word	0x08002104
 80002ec:	2000008c 	.word	0x2000008c
 80002f0:	20000090 	.word	0x20000090
 80002f4:	20000094 	.word	0x20000094
 80002f8:	20000098 	.word	0x20000098
 80002fc:	0800215c 	.word	0x0800215c

08000300 <CLCD_Inst_Exec>:

static void CLCD_Inst_Exec(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
	uint16_t e_idx = 8;
 8000306:	2308      	movs	r3, #8
 8000308:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(clcd_pin[e_idx].lcd_gpio_type, clcd_pin[e_idx].pin_num, GPIO_PIN_SET);
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <CLCD_Inst_Exec+0x60>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	4413      	add	r3, r2
 8000314:	6818      	ldr	r0, [r3, #0]
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <CLCD_Inst_Exec+0x60>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	4413      	add	r3, r2
 8000320:	889b      	ldrh	r3, [r3, #4]
 8000322:	2201      	movs	r2, #1
 8000324:	4619      	mov	r1, r3
 8000326:	f000 fe17 	bl	8000f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fb88 	bl	8000a40 <HAL_Delay>
	HAL_GPIO_WritePin(clcd_pin[e_idx].lcd_gpio_type, clcd_pin[e_idx].pin_num, GPIO_PIN_RESET);
 8000330:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <CLCD_Inst_Exec+0x60>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	4413      	add	r3, r2
 800033a:	6818      	ldr	r0, [r3, #0]
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <CLCD_Inst_Exec+0x60>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	4413      	add	r3, r2
 8000346:	889b      	ldrh	r3, [r3, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	4619      	mov	r1, r3
 800034c:	f000 fe04 	bl	8000f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f000 fb75 	bl	8000a40 <HAL_Delay>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000009c 	.word	0x2000009c

08000364 <CLCD_Init>:

void CLCD_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	CLCD_Config_Init();
 8000368:	f7ff ff8c 	bl	8000284 <CLCD_Config_Init>
	HAL_Delay(40);
 800036c:	2028      	movs	r0, #40	; 0x28
 800036e:	f000 fb67 	bl	8000a40 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 8000372:	2030      	movs	r0, #48	; 0x30
 8000374:	f7ff fef2 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(5);
 8000378:	2005      	movs	r0, #5
 800037a:	f000 fb61 	bl	8000a40 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 800037e:	2030      	movs	r0, #48	; 0x30
 8000380:	f7ff feec 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f000 fb5b 	bl	8000a40 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 800038a:	2030      	movs	r0, #48	; 0x30
 800038c:	f7ff fee6 	bl	800015c <CLCD_Pin_Set_Exec>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_4_BIT_OP_ONCE | CLCD_PIN_S_DB5);
 8000390:	f44f 6002 	mov.w	r0, #2080	; 0x820
 8000394:	f7ff fee2 	bl	800015c <CLCD_Pin_Set_Exec>
	CLCD_Function_Set();
 8000398:	f000 f882 	bl	80004a0 <CLCD_Function_Set>
	CLCD_Display_ON_OFF_Control(CLCD_DOC_E_NONE);
 800039c:	2000      	movs	r0, #0
 800039e:	f000 f843 	bl	8000428 <CLCD_Display_ON_OFF_Control>
	CLCD_Clear_Display();
 80003a2:	f000 f808 	bl	80003b6 <CLCD_Clear_Display>
	CLCD_Entry_Mode_Set(CLCD_EMS_E_INIT);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 f80c 	bl	80003c4 <CLCD_Entry_Mode_Set>
	// Initialization Ends

	CLCD_Display_ON_OFF_Control(CLCD_DOC_E_INIT);
 80003ac:	2003      	movs	r0, #3
 80003ae:	f000 f83b 	bl	8000428 <CLCD_Display_ON_OFF_Control>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <CLCD_Clear_Display>:

void CLCD_Clear_Display(void)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB0);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff fece 	bl	800015c <CLCD_Pin_Set_Exec>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <CLCD_Entry_Mode_Set>:
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB1);
	HAL_Delay(1);
}

static void CLCD_Entry_Mode_Set(CLCD_EMS_E select)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	uint16_t clcd_pin = CLCD_PIN_S_DB3;
 80003ce:	2308      	movs	r3, #8
 80003d0:	81fb      	strh	r3, [r7, #14]

	ems_ctrl.bits = select;
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <CLCD_Entry_Mode_Set+0x60>)
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	7013      	strb	r3, [r2, #0]
	clcd_pin |= CLCD_PIN_S_DB2;
 80003d8:	89fb      	ldrh	r3, [r7, #14]
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	81fb      	strh	r3, [r7, #14]
	clcd_pin |= (ems_ctrl.i_d ? CLCD_PIN_S_DB1 : 0);
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <CLCD_Entry_Mode_Set+0x60>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	b21b      	sxth	r3, r3
 80003e8:	f003 0302 	and.w	r3, r3, #2
 80003ec:	b21a      	sxth	r2, r3
 80003ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	b21b      	sxth	r3, r3
 80003f6:	81fb      	strh	r3, [r7, #14]
	clcd_pin |= (ems_ctrl.s ? CLCD_PIN_S_DB0 : 0);
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <CLCD_Entry_Mode_Set+0x60>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	085b      	lsrs	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	b21b      	sxth	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b21a      	sxth	r2, r3
 8000408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800040c:	4313      	orrs	r3, r2
 800040e:	b21b      	sxth	r3, r3
 8000410:	81fb      	strh	r3, [r7, #14]

	CLCD_Pin_Set_Exec(clcd_pin);
 8000412:	89fb      	ldrh	r3, [r7, #14]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff fea1 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	2000008c 	.word	0x2000008c

08000428 <CLCD_Display_ON_OFF_Control>:

static void CLCD_Display_ON_OFF_Control(CLCD_DOC_E select)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	uint16_t clcd_pin = CLCD_PIN_S_DB3;
 8000432:	2308      	movs	r3, #8
 8000434:	81fb      	strh	r3, [r7, #14]

	doc_ctrl.bits = select;
 8000436:	4a19      	ldr	r2, [pc, #100]	; (800049c <CLCD_Display_ON_OFF_Control+0x74>)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	7013      	strb	r3, [r2, #0]
	clcd_pin |= CLCD_PIN_S_DB3;
 800043c:	89fb      	ldrh	r3, [r7, #14]
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	81fb      	strh	r3, [r7, #14]
	clcd_pin |= (doc_ctrl.d ? CLCD_PIN_S_DB2 : 0);
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <CLCD_Display_ON_OFF_Control+0x74>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	b21b      	sxth	r3, r3
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	b21a      	sxth	r2, r3
 8000452:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000456:	4313      	orrs	r3, r2
 8000458:	b21b      	sxth	r3, r3
 800045a:	81fb      	strh	r3, [r7, #14]
	clcd_pin |= (doc_ctrl.c ? CLCD_PIN_S_DB1 : 0);
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <CLCD_Display_ON_OFF_Control+0x74>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b21b      	sxth	r3, r3
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	b21a      	sxth	r2, r3
 8000468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800046c:	4313      	orrs	r3, r2
 800046e:	b21b      	sxth	r3, r3
 8000470:	81fb      	strh	r3, [r7, #14]
	clcd_pin |= (doc_ctrl.b ? CLCD_PIN_S_DB0 : 0);
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <CLCD_Display_ON_OFF_Control+0x74>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	089b      	lsrs	r3, r3, #2
 8000478:	b2db      	uxtb	r3, r3
 800047a:	b21b      	sxth	r3, r3
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	b21a      	sxth	r2, r3
 8000482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000486:	4313      	orrs	r3, r2
 8000488:	b21b      	sxth	r3, r3
 800048a:	81fb      	strh	r3, [r7, #14]

	CLCD_Pin_Set_Exec(clcd_pin);
 800048c:	89fb      	ldrh	r3, [r7, #14]
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff fe64 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000090 	.word	0x20000090

080004a0 <CLCD_Function_Set>:

	CLCD_Pin_Set_Exec(clcd_pin);
}

static void CLCD_Function_Set(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
	uint16_t clcd_pin = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	80fb      	strh	r3, [r7, #6]

	clcd_pin |= CLCD_PIN_S_DB5;
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	f043 0320 	orr.w	r3, r3, #32
 80004b0:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->d_l ? CLCD_PIN_S_DB4 : 0);
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <CLCD_Function_Set+0x70>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	f003 0310 	and.w	r3, r3, #16
 80004c0:	b21a      	sxth	r2, r3
 80004c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->n ? CLCD_PIN_S_DB3 : 0);
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <CLCD_Function_Set+0x70>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	b21b      	sxth	r3, r3
 80004d6:	f003 0308 	and.w	r3, r3, #8
 80004da:	b21a      	sxth	r2, r3
 80004dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b21b      	sxth	r3, r3
 80004e4:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (fs_ctrl->f ? CLCD_PIN_S_DB2 : 0);
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <CLCD_Function_Set+0x70>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	b21a      	sxth	r2, r3
 80004f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	80fb      	strh	r3, [r7, #6]

	CLCD_Pin_Set_Exec(clcd_pin);
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe2b 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000098 	.word	0x20000098

08000514 <CLCD_Set_DDRAM_address>:
{

}

static void CLCD_Set_DDRAM_address(uint16_t row, uint16_t col)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	80fb      	strh	r3, [r7, #6]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
	uint16_t pin_s = CLCD_PIN_S_DB7;
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	81fb      	strh	r3, [r7, #14]

	if(fs_ctrl->n)
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <CLCD_Set_DDRAM_address+0x60>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00c      	beq.n	8000552 <CLCD_Set_DDRAM_address+0x3e>
	{
		if(row)
 8000538:	88fb      	ldrh	r3, [r7, #6]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <CLCD_Set_DDRAM_address+0x2e>
			row = 0x40;
 800053e:	2340      	movs	r3, #64	; 0x40
 8000540:	80fb      	strh	r3, [r7, #6]
		pin_s |= (row | col);
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	88bb      	ldrh	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	b29a      	uxth	r2, r3
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	4313      	orrs	r3, r2
 800054e:	81fb      	strh	r3, [r7, #14]
 8000550:	e006      	b.n	8000560 <CLCD_Set_DDRAM_address+0x4c>
	}
	else
	{
		if(row)
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d108      	bne.n	800056a <CLCD_Set_DDRAM_address+0x56>
			return;
		else
			pin_s |= col;
 8000558:	89fa      	ldrh	r2, [r7, #14]
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	81fb      	strh	r3, [r7, #14]
	}
	CLCD_Pin_Set_Exec(pin_s);
 8000560:	89fb      	ldrh	r3, [r7, #14]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fdfa 	bl	800015c <CLCD_Pin_Set_Exec>
 8000568:	e000      	b.n	800056c <CLCD_Set_DDRAM_address+0x58>
			return;
 800056a:	bf00      	nop
}
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000098 	.word	0x20000098

08000578 <CLCD_Write_Data_To_CG_OR_DDRAM>:
{

}

static void CLCD_Write_Data_To_CG_OR_DDRAM(uint16_t data)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	80fb      	strh	r3, [r7, #6]
	uint16_t pin_s = CLCD_PIN_S_RS;
 8000582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000586:	81fb      	strh	r3, [r7, #14]
	pin_s |= data;
 8000588:	89fa      	ldrh	r2, [r7, #14]
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	4313      	orrs	r3, r2
 800058e:	81fb      	strh	r3, [r7, #14]
	CLCD_Pin_Set_Exec(pin_s);
 8000590:	89fb      	ldrh	r3, [r7, #14]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fde2 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <CLCD_Write>:
{

}

void CLCD_Write(uint16_t row, uint16_t col, const int8_t* str)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	603a      	str	r2, [r7, #0]
 80005aa:	80fb      	strh	r3, [r7, #6]
 80005ac:	460b      	mov	r3, r1
 80005ae:	80bb      	strh	r3, [r7, #4]
	int16_t i;
	int32_t str_size;
	str_size = strlen(str);
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f7ff fdcb 	bl	800014c <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	60bb      	str	r3, [r7, #8]

	if(str_size > 16)
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b10      	cmp	r3, #16
 80005be:	dd01      	ble.n	80005c4 <CLCD_Write+0x24>
		str_size = 16;
 80005c0:	2310      	movs	r3, #16
 80005c2:	60bb      	str	r3, [r7, #8]

	CLCD_Set_DDRAM_address(row, col);
 80005c4:	88ba      	ldrh	r2, [r7, #4]
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	4611      	mov	r1, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffa2 	bl	8000514 <CLCD_Set_DDRAM_address>

	for(i = 0; i < str_size; i++)
 80005d0:	2300      	movs	r3, #0
 80005d2:	81fb      	strh	r3, [r7, #14]
 80005d4:	e00f      	b.n	80005f6 <CLCD_Write+0x56>
		CLCD_Write_Data_To_CG_OR_DDRAM(str[i]);
 80005d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	f993 3000 	ldrsb.w	r3, [r3]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffc7 	bl	8000578 <CLCD_Write_Data_To_CG_OR_DDRAM>
	for(i = 0; i < str_size; i++)
 80005ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	3301      	adds	r3, #1
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	81fb      	strh	r3, [r7, #14]
 80005f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dcea      	bgt.n	80005d6 <CLCD_Write+0x36>
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_GPIO_Init+0xcc>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <MX_GPIO_Init+0xcc>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_GPIO_Init+0xcc>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0310 	and.w	r3, r3, #16
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_GPIO_Init+0xcc>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <MX_GPIO_Init+0xcc>)
 800063e:	f043 0320 	orr.w	r3, r3, #32
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_GPIO_Init+0xcc>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_GPIO_Init+0xcc>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <MX_GPIO_Init+0xcc>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_GPIO_Init+0xcc>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_GPIO_Init+0xcc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <MX_GPIO_Init+0xcc>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_GPIO_Init+0xcc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000688:	f000 fc66 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	211b      	movs	r1, #27
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <MX_GPIO_Init+0xd4>)
 8000692:	f000 fc61 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000696:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	480b      	ldr	r0, [pc, #44]	; (80006dc <MX_GPIO_Init+0xd0>)
 80006b0:	f000 face 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80006b4:	231b      	movs	r3, #27
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0xd4>)
 80006cc:	f000 fac0 	bl	8000c50 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40011000 	.word	0x40011000
 80006e0:	40010c00 	.word	0x40010c00

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 f947 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f83f 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f7ff ff8b 	bl	800060c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  	CLCD_Init();
 80006f6:	f7ff fe35 	bl	8000364 <CLCD_Init>
  	uint8_t str[] = "Hello World!!";
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <main+0x80>)
 80006fc:	f107 0410 	add.w	r4, r7, #16
 8000700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000702:	c407      	stmia	r4!, {r0, r1, r2}
 8000704:	8023      	strh	r3, [r4, #0]
//  	uint8_t str[] = { 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xe0, 0xf0, 0xf1, 'f', 'F', 'e', 'E', 'i', 'I', 'j', 'J', 'y', 'Y' };
  	CLCD_Write(0, 0, str);
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	461a      	mov	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ff46 	bl	80005a0 <CLCD_Write>
  	CLCD_Write(1, 0, str);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	461a      	mov	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff ff3f 	bl	80005a0 <CLCD_Write>
  	HAL_Delay(3000);
 8000722:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000726:	f000 f98b 	bl	8000a40 <HAL_Delay>
  	CLCD_Write(0, 0, "Hawawa Hoee..");
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <main+0x84>)
 800072c:	2100      	movs	r1, #0
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff ff36 	bl	80005a0 <CLCD_Write>

  	uint16_t cnt = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	83fb      	strh	r3, [r7, #30]
  	char str1[16];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	CLCD_Clear_Display();
 8000738:	f7ff fe3d 	bl	80003b6 <CLCD_Clear_Display>
  while (1)
  {
	  HAL_Delay(1000);
 800073c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000740:	f000 f97e 	bl	8000a40 <HAL_Delay>
	  sprintf(str1, "cnt = %d", cnt);
 8000744:	8bfa      	ldrh	r2, [r7, #30]
 8000746:	463b      	mov	r3, r7
 8000748:	4908      	ldr	r1, [pc, #32]	; (800076c <main+0x88>)
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f836 	bl	80017bc <siprintf>
	  CLCD_Write(1, 0, str1);
 8000750:	463b      	mov	r3, r7
 8000752:	461a      	mov	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff ff22 	bl	80005a0 <CLCD_Write>
	  cnt++;
 800075c:	8bfb      	ldrh	r3, [r7, #30]
 800075e:	3301      	adds	r3, #1
 8000760:	83fb      	strh	r3, [r7, #30]
  {
 8000762:	e7eb      	b.n	800073c <main+0x58>
 8000764:	080020e4 	.word	0x080020e4
 8000768:	080020c8 	.word	0x080020c8
 800076c:	080020d8 	.word	0x080020d8

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b090      	sub	sp, #64	; 0x40
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2228      	movs	r2, #40	; 0x28
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f814 	bl	80017ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fbe5 	bl	8000f88 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007c4:	f000 f819 	bl	80007fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fe52 	bl	800148c <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007ee:	f000 f804 	bl	80007fa <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3740      	adds	r7, #64	; 0x40
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fe:	b672      	cpsid	i
}
 8000800:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000802:	e7fe      	b.n	8000802 <Error_Handler+0x8>

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_MspInit+0x5c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a14      	ldr	r2, [pc, #80]	; (8000860 <HAL_MspInit+0x5c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_MspInit+0x5c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x5c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x5c>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x5c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_MspInit+0x60>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_MspInit+0x60>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40021000 	.word	0x40021000
 8000864:	40010000 	.word	0x40010000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 f8ab 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <_sbrk+0x5c>)
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <_sbrk+0x60>)
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <_sbrk+0x64>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <_sbrk+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d207      	bcs.n	80008f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e8:	f000 ff36 	bl	8001758 <__errno>
 80008ec:	4603      	mov	r3, r0
 80008ee:	220c      	movs	r2, #12
 80008f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	e009      	b.n	800090c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <_sbrk+0x64>)
 8000908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20005000 	.word	0x20005000
 8000918:	00000400 	.word	0x00000400
 800091c:	200000a0 	.word	0x200000a0
 8000920:	200000b8 	.word	0x200000b8

08000924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000956:	f7ff ffe5 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f000 ff03 	bl	8001764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fec1 	bl	80006e4 <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800096c:	080021ac 	.word	0x080021ac
  ldr r2, =_sbss
 8000970:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000974:	200000b8 	.word	0x200000b8

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f92b 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff ff34 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f935 	bl	8000c36 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f90b 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200000a4 	.word	0x200000a4

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	200000a4 	.word	0x200000a4

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff90 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff49 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff5e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff90 	bl	8000b40 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffb0 	bl	8000ba4 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b08b      	sub	sp, #44	; 0x2c
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	e169      	b.n	8000f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c64:	2201      	movs	r2, #1
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 8158 	bne.w	8000f32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	4a9a      	ldr	r2, [pc, #616]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d05e      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000c8c:	4a98      	ldr	r2, [pc, #608]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d875      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000c92:	4a98      	ldr	r2, [pc, #608]	; (8000ef4 <HAL_GPIO_Init+0x2a4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d058      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000c98:	4a96      	ldr	r2, [pc, #600]	; (8000ef4 <HAL_GPIO_Init+0x2a4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d86f      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000c9e:	4a96      	ldr	r2, [pc, #600]	; (8000ef8 <HAL_GPIO_Init+0x2a8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d052      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000ca4:	4a94      	ldr	r2, [pc, #592]	; (8000ef8 <HAL_GPIO_Init+0x2a8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d869      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000caa:	4a94      	ldr	r2, [pc, #592]	; (8000efc <HAL_GPIO_Init+0x2ac>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d04c      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000cb0:	4a92      	ldr	r2, [pc, #584]	; (8000efc <HAL_GPIO_Init+0x2ac>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d863      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cb6:	4a92      	ldr	r2, [pc, #584]	; (8000f00 <HAL_GPIO_Init+0x2b0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d046      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000cbc:	4a90      	ldr	r2, [pc, #576]	; (8000f00 <HAL_GPIO_Init+0x2b0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d85d      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cc2:	2b12      	cmp	r3, #18
 8000cc4:	d82a      	bhi.n	8000d1c <HAL_GPIO_Init+0xcc>
 8000cc6:	2b12      	cmp	r3, #18
 8000cc8:	d859      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cca:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <HAL_GPIO_Init+0x80>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000d4b 	.word	0x08000d4b
 8000cd4:	08000d25 	.word	0x08000d25
 8000cd8:	08000d37 	.word	0x08000d37
 8000cdc:	08000d79 	.word	0x08000d79
 8000ce0:	08000d7f 	.word	0x08000d7f
 8000ce4:	08000d7f 	.word	0x08000d7f
 8000ce8:	08000d7f 	.word	0x08000d7f
 8000cec:	08000d7f 	.word	0x08000d7f
 8000cf0:	08000d7f 	.word	0x08000d7f
 8000cf4:	08000d7f 	.word	0x08000d7f
 8000cf8:	08000d7f 	.word	0x08000d7f
 8000cfc:	08000d7f 	.word	0x08000d7f
 8000d00:	08000d7f 	.word	0x08000d7f
 8000d04:	08000d7f 	.word	0x08000d7f
 8000d08:	08000d7f 	.word	0x08000d7f
 8000d0c:	08000d7f 	.word	0x08000d7f
 8000d10:	08000d7f 	.word	0x08000d7f
 8000d14:	08000d2d 	.word	0x08000d2d
 8000d18:	08000d41 	.word	0x08000d41
 8000d1c:	4a79      	ldr	r2, [pc, #484]	; (8000f04 <HAL_GPIO_Init+0x2b4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d22:	e02c      	b.n	8000d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	623b      	str	r3, [r7, #32]
          break;
 8000d2a:	e029      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	3304      	adds	r3, #4
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e024      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	623b      	str	r3, [r7, #32]
          break;
 8000d3e:	e01f      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	330c      	adds	r3, #12
 8000d46:	623b      	str	r3, [r7, #32]
          break;
 8000d48:	e01a      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d52:	2304      	movs	r3, #4
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e013      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d105      	bne.n	8000d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d60:	2308      	movs	r3, #8
 8000d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	611a      	str	r2, [r3, #16]
          break;
 8000d6a:	e009      	b.n	8000d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	615a      	str	r2, [r3, #20]
          break;
 8000d76:	e003      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	e000      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          break;
 8000d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d801      	bhi.n	8000d8a <HAL_GPIO_Init+0x13a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	e001      	b.n	8000d8e <HAL_GPIO_Init+0x13e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	2bff      	cmp	r3, #255	; 0xff
 8000d94:	d802      	bhi.n	8000d9c <HAL_GPIO_Init+0x14c>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0x152>
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	3b08      	subs	r3, #8
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	210f      	movs	r1, #15
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	6a39      	ldr	r1, [r7, #32]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 80b1 	beq.w	8000f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd0:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a4c      	ldr	r2, [pc, #304]	; (8000f08 <HAL_GPIO_Init+0x2b8>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b4a      	ldr	r3, [pc, #296]	; (8000f08 <HAL_GPIO_Init+0x2b8>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de8:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_GPIO_Init+0x2bc>)
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a40      	ldr	r2, [pc, #256]	; (8000f10 <HAL_GPIO_Init+0x2c0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d013      	beq.n	8000e3c <HAL_GPIO_Init+0x1ec>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3f      	ldr	r2, [pc, #252]	; (8000f14 <HAL_GPIO_Init+0x2c4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d00d      	beq.n	8000e38 <HAL_GPIO_Init+0x1e8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a3e      	ldr	r2, [pc, #248]	; (8000f18 <HAL_GPIO_Init+0x2c8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d007      	beq.n	8000e34 <HAL_GPIO_Init+0x1e4>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <HAL_GPIO_Init+0x2cc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d101      	bne.n	8000e30 <HAL_GPIO_Init+0x1e0>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e006      	b.n	8000e3e <HAL_GPIO_Init+0x1ee>
 8000e30:	2304      	movs	r3, #4
 8000e32:	e004      	b.n	8000e3e <HAL_GPIO_Init+0x1ee>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e002      	b.n	8000e3e <HAL_GPIO_Init+0x1ee>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <HAL_GPIO_Init+0x1ee>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e40:	f002 0203 	and.w	r2, r2, #3
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	4093      	lsls	r3, r2
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e4e:	492f      	ldr	r1, [pc, #188]	; (8000f0c <HAL_GPIO_Init+0x2bc>)
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	492c      	ldr	r1, [pc, #176]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4928      	ldr	r1, [pc, #160]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4922      	ldr	r1, [pc, #136]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	604b      	str	r3, [r1, #4]
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	491e      	ldr	r1, [pc, #120]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	4918      	ldr	r1, [pc, #96]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	608b      	str	r3, [r1, #8]
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4914      	ldr	r1, [pc, #80]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d021      	beq.n	8000f24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	490e      	ldr	r1, [pc, #56]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60cb      	str	r3, [r1, #12]
 8000eec:	e021      	b.n	8000f32 <HAL_GPIO_Init+0x2e2>
 8000eee:	bf00      	nop
 8000ef0:	10320000 	.word	0x10320000
 8000ef4:	10310000 	.word	0x10310000
 8000ef8:	10220000 	.word	0x10220000
 8000efc:	10210000 	.word	0x10210000
 8000f00:	10120000 	.word	0x10120000
 8000f04:	10110000 	.word	0x10110000
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	40010800 	.word	0x40010800
 8000f14:	40010c00 	.word	0x40010c00
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40011400 	.word	0x40011400
 8000f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_GPIO_Init+0x304>)
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4909      	ldr	r1, [pc, #36]	; (8000f54 <HAL_GPIO_Init+0x304>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	3301      	adds	r3, #1
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f47f ae8e 	bne.w	8000c64 <HAL_GPIO_Init+0x14>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	372c      	adds	r7, #44	; 0x2c
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f74:	e003      	b.n	8000f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	611a      	str	r2, [r3, #16]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e272      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8087 	beq.w	80010b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa8:	4b92      	ldr	r3, [pc, #584]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d00c      	beq.n	8000fce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb4:	4b8f      	ldr	r3, [pc, #572]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d112      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x5e>
 8000fc0:	4b8c      	ldr	r3, [pc, #560]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fce:	4b89      	ldr	r3, [pc, #548]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d06c      	beq.n	80010b4 <HAL_RCC_OscConfig+0x12c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d168      	bne.n	80010b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e24c      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fee:	d106      	bne.n	8000ffe <HAL_RCC_OscConfig+0x76>
 8000ff0:	4b80      	ldr	r3, [pc, #512]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a7f      	ldr	r2, [pc, #508]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e02e      	b.n	800105c <HAL_RCC_OscConfig+0xd4>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0x98>
 8001006:	4b7b      	ldr	r3, [pc, #492]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a7a      	ldr	r2, [pc, #488]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b78      	ldr	r3, [pc, #480]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a77      	ldr	r2, [pc, #476]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e01d      	b.n	800105c <HAL_RCC_OscConfig+0xd4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0xbc>
 800102a:	4b72      	ldr	r3, [pc, #456]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a71      	ldr	r2, [pc, #452]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a6e      	ldr	r2, [pc, #440]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e00b      	b.n	800105c <HAL_RCC_OscConfig+0xd4>
 8001044:	4b6b      	ldr	r3, [pc, #428]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a6a      	ldr	r2, [pc, #424]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800104a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a67      	ldr	r2, [pc, #412]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d013      	beq.n	800108c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fce2 	bl	8000a2c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcde 	bl	8000a2c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e200      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0xe4>
 800108a:	e014      	b.n	80010b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fcce 	bl	8000a2c <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fcca 	bl	8000a2c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e1ec      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x10c>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d063      	beq.n	800118a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c2:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ce:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d11c      	bne.n	8001114 <HAL_RCC_OscConfig+0x18c>
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d116      	bne.n	8001114 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_RCC_OscConfig+0x176>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e1c0      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4939      	ldr	r1, [pc, #228]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	e03a      	b.n	800118a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <HAL_RCC_OscConfig+0x270>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fc83 	bl	8000a2c <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fc7f 	bl	8000a2c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1a1      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4927      	ldr	r1, [pc, #156]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
 800115c:	e015      	b.n	800118a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fc62 	bl	8000a2c <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff fc5e 	bl	8000a2c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e180      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d03a      	beq.n	800120c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d019      	beq.n	80011d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_RCC_OscConfig+0x274>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fc42 	bl	8000a2c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc3e 	bl	8000a2c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e160      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 faa6 	bl	800171c <RCC_Delay>
 80011d0:	e01c      	b.n	800120c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_RCC_OscConfig+0x274>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d8:	f7ff fc28 	bl	8000a2c <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011de:	e00f      	b.n	8001200 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc24 	bl	8000a2c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d908      	bls.n	8001200 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e146      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	42420000 	.word	0x42420000
 80011fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001200:	4b92      	ldr	r3, [pc, #584]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e9      	bne.n	80011e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80a6 	beq.w	8001366 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121e:	4b8b      	ldr	r3, [pc, #556]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10d      	bne.n	8001246 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a87      	ldr	r2, [pc, #540]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b85      	ldr	r3, [pc, #532]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001242:	2301      	movs	r3, #1
 8001244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001246:	4b82      	ldr	r3, [pc, #520]	; (8001450 <HAL_RCC_OscConfig+0x4c8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d118      	bne.n	8001284 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001252:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x4c8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7e      	ldr	r2, [pc, #504]	; (8001450 <HAL_RCC_OscConfig+0x4c8>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125e:	f7ff fbe5 	bl	8000a2c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001266:	f7ff fbe1 	bl	8000a2c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e103      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001278:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x4c8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d106      	bne.n	800129a <HAL_RCC_OscConfig+0x312>
 800128c:	4b6f      	ldr	r3, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4a6e      	ldr	r2, [pc, #440]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6213      	str	r3, [r2, #32]
 8001298:	e02d      	b.n	80012f6 <HAL_RCC_OscConfig+0x36e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x334>
 80012a2:	4b6a      	ldr	r3, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4a69      	ldr	r2, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6213      	str	r3, [r2, #32]
 80012ae:	4b67      	ldr	r3, [pc, #412]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a66      	ldr	r2, [pc, #408]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 0304 	bic.w	r3, r3, #4
 80012b8:	6213      	str	r3, [r2, #32]
 80012ba:	e01c      	b.n	80012f6 <HAL_RCC_OscConfig+0x36e>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	d10c      	bne.n	80012de <HAL_RCC_OscConfig+0x356>
 80012c4:	4b61      	ldr	r3, [pc, #388]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a60      	ldr	r2, [pc, #384]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6213      	str	r3, [r2, #32]
 80012d0:	4b5e      	ldr	r3, [pc, #376]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4a5d      	ldr	r2, [pc, #372]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6213      	str	r3, [r2, #32]
 80012dc:	e00b      	b.n	80012f6 <HAL_RCC_OscConfig+0x36e>
 80012de:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a5a      	ldr	r2, [pc, #360]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6213      	str	r3, [r2, #32]
 80012ea:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	f023 0304 	bic.w	r3, r3, #4
 80012f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d015      	beq.n	800132a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fb95 	bl	8000a2c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff fb91 	bl	8000a2c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f241 3288 	movw	r2, #5000	; 0x1388
 8001314:	4293      	cmp	r3, r2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e0b1      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131c:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0ee      	beq.n	8001306 <HAL_RCC_OscConfig+0x37e>
 8001328:	e014      	b.n	8001354 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb7f 	bl	8000a2c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff fb7b 	bl	8000a2c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e09b      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001348:	4b40      	ldr	r3, [pc, #256]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1ee      	bne.n	8001332 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d105      	bne.n	8001366 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a3b      	ldr	r2, [pc, #236]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8087 	beq.w	800147e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b08      	cmp	r3, #8
 800137a:	d061      	beq.n	8001440 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d146      	bne.n	8001412 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <HAL_RCC_OscConfig+0x4cc>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fb4f 	bl	8000a2c <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff fb4b 	bl	8000a2c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e06d      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b8:	d108      	bne.n	80013cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4921      	ldr	r1, [pc, #132]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a19      	ldr	r1, [r3, #32]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	430b      	orrs	r3, r1
 80013de:	491b      	ldr	r1, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x4cc>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb1f 	bl	8000a2c <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fb1b 	bl	8000a2c <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e03d      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x46a>
 8001410:	e035      	b.n	800147e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_RCC_OscConfig+0x4cc>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb08 	bl	8000a2c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fb04 	bl	8000a2c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e026      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x4c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x498>
 800143e:	e01e      	b.n	800147e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e019      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
 800144c:	40021000 	.word	0x40021000
 8001450:	40007000 	.word	0x40007000
 8001454:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_RCC_OscConfig+0x500>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	429a      	cmp	r2, r3
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	429a      	cmp	r2, r3
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0d0      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d910      	bls.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4965      	ldr	r1, [pc, #404]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0b8      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e8:	4b59      	ldr	r3, [pc, #356]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800150a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	494d      	ldr	r1, [pc, #308]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d040      	beq.n	80015ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d115      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e07f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e073      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06b      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f023 0203 	bic.w	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff fa56 	bl	8000a2c <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	e00a      	b.n	800159a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f7ff fa52 	bl	8000a2c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e053      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 020c 	and.w	r2, r3, #12
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1eb      	bne.n	8001584 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d210      	bcs.n	80015dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 0207 	bic.w	r2, r3, #7
 80015c2:	4922      	ldr	r1, [pc, #136]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e032      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4916      	ldr	r1, [pc, #88]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800161a:	f000 f821 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 800161e:	4602      	mov	r2, r0
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	490a      	ldr	r1, [pc, #40]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	5ccb      	ldrb	r3, [r1, r3]
 800162e:	fa22 f303 	lsr.w	r3, r2, r3
 8001632:	4a09      	ldr	r2, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1cc>)
 8001634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1d0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f9b4 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000
 8001650:	40021000 	.word	0x40021000
 8001654:	08002160 	.word	0x08002160
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b490      	push	{r4, r7}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_RCC_GetSysClockFreq+0xac>)
 8001668:	1d3c      	adds	r4, r7, #4
 800166a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001670:	f240 2301 	movw	r3, #513	; 0x201
 8001674:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb0>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d002      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x40>
 800169a:	2b08      	cmp	r3, #8
 800169c:	d003      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x46>
 800169e:	e02b      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016a2:	623b      	str	r3, [r7, #32]
      break;
 80016a4:	e02b      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3328      	adds	r3, #40	; 0x28
 80016b0:	443b      	add	r3, r7
 80016b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d012      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	0c5b      	lsrs	r3, r3, #17
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	3328      	adds	r3, #40	; 0x28
 80016ce:	443b      	add	r3, r7
 80016d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016da:	fb03 f202 	mul.w	r2, r3, r2
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
 80016e6:	e004      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	623b      	str	r3, [r7, #32]
      break;
 80016f6:	e002      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016fa:	623b      	str	r3, [r7, #32]
      break;
 80016fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bc90      	pop	{r4, r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	080020f4 	.word	0x080020f4
 8001710:	40021000 	.word	0x40021000
 8001714:	007a1200 	.word	0x007a1200
 8001718:	003d0900 	.word	0x003d0900

0800171c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <RCC_Delay+0x34>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <RCC_Delay+0x38>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0a5b      	lsrs	r3, r3, #9
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001738:	bf00      	nop
  }
  while (Delay --);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	60fa      	str	r2, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f9      	bne.n	8001738 <RCC_Delay+0x1c>
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	20000000 	.word	0x20000000
 8001754:	10624dd3 	.word	0x10624dd3

08001758 <__errno>:
 8001758:	4b01      	ldr	r3, [pc, #4]	; (8001760 <__errno+0x8>)
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2000000c 	.word	0x2000000c

08001764 <__libc_init_array>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	2600      	movs	r6, #0
 8001768:	4d0c      	ldr	r5, [pc, #48]	; (800179c <__libc_init_array+0x38>)
 800176a:	4c0d      	ldr	r4, [pc, #52]	; (80017a0 <__libc_init_array+0x3c>)
 800176c:	1b64      	subs	r4, r4, r5
 800176e:	10a4      	asrs	r4, r4, #2
 8001770:	42a6      	cmp	r6, r4
 8001772:	d109      	bne.n	8001788 <__libc_init_array+0x24>
 8001774:	f000 fc9c 	bl	80020b0 <_init>
 8001778:	2600      	movs	r6, #0
 800177a:	4d0a      	ldr	r5, [pc, #40]	; (80017a4 <__libc_init_array+0x40>)
 800177c:	4c0a      	ldr	r4, [pc, #40]	; (80017a8 <__libc_init_array+0x44>)
 800177e:	1b64      	subs	r4, r4, r5
 8001780:	10a4      	asrs	r4, r4, #2
 8001782:	42a6      	cmp	r6, r4
 8001784:	d105      	bne.n	8001792 <__libc_init_array+0x2e>
 8001786:	bd70      	pop	{r4, r5, r6, pc}
 8001788:	f855 3b04 	ldr.w	r3, [r5], #4
 800178c:	4798      	blx	r3
 800178e:	3601      	adds	r6, #1
 8001790:	e7ee      	b.n	8001770 <__libc_init_array+0xc>
 8001792:	f855 3b04 	ldr.w	r3, [r5], #4
 8001796:	4798      	blx	r3
 8001798:	3601      	adds	r6, #1
 800179a:	e7f2      	b.n	8001782 <__libc_init_array+0x1e>
 800179c:	080021a4 	.word	0x080021a4
 80017a0:	080021a4 	.word	0x080021a4
 80017a4:	080021a4 	.word	0x080021a4
 80017a8:	080021a8 	.word	0x080021a8

080017ac <memset>:
 80017ac:	4603      	mov	r3, r0
 80017ae:	4402      	add	r2, r0
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d100      	bne.n	80017b6 <memset+0xa>
 80017b4:	4770      	bx	lr
 80017b6:	f803 1b01 	strb.w	r1, [r3], #1
 80017ba:	e7f9      	b.n	80017b0 <memset+0x4>

080017bc <siprintf>:
 80017bc:	b40e      	push	{r1, r2, r3}
 80017be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80017c2:	b500      	push	{lr}
 80017c4:	b09c      	sub	sp, #112	; 0x70
 80017c6:	ab1d      	add	r3, sp, #116	; 0x74
 80017c8:	9002      	str	r0, [sp, #8]
 80017ca:	9006      	str	r0, [sp, #24]
 80017cc:	9107      	str	r1, [sp, #28]
 80017ce:	9104      	str	r1, [sp, #16]
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <siprintf+0x38>)
 80017d2:	4909      	ldr	r1, [pc, #36]	; (80017f8 <siprintf+0x3c>)
 80017d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80017d8:	9105      	str	r1, [sp, #20]
 80017da:	6800      	ldr	r0, [r0, #0]
 80017dc:	a902      	add	r1, sp, #8
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	f000 f868 	bl	80018b4 <_svfiprintf_r>
 80017e4:	2200      	movs	r2, #0
 80017e6:	9b02      	ldr	r3, [sp, #8]
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	b01c      	add	sp, #112	; 0x70
 80017ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80017f0:	b003      	add	sp, #12
 80017f2:	4770      	bx	lr
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	ffff0208 	.word	0xffff0208

080017fc <__ssputs_r>:
 80017fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001800:	688e      	ldr	r6, [r1, #8]
 8001802:	4682      	mov	sl, r0
 8001804:	429e      	cmp	r6, r3
 8001806:	460c      	mov	r4, r1
 8001808:	4690      	mov	r8, r2
 800180a:	461f      	mov	r7, r3
 800180c:	d838      	bhi.n	8001880 <__ssputs_r+0x84>
 800180e:	898a      	ldrh	r2, [r1, #12]
 8001810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001814:	d032      	beq.n	800187c <__ssputs_r+0x80>
 8001816:	6825      	ldr	r5, [r4, #0]
 8001818:	6909      	ldr	r1, [r1, #16]
 800181a:	3301      	adds	r3, #1
 800181c:	eba5 0901 	sub.w	r9, r5, r1
 8001820:	6965      	ldr	r5, [r4, #20]
 8001822:	444b      	add	r3, r9
 8001824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800182c:	106d      	asrs	r5, r5, #1
 800182e:	429d      	cmp	r5, r3
 8001830:	bf38      	it	cc
 8001832:	461d      	movcc	r5, r3
 8001834:	0553      	lsls	r3, r2, #21
 8001836:	d531      	bpl.n	800189c <__ssputs_r+0xa0>
 8001838:	4629      	mov	r1, r5
 800183a:	f000 fb6f 	bl	8001f1c <_malloc_r>
 800183e:	4606      	mov	r6, r0
 8001840:	b950      	cbnz	r0, 8001858 <__ssputs_r+0x5c>
 8001842:	230c      	movs	r3, #12
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f8ca 3000 	str.w	r3, [sl]
 800184c:	89a3      	ldrh	r3, [r4, #12]
 800184e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001852:	81a3      	strh	r3, [r4, #12]
 8001854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001858:	464a      	mov	r2, r9
 800185a:	6921      	ldr	r1, [r4, #16]
 800185c:	f000 face 	bl	8001dfc <memcpy>
 8001860:	89a3      	ldrh	r3, [r4, #12]
 8001862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186a:	81a3      	strh	r3, [r4, #12]
 800186c:	6126      	str	r6, [r4, #16]
 800186e:	444e      	add	r6, r9
 8001870:	6026      	str	r6, [r4, #0]
 8001872:	463e      	mov	r6, r7
 8001874:	6165      	str	r5, [r4, #20]
 8001876:	eba5 0509 	sub.w	r5, r5, r9
 800187a:	60a5      	str	r5, [r4, #8]
 800187c:	42be      	cmp	r6, r7
 800187e:	d900      	bls.n	8001882 <__ssputs_r+0x86>
 8001880:	463e      	mov	r6, r7
 8001882:	4632      	mov	r2, r6
 8001884:	4641      	mov	r1, r8
 8001886:	6820      	ldr	r0, [r4, #0]
 8001888:	f000 fac6 	bl	8001e18 <memmove>
 800188c:	68a3      	ldr	r3, [r4, #8]
 800188e:	2000      	movs	r0, #0
 8001890:	1b9b      	subs	r3, r3, r6
 8001892:	60a3      	str	r3, [r4, #8]
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	4433      	add	r3, r6
 8001898:	6023      	str	r3, [r4, #0]
 800189a:	e7db      	b.n	8001854 <__ssputs_r+0x58>
 800189c:	462a      	mov	r2, r5
 800189e:	f000 fbb1 	bl	8002004 <_realloc_r>
 80018a2:	4606      	mov	r6, r0
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d1e1      	bne.n	800186c <__ssputs_r+0x70>
 80018a8:	4650      	mov	r0, sl
 80018aa:	6921      	ldr	r1, [r4, #16]
 80018ac:	f000 face 	bl	8001e4c <_free_r>
 80018b0:	e7c7      	b.n	8001842 <__ssputs_r+0x46>
	...

080018b4 <_svfiprintf_r>:
 80018b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b8:	4698      	mov	r8, r3
 80018ba:	898b      	ldrh	r3, [r1, #12]
 80018bc:	4607      	mov	r7, r0
 80018be:	061b      	lsls	r3, r3, #24
 80018c0:	460d      	mov	r5, r1
 80018c2:	4614      	mov	r4, r2
 80018c4:	b09d      	sub	sp, #116	; 0x74
 80018c6:	d50e      	bpl.n	80018e6 <_svfiprintf_r+0x32>
 80018c8:	690b      	ldr	r3, [r1, #16]
 80018ca:	b963      	cbnz	r3, 80018e6 <_svfiprintf_r+0x32>
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	f000 fb25 	bl	8001f1c <_malloc_r>
 80018d2:	6028      	str	r0, [r5, #0]
 80018d4:	6128      	str	r0, [r5, #16]
 80018d6:	b920      	cbnz	r0, 80018e2 <_svfiprintf_r+0x2e>
 80018d8:	230c      	movs	r3, #12
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	e0d1      	b.n	8001a86 <_svfiprintf_r+0x1d2>
 80018e2:	2340      	movs	r3, #64	; 0x40
 80018e4:	616b      	str	r3, [r5, #20]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9309      	str	r3, [sp, #36]	; 0x24
 80018ea:	2320      	movs	r3, #32
 80018ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018f0:	2330      	movs	r3, #48	; 0x30
 80018f2:	f04f 0901 	mov.w	r9, #1
 80018f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80018fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001aa0 <_svfiprintf_r+0x1ec>
 80018fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001902:	4623      	mov	r3, r4
 8001904:	469a      	mov	sl, r3
 8001906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800190a:	b10a      	cbz	r2, 8001910 <_svfiprintf_r+0x5c>
 800190c:	2a25      	cmp	r2, #37	; 0x25
 800190e:	d1f9      	bne.n	8001904 <_svfiprintf_r+0x50>
 8001910:	ebba 0b04 	subs.w	fp, sl, r4
 8001914:	d00b      	beq.n	800192e <_svfiprintf_r+0x7a>
 8001916:	465b      	mov	r3, fp
 8001918:	4622      	mov	r2, r4
 800191a:	4629      	mov	r1, r5
 800191c:	4638      	mov	r0, r7
 800191e:	f7ff ff6d 	bl	80017fc <__ssputs_r>
 8001922:	3001      	adds	r0, #1
 8001924:	f000 80aa 	beq.w	8001a7c <_svfiprintf_r+0x1c8>
 8001928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800192a:	445a      	add	r2, fp
 800192c:	9209      	str	r2, [sp, #36]	; 0x24
 800192e:	f89a 3000 	ldrb.w	r3, [sl]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80a2 	beq.w	8001a7c <_svfiprintf_r+0x1c8>
 8001938:	2300      	movs	r3, #0
 800193a:	f04f 32ff 	mov.w	r2, #4294967295
 800193e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001942:	f10a 0a01 	add.w	sl, sl, #1
 8001946:	9304      	str	r3, [sp, #16]
 8001948:	9307      	str	r3, [sp, #28]
 800194a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800194e:	931a      	str	r3, [sp, #104]	; 0x68
 8001950:	4654      	mov	r4, sl
 8001952:	2205      	movs	r2, #5
 8001954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001958:	4851      	ldr	r0, [pc, #324]	; (8001aa0 <_svfiprintf_r+0x1ec>)
 800195a:	f000 fa41 	bl	8001de0 <memchr>
 800195e:	9a04      	ldr	r2, [sp, #16]
 8001960:	b9d8      	cbnz	r0, 800199a <_svfiprintf_r+0xe6>
 8001962:	06d0      	lsls	r0, r2, #27
 8001964:	bf44      	itt	mi
 8001966:	2320      	movmi	r3, #32
 8001968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800196c:	0711      	lsls	r1, r2, #28
 800196e:	bf44      	itt	mi
 8001970:	232b      	movmi	r3, #43	; 0x2b
 8001972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001976:	f89a 3000 	ldrb.w	r3, [sl]
 800197a:	2b2a      	cmp	r3, #42	; 0x2a
 800197c:	d015      	beq.n	80019aa <_svfiprintf_r+0xf6>
 800197e:	4654      	mov	r4, sl
 8001980:	2000      	movs	r0, #0
 8001982:	f04f 0c0a 	mov.w	ip, #10
 8001986:	9a07      	ldr	r2, [sp, #28]
 8001988:	4621      	mov	r1, r4
 800198a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800198e:	3b30      	subs	r3, #48	; 0x30
 8001990:	2b09      	cmp	r3, #9
 8001992:	d94e      	bls.n	8001a32 <_svfiprintf_r+0x17e>
 8001994:	b1b0      	cbz	r0, 80019c4 <_svfiprintf_r+0x110>
 8001996:	9207      	str	r2, [sp, #28]
 8001998:	e014      	b.n	80019c4 <_svfiprintf_r+0x110>
 800199a:	eba0 0308 	sub.w	r3, r0, r8
 800199e:	fa09 f303 	lsl.w	r3, r9, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	46a2      	mov	sl, r4
 80019a6:	9304      	str	r3, [sp, #16]
 80019a8:	e7d2      	b.n	8001950 <_svfiprintf_r+0x9c>
 80019aa:	9b03      	ldr	r3, [sp, #12]
 80019ac:	1d19      	adds	r1, r3, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	9103      	str	r1, [sp, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bfbb      	ittet	lt
 80019b6:	425b      	neglt	r3, r3
 80019b8:	f042 0202 	orrlt.w	r2, r2, #2
 80019bc:	9307      	strge	r3, [sp, #28]
 80019be:	9307      	strlt	r3, [sp, #28]
 80019c0:	bfb8      	it	lt
 80019c2:	9204      	strlt	r2, [sp, #16]
 80019c4:	7823      	ldrb	r3, [r4, #0]
 80019c6:	2b2e      	cmp	r3, #46	; 0x2e
 80019c8:	d10c      	bne.n	80019e4 <_svfiprintf_r+0x130>
 80019ca:	7863      	ldrb	r3, [r4, #1]
 80019cc:	2b2a      	cmp	r3, #42	; 0x2a
 80019ce:	d135      	bne.n	8001a3c <_svfiprintf_r+0x188>
 80019d0:	9b03      	ldr	r3, [sp, #12]
 80019d2:	3402      	adds	r4, #2
 80019d4:	1d1a      	adds	r2, r3, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	9203      	str	r2, [sp, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bfb8      	it	lt
 80019de:	f04f 33ff 	movlt.w	r3, #4294967295
 80019e2:	9305      	str	r3, [sp, #20]
 80019e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001aa4 <_svfiprintf_r+0x1f0>
 80019e8:	2203      	movs	r2, #3
 80019ea:	4650      	mov	r0, sl
 80019ec:	7821      	ldrb	r1, [r4, #0]
 80019ee:	f000 f9f7 	bl	8001de0 <memchr>
 80019f2:	b140      	cbz	r0, 8001a06 <_svfiprintf_r+0x152>
 80019f4:	2340      	movs	r3, #64	; 0x40
 80019f6:	eba0 000a 	sub.w	r0, r0, sl
 80019fa:	fa03 f000 	lsl.w	r0, r3, r0
 80019fe:	9b04      	ldr	r3, [sp, #16]
 8001a00:	3401      	adds	r4, #1
 8001a02:	4303      	orrs	r3, r0
 8001a04:	9304      	str	r3, [sp, #16]
 8001a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	4826      	ldr	r0, [pc, #152]	; (8001aa8 <_svfiprintf_r+0x1f4>)
 8001a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a12:	f000 f9e5 	bl	8001de0 <memchr>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d038      	beq.n	8001a8c <_svfiprintf_r+0x1d8>
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <_svfiprintf_r+0x1f8>)
 8001a1c:	bb1b      	cbnz	r3, 8001a66 <_svfiprintf_r+0x1b2>
 8001a1e:	9b03      	ldr	r3, [sp, #12]
 8001a20:	3307      	adds	r3, #7
 8001a22:	f023 0307 	bic.w	r3, r3, #7
 8001a26:	3308      	adds	r3, #8
 8001a28:	9303      	str	r3, [sp, #12]
 8001a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a2c:	4433      	add	r3, r6
 8001a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8001a30:	e767      	b.n	8001902 <_svfiprintf_r+0x4e>
 8001a32:	460c      	mov	r4, r1
 8001a34:	2001      	movs	r0, #1
 8001a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a3a:	e7a5      	b.n	8001988 <_svfiprintf_r+0xd4>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f04f 0c0a 	mov.w	ip, #10
 8001a42:	4619      	mov	r1, r3
 8001a44:	3401      	adds	r4, #1
 8001a46:	9305      	str	r3, [sp, #20]
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a4e:	3a30      	subs	r2, #48	; 0x30
 8001a50:	2a09      	cmp	r2, #9
 8001a52:	d903      	bls.n	8001a5c <_svfiprintf_r+0x1a8>
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0c5      	beq.n	80019e4 <_svfiprintf_r+0x130>
 8001a58:	9105      	str	r1, [sp, #20]
 8001a5a:	e7c3      	b.n	80019e4 <_svfiprintf_r+0x130>
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	2301      	movs	r3, #1
 8001a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a64:	e7f0      	b.n	8001a48 <_svfiprintf_r+0x194>
 8001a66:	ab03      	add	r3, sp, #12
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	462a      	mov	r2, r5
 8001a6c:	4638      	mov	r0, r7
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <_svfiprintf_r+0x1fc>)
 8001a70:	a904      	add	r1, sp, #16
 8001a72:	f3af 8000 	nop.w
 8001a76:	1c42      	adds	r2, r0, #1
 8001a78:	4606      	mov	r6, r0
 8001a7a:	d1d6      	bne.n	8001a2a <_svfiprintf_r+0x176>
 8001a7c:	89ab      	ldrh	r3, [r5, #12]
 8001a7e:	065b      	lsls	r3, r3, #25
 8001a80:	f53f af2c 	bmi.w	80018dc <_svfiprintf_r+0x28>
 8001a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a86:	b01d      	add	sp, #116	; 0x74
 8001a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a8c:	ab03      	add	r3, sp, #12
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	462a      	mov	r2, r5
 8001a92:	4638      	mov	r0, r7
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <_svfiprintf_r+0x1fc>)
 8001a96:	a904      	add	r1, sp, #16
 8001a98:	f000 f87c 	bl	8001b94 <_printf_i>
 8001a9c:	e7eb      	b.n	8001a76 <_svfiprintf_r+0x1c2>
 8001a9e:	bf00      	nop
 8001aa0:	08002170 	.word	0x08002170
 8001aa4:	08002176 	.word	0x08002176
 8001aa8:	0800217a 	.word	0x0800217a
 8001aac:	00000000 	.word	0x00000000
 8001ab0:	080017fd 	.word	0x080017fd

08001ab4 <_printf_common>:
 8001ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ab8:	4616      	mov	r6, r2
 8001aba:	4699      	mov	r9, r3
 8001abc:	688a      	ldr	r2, [r1, #8]
 8001abe:	690b      	ldr	r3, [r1, #16]
 8001ac0:	4607      	mov	r7, r0
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	bfb8      	it	lt
 8001ac6:	4613      	movlt	r3, r2
 8001ac8:	6033      	str	r3, [r6, #0]
 8001aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ace:	460c      	mov	r4, r1
 8001ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ad4:	b10a      	cbz	r2, 8001ada <_printf_common+0x26>
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	6033      	str	r3, [r6, #0]
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	0699      	lsls	r1, r3, #26
 8001ade:	bf42      	ittt	mi
 8001ae0:	6833      	ldrmi	r3, [r6, #0]
 8001ae2:	3302      	addmi	r3, #2
 8001ae4:	6033      	strmi	r3, [r6, #0]
 8001ae6:	6825      	ldr	r5, [r4, #0]
 8001ae8:	f015 0506 	ands.w	r5, r5, #6
 8001aec:	d106      	bne.n	8001afc <_printf_common+0x48>
 8001aee:	f104 0a19 	add.w	sl, r4, #25
 8001af2:	68e3      	ldr	r3, [r4, #12]
 8001af4:	6832      	ldr	r2, [r6, #0]
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	42ab      	cmp	r3, r5
 8001afa:	dc28      	bgt.n	8001b4e <_printf_common+0x9a>
 8001afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b00:	1e13      	subs	r3, r2, #0
 8001b02:	6822      	ldr	r2, [r4, #0]
 8001b04:	bf18      	it	ne
 8001b06:	2301      	movne	r3, #1
 8001b08:	0692      	lsls	r2, r2, #26
 8001b0a:	d42d      	bmi.n	8001b68 <_printf_common+0xb4>
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	4638      	mov	r0, r7
 8001b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b14:	47c0      	blx	r8
 8001b16:	3001      	adds	r0, #1
 8001b18:	d020      	beq.n	8001b5c <_printf_common+0xa8>
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	68e5      	ldr	r5, [r4, #12]
 8001b1e:	f003 0306 	and.w	r3, r3, #6
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf18      	it	ne
 8001b26:	2500      	movne	r5, #0
 8001b28:	6832      	ldr	r2, [r6, #0]
 8001b2a:	f04f 0600 	mov.w	r6, #0
 8001b2e:	68a3      	ldr	r3, [r4, #8]
 8001b30:	bf08      	it	eq
 8001b32:	1aad      	subeq	r5, r5, r2
 8001b34:	6922      	ldr	r2, [r4, #16]
 8001b36:	bf08      	it	eq
 8001b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bfc4      	itt	gt
 8001b40:	1a9b      	subgt	r3, r3, r2
 8001b42:	18ed      	addgt	r5, r5, r3
 8001b44:	341a      	adds	r4, #26
 8001b46:	42b5      	cmp	r5, r6
 8001b48:	d11a      	bne.n	8001b80 <_printf_common+0xcc>
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	e008      	b.n	8001b60 <_printf_common+0xac>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	4652      	mov	r2, sl
 8001b52:	4649      	mov	r1, r9
 8001b54:	4638      	mov	r0, r7
 8001b56:	47c0      	blx	r8
 8001b58:	3001      	adds	r0, #1
 8001b5a:	d103      	bne.n	8001b64 <_printf_common+0xb0>
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b64:	3501      	adds	r5, #1
 8001b66:	e7c4      	b.n	8001af2 <_printf_common+0x3e>
 8001b68:	2030      	movs	r0, #48	; 0x30
 8001b6a:	18e1      	adds	r1, r4, r3
 8001b6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b76:	4422      	add	r2, r4
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b7e:	e7c5      	b.n	8001b0c <_printf_common+0x58>
 8001b80:	2301      	movs	r3, #1
 8001b82:	4622      	mov	r2, r4
 8001b84:	4649      	mov	r1, r9
 8001b86:	4638      	mov	r0, r7
 8001b88:	47c0      	blx	r8
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	d0e6      	beq.n	8001b5c <_printf_common+0xa8>
 8001b8e:	3601      	adds	r6, #1
 8001b90:	e7d9      	b.n	8001b46 <_printf_common+0x92>
	...

08001b94 <_printf_i>:
 8001b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b98:	7e0f      	ldrb	r7, [r1, #24]
 8001b9a:	4691      	mov	r9, r2
 8001b9c:	2f78      	cmp	r7, #120	; 0x78
 8001b9e:	4680      	mov	r8, r0
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	469a      	mov	sl, r3
 8001ba4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001baa:	d807      	bhi.n	8001bbc <_printf_i+0x28>
 8001bac:	2f62      	cmp	r7, #98	; 0x62
 8001bae:	d80a      	bhi.n	8001bc6 <_printf_i+0x32>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	f000 80d9 	beq.w	8001d68 <_printf_i+0x1d4>
 8001bb6:	2f58      	cmp	r7, #88	; 0x58
 8001bb8:	f000 80a4 	beq.w	8001d04 <_printf_i+0x170>
 8001bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001bc4:	e03a      	b.n	8001c3c <_printf_i+0xa8>
 8001bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001bca:	2b15      	cmp	r3, #21
 8001bcc:	d8f6      	bhi.n	8001bbc <_printf_i+0x28>
 8001bce:	a101      	add	r1, pc, #4	; (adr r1, 8001bd4 <_printf_i+0x40>)
 8001bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001bd4:	08001c2d 	.word	0x08001c2d
 8001bd8:	08001c41 	.word	0x08001c41
 8001bdc:	08001bbd 	.word	0x08001bbd
 8001be0:	08001bbd 	.word	0x08001bbd
 8001be4:	08001bbd 	.word	0x08001bbd
 8001be8:	08001bbd 	.word	0x08001bbd
 8001bec:	08001c41 	.word	0x08001c41
 8001bf0:	08001bbd 	.word	0x08001bbd
 8001bf4:	08001bbd 	.word	0x08001bbd
 8001bf8:	08001bbd 	.word	0x08001bbd
 8001bfc:	08001bbd 	.word	0x08001bbd
 8001c00:	08001d4f 	.word	0x08001d4f
 8001c04:	08001c71 	.word	0x08001c71
 8001c08:	08001d31 	.word	0x08001d31
 8001c0c:	08001bbd 	.word	0x08001bbd
 8001c10:	08001bbd 	.word	0x08001bbd
 8001c14:	08001d71 	.word	0x08001d71
 8001c18:	08001bbd 	.word	0x08001bbd
 8001c1c:	08001c71 	.word	0x08001c71
 8001c20:	08001bbd 	.word	0x08001bbd
 8001c24:	08001bbd 	.word	0x08001bbd
 8001c28:	08001d39 	.word	0x08001d39
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	1d1a      	adds	r2, r3, #4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	602a      	str	r2, [r5, #0]
 8001c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0a4      	b.n	8001d8a <_printf_i+0x1f6>
 8001c40:	6820      	ldr	r0, [r4, #0]
 8001c42:	6829      	ldr	r1, [r5, #0]
 8001c44:	0606      	lsls	r6, r0, #24
 8001c46:	f101 0304 	add.w	r3, r1, #4
 8001c4a:	d50a      	bpl.n	8001c62 <_printf_i+0xce>
 8001c4c:	680e      	ldr	r6, [r1, #0]
 8001c4e:	602b      	str	r3, [r5, #0]
 8001c50:	2e00      	cmp	r6, #0
 8001c52:	da03      	bge.n	8001c5c <_printf_i+0xc8>
 8001c54:	232d      	movs	r3, #45	; 0x2d
 8001c56:	4276      	negs	r6, r6
 8001c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c5c:	230a      	movs	r3, #10
 8001c5e:	485e      	ldr	r0, [pc, #376]	; (8001dd8 <_printf_i+0x244>)
 8001c60:	e019      	b.n	8001c96 <_printf_i+0x102>
 8001c62:	680e      	ldr	r6, [r1, #0]
 8001c64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c68:	602b      	str	r3, [r5, #0]
 8001c6a:	bf18      	it	ne
 8001c6c:	b236      	sxthne	r6, r6
 8001c6e:	e7ef      	b.n	8001c50 <_printf_i+0xbc>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	6820      	ldr	r0, [r4, #0]
 8001c74:	1d19      	adds	r1, r3, #4
 8001c76:	6029      	str	r1, [r5, #0]
 8001c78:	0601      	lsls	r1, r0, #24
 8001c7a:	d501      	bpl.n	8001c80 <_printf_i+0xec>
 8001c7c:	681e      	ldr	r6, [r3, #0]
 8001c7e:	e002      	b.n	8001c86 <_printf_i+0xf2>
 8001c80:	0646      	lsls	r6, r0, #25
 8001c82:	d5fb      	bpl.n	8001c7c <_printf_i+0xe8>
 8001c84:	881e      	ldrh	r6, [r3, #0]
 8001c86:	2f6f      	cmp	r7, #111	; 0x6f
 8001c88:	bf0c      	ite	eq
 8001c8a:	2308      	moveq	r3, #8
 8001c8c:	230a      	movne	r3, #10
 8001c8e:	4852      	ldr	r0, [pc, #328]	; (8001dd8 <_printf_i+0x244>)
 8001c90:	2100      	movs	r1, #0
 8001c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c96:	6865      	ldr	r5, [r4, #4]
 8001c98:	2d00      	cmp	r5, #0
 8001c9a:	bfa8      	it	ge
 8001c9c:	6821      	ldrge	r1, [r4, #0]
 8001c9e:	60a5      	str	r5, [r4, #8]
 8001ca0:	bfa4      	itt	ge
 8001ca2:	f021 0104 	bicge.w	r1, r1, #4
 8001ca6:	6021      	strge	r1, [r4, #0]
 8001ca8:	b90e      	cbnz	r6, 8001cae <_printf_i+0x11a>
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	d04d      	beq.n	8001d4a <_printf_i+0x1b6>
 8001cae:	4615      	mov	r5, r2
 8001cb0:	fbb6 f1f3 	udiv	r1, r6, r3
 8001cb4:	fb03 6711 	mls	r7, r3, r1, r6
 8001cb8:	5dc7      	ldrb	r7, [r0, r7]
 8001cba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001cbe:	4637      	mov	r7, r6
 8001cc0:	42bb      	cmp	r3, r7
 8001cc2:	460e      	mov	r6, r1
 8001cc4:	d9f4      	bls.n	8001cb0 <_printf_i+0x11c>
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d10b      	bne.n	8001ce2 <_printf_i+0x14e>
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	07de      	lsls	r6, r3, #31
 8001cce:	d508      	bpl.n	8001ce2 <_printf_i+0x14e>
 8001cd0:	6923      	ldr	r3, [r4, #16]
 8001cd2:	6861      	ldr	r1, [r4, #4]
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	bfde      	ittt	le
 8001cd8:	2330      	movle	r3, #48	; 0x30
 8001cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ce2:	1b52      	subs	r2, r2, r5
 8001ce4:	6122      	str	r2, [r4, #16]
 8001ce6:	464b      	mov	r3, r9
 8001ce8:	4621      	mov	r1, r4
 8001cea:	4640      	mov	r0, r8
 8001cec:	f8cd a000 	str.w	sl, [sp]
 8001cf0:	aa03      	add	r2, sp, #12
 8001cf2:	f7ff fedf 	bl	8001ab4 <_printf_common>
 8001cf6:	3001      	adds	r0, #1
 8001cf8:	d14c      	bne.n	8001d94 <_printf_i+0x200>
 8001cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfe:	b004      	add	sp, #16
 8001d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d04:	4834      	ldr	r0, [pc, #208]	; (8001dd8 <_printf_i+0x244>)
 8001d06:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001d0a:	6829      	ldr	r1, [r5, #0]
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d12:	6029      	str	r1, [r5, #0]
 8001d14:	061d      	lsls	r5, r3, #24
 8001d16:	d514      	bpl.n	8001d42 <_printf_i+0x1ae>
 8001d18:	07df      	lsls	r7, r3, #31
 8001d1a:	bf44      	itt	mi
 8001d1c:	f043 0320 	orrmi.w	r3, r3, #32
 8001d20:	6023      	strmi	r3, [r4, #0]
 8001d22:	b91e      	cbnz	r6, 8001d2c <_printf_i+0x198>
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	f023 0320 	bic.w	r3, r3, #32
 8001d2a:	6023      	str	r3, [r4, #0]
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	e7af      	b.n	8001c90 <_printf_i+0xfc>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	6023      	str	r3, [r4, #0]
 8001d38:	2378      	movs	r3, #120	; 0x78
 8001d3a:	4828      	ldr	r0, [pc, #160]	; (8001ddc <_printf_i+0x248>)
 8001d3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d40:	e7e3      	b.n	8001d0a <_printf_i+0x176>
 8001d42:	0659      	lsls	r1, r3, #25
 8001d44:	bf48      	it	mi
 8001d46:	b2b6      	uxthmi	r6, r6
 8001d48:	e7e6      	b.n	8001d18 <_printf_i+0x184>
 8001d4a:	4615      	mov	r5, r2
 8001d4c:	e7bb      	b.n	8001cc6 <_printf_i+0x132>
 8001d4e:	682b      	ldr	r3, [r5, #0]
 8001d50:	6826      	ldr	r6, [r4, #0]
 8001d52:	1d18      	adds	r0, r3, #4
 8001d54:	6961      	ldr	r1, [r4, #20]
 8001d56:	6028      	str	r0, [r5, #0]
 8001d58:	0635      	lsls	r5, r6, #24
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	d501      	bpl.n	8001d62 <_printf_i+0x1ce>
 8001d5e:	6019      	str	r1, [r3, #0]
 8001d60:	e002      	b.n	8001d68 <_printf_i+0x1d4>
 8001d62:	0670      	lsls	r0, r6, #25
 8001d64:	d5fb      	bpl.n	8001d5e <_printf_i+0x1ca>
 8001d66:	8019      	strh	r1, [r3, #0]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	4615      	mov	r5, r2
 8001d6c:	6123      	str	r3, [r4, #16]
 8001d6e:	e7ba      	b.n	8001ce6 <_printf_i+0x152>
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	2100      	movs	r1, #0
 8001d74:	1d1a      	adds	r2, r3, #4
 8001d76:	602a      	str	r2, [r5, #0]
 8001d78:	681d      	ldr	r5, [r3, #0]
 8001d7a:	6862      	ldr	r2, [r4, #4]
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f000 f82f 	bl	8001de0 <memchr>
 8001d82:	b108      	cbz	r0, 8001d88 <_printf_i+0x1f4>
 8001d84:	1b40      	subs	r0, r0, r5
 8001d86:	6060      	str	r0, [r4, #4]
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	6123      	str	r3, [r4, #16]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d92:	e7a8      	b.n	8001ce6 <_printf_i+0x152>
 8001d94:	462a      	mov	r2, r5
 8001d96:	4649      	mov	r1, r9
 8001d98:	4640      	mov	r0, r8
 8001d9a:	6923      	ldr	r3, [r4, #16]
 8001d9c:	47d0      	blx	sl
 8001d9e:	3001      	adds	r0, #1
 8001da0:	d0ab      	beq.n	8001cfa <_printf_i+0x166>
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	079b      	lsls	r3, r3, #30
 8001da6:	d413      	bmi.n	8001dd0 <_printf_i+0x23c>
 8001da8:	68e0      	ldr	r0, [r4, #12]
 8001daa:	9b03      	ldr	r3, [sp, #12]
 8001dac:	4298      	cmp	r0, r3
 8001dae:	bfb8      	it	lt
 8001db0:	4618      	movlt	r0, r3
 8001db2:	e7a4      	b.n	8001cfe <_printf_i+0x16a>
 8001db4:	2301      	movs	r3, #1
 8001db6:	4632      	mov	r2, r6
 8001db8:	4649      	mov	r1, r9
 8001dba:	4640      	mov	r0, r8
 8001dbc:	47d0      	blx	sl
 8001dbe:	3001      	adds	r0, #1
 8001dc0:	d09b      	beq.n	8001cfa <_printf_i+0x166>
 8001dc2:	3501      	adds	r5, #1
 8001dc4:	68e3      	ldr	r3, [r4, #12]
 8001dc6:	9903      	ldr	r1, [sp, #12]
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	42ab      	cmp	r3, r5
 8001dcc:	dcf2      	bgt.n	8001db4 <_printf_i+0x220>
 8001dce:	e7eb      	b.n	8001da8 <_printf_i+0x214>
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	f104 0619 	add.w	r6, r4, #25
 8001dd6:	e7f5      	b.n	8001dc4 <_printf_i+0x230>
 8001dd8:	08002181 	.word	0x08002181
 8001ddc:	08002192 	.word	0x08002192

08001de0 <memchr>:
 8001de0:	4603      	mov	r3, r0
 8001de2:	b510      	push	{r4, lr}
 8001de4:	b2c9      	uxtb	r1, r1
 8001de6:	4402      	add	r2, r0
 8001de8:	4293      	cmp	r3, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	d101      	bne.n	8001df2 <memchr+0x12>
 8001dee:	2000      	movs	r0, #0
 8001df0:	e003      	b.n	8001dfa <memchr+0x1a>
 8001df2:	7804      	ldrb	r4, [r0, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	428c      	cmp	r4, r1
 8001df8:	d1f6      	bne.n	8001de8 <memchr+0x8>
 8001dfa:	bd10      	pop	{r4, pc}

08001dfc <memcpy>:
 8001dfc:	440a      	add	r2, r1
 8001dfe:	4291      	cmp	r1, r2
 8001e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8001e04:	d100      	bne.n	8001e08 <memcpy+0xc>
 8001e06:	4770      	bx	lr
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e0e:	4291      	cmp	r1, r2
 8001e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e14:	d1f9      	bne.n	8001e0a <memcpy+0xe>
 8001e16:	bd10      	pop	{r4, pc}

08001e18 <memmove>:
 8001e18:	4288      	cmp	r0, r1
 8001e1a:	b510      	push	{r4, lr}
 8001e1c:	eb01 0402 	add.w	r4, r1, r2
 8001e20:	d902      	bls.n	8001e28 <memmove+0x10>
 8001e22:	4284      	cmp	r4, r0
 8001e24:	4623      	mov	r3, r4
 8001e26:	d807      	bhi.n	8001e38 <memmove+0x20>
 8001e28:	1e43      	subs	r3, r0, #1
 8001e2a:	42a1      	cmp	r1, r4
 8001e2c:	d008      	beq.n	8001e40 <memmove+0x28>
 8001e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e36:	e7f8      	b.n	8001e2a <memmove+0x12>
 8001e38:	4601      	mov	r1, r0
 8001e3a:	4402      	add	r2, r0
 8001e3c:	428a      	cmp	r2, r1
 8001e3e:	d100      	bne.n	8001e42 <memmove+0x2a>
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e4a:	e7f7      	b.n	8001e3c <memmove+0x24>

08001e4c <_free_r>:
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4605      	mov	r5, r0
 8001e50:	2900      	cmp	r1, #0
 8001e52:	d040      	beq.n	8001ed6 <_free_r+0x8a>
 8001e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e58:	1f0c      	subs	r4, r1, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bfb8      	it	lt
 8001e5e:	18e4      	addlt	r4, r4, r3
 8001e60:	f000 f910 	bl	8002084 <__malloc_lock>
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <_free_r+0x8c>)
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	b933      	cbnz	r3, 8001e78 <_free_r+0x2c>
 8001e6a:	6063      	str	r3, [r4, #4]
 8001e6c:	6014      	str	r4, [r2, #0]
 8001e6e:	4628      	mov	r0, r5
 8001e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e74:	f000 b90c 	b.w	8002090 <__malloc_unlock>
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	d908      	bls.n	8001e8e <_free_r+0x42>
 8001e7c:	6820      	ldr	r0, [r4, #0]
 8001e7e:	1821      	adds	r1, r4, r0
 8001e80:	428b      	cmp	r3, r1
 8001e82:	bf01      	itttt	eq
 8001e84:	6819      	ldreq	r1, [r3, #0]
 8001e86:	685b      	ldreq	r3, [r3, #4]
 8001e88:	1809      	addeq	r1, r1, r0
 8001e8a:	6021      	streq	r1, [r4, #0]
 8001e8c:	e7ed      	b.n	8001e6a <_free_r+0x1e>
 8001e8e:	461a      	mov	r2, r3
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	b10b      	cbz	r3, 8001e98 <_free_r+0x4c>
 8001e94:	42a3      	cmp	r3, r4
 8001e96:	d9fa      	bls.n	8001e8e <_free_r+0x42>
 8001e98:	6811      	ldr	r1, [r2, #0]
 8001e9a:	1850      	adds	r0, r2, r1
 8001e9c:	42a0      	cmp	r0, r4
 8001e9e:	d10b      	bne.n	8001eb8 <_free_r+0x6c>
 8001ea0:	6820      	ldr	r0, [r4, #0]
 8001ea2:	4401      	add	r1, r0
 8001ea4:	1850      	adds	r0, r2, r1
 8001ea6:	4283      	cmp	r3, r0
 8001ea8:	6011      	str	r1, [r2, #0]
 8001eaa:	d1e0      	bne.n	8001e6e <_free_r+0x22>
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4401      	add	r1, r0
 8001eb2:	6011      	str	r1, [r2, #0]
 8001eb4:	6053      	str	r3, [r2, #4]
 8001eb6:	e7da      	b.n	8001e6e <_free_r+0x22>
 8001eb8:	d902      	bls.n	8001ec0 <_free_r+0x74>
 8001eba:	230c      	movs	r3, #12
 8001ebc:	602b      	str	r3, [r5, #0]
 8001ebe:	e7d6      	b.n	8001e6e <_free_r+0x22>
 8001ec0:	6820      	ldr	r0, [r4, #0]
 8001ec2:	1821      	adds	r1, r4, r0
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	bf01      	itttt	eq
 8001ec8:	6819      	ldreq	r1, [r3, #0]
 8001eca:	685b      	ldreq	r3, [r3, #4]
 8001ecc:	1809      	addeq	r1, r1, r0
 8001ece:	6021      	streq	r1, [r4, #0]
 8001ed0:	6063      	str	r3, [r4, #4]
 8001ed2:	6054      	str	r4, [r2, #4]
 8001ed4:	e7cb      	b.n	8001e6e <_free_r+0x22>
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}
 8001ed8:	200000a8 	.word	0x200000a8

08001edc <sbrk_aligned>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	4e0e      	ldr	r6, [pc, #56]	; (8001f18 <sbrk_aligned+0x3c>)
 8001ee0:	460c      	mov	r4, r1
 8001ee2:	6831      	ldr	r1, [r6, #0]
 8001ee4:	4605      	mov	r5, r0
 8001ee6:	b911      	cbnz	r1, 8001eee <sbrk_aligned+0x12>
 8001ee8:	f000 f8bc 	bl	8002064 <_sbrk_r>
 8001eec:	6030      	str	r0, [r6, #0]
 8001eee:	4621      	mov	r1, r4
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f000 f8b7 	bl	8002064 <_sbrk_r>
 8001ef6:	1c43      	adds	r3, r0, #1
 8001ef8:	d00a      	beq.n	8001f10 <sbrk_aligned+0x34>
 8001efa:	1cc4      	adds	r4, r0, #3
 8001efc:	f024 0403 	bic.w	r4, r4, #3
 8001f00:	42a0      	cmp	r0, r4
 8001f02:	d007      	beq.n	8001f14 <sbrk_aligned+0x38>
 8001f04:	1a21      	subs	r1, r4, r0
 8001f06:	4628      	mov	r0, r5
 8001f08:	f000 f8ac 	bl	8002064 <_sbrk_r>
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d101      	bne.n	8001f14 <sbrk_aligned+0x38>
 8001f10:	f04f 34ff 	mov.w	r4, #4294967295
 8001f14:	4620      	mov	r0, r4
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	200000ac 	.word	0x200000ac

08001f1c <_malloc_r>:
 8001f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f20:	1ccd      	adds	r5, r1, #3
 8001f22:	f025 0503 	bic.w	r5, r5, #3
 8001f26:	3508      	adds	r5, #8
 8001f28:	2d0c      	cmp	r5, #12
 8001f2a:	bf38      	it	cc
 8001f2c:	250c      	movcc	r5, #12
 8001f2e:	2d00      	cmp	r5, #0
 8001f30:	4607      	mov	r7, r0
 8001f32:	db01      	blt.n	8001f38 <_malloc_r+0x1c>
 8001f34:	42a9      	cmp	r1, r5
 8001f36:	d905      	bls.n	8001f44 <_malloc_r+0x28>
 8001f38:	230c      	movs	r3, #12
 8001f3a:	2600      	movs	r6, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4630      	mov	r0, r6
 8001f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f44:	4e2e      	ldr	r6, [pc, #184]	; (8002000 <_malloc_r+0xe4>)
 8001f46:	f000 f89d 	bl	8002084 <__malloc_lock>
 8001f4a:	6833      	ldr	r3, [r6, #0]
 8001f4c:	461c      	mov	r4, r3
 8001f4e:	bb34      	cbnz	r4, 8001f9e <_malloc_r+0x82>
 8001f50:	4629      	mov	r1, r5
 8001f52:	4638      	mov	r0, r7
 8001f54:	f7ff ffc2 	bl	8001edc <sbrk_aligned>
 8001f58:	1c43      	adds	r3, r0, #1
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	d14d      	bne.n	8001ffa <_malloc_r+0xde>
 8001f5e:	6834      	ldr	r4, [r6, #0]
 8001f60:	4626      	mov	r6, r4
 8001f62:	2e00      	cmp	r6, #0
 8001f64:	d140      	bne.n	8001fe8 <_malloc_r+0xcc>
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	4631      	mov	r1, r6
 8001f6a:	4638      	mov	r0, r7
 8001f6c:	eb04 0803 	add.w	r8, r4, r3
 8001f70:	f000 f878 	bl	8002064 <_sbrk_r>
 8001f74:	4580      	cmp	r8, r0
 8001f76:	d13a      	bne.n	8001fee <_malloc_r+0xd2>
 8001f78:	6821      	ldr	r1, [r4, #0]
 8001f7a:	3503      	adds	r5, #3
 8001f7c:	1a6d      	subs	r5, r5, r1
 8001f7e:	f025 0503 	bic.w	r5, r5, #3
 8001f82:	3508      	adds	r5, #8
 8001f84:	2d0c      	cmp	r5, #12
 8001f86:	bf38      	it	cc
 8001f88:	250c      	movcc	r5, #12
 8001f8a:	4638      	mov	r0, r7
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7ff ffa5 	bl	8001edc <sbrk_aligned>
 8001f92:	3001      	adds	r0, #1
 8001f94:	d02b      	beq.n	8001fee <_malloc_r+0xd2>
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	442b      	add	r3, r5
 8001f9a:	6023      	str	r3, [r4, #0]
 8001f9c:	e00e      	b.n	8001fbc <_malloc_r+0xa0>
 8001f9e:	6822      	ldr	r2, [r4, #0]
 8001fa0:	1b52      	subs	r2, r2, r5
 8001fa2:	d41e      	bmi.n	8001fe2 <_malloc_r+0xc6>
 8001fa4:	2a0b      	cmp	r2, #11
 8001fa6:	d916      	bls.n	8001fd6 <_malloc_r+0xba>
 8001fa8:	1961      	adds	r1, r4, r5
 8001faa:	42a3      	cmp	r3, r4
 8001fac:	6025      	str	r5, [r4, #0]
 8001fae:	bf18      	it	ne
 8001fb0:	6059      	strne	r1, [r3, #4]
 8001fb2:	6863      	ldr	r3, [r4, #4]
 8001fb4:	bf08      	it	eq
 8001fb6:	6031      	streq	r1, [r6, #0]
 8001fb8:	5162      	str	r2, [r4, r5]
 8001fba:	604b      	str	r3, [r1, #4]
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	f104 060b 	add.w	r6, r4, #11
 8001fc2:	f000 f865 	bl	8002090 <__malloc_unlock>
 8001fc6:	f026 0607 	bic.w	r6, r6, #7
 8001fca:	1d23      	adds	r3, r4, #4
 8001fcc:	1af2      	subs	r2, r6, r3
 8001fce:	d0b6      	beq.n	8001f3e <_malloc_r+0x22>
 8001fd0:	1b9b      	subs	r3, r3, r6
 8001fd2:	50a3      	str	r3, [r4, r2]
 8001fd4:	e7b3      	b.n	8001f3e <_malloc_r+0x22>
 8001fd6:	6862      	ldr	r2, [r4, #4]
 8001fd8:	42a3      	cmp	r3, r4
 8001fda:	bf0c      	ite	eq
 8001fdc:	6032      	streq	r2, [r6, #0]
 8001fde:	605a      	strne	r2, [r3, #4]
 8001fe0:	e7ec      	b.n	8001fbc <_malloc_r+0xa0>
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	6864      	ldr	r4, [r4, #4]
 8001fe6:	e7b2      	b.n	8001f4e <_malloc_r+0x32>
 8001fe8:	4634      	mov	r4, r6
 8001fea:	6876      	ldr	r6, [r6, #4]
 8001fec:	e7b9      	b.n	8001f62 <_malloc_r+0x46>
 8001fee:	230c      	movs	r3, #12
 8001ff0:	4638      	mov	r0, r7
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	f000 f84c 	bl	8002090 <__malloc_unlock>
 8001ff8:	e7a1      	b.n	8001f3e <_malloc_r+0x22>
 8001ffa:	6025      	str	r5, [r4, #0]
 8001ffc:	e7de      	b.n	8001fbc <_malloc_r+0xa0>
 8001ffe:	bf00      	nop
 8002000:	200000a8 	.word	0x200000a8

08002004 <_realloc_r>:
 8002004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002008:	4680      	mov	r8, r0
 800200a:	4614      	mov	r4, r2
 800200c:	460e      	mov	r6, r1
 800200e:	b921      	cbnz	r1, 800201a <_realloc_r+0x16>
 8002010:	4611      	mov	r1, r2
 8002012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002016:	f7ff bf81 	b.w	8001f1c <_malloc_r>
 800201a:	b92a      	cbnz	r2, 8002028 <_realloc_r+0x24>
 800201c:	f7ff ff16 	bl	8001e4c <_free_r>
 8002020:	4625      	mov	r5, r4
 8002022:	4628      	mov	r0, r5
 8002024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002028:	f000 f838 	bl	800209c <_malloc_usable_size_r>
 800202c:	4284      	cmp	r4, r0
 800202e:	4607      	mov	r7, r0
 8002030:	d802      	bhi.n	8002038 <_realloc_r+0x34>
 8002032:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002036:	d812      	bhi.n	800205e <_realloc_r+0x5a>
 8002038:	4621      	mov	r1, r4
 800203a:	4640      	mov	r0, r8
 800203c:	f7ff ff6e 	bl	8001f1c <_malloc_r>
 8002040:	4605      	mov	r5, r0
 8002042:	2800      	cmp	r0, #0
 8002044:	d0ed      	beq.n	8002022 <_realloc_r+0x1e>
 8002046:	42bc      	cmp	r4, r7
 8002048:	4622      	mov	r2, r4
 800204a:	4631      	mov	r1, r6
 800204c:	bf28      	it	cs
 800204e:	463a      	movcs	r2, r7
 8002050:	f7ff fed4 	bl	8001dfc <memcpy>
 8002054:	4631      	mov	r1, r6
 8002056:	4640      	mov	r0, r8
 8002058:	f7ff fef8 	bl	8001e4c <_free_r>
 800205c:	e7e1      	b.n	8002022 <_realloc_r+0x1e>
 800205e:	4635      	mov	r5, r6
 8002060:	e7df      	b.n	8002022 <_realloc_r+0x1e>
	...

08002064 <_sbrk_r>:
 8002064:	b538      	push	{r3, r4, r5, lr}
 8002066:	2300      	movs	r3, #0
 8002068:	4d05      	ldr	r5, [pc, #20]	; (8002080 <_sbrk_r+0x1c>)
 800206a:	4604      	mov	r4, r0
 800206c:	4608      	mov	r0, r1
 800206e:	602b      	str	r3, [r5, #0]
 8002070:	f7fe fc22 	bl	80008b8 <_sbrk>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d102      	bne.n	800207e <_sbrk_r+0x1a>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	b103      	cbz	r3, 800207e <_sbrk_r+0x1a>
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	200000b0 	.word	0x200000b0

08002084 <__malloc_lock>:
 8002084:	4801      	ldr	r0, [pc, #4]	; (800208c <__malloc_lock+0x8>)
 8002086:	f000 b811 	b.w	80020ac <__retarget_lock_acquire_recursive>
 800208a:	bf00      	nop
 800208c:	200000b4 	.word	0x200000b4

08002090 <__malloc_unlock>:
 8002090:	4801      	ldr	r0, [pc, #4]	; (8002098 <__malloc_unlock+0x8>)
 8002092:	f000 b80c 	b.w	80020ae <__retarget_lock_release_recursive>
 8002096:	bf00      	nop
 8002098:	200000b4 	.word	0x200000b4

0800209c <_malloc_usable_size_r>:
 800209c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020a0:	1f18      	subs	r0, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bfbc      	itt	lt
 80020a6:	580b      	ldrlt	r3, [r1, r0]
 80020a8:	18c0      	addlt	r0, r0, r3
 80020aa:	4770      	bx	lr

080020ac <__retarget_lock_acquire_recursive>:
 80020ac:	4770      	bx	lr

080020ae <__retarget_lock_release_recursive>:
 80020ae:	4770      	bx	lr

080020b0 <_init>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	bf00      	nop
 80020b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b6:	bc08      	pop	{r3}
 80020b8:	469e      	mov	lr, r3
 80020ba:	4770      	bx	lr

080020bc <_fini>:
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	bf00      	nop
 80020c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c2:	bc08      	pop	{r3}
 80020c4:	469e      	mov	lr, r3
 80020c6:	4770      	bx	lr
