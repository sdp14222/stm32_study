
2-2. UART printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002598  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002778  08002778  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002778  08002778  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002778  08002778  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  080027f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080027f0  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005604  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158c  00000000  00000000  0002569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00026c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00027318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fa  00000000  00000000  00027958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007af1  00000000  00000000  0003f352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083443  00000000  00000000  00046e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d8  00000000  00000000  000ca2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800268c 	.word	0x0800268c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800268c 	.word	0x0800268c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 10);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	b29a      	uxth	r2, r3
 80001a0:	230a      	movs	r3, #10
 80001a2:	68b9      	ldr	r1, [r7, #8]
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <_write+0x24>)
 80001a6:	f001 f940 	bl	800142a <HAL_UART_Transmit>
	return len;
 80001aa:	687b      	ldr	r3, [r7, #4]
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000090 	.word	0x20000090

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001be:	f000 f9df 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c2:	f000 f815 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c6:	f7ff ffc1 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001ca:	f000 f93d 	bl	8000448 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t cnt = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	80fb      	strh	r3, [r7, #6]

  while (1)
  {
	  printf("Hello World! %d\n", cnt++);
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	1c5a      	adds	r2, r3, #1
 80001d6:	80fa      	strh	r2, [r7, #6]
 80001d8:	4619      	mov	r1, r3
 80001da:	4804      	ldr	r0, [pc, #16]	; (80001ec <main+0x34>)
 80001dc:	f001 fac2 	bl	8001764 <iprintf>
	  HAL_Delay(1000);
 80001e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e4:	f000 fa2e 	bl	8000644 <HAL_Delay>
	  printf("Hello World! %d\n", cnt++);
 80001e8:	e7f3      	b.n	80001d2 <main+0x1a>
 80001ea:	bf00      	nop
 80001ec:	080026a4 	.word	0x080026a4

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 faa8 	bl	8001754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fc8f 	bl	8000b5c <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000244:	f000 f819 	bl	800027a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fefc 	bl	8001060 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026e:	f000 f804 	bl	800027a <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	; 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800027e:	b672      	cpsid	i
}
 8000280:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000282:	e7fe      	b.n	8000282 <Error_Handler+0x8>

08000284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_MspInit+0x5c>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <HAL_MspInit+0x5c>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6193      	str	r3, [r2, #24]
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HAL_MspInit+0x5c>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <HAL_MspInit+0x5c>)
 80002a4:	69db      	ldr	r3, [r3, #28]
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <HAL_MspInit+0x5c>)
 80002a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002ac:	61d3      	str	r3, [r2, #28]
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <HAL_MspInit+0x5c>)
 80002b0:	69db      	ldr	r3, [r3, #28]
 80002b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <HAL_MspInit+0x60>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <HAL_MspInit+0x60>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010000 	.word	0x40010000

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <NMI_Handler+0x4>

080002ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <HardFault_Handler+0x4>

080002f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <MemManage_Handler+0x4>

080002fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <BusFault_Handler+0x4>

08000300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <UsageFault_Handler+0x4>

08000306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr

08000312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800032e:	f000 f96d 	bl	800060c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}

08000336 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af00      	add	r7, sp, #0
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	60b9      	str	r1, [r7, #8]
 8000340:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
 8000346:	e00a      	b.n	800035e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000348:	f3af 8000 	nop.w
 800034c:	4601      	mov	r1, r0
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	1c5a      	adds	r2, r3, #1
 8000352:	60ba      	str	r2, [r7, #8]
 8000354:	b2ca      	uxtb	r2, r1
 8000356:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	3301      	adds	r3, #1
 800035c:	617b      	str	r3, [r7, #20]
 800035e:	697a      	ldr	r2, [r7, #20]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	429a      	cmp	r2, r3
 8000364:	dbf0      	blt.n	8000348 <_read+0x12>
	}

return len;
 8000366:	687b      	ldr	r3, [r7, #4]
}
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	return -1;
 8000378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800037c:	4618      	mov	r0, r3
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr

08000386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000396:	605a      	str	r2, [r3, #4]
	return 0;
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <_isatty>:

int _isatty(int file)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	return 1;
 80003ac:	2301      	movs	r3, #1
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
	return 0;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d8:	4a14      	ldr	r2, [pc, #80]	; (800042c <_sbrk+0x5c>)
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <_sbrk+0x60>)
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <_sbrk+0x64>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <_sbrk+0x64>)
 80003ee:	4a12      	ldr	r2, [pc, #72]	; (8000438 <_sbrk+0x68>)
 80003f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <_sbrk+0x64>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	693a      	ldr	r2, [r7, #16]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d207      	bcs.n	8000410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000400:	f001 f97e 	bl	8001700 <__errno>
 8000404:	4603      	mov	r3, r0
 8000406:	220c      	movs	r2, #12
 8000408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	e009      	b.n	8000424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <_sbrk+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000416:	4b07      	ldr	r3, [pc, #28]	; (8000434 <_sbrk+0x64>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	4a05      	ldr	r2, [pc, #20]	; (8000434 <_sbrk+0x64>)
 8000420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20005000 	.word	0x20005000
 8000430:	00000400 	.word	0x00000400
 8000434:	2000008c 	.word	0x2000008c
 8000438:	200000e8 	.word	0x200000e8

0800043c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <MX_USART1_UART_Init+0x50>)
 8000450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 8000454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 800046e:	220c      	movs	r2, #12
 8000470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_USART1_UART_Init+0x4c>)
 8000480:	f000 ff86 	bl	8001390 <HAL_UART_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800048a:	f7ff fef6 	bl	800027a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000090 	.word	0x20000090
 8000498:	40013800 	.word	0x40013800

0800049c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <HAL_UART_MspInit+0x8c>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d131      	bne.n	8000520 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <HAL_UART_MspInit+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a1a      	ldr	r2, [pc, #104]	; (800052c <HAL_UART_MspInit+0x90>)
 80004c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <HAL_UART_MspInit+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_UART_MspInit+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a14      	ldr	r2, [pc, #80]	; (800052c <HAL_UART_MspInit+0x90>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_UART_MspInit+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f2:	2302      	movs	r3, #2
 80004f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f6:	2303      	movs	r3, #3
 80004f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	480b      	ldr	r0, [pc, #44]	; (8000530 <HAL_UART_MspInit+0x94>)
 8000502:	f000 f9a7 	bl	8000854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <HAL_UART_MspInit+0x94>)
 800051c:	f000 f99a 	bl	8000854 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40013800 	.word	0x40013800
 800052c:	40021000 	.word	0x40021000
 8000530:	40010800 	.word	0x40010800

08000534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800055a:	f7ff ff6f 	bl	800043c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800055e:	f001 f8d5 	bl	800170c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff fe29 	bl	80001b8 <main>
  bx lr
 8000566:	4770      	bx	lr
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000570:	08002780 	.word	0x08002780
  ldr r2, =_sbss
 8000574:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000578:	200000e8 	.word	0x200000e8

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <HAL_Init+0x28>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_Init+0x28>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 f92b 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000596:	200f      	movs	r0, #15
 8000598:	f000 f808 	bl	80005ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800059c:	f7ff fe72 	bl	8000284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40022000 	.word	0x40022000

080005ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_InitTick+0x54>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_InitTick+0x58>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f935 	bl	800083a <HAL_SYSTICK_Config>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e00e      	b.n	80005f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d80a      	bhi.n	80005f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e0:	2200      	movs	r2, #0
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	f04f 30ff 	mov.w	r0, #4294967295
 80005e8:	f000 f90b 	bl	8000802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <HAL_InitTick+0x5c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e000      	b.n	80005f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000000 	.word	0x20000000
 8000604:	20000008 	.word	0x20000008
 8000608:	20000004 	.word	0x20000004

0800060c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_IncTick+0x1c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_IncTick+0x20>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4413      	add	r3, r2
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x20>)
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000008 	.word	0x20000008
 800062c:	200000d4 	.word	0x200000d4

08000630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b02      	ldr	r3, [pc, #8]	; (8000640 <HAL_GetTick+0x10>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	200000d4 	.word	0x200000d4

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff fff0 	bl	8000630 <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065c:	d005      	beq.n	800066a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_Delay+0x44>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800066a:	bf00      	nop
 800066c:	f7ff ffe0 	bl	8000630 <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8f7      	bhi.n	800066c <HAL_Delay+0x28>
  {
  }
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db0a      	blt.n	800071a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	490c      	ldr	r1, [pc, #48]	; (800073c <__NVIC_SetPriority+0x4c>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	0112      	lsls	r2, r2, #4
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	440b      	add	r3, r1
 8000714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000718:	e00a      	b.n	8000730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4908      	ldr	r1, [pc, #32]	; (8000740 <__NVIC_SetPriority+0x50>)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	3b04      	subs	r3, #4
 8000728:	0112      	lsls	r2, r2, #4
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	440b      	add	r3, r1
 800072e:	761a      	strb	r2, [r3, #24]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	f04f 32ff 	mov.w	r2, #4294967295
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	43da      	mvns	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	401a      	ands	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078c:	f04f 31ff 	mov.w	r1, #4294967295
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	43d9      	mvns	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	4313      	orrs	r3, r2
         );
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3724      	adds	r7, #36	; 0x24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f7ff ff90 	bl	80006f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff49 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff5e 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff90 	bl	8000744 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5f 	bl	80006f0 <__NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffb0 	bl	80007a8 <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000866:	e169      	b.n	8000b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000868:	2201      	movs	r2, #1
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	429a      	cmp	r2, r3
 8000882:	f040 8158 	bne.w	8000b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4a9a      	ldr	r2, [pc, #616]	; (8000af4 <HAL_GPIO_Init+0x2a0>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d05e      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 8000890:	4a98      	ldr	r2, [pc, #608]	; (8000af4 <HAL_GPIO_Init+0x2a0>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d875      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 8000896:	4a98      	ldr	r2, [pc, #608]	; (8000af8 <HAL_GPIO_Init+0x2a4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d058      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 800089c:	4a96      	ldr	r2, [pc, #600]	; (8000af8 <HAL_GPIO_Init+0x2a4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d86f      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008a2:	4a96      	ldr	r2, [pc, #600]	; (8000afc <HAL_GPIO_Init+0x2a8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d052      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008a8:	4a94      	ldr	r2, [pc, #592]	; (8000afc <HAL_GPIO_Init+0x2a8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d869      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ae:	4a94      	ldr	r2, [pc, #592]	; (8000b00 <HAL_GPIO_Init+0x2ac>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d04c      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008b4:	4a92      	ldr	r2, [pc, #584]	; (8000b00 <HAL_GPIO_Init+0x2ac>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d863      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ba:	4a92      	ldr	r2, [pc, #584]	; (8000b04 <HAL_GPIO_Init+0x2b0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d046      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008c0:	4a90      	ldr	r2, [pc, #576]	; (8000b04 <HAL_GPIO_Init+0x2b0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d85d      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008c6:	2b12      	cmp	r3, #18
 80008c8:	d82a      	bhi.n	8000920 <HAL_GPIO_Init+0xcc>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d859      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ce:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <HAL_GPIO_Init+0x80>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	0800094f 	.word	0x0800094f
 80008d8:	08000929 	.word	0x08000929
 80008dc:	0800093b 	.word	0x0800093b
 80008e0:	0800097d 	.word	0x0800097d
 80008e4:	08000983 	.word	0x08000983
 80008e8:	08000983 	.word	0x08000983
 80008ec:	08000983 	.word	0x08000983
 80008f0:	08000983 	.word	0x08000983
 80008f4:	08000983 	.word	0x08000983
 80008f8:	08000983 	.word	0x08000983
 80008fc:	08000983 	.word	0x08000983
 8000900:	08000983 	.word	0x08000983
 8000904:	08000983 	.word	0x08000983
 8000908:	08000983 	.word	0x08000983
 800090c:	08000983 	.word	0x08000983
 8000910:	08000983 	.word	0x08000983
 8000914:	08000983 	.word	0x08000983
 8000918:	08000931 	.word	0x08000931
 800091c:	08000945 	.word	0x08000945
 8000920:	4a79      	ldr	r2, [pc, #484]	; (8000b08 <HAL_GPIO_Init+0x2b4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d013      	beq.n	800094e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000926:	e02c      	b.n	8000982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e029      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	3304      	adds	r3, #4
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e024      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	3308      	adds	r3, #8
 8000940:	623b      	str	r3, [r7, #32]
          break;
 8000942:	e01f      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	330c      	adds	r3, #12
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e01a      	b.n	8000984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000956:	2304      	movs	r3, #4
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e013      	b.n	8000984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d105      	bne.n	8000970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	611a      	str	r2, [r3, #16]
          break;
 800096e:	e009      	b.n	8000984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	615a      	str	r2, [r3, #20]
          break;
 800097a:	e003      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x130>
          break;
 8000982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2bff      	cmp	r3, #255	; 0xff
 8000988:	d801      	bhi.n	800098e <HAL_GPIO_Init+0x13a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	e001      	b.n	8000992 <HAL_GPIO_Init+0x13e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3304      	adds	r3, #4
 8000992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2bff      	cmp	r3, #255	; 0xff
 8000998:	d802      	bhi.n	80009a0 <HAL_GPIO_Init+0x14c>
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_Init+0x152>
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	3b08      	subs	r3, #8
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	210f      	movs	r1, #15
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	6a39      	ldr	r1, [r7, #32]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	431a      	orrs	r2, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 80b1 	beq.w	8000b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a4c      	ldr	r2, [pc, #304]	; (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009ec:	4a48      	ldr	r2, [pc, #288]	; (8000b10 <HAL_GPIO_Init+0x2bc>)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3302      	adds	r3, #2
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a40      	ldr	r2, [pc, #256]	; (8000b14 <HAL_GPIO_Init+0x2c0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d013      	beq.n	8000a40 <HAL_GPIO_Init+0x1ec>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3f      	ldr	r2, [pc, #252]	; (8000b18 <HAL_GPIO_Init+0x2c4>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d00d      	beq.n	8000a3c <HAL_GPIO_Init+0x1e8>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3e      	ldr	r2, [pc, #248]	; (8000b1c <HAL_GPIO_Init+0x2c8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d007      	beq.n	8000a38 <HAL_GPIO_Init+0x1e4>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3d      	ldr	r2, [pc, #244]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <HAL_GPIO_Init+0x1e0>
 8000a30:	2303      	movs	r3, #3
 8000a32:	e006      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e004      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a40:	2300      	movs	r3, #0
 8000a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a44:	f002 0203 	and.w	r2, r2, #3
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	4093      	lsls	r3, r2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a52:	492f      	ldr	r1, [pc, #188]	; (8000b10 <HAL_GPIO_Init+0x2bc>)
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3302      	adds	r3, #2
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	492c      	ldr	r1, [pc, #176]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4928      	ldr	r1, [pc, #160]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4922      	ldr	r1, [pc, #136]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	491e      	ldr	r1, [pc, #120]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000abe:	689a      	ldr	r2, [r3, #8]
 8000ac0:	4918      	ldr	r1, [pc, #96]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	608b      	str	r3, [r1, #8]
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4914      	ldr	r1, [pc, #80]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d021      	beq.n	8000b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	490e      	ldr	r1, [pc, #56]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60cb      	str	r3, [r1, #12]
 8000af0:	e021      	b.n	8000b36 <HAL_GPIO_Init+0x2e2>
 8000af2:	bf00      	nop
 8000af4:	10320000 	.word	0x10320000
 8000af8:	10310000 	.word	0x10310000
 8000afc:	10220000 	.word	0x10220000
 8000b00:	10210000 	.word	0x10210000
 8000b04:	10120000 	.word	0x10120000
 8000b08:	10110000 	.word	0x10110000
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40011400 	.word	0x40011400
 8000b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_GPIO_Init+0x304>)
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	4909      	ldr	r1, [pc, #36]	; (8000b58 <HAL_GPIO_Init+0x304>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	3301      	adds	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	fa22 f303 	lsr.w	r3, r2, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f47f ae8e 	bne.w	8000868 <HAL_GPIO_Init+0x14>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	372c      	adds	r7, #44	; 0x2c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40010400 	.word	0x40010400

08000b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e272      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8087 	beq.w	8000c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b7c:	4b92      	ldr	r3, [pc, #584]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 030c 	and.w	r3, r3, #12
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d00c      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b88:	4b8f      	ldr	r3, [pc, #572]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d112      	bne.n	8000bba <HAL_RCC_OscConfig+0x5e>
 8000b94:	4b8c      	ldr	r3, [pc, #560]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba0:	d10b      	bne.n	8000bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba2:	4b89      	ldr	r3, [pc, #548]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d06c      	beq.n	8000c88 <HAL_RCC_OscConfig+0x12c>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d168      	bne.n	8000c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e24c      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc2:	d106      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x76>
 8000bc4:	4b80      	ldr	r3, [pc, #512]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a7f      	ldr	r2, [pc, #508]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e02e      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x98>
 8000bda:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a7a      	ldr	r2, [pc, #488]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a77      	ldr	r2, [pc, #476]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e01d      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bfc:	d10c      	bne.n	8000c18 <HAL_RCC_OscConfig+0xbc>
 8000bfe:	4b72      	ldr	r3, [pc, #456]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a71      	ldr	r2, [pc, #452]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6e      	ldr	r2, [pc, #440]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e00b      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000c18:	4b6b      	ldr	r3, [pc, #428]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a6a      	ldr	r2, [pc, #424]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a67      	ldr	r2, [pc, #412]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fcfa 	bl	8000630 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fcf6 	bl	8000630 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e200      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f0      	beq.n	8000c40 <HAL_RCC_OscConfig+0xe4>
 8000c5e:	e014      	b.n	8000c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fce6 	bl	8000630 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fce2 	bl	8000630 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e1ec      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0x10c>
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d063      	beq.n	8000d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c96:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ca2:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d11c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x18c>
 8000cae:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d116      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cba:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x176>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d001      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e1c0      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4939      	ldr	r1, [pc, #228]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	e03a      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d020      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf0:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <HAL_RCC_OscConfig+0x270>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fc9b 	bl	8000630 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fc97 	bl	8000630 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e1a1      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4927      	ldr	r1, [pc, #156]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <HAL_RCC_OscConfig+0x270>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fc7a 	bl	8000630 <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fc76 	bl	8000630 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e180      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d03a      	beq.n	8000de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d019      	beq.n	8000da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_RCC_OscConfig+0x274>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d78:	f7ff fc5a 	bl	8000630 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d80:	f7ff fc56 	bl	8000630 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e160      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 fad8 	bl	8001354 <RCC_Delay>
 8000da4:	e01c      	b.n	8000de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_RCC_OscConfig+0x274>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fc40 	bl	8000630 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db2:	e00f      	b.n	8000dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fc3c 	bl	8000630 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d908      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e146      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	42420000 	.word	0x42420000
 8000dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd4:	4b92      	ldr	r3, [pc, #584]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e9      	bne.n	8000db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80a6 	beq.w	8000f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df2:	4b8b      	ldr	r3, [pc, #556]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10d      	bne.n	8000e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b88      	ldr	r3, [pc, #544]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a87      	ldr	r2, [pc, #540]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b85      	ldr	r3, [pc, #532]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1a:	4b82      	ldr	r3, [pc, #520]	; (8001024 <HAL_RCC_OscConfig+0x4c8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d118      	bne.n	8000e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e26:	4b7f      	ldr	r3, [pc, #508]	; (8001024 <HAL_RCC_OscConfig+0x4c8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a7e      	ldr	r2, [pc, #504]	; (8001024 <HAL_RCC_OscConfig+0x4c8>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e32:	f7ff fbfd 	bl	8000630 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e3a:	f7ff fbf9 	bl	8000630 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	; 0x64
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e103      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	4b75      	ldr	r3, [pc, #468]	; (8001024 <HAL_RCC_OscConfig+0x4c8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d106      	bne.n	8000e6e <HAL_RCC_OscConfig+0x312>
 8000e60:	4b6f      	ldr	r3, [pc, #444]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4a6e      	ldr	r2, [pc, #440]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6213      	str	r3, [r2, #32]
 8000e6c:	e02d      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x334>
 8000e76:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	4a69      	ldr	r2, [pc, #420]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	6213      	str	r3, [r2, #32]
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a66      	ldr	r2, [pc, #408]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	e01c      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d10c      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x356>
 8000e98:	4b61      	ldr	r3, [pc, #388]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a60      	ldr	r2, [pc, #384]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	4a5d      	ldr	r2, [pc, #372]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6213      	str	r3, [r2, #32]
 8000eb0:	e00b      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000eb2:	4b5b      	ldr	r3, [pc, #364]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a5a      	ldr	r2, [pc, #360]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	4b58      	ldr	r3, [pc, #352]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a57      	ldr	r2, [pc, #348]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d015      	beq.n	8000efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fbad 	bl	8000630 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	e00a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fba9 	bl	8000630 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e0b1      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0ee      	beq.n	8000eda <HAL_RCC_OscConfig+0x37e>
 8000efc:	e014      	b.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fb97 	bl	8000630 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fb93 	bl	8000630 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e09b      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1c:	4b40      	ldr	r3, [pc, #256]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ee      	bne.n	8000f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d105      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a3b      	ldr	r2, [pc, #236]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8087 	beq.w	8001052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d061      	beq.n	8001014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d146      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f58:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_RCC_OscConfig+0x4cc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fb67 	bl	8000630 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff fb63 	bl	8000630 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e06d      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f0      	bne.n	8000f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8c:	d108      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	4921      	ldr	r1, [pc, #132]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a19      	ldr	r1, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	491b      	ldr	r1, [pc, #108]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_RCC_OscConfig+0x4cc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fb37 	bl	8000630 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fb33 	bl	8000630 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e03d      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x46a>
 8000fe4:	e035      	b.n	8001052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_RCC_OscConfig+0x4cc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb20 	bl	8000630 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff4:	f7ff fb1c 	bl	8000630 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e026      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x498>
 8001012:	e01e      	b.n	8001052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d107      	bne.n	800102c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e019      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
 8001020:	40021000 	.word	0x40021000
 8001024:	40007000 	.word	0x40007000
 8001028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_RCC_OscConfig+0x500>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	429a      	cmp	r2, r3
 800103e:	d106      	bne.n	800104e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104a:	429a      	cmp	r2, r3
 800104c:	d001      	beq.n	8001052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0d0      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001074:	4b6a      	ldr	r3, [pc, #424]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d910      	bls.n	80010a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	4b67      	ldr	r3, [pc, #412]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 0207 	bic.w	r2, r3, #7
 800108a:	4965      	ldr	r1, [pc, #404]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0b8      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010bc:	4b59      	ldr	r3, [pc, #356]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a58      	ldr	r2, [pc, #352]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e0:	4b50      	ldr	r3, [pc, #320]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	494d      	ldr	r1, [pc, #308]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d040      	beq.n	8001180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d115      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e07f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111e:	4b41      	ldr	r3, [pc, #260]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e073      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e06b      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f023 0203 	bic.w	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4936      	ldr	r1, [pc, #216]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001150:	f7ff fa6e 	bl	8000630 <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	e00a      	b.n	800116e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001158:	f7ff fa6a 	bl	8000630 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f241 3288 	movw	r2, #5000	; 0x1388
 8001166:	4293      	cmp	r3, r2
 8001168:	d901      	bls.n	800116e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e053      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 020c 	and.w	r2, r3, #12
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	429a      	cmp	r2, r3
 800117e:	d1eb      	bne.n	8001158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d210      	bcs.n	80011b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 0207 	bic.w	r2, r3, #7
 8001196:	4922      	ldr	r1, [pc, #136]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e032      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4916      	ldr	r1, [pc, #88]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	490e      	ldr	r1, [pc, #56]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ee:	f000 f821 	bl	8001234 <HAL_RCC_GetSysClockFreq>
 80011f2:	4602      	mov	r2, r0
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	490a      	ldr	r1, [pc, #40]	; (8001228 <HAL_RCC_ClockConfig+0x1c8>)
 8001200:	5ccb      	ldrb	r3, [r1, r3]
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_RCC_ClockConfig+0x1cc>)
 8001208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_RCC_ClockConfig+0x1d0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9cc 	bl	80005ac <HAL_InitTick>

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000
 8001224:	40021000 	.word	0x40021000
 8001228:	080026c8 	.word	0x080026c8
 800122c:	20000000 	.word	0x20000000
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001234:	b490      	push	{r4, r7}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800123c:	1d3c      	adds	r4, r7, #4
 800123e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001244:	f240 2301 	movw	r3, #513	; 0x201
 8001248:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d002      	beq.n	8001274 <HAL_RCC_GetSysClockFreq+0x40>
 800126e:	2b08      	cmp	r3, #8
 8001270:	d003      	beq.n	800127a <HAL_RCC_GetSysClockFreq+0x46>
 8001272:	e02b      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001276:	623b      	str	r3, [r7, #32]
      break;
 8001278:	e02b      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3328      	adds	r3, #40	; 0x28
 8001284:	443b      	add	r3, r7
 8001286:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800128a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d012      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	0c5b      	lsrs	r3, r3, #17
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	3328      	adds	r3, #40	; 0x28
 80012a2:	443b      	add	r3, r7
 80012a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012ae:	fb03 f202 	mul.w	r2, r3, r2
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ba:	e004      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	623b      	str	r3, [r7, #32]
      break;
 80012ca:	e002      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012ce:	623b      	str	r3, [r7, #32]
      break;
 80012d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d2:	6a3b      	ldr	r3, [r7, #32]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc90      	pop	{r4, r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	080026b8 	.word	0x080026b8
 80012e4:	40021000 	.word	0x40021000
 80012e8:	007a1200 	.word	0x007a1200
 80012ec:	003d0900 	.word	0x003d0900

080012f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <HAL_RCC_GetHCLKFreq+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	20000000 	.word	0x20000000

08001304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001308:	f7ff fff2 	bl	80012f0 <HAL_RCC_GetHCLKFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4903      	ldr	r1, [pc, #12]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	080026d8 	.word	0x080026d8

0800132c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001330:	f7ff ffde 	bl	80012f0 <HAL_RCC_GetHCLKFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	0adb      	lsrs	r3, r3, #11
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	080026d8 	.word	0x080026d8

08001354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <RCC_Delay+0x34>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <RCC_Delay+0x38>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0a5b      	lsrs	r3, r3, #9
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001370:	bf00      	nop
  }
  while (Delay --);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	60fa      	str	r2, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f9      	bne.n	8001370 <RCC_Delay+0x1c>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000000 	.word	0x20000000
 800138c:	10624dd3 	.word	0x10624dd3

08001390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e03f      	b.n	8001422 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff f870 	bl	800049c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2224      	movs	r2, #36	; 0x24
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f905 	bl	80015e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b08a      	sub	sp, #40	; 0x28
 800142e:	af02      	add	r7, sp, #8
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4613      	mov	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b20      	cmp	r3, #32
 8001448:	d17c      	bne.n	8001544 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <HAL_UART_Transmit+0x2c>
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e075      	b.n	8001546 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_UART_Transmit+0x3e>
 8001464:	2302      	movs	r3, #2
 8001466:	e06e      	b.n	8001546 <HAL_UART_Transmit+0x11c>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2221      	movs	r2, #33	; 0x21
 800147a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800147e:	f7ff f8d7 	bl	8000630 <HAL_GetTick>
 8001482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	88fa      	ldrh	r2, [r7, #6]
 8001488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	88fa      	ldrh	r2, [r7, #6]
 800148e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001498:	d108      	bne.n	80014ac <HAL_UART_Transmit+0x82>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d104      	bne.n	80014ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	e003      	b.n	80014b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80014bc:	e02a      	b.n	8001514 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2200      	movs	r2, #0
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f840 	bl	800154e <UART_WaitOnFlagUntilTimeout>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e036      	b.n	8001546 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10b      	bne.n	80014f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	3302      	adds	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	e007      	b.n	8001506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3301      	adds	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800150a:	b29b      	uxth	r3, r3
 800150c:	3b01      	subs	r3, #1
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001518:	b29b      	uxth	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1cf      	bne.n	80014be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2200      	movs	r2, #0
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f810 	bl	800154e <UART_WaitOnFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e006      	b.n	8001546 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2220      	movs	r2, #32
 800153c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001544:	2302      	movs	r3, #2
  }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800155e:	e02c      	b.n	80015ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	d028      	beq.n	80015ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <UART_WaitOnFlagUntilTimeout+0x30>
 800156e:	f7ff f85f 	bl	8000630 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	429a      	cmp	r2, r3
 800157c:	d21d      	bcs.n	80015ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800158c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0201 	bic.w	r2, r2, #1
 800159c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2220      	movs	r2, #32
 80015a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2220      	movs	r2, #32
 80015aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e00f      	b.n	80015da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4013      	ands	r3, r2
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	bf0c      	ite	eq
 80015ca:	2301      	moveq	r3, #1
 80015cc:	2300      	movne	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d0c3      	beq.n	8001560 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800161e:	f023 030c 	bic.w	r3, r3, #12
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	430b      	orrs	r3, r1
 800162a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a2c      	ldr	r2, [pc, #176]	; (80016f8 <UART_SetConfig+0x114>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d103      	bne.n	8001654 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800164c:	f7ff fe6e 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	e002      	b.n	800165a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001654:	f7ff fe56 	bl	8001304 <HAL_RCC_GetPCLK1Freq>
 8001658:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009a      	lsls	r2, r3, #2
 8001664:	441a      	add	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	4a22      	ldr	r2, [pc, #136]	; (80016fc <UART_SetConfig+0x118>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	0119      	lsls	r1, r3, #4
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	009a      	lsls	r2, r3, #2
 8001684:	441a      	add	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <UART_SetConfig+0x118>)
 8001692:	fba3 0302 	umull	r0, r3, r3, r2
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2064      	movs	r0, #100	; 0x64
 800169a:	fb00 f303 	mul.w	r3, r0, r3
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	3332      	adds	r3, #50	; 0x32
 80016a4:	4a15      	ldr	r2, [pc, #84]	; (80016fc <UART_SetConfig+0x118>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b0:	4419      	add	r1, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009a      	lsls	r2, r3, #2
 80016bc:	441a      	add	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <UART_SetConfig+0x118>)
 80016ca:	fba3 0302 	umull	r0, r3, r3, r2
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2064      	movs	r0, #100	; 0x64
 80016d2:	fb00 f303 	mul.w	r3, r0, r3
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	3332      	adds	r3, #50	; 0x32
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <UART_SetConfig+0x118>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	f003 020f 	and.w	r2, r3, #15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	440a      	add	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40013800 	.word	0x40013800
 80016fc:	51eb851f 	.word	0x51eb851f

08001700 <__errno>:
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <__errno+0x8>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2000000c 	.word	0x2000000c

0800170c <__libc_init_array>:
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	2600      	movs	r6, #0
 8001710:	4d0c      	ldr	r5, [pc, #48]	; (8001744 <__libc_init_array+0x38>)
 8001712:	4c0d      	ldr	r4, [pc, #52]	; (8001748 <__libc_init_array+0x3c>)
 8001714:	1b64      	subs	r4, r4, r5
 8001716:	10a4      	asrs	r4, r4, #2
 8001718:	42a6      	cmp	r6, r4
 800171a:	d109      	bne.n	8001730 <__libc_init_array+0x24>
 800171c:	f000 ffb6 	bl	800268c <_init>
 8001720:	2600      	movs	r6, #0
 8001722:	4d0a      	ldr	r5, [pc, #40]	; (800174c <__libc_init_array+0x40>)
 8001724:	4c0a      	ldr	r4, [pc, #40]	; (8001750 <__libc_init_array+0x44>)
 8001726:	1b64      	subs	r4, r4, r5
 8001728:	10a4      	asrs	r4, r4, #2
 800172a:	42a6      	cmp	r6, r4
 800172c:	d105      	bne.n	800173a <__libc_init_array+0x2e>
 800172e:	bd70      	pop	{r4, r5, r6, pc}
 8001730:	f855 3b04 	ldr.w	r3, [r5], #4
 8001734:	4798      	blx	r3
 8001736:	3601      	adds	r6, #1
 8001738:	e7ee      	b.n	8001718 <__libc_init_array+0xc>
 800173a:	f855 3b04 	ldr.w	r3, [r5], #4
 800173e:	4798      	blx	r3
 8001740:	3601      	adds	r6, #1
 8001742:	e7f2      	b.n	800172a <__libc_init_array+0x1e>
 8001744:	08002778 	.word	0x08002778
 8001748:	08002778 	.word	0x08002778
 800174c:	08002778 	.word	0x08002778
 8001750:	0800277c 	.word	0x0800277c

08001754 <memset>:
 8001754:	4603      	mov	r3, r0
 8001756:	4402      	add	r2, r0
 8001758:	4293      	cmp	r3, r2
 800175a:	d100      	bne.n	800175e <memset+0xa>
 800175c:	4770      	bx	lr
 800175e:	f803 1b01 	strb.w	r1, [r3], #1
 8001762:	e7f9      	b.n	8001758 <memset+0x4>

08001764 <iprintf>:
 8001764:	b40f      	push	{r0, r1, r2, r3}
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <iprintf+0x2c>)
 8001768:	b513      	push	{r0, r1, r4, lr}
 800176a:	681c      	ldr	r4, [r3, #0]
 800176c:	b124      	cbz	r4, 8001778 <iprintf+0x14>
 800176e:	69a3      	ldr	r3, [r4, #24]
 8001770:	b913      	cbnz	r3, 8001778 <iprintf+0x14>
 8001772:	4620      	mov	r0, r4
 8001774:	f000 f866 	bl	8001844 <__sinit>
 8001778:	ab05      	add	r3, sp, #20
 800177a:	4620      	mov	r0, r4
 800177c:	9a04      	ldr	r2, [sp, #16]
 800177e:	68a1      	ldr	r1, [r4, #8]
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	f000 f9bb 	bl	8001afc <_vfiprintf_r>
 8001786:	b002      	add	sp, #8
 8001788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800178c:	b004      	add	sp, #16
 800178e:	4770      	bx	lr
 8001790:	2000000c 	.word	0x2000000c

08001794 <std>:
 8001794:	2300      	movs	r3, #0
 8001796:	b510      	push	{r4, lr}
 8001798:	4604      	mov	r4, r0
 800179a:	e9c0 3300 	strd	r3, r3, [r0]
 800179e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017a2:	6083      	str	r3, [r0, #8]
 80017a4:	8181      	strh	r1, [r0, #12]
 80017a6:	6643      	str	r3, [r0, #100]	; 0x64
 80017a8:	81c2      	strh	r2, [r0, #14]
 80017aa:	6183      	str	r3, [r0, #24]
 80017ac:	4619      	mov	r1, r3
 80017ae:	2208      	movs	r2, #8
 80017b0:	305c      	adds	r0, #92	; 0x5c
 80017b2:	f7ff ffcf 	bl	8001754 <memset>
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <std+0x38>)
 80017b8:	6224      	str	r4, [r4, #32]
 80017ba:	6263      	str	r3, [r4, #36]	; 0x24
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <std+0x3c>)
 80017be:	62a3      	str	r3, [r4, #40]	; 0x28
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <std+0x40>)
 80017c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <std+0x44>)
 80017c6:	6323      	str	r3, [r4, #48]	; 0x30
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	bf00      	nop
 80017cc:	080020a9 	.word	0x080020a9
 80017d0:	080020cb 	.word	0x080020cb
 80017d4:	08002103 	.word	0x08002103
 80017d8:	08002127 	.word	0x08002127

080017dc <_cleanup_r>:
 80017dc:	4901      	ldr	r1, [pc, #4]	; (80017e4 <_cleanup_r+0x8>)
 80017de:	f000 b8af 	b.w	8001940 <_fwalk_reent>
 80017e2:	bf00      	nop
 80017e4:	080023f9 	.word	0x080023f9

080017e8 <__sfmoreglue>:
 80017e8:	2268      	movs	r2, #104	; 0x68
 80017ea:	b570      	push	{r4, r5, r6, lr}
 80017ec:	1e4d      	subs	r5, r1, #1
 80017ee:	4355      	muls	r5, r2
 80017f0:	460e      	mov	r6, r1
 80017f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80017f6:	f000 f8e5 	bl	80019c4 <_malloc_r>
 80017fa:	4604      	mov	r4, r0
 80017fc:	b140      	cbz	r0, 8001810 <__sfmoreglue+0x28>
 80017fe:	2100      	movs	r1, #0
 8001800:	e9c0 1600 	strd	r1, r6, [r0]
 8001804:	300c      	adds	r0, #12
 8001806:	60a0      	str	r0, [r4, #8]
 8001808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800180c:	f7ff ffa2 	bl	8001754 <memset>
 8001810:	4620      	mov	r0, r4
 8001812:	bd70      	pop	{r4, r5, r6, pc}

08001814 <__sfp_lock_acquire>:
 8001814:	4801      	ldr	r0, [pc, #4]	; (800181c <__sfp_lock_acquire+0x8>)
 8001816:	f000 b8b3 	b.w	8001980 <__retarget_lock_acquire_recursive>
 800181a:	bf00      	nop
 800181c:	200000d9 	.word	0x200000d9

08001820 <__sfp_lock_release>:
 8001820:	4801      	ldr	r0, [pc, #4]	; (8001828 <__sfp_lock_release+0x8>)
 8001822:	f000 b8ae 	b.w	8001982 <__retarget_lock_release_recursive>
 8001826:	bf00      	nop
 8001828:	200000d9 	.word	0x200000d9

0800182c <__sinit_lock_acquire>:
 800182c:	4801      	ldr	r0, [pc, #4]	; (8001834 <__sinit_lock_acquire+0x8>)
 800182e:	f000 b8a7 	b.w	8001980 <__retarget_lock_acquire_recursive>
 8001832:	bf00      	nop
 8001834:	200000da 	.word	0x200000da

08001838 <__sinit_lock_release>:
 8001838:	4801      	ldr	r0, [pc, #4]	; (8001840 <__sinit_lock_release+0x8>)
 800183a:	f000 b8a2 	b.w	8001982 <__retarget_lock_release_recursive>
 800183e:	bf00      	nop
 8001840:	200000da 	.word	0x200000da

08001844 <__sinit>:
 8001844:	b510      	push	{r4, lr}
 8001846:	4604      	mov	r4, r0
 8001848:	f7ff fff0 	bl	800182c <__sinit_lock_acquire>
 800184c:	69a3      	ldr	r3, [r4, #24]
 800184e:	b11b      	cbz	r3, 8001858 <__sinit+0x14>
 8001850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001854:	f7ff bff0 	b.w	8001838 <__sinit_lock_release>
 8001858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800185c:	6523      	str	r3, [r4, #80]	; 0x50
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <__sinit+0x68>)
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <__sinit+0x6c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	62a2      	str	r2, [r4, #40]	; 0x28
 8001866:	42a3      	cmp	r3, r4
 8001868:	bf08      	it	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	4620      	mov	r0, r4
 800186e:	bf08      	it	eq
 8001870:	61a3      	streq	r3, [r4, #24]
 8001872:	f000 f81f 	bl	80018b4 <__sfp>
 8001876:	6060      	str	r0, [r4, #4]
 8001878:	4620      	mov	r0, r4
 800187a:	f000 f81b 	bl	80018b4 <__sfp>
 800187e:	60a0      	str	r0, [r4, #8]
 8001880:	4620      	mov	r0, r4
 8001882:	f000 f817 	bl	80018b4 <__sfp>
 8001886:	2200      	movs	r2, #0
 8001888:	2104      	movs	r1, #4
 800188a:	60e0      	str	r0, [r4, #12]
 800188c:	6860      	ldr	r0, [r4, #4]
 800188e:	f7ff ff81 	bl	8001794 <std>
 8001892:	2201      	movs	r2, #1
 8001894:	2109      	movs	r1, #9
 8001896:	68a0      	ldr	r0, [r4, #8]
 8001898:	f7ff ff7c 	bl	8001794 <std>
 800189c:	2202      	movs	r2, #2
 800189e:	2112      	movs	r1, #18
 80018a0:	68e0      	ldr	r0, [r4, #12]
 80018a2:	f7ff ff77 	bl	8001794 <std>
 80018a6:	2301      	movs	r3, #1
 80018a8:	61a3      	str	r3, [r4, #24]
 80018aa:	e7d1      	b.n	8001850 <__sinit+0xc>
 80018ac:	080026e0 	.word	0x080026e0
 80018b0:	080017dd 	.word	0x080017dd

080018b4 <__sfp>:
 80018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b6:	4607      	mov	r7, r0
 80018b8:	f7ff ffac 	bl	8001814 <__sfp_lock_acquire>
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <__sfp+0x84>)
 80018be:	681e      	ldr	r6, [r3, #0]
 80018c0:	69b3      	ldr	r3, [r6, #24]
 80018c2:	b913      	cbnz	r3, 80018ca <__sfp+0x16>
 80018c4:	4630      	mov	r0, r6
 80018c6:	f7ff ffbd 	bl	8001844 <__sinit>
 80018ca:	3648      	adds	r6, #72	; 0x48
 80018cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	d503      	bpl.n	80018dc <__sfp+0x28>
 80018d4:	6833      	ldr	r3, [r6, #0]
 80018d6:	b30b      	cbz	r3, 800191c <__sfp+0x68>
 80018d8:	6836      	ldr	r6, [r6, #0]
 80018da:	e7f7      	b.n	80018cc <__sfp+0x18>
 80018dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018e0:	b9d5      	cbnz	r5, 8001918 <__sfp+0x64>
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <__sfp+0x88>)
 80018e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80018e8:	60e3      	str	r3, [r4, #12]
 80018ea:	6665      	str	r5, [r4, #100]	; 0x64
 80018ec:	f000 f847 	bl	800197e <__retarget_lock_init_recursive>
 80018f0:	f7ff ff96 	bl	8001820 <__sfp_lock_release>
 80018f4:	2208      	movs	r2, #8
 80018f6:	4629      	mov	r1, r5
 80018f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80018fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001900:	6025      	str	r5, [r4, #0]
 8001902:	61a5      	str	r5, [r4, #24]
 8001904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001908:	f7ff ff24 	bl	8001754 <memset>
 800190c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001914:	4620      	mov	r0, r4
 8001916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001918:	3468      	adds	r4, #104	; 0x68
 800191a:	e7d9      	b.n	80018d0 <__sfp+0x1c>
 800191c:	2104      	movs	r1, #4
 800191e:	4638      	mov	r0, r7
 8001920:	f7ff ff62 	bl	80017e8 <__sfmoreglue>
 8001924:	4604      	mov	r4, r0
 8001926:	6030      	str	r0, [r6, #0]
 8001928:	2800      	cmp	r0, #0
 800192a:	d1d5      	bne.n	80018d8 <__sfp+0x24>
 800192c:	f7ff ff78 	bl	8001820 <__sfp_lock_release>
 8001930:	230c      	movs	r3, #12
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	e7ee      	b.n	8001914 <__sfp+0x60>
 8001936:	bf00      	nop
 8001938:	080026e0 	.word	0x080026e0
 800193c:	ffff0001 	.word	0xffff0001

08001940 <_fwalk_reent>:
 8001940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001944:	4606      	mov	r6, r0
 8001946:	4688      	mov	r8, r1
 8001948:	2700      	movs	r7, #0
 800194a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800194e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001952:	f1b9 0901 	subs.w	r9, r9, #1
 8001956:	d505      	bpl.n	8001964 <_fwalk_reent+0x24>
 8001958:	6824      	ldr	r4, [r4, #0]
 800195a:	2c00      	cmp	r4, #0
 800195c:	d1f7      	bne.n	800194e <_fwalk_reent+0xe>
 800195e:	4638      	mov	r0, r7
 8001960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001964:	89ab      	ldrh	r3, [r5, #12]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d907      	bls.n	800197a <_fwalk_reent+0x3a>
 800196a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800196e:	3301      	adds	r3, #1
 8001970:	d003      	beq.n	800197a <_fwalk_reent+0x3a>
 8001972:	4629      	mov	r1, r5
 8001974:	4630      	mov	r0, r6
 8001976:	47c0      	blx	r8
 8001978:	4307      	orrs	r7, r0
 800197a:	3568      	adds	r5, #104	; 0x68
 800197c:	e7e9      	b.n	8001952 <_fwalk_reent+0x12>

0800197e <__retarget_lock_init_recursive>:
 800197e:	4770      	bx	lr

08001980 <__retarget_lock_acquire_recursive>:
 8001980:	4770      	bx	lr

08001982 <__retarget_lock_release_recursive>:
 8001982:	4770      	bx	lr

08001984 <sbrk_aligned>:
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	4e0e      	ldr	r6, [pc, #56]	; (80019c0 <sbrk_aligned+0x3c>)
 8001988:	460c      	mov	r4, r1
 800198a:	6831      	ldr	r1, [r6, #0]
 800198c:	4605      	mov	r5, r0
 800198e:	b911      	cbnz	r1, 8001996 <sbrk_aligned+0x12>
 8001990:	f000 fb7a 	bl	8002088 <_sbrk_r>
 8001994:	6030      	str	r0, [r6, #0]
 8001996:	4621      	mov	r1, r4
 8001998:	4628      	mov	r0, r5
 800199a:	f000 fb75 	bl	8002088 <_sbrk_r>
 800199e:	1c43      	adds	r3, r0, #1
 80019a0:	d00a      	beq.n	80019b8 <sbrk_aligned+0x34>
 80019a2:	1cc4      	adds	r4, r0, #3
 80019a4:	f024 0403 	bic.w	r4, r4, #3
 80019a8:	42a0      	cmp	r0, r4
 80019aa:	d007      	beq.n	80019bc <sbrk_aligned+0x38>
 80019ac:	1a21      	subs	r1, r4, r0
 80019ae:	4628      	mov	r0, r5
 80019b0:	f000 fb6a 	bl	8002088 <_sbrk_r>
 80019b4:	3001      	adds	r0, #1
 80019b6:	d101      	bne.n	80019bc <sbrk_aligned+0x38>
 80019b8:	f04f 34ff 	mov.w	r4, #4294967295
 80019bc:	4620      	mov	r0, r4
 80019be:	bd70      	pop	{r4, r5, r6, pc}
 80019c0:	200000e0 	.word	0x200000e0

080019c4 <_malloc_r>:
 80019c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019c8:	1ccd      	adds	r5, r1, #3
 80019ca:	f025 0503 	bic.w	r5, r5, #3
 80019ce:	3508      	adds	r5, #8
 80019d0:	2d0c      	cmp	r5, #12
 80019d2:	bf38      	it	cc
 80019d4:	250c      	movcc	r5, #12
 80019d6:	2d00      	cmp	r5, #0
 80019d8:	4607      	mov	r7, r0
 80019da:	db01      	blt.n	80019e0 <_malloc_r+0x1c>
 80019dc:	42a9      	cmp	r1, r5
 80019de:	d905      	bls.n	80019ec <_malloc_r+0x28>
 80019e0:	230c      	movs	r3, #12
 80019e2:	2600      	movs	r6, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4630      	mov	r0, r6
 80019e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ec:	4e2e      	ldr	r6, [pc, #184]	; (8001aa8 <_malloc_r+0xe4>)
 80019ee:	f000 fdc5 	bl	800257c <__malloc_lock>
 80019f2:	6833      	ldr	r3, [r6, #0]
 80019f4:	461c      	mov	r4, r3
 80019f6:	bb34      	cbnz	r4, 8001a46 <_malloc_r+0x82>
 80019f8:	4629      	mov	r1, r5
 80019fa:	4638      	mov	r0, r7
 80019fc:	f7ff ffc2 	bl	8001984 <sbrk_aligned>
 8001a00:	1c43      	adds	r3, r0, #1
 8001a02:	4604      	mov	r4, r0
 8001a04:	d14d      	bne.n	8001aa2 <_malloc_r+0xde>
 8001a06:	6834      	ldr	r4, [r6, #0]
 8001a08:	4626      	mov	r6, r4
 8001a0a:	2e00      	cmp	r6, #0
 8001a0c:	d140      	bne.n	8001a90 <_malloc_r+0xcc>
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	4631      	mov	r1, r6
 8001a12:	4638      	mov	r0, r7
 8001a14:	eb04 0803 	add.w	r8, r4, r3
 8001a18:	f000 fb36 	bl	8002088 <_sbrk_r>
 8001a1c:	4580      	cmp	r8, r0
 8001a1e:	d13a      	bne.n	8001a96 <_malloc_r+0xd2>
 8001a20:	6821      	ldr	r1, [r4, #0]
 8001a22:	3503      	adds	r5, #3
 8001a24:	1a6d      	subs	r5, r5, r1
 8001a26:	f025 0503 	bic.w	r5, r5, #3
 8001a2a:	3508      	adds	r5, #8
 8001a2c:	2d0c      	cmp	r5, #12
 8001a2e:	bf38      	it	cc
 8001a30:	250c      	movcc	r5, #12
 8001a32:	4638      	mov	r0, r7
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7ff ffa5 	bl	8001984 <sbrk_aligned>
 8001a3a:	3001      	adds	r0, #1
 8001a3c:	d02b      	beq.n	8001a96 <_malloc_r+0xd2>
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	442b      	add	r3, r5
 8001a42:	6023      	str	r3, [r4, #0]
 8001a44:	e00e      	b.n	8001a64 <_malloc_r+0xa0>
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	1b52      	subs	r2, r2, r5
 8001a4a:	d41e      	bmi.n	8001a8a <_malloc_r+0xc6>
 8001a4c:	2a0b      	cmp	r2, #11
 8001a4e:	d916      	bls.n	8001a7e <_malloc_r+0xba>
 8001a50:	1961      	adds	r1, r4, r5
 8001a52:	42a3      	cmp	r3, r4
 8001a54:	6025      	str	r5, [r4, #0]
 8001a56:	bf18      	it	ne
 8001a58:	6059      	strne	r1, [r3, #4]
 8001a5a:	6863      	ldr	r3, [r4, #4]
 8001a5c:	bf08      	it	eq
 8001a5e:	6031      	streq	r1, [r6, #0]
 8001a60:	5162      	str	r2, [r4, r5]
 8001a62:	604b      	str	r3, [r1, #4]
 8001a64:	4638      	mov	r0, r7
 8001a66:	f104 060b 	add.w	r6, r4, #11
 8001a6a:	f000 fd8d 	bl	8002588 <__malloc_unlock>
 8001a6e:	f026 0607 	bic.w	r6, r6, #7
 8001a72:	1d23      	adds	r3, r4, #4
 8001a74:	1af2      	subs	r2, r6, r3
 8001a76:	d0b6      	beq.n	80019e6 <_malloc_r+0x22>
 8001a78:	1b9b      	subs	r3, r3, r6
 8001a7a:	50a3      	str	r3, [r4, r2]
 8001a7c:	e7b3      	b.n	80019e6 <_malloc_r+0x22>
 8001a7e:	6862      	ldr	r2, [r4, #4]
 8001a80:	42a3      	cmp	r3, r4
 8001a82:	bf0c      	ite	eq
 8001a84:	6032      	streq	r2, [r6, #0]
 8001a86:	605a      	strne	r2, [r3, #4]
 8001a88:	e7ec      	b.n	8001a64 <_malloc_r+0xa0>
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	6864      	ldr	r4, [r4, #4]
 8001a8e:	e7b2      	b.n	80019f6 <_malloc_r+0x32>
 8001a90:	4634      	mov	r4, r6
 8001a92:	6876      	ldr	r6, [r6, #4]
 8001a94:	e7b9      	b.n	8001a0a <_malloc_r+0x46>
 8001a96:	230c      	movs	r3, #12
 8001a98:	4638      	mov	r0, r7
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	f000 fd74 	bl	8002588 <__malloc_unlock>
 8001aa0:	e7a1      	b.n	80019e6 <_malloc_r+0x22>
 8001aa2:	6025      	str	r5, [r4, #0]
 8001aa4:	e7de      	b.n	8001a64 <_malloc_r+0xa0>
 8001aa6:	bf00      	nop
 8001aa8:	200000dc 	.word	0x200000dc

08001aac <__sfputc_r>:
 8001aac:	6893      	ldr	r3, [r2, #8]
 8001aae:	b410      	push	{r4}
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	6093      	str	r3, [r2, #8]
 8001ab6:	da07      	bge.n	8001ac8 <__sfputc_r+0x1c>
 8001ab8:	6994      	ldr	r4, [r2, #24]
 8001aba:	42a3      	cmp	r3, r4
 8001abc:	db01      	blt.n	8001ac2 <__sfputc_r+0x16>
 8001abe:	290a      	cmp	r1, #10
 8001ac0:	d102      	bne.n	8001ac8 <__sfputc_r+0x1c>
 8001ac2:	bc10      	pop	{r4}
 8001ac4:	f000 bb34 	b.w	8002130 <__swbuf_r>
 8001ac8:	6813      	ldr	r3, [r2, #0]
 8001aca:	1c58      	adds	r0, r3, #1
 8001acc:	6010      	str	r0, [r2, #0]
 8001ace:	7019      	strb	r1, [r3, #0]
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	bc10      	pop	{r4}
 8001ad4:	4770      	bx	lr

08001ad6 <__sfputs_r>:
 8001ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad8:	4606      	mov	r6, r0
 8001ada:	460f      	mov	r7, r1
 8001adc:	4614      	mov	r4, r2
 8001ade:	18d5      	adds	r5, r2, r3
 8001ae0:	42ac      	cmp	r4, r5
 8001ae2:	d101      	bne.n	8001ae8 <__sfputs_r+0x12>
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e007      	b.n	8001af8 <__sfputs_r+0x22>
 8001ae8:	463a      	mov	r2, r7
 8001aea:	4630      	mov	r0, r6
 8001aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001af0:	f7ff ffdc 	bl	8001aac <__sfputc_r>
 8001af4:	1c43      	adds	r3, r0, #1
 8001af6:	d1f3      	bne.n	8001ae0 <__sfputs_r+0xa>
 8001af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001afc <_vfiprintf_r>:
 8001afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b00:	460d      	mov	r5, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	4698      	mov	r8, r3
 8001b06:	4606      	mov	r6, r0
 8001b08:	b09d      	sub	sp, #116	; 0x74
 8001b0a:	b118      	cbz	r0, 8001b14 <_vfiprintf_r+0x18>
 8001b0c:	6983      	ldr	r3, [r0, #24]
 8001b0e:	b90b      	cbnz	r3, 8001b14 <_vfiprintf_r+0x18>
 8001b10:	f7ff fe98 	bl	8001844 <__sinit>
 8001b14:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <_vfiprintf_r+0x240>)
 8001b16:	429d      	cmp	r5, r3
 8001b18:	d11b      	bne.n	8001b52 <_vfiprintf_r+0x56>
 8001b1a:	6875      	ldr	r5, [r6, #4]
 8001b1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b1e:	07d9      	lsls	r1, r3, #31
 8001b20:	d405      	bmi.n	8001b2e <_vfiprintf_r+0x32>
 8001b22:	89ab      	ldrh	r3, [r5, #12]
 8001b24:	059a      	lsls	r2, r3, #22
 8001b26:	d402      	bmi.n	8001b2e <_vfiprintf_r+0x32>
 8001b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b2a:	f7ff ff29 	bl	8001980 <__retarget_lock_acquire_recursive>
 8001b2e:	89ab      	ldrh	r3, [r5, #12]
 8001b30:	071b      	lsls	r3, r3, #28
 8001b32:	d501      	bpl.n	8001b38 <_vfiprintf_r+0x3c>
 8001b34:	692b      	ldr	r3, [r5, #16]
 8001b36:	b9eb      	cbnz	r3, 8001b74 <_vfiprintf_r+0x78>
 8001b38:	4629      	mov	r1, r5
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	f000 fb5c 	bl	80021f8 <__swsetup_r>
 8001b40:	b1c0      	cbz	r0, 8001b74 <_vfiprintf_r+0x78>
 8001b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b44:	07dc      	lsls	r4, r3, #31
 8001b46:	d50e      	bpl.n	8001b66 <_vfiprintf_r+0x6a>
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	b01d      	add	sp, #116	; 0x74
 8001b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b52:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <_vfiprintf_r+0x244>)
 8001b54:	429d      	cmp	r5, r3
 8001b56:	d101      	bne.n	8001b5c <_vfiprintf_r+0x60>
 8001b58:	68b5      	ldr	r5, [r6, #8]
 8001b5a:	e7df      	b.n	8001b1c <_vfiprintf_r+0x20>
 8001b5c:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <_vfiprintf_r+0x248>)
 8001b5e:	429d      	cmp	r5, r3
 8001b60:	bf08      	it	eq
 8001b62:	68f5      	ldreq	r5, [r6, #12]
 8001b64:	e7da      	b.n	8001b1c <_vfiprintf_r+0x20>
 8001b66:	89ab      	ldrh	r3, [r5, #12]
 8001b68:	0598      	lsls	r0, r3, #22
 8001b6a:	d4ed      	bmi.n	8001b48 <_vfiprintf_r+0x4c>
 8001b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b6e:	f7ff ff08 	bl	8001982 <__retarget_lock_release_recursive>
 8001b72:	e7e9      	b.n	8001b48 <_vfiprintf_r+0x4c>
 8001b74:	2300      	movs	r3, #0
 8001b76:	9309      	str	r3, [sp, #36]	; 0x24
 8001b78:	2320      	movs	r3, #32
 8001b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b7e:	2330      	movs	r3, #48	; 0x30
 8001b80:	f04f 0901 	mov.w	r9, #1
 8001b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001d48 <_vfiprintf_r+0x24c>
 8001b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b90:	4623      	mov	r3, r4
 8001b92:	469a      	mov	sl, r3
 8001b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b98:	b10a      	cbz	r2, 8001b9e <_vfiprintf_r+0xa2>
 8001b9a:	2a25      	cmp	r2, #37	; 0x25
 8001b9c:	d1f9      	bne.n	8001b92 <_vfiprintf_r+0x96>
 8001b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8001ba2:	d00b      	beq.n	8001bbc <_vfiprintf_r+0xc0>
 8001ba4:	465b      	mov	r3, fp
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7ff ff93 	bl	8001ad6 <__sfputs_r>
 8001bb0:	3001      	adds	r0, #1
 8001bb2:	f000 80aa 	beq.w	8001d0a <_vfiprintf_r+0x20e>
 8001bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bb8:	445a      	add	r2, fp
 8001bba:	9209      	str	r2, [sp, #36]	; 0x24
 8001bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a2 	beq.w	8001d0a <_vfiprintf_r+0x20e>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bd0:	f10a 0a01 	add.w	sl, sl, #1
 8001bd4:	9304      	str	r3, [sp, #16]
 8001bd6:	9307      	str	r3, [sp, #28]
 8001bd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bdc:	931a      	str	r3, [sp, #104]	; 0x68
 8001bde:	4654      	mov	r4, sl
 8001be0:	2205      	movs	r2, #5
 8001be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001be6:	4858      	ldr	r0, [pc, #352]	; (8001d48 <_vfiprintf_r+0x24c>)
 8001be8:	f000 fcba 	bl	8002560 <memchr>
 8001bec:	9a04      	ldr	r2, [sp, #16]
 8001bee:	b9d8      	cbnz	r0, 8001c28 <_vfiprintf_r+0x12c>
 8001bf0:	06d1      	lsls	r1, r2, #27
 8001bf2:	bf44      	itt	mi
 8001bf4:	2320      	movmi	r3, #32
 8001bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bfa:	0713      	lsls	r3, r2, #28
 8001bfc:	bf44      	itt	mi
 8001bfe:	232b      	movmi	r3, #43	; 0x2b
 8001c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c04:	f89a 3000 	ldrb.w	r3, [sl]
 8001c08:	2b2a      	cmp	r3, #42	; 0x2a
 8001c0a:	d015      	beq.n	8001c38 <_vfiprintf_r+0x13c>
 8001c0c:	4654      	mov	r4, sl
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f04f 0c0a 	mov.w	ip, #10
 8001c14:	9a07      	ldr	r2, [sp, #28]
 8001c16:	4621      	mov	r1, r4
 8001c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c1c:	3b30      	subs	r3, #48	; 0x30
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	d94e      	bls.n	8001cc0 <_vfiprintf_r+0x1c4>
 8001c22:	b1b0      	cbz	r0, 8001c52 <_vfiprintf_r+0x156>
 8001c24:	9207      	str	r2, [sp, #28]
 8001c26:	e014      	b.n	8001c52 <_vfiprintf_r+0x156>
 8001c28:	eba0 0308 	sub.w	r3, r0, r8
 8001c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	46a2      	mov	sl, r4
 8001c34:	9304      	str	r3, [sp, #16]
 8001c36:	e7d2      	b.n	8001bde <_vfiprintf_r+0xe2>
 8001c38:	9b03      	ldr	r3, [sp, #12]
 8001c3a:	1d19      	adds	r1, r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	9103      	str	r1, [sp, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bfbb      	ittet	lt
 8001c44:	425b      	neglt	r3, r3
 8001c46:	f042 0202 	orrlt.w	r2, r2, #2
 8001c4a:	9307      	strge	r3, [sp, #28]
 8001c4c:	9307      	strlt	r3, [sp, #28]
 8001c4e:	bfb8      	it	lt
 8001c50:	9204      	strlt	r2, [sp, #16]
 8001c52:	7823      	ldrb	r3, [r4, #0]
 8001c54:	2b2e      	cmp	r3, #46	; 0x2e
 8001c56:	d10c      	bne.n	8001c72 <_vfiprintf_r+0x176>
 8001c58:	7863      	ldrb	r3, [r4, #1]
 8001c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c5c:	d135      	bne.n	8001cca <_vfiprintf_r+0x1ce>
 8001c5e:	9b03      	ldr	r3, [sp, #12]
 8001c60:	3402      	adds	r4, #2
 8001c62:	1d1a      	adds	r2, r3, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	9203      	str	r2, [sp, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bfb8      	it	lt
 8001c6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c70:	9305      	str	r3, [sp, #20]
 8001c72:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001d4c <_vfiprintf_r+0x250>
 8001c76:	2203      	movs	r2, #3
 8001c78:	4650      	mov	r0, sl
 8001c7a:	7821      	ldrb	r1, [r4, #0]
 8001c7c:	f000 fc70 	bl	8002560 <memchr>
 8001c80:	b140      	cbz	r0, 8001c94 <_vfiprintf_r+0x198>
 8001c82:	2340      	movs	r3, #64	; 0x40
 8001c84:	eba0 000a 	sub.w	r0, r0, sl
 8001c88:	fa03 f000 	lsl.w	r0, r3, r0
 8001c8c:	9b04      	ldr	r3, [sp, #16]
 8001c8e:	3401      	adds	r4, #1
 8001c90:	4303      	orrs	r3, r0
 8001c92:	9304      	str	r3, [sp, #16]
 8001c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c98:	2206      	movs	r2, #6
 8001c9a:	482d      	ldr	r0, [pc, #180]	; (8001d50 <_vfiprintf_r+0x254>)
 8001c9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ca0:	f000 fc5e 	bl	8002560 <memchr>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d03f      	beq.n	8001d28 <_vfiprintf_r+0x22c>
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <_vfiprintf_r+0x258>)
 8001caa:	bb1b      	cbnz	r3, 8001cf4 <_vfiprintf_r+0x1f8>
 8001cac:	9b03      	ldr	r3, [sp, #12]
 8001cae:	3307      	adds	r3, #7
 8001cb0:	f023 0307 	bic.w	r3, r3, #7
 8001cb4:	3308      	adds	r3, #8
 8001cb6:	9303      	str	r3, [sp, #12]
 8001cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cba:	443b      	add	r3, r7
 8001cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8001cbe:	e767      	b.n	8001b90 <_vfiprintf_r+0x94>
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cc8:	e7a5      	b.n	8001c16 <_vfiprintf_r+0x11a>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f04f 0c0a 	mov.w	ip, #10
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	3401      	adds	r4, #1
 8001cd4:	9305      	str	r3, [sp, #20]
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cdc:	3a30      	subs	r2, #48	; 0x30
 8001cde:	2a09      	cmp	r2, #9
 8001ce0:	d903      	bls.n	8001cea <_vfiprintf_r+0x1ee>
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0c5      	beq.n	8001c72 <_vfiprintf_r+0x176>
 8001ce6:	9105      	str	r1, [sp, #20]
 8001ce8:	e7c3      	b.n	8001c72 <_vfiprintf_r+0x176>
 8001cea:	4604      	mov	r4, r0
 8001cec:	2301      	movs	r3, #1
 8001cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cf2:	e7f0      	b.n	8001cd6 <_vfiprintf_r+0x1da>
 8001cf4:	ab03      	add	r3, sp, #12
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	462a      	mov	r2, r5
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <_vfiprintf_r+0x25c>)
 8001cfe:	a904      	add	r1, sp, #16
 8001d00:	f3af 8000 	nop.w
 8001d04:	4607      	mov	r7, r0
 8001d06:	1c78      	adds	r0, r7, #1
 8001d08:	d1d6      	bne.n	8001cb8 <_vfiprintf_r+0x1bc>
 8001d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d0c:	07d9      	lsls	r1, r3, #31
 8001d0e:	d405      	bmi.n	8001d1c <_vfiprintf_r+0x220>
 8001d10:	89ab      	ldrh	r3, [r5, #12]
 8001d12:	059a      	lsls	r2, r3, #22
 8001d14:	d402      	bmi.n	8001d1c <_vfiprintf_r+0x220>
 8001d16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d18:	f7ff fe33 	bl	8001982 <__retarget_lock_release_recursive>
 8001d1c:	89ab      	ldrh	r3, [r5, #12]
 8001d1e:	065b      	lsls	r3, r3, #25
 8001d20:	f53f af12 	bmi.w	8001b48 <_vfiprintf_r+0x4c>
 8001d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d26:	e711      	b.n	8001b4c <_vfiprintf_r+0x50>
 8001d28:	ab03      	add	r3, sp, #12
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	4630      	mov	r0, r6
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <_vfiprintf_r+0x25c>)
 8001d32:	a904      	add	r1, sp, #16
 8001d34:	f000 f882 	bl	8001e3c <_printf_i>
 8001d38:	e7e4      	b.n	8001d04 <_vfiprintf_r+0x208>
 8001d3a:	bf00      	nop
 8001d3c:	08002704 	.word	0x08002704
 8001d40:	08002724 	.word	0x08002724
 8001d44:	080026e4 	.word	0x080026e4
 8001d48:	08002744 	.word	0x08002744
 8001d4c:	0800274a 	.word	0x0800274a
 8001d50:	0800274e 	.word	0x0800274e
 8001d54:	00000000 	.word	0x00000000
 8001d58:	08001ad7 	.word	0x08001ad7

08001d5c <_printf_common>:
 8001d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d60:	4616      	mov	r6, r2
 8001d62:	4699      	mov	r9, r3
 8001d64:	688a      	ldr	r2, [r1, #8]
 8001d66:	690b      	ldr	r3, [r1, #16]
 8001d68:	4607      	mov	r7, r0
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	bfb8      	it	lt
 8001d6e:	4613      	movlt	r3, r2
 8001d70:	6033      	str	r3, [r6, #0]
 8001d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d76:	460c      	mov	r4, r1
 8001d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d7c:	b10a      	cbz	r2, 8001d82 <_printf_common+0x26>
 8001d7e:	3301      	adds	r3, #1
 8001d80:	6033      	str	r3, [r6, #0]
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	0699      	lsls	r1, r3, #26
 8001d86:	bf42      	ittt	mi
 8001d88:	6833      	ldrmi	r3, [r6, #0]
 8001d8a:	3302      	addmi	r3, #2
 8001d8c:	6033      	strmi	r3, [r6, #0]
 8001d8e:	6825      	ldr	r5, [r4, #0]
 8001d90:	f015 0506 	ands.w	r5, r5, #6
 8001d94:	d106      	bne.n	8001da4 <_printf_common+0x48>
 8001d96:	f104 0a19 	add.w	sl, r4, #25
 8001d9a:	68e3      	ldr	r3, [r4, #12]
 8001d9c:	6832      	ldr	r2, [r6, #0]
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	42ab      	cmp	r3, r5
 8001da2:	dc28      	bgt.n	8001df6 <_printf_common+0x9a>
 8001da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001da8:	1e13      	subs	r3, r2, #0
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	bf18      	it	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	0692      	lsls	r2, r2, #26
 8001db2:	d42d      	bmi.n	8001e10 <_printf_common+0xb4>
 8001db4:	4649      	mov	r1, r9
 8001db6:	4638      	mov	r0, r7
 8001db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dbc:	47c0      	blx	r8
 8001dbe:	3001      	adds	r0, #1
 8001dc0:	d020      	beq.n	8001e04 <_printf_common+0xa8>
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	68e5      	ldr	r5, [r4, #12]
 8001dc6:	f003 0306 	and.w	r3, r3, #6
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf18      	it	ne
 8001dce:	2500      	movne	r5, #0
 8001dd0:	6832      	ldr	r2, [r6, #0]
 8001dd2:	f04f 0600 	mov.w	r6, #0
 8001dd6:	68a3      	ldr	r3, [r4, #8]
 8001dd8:	bf08      	it	eq
 8001dda:	1aad      	subeq	r5, r5, r2
 8001ddc:	6922      	ldr	r2, [r4, #16]
 8001dde:	bf08      	it	eq
 8001de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001de4:	4293      	cmp	r3, r2
 8001de6:	bfc4      	itt	gt
 8001de8:	1a9b      	subgt	r3, r3, r2
 8001dea:	18ed      	addgt	r5, r5, r3
 8001dec:	341a      	adds	r4, #26
 8001dee:	42b5      	cmp	r5, r6
 8001df0:	d11a      	bne.n	8001e28 <_printf_common+0xcc>
 8001df2:	2000      	movs	r0, #0
 8001df4:	e008      	b.n	8001e08 <_printf_common+0xac>
 8001df6:	2301      	movs	r3, #1
 8001df8:	4652      	mov	r2, sl
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	4638      	mov	r0, r7
 8001dfe:	47c0      	blx	r8
 8001e00:	3001      	adds	r0, #1
 8001e02:	d103      	bne.n	8001e0c <_printf_common+0xb0>
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e0c:	3501      	adds	r5, #1
 8001e0e:	e7c4      	b.n	8001d9a <_printf_common+0x3e>
 8001e10:	2030      	movs	r0, #48	; 0x30
 8001e12:	18e1      	adds	r1, r4, r3
 8001e14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e1e:	4422      	add	r2, r4
 8001e20:	3302      	adds	r3, #2
 8001e22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e26:	e7c5      	b.n	8001db4 <_printf_common+0x58>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	4638      	mov	r0, r7
 8001e30:	47c0      	blx	r8
 8001e32:	3001      	adds	r0, #1
 8001e34:	d0e6      	beq.n	8001e04 <_printf_common+0xa8>
 8001e36:	3601      	adds	r6, #1
 8001e38:	e7d9      	b.n	8001dee <_printf_common+0x92>
	...

08001e3c <_printf_i>:
 8001e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e40:	7e0f      	ldrb	r7, [r1, #24]
 8001e42:	4691      	mov	r9, r2
 8001e44:	2f78      	cmp	r7, #120	; 0x78
 8001e46:	4680      	mov	r8, r0
 8001e48:	460c      	mov	r4, r1
 8001e4a:	469a      	mov	sl, r3
 8001e4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e52:	d807      	bhi.n	8001e64 <_printf_i+0x28>
 8001e54:	2f62      	cmp	r7, #98	; 0x62
 8001e56:	d80a      	bhi.n	8001e6e <_printf_i+0x32>
 8001e58:	2f00      	cmp	r7, #0
 8001e5a:	f000 80d9 	beq.w	8002010 <_printf_i+0x1d4>
 8001e5e:	2f58      	cmp	r7, #88	; 0x58
 8001e60:	f000 80a4 	beq.w	8001fac <_printf_i+0x170>
 8001e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e6c:	e03a      	b.n	8001ee4 <_printf_i+0xa8>
 8001e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e72:	2b15      	cmp	r3, #21
 8001e74:	d8f6      	bhi.n	8001e64 <_printf_i+0x28>
 8001e76:	a101      	add	r1, pc, #4	; (adr r1, 8001e7c <_printf_i+0x40>)
 8001e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e7c:	08001ed5 	.word	0x08001ed5
 8001e80:	08001ee9 	.word	0x08001ee9
 8001e84:	08001e65 	.word	0x08001e65
 8001e88:	08001e65 	.word	0x08001e65
 8001e8c:	08001e65 	.word	0x08001e65
 8001e90:	08001e65 	.word	0x08001e65
 8001e94:	08001ee9 	.word	0x08001ee9
 8001e98:	08001e65 	.word	0x08001e65
 8001e9c:	08001e65 	.word	0x08001e65
 8001ea0:	08001e65 	.word	0x08001e65
 8001ea4:	08001e65 	.word	0x08001e65
 8001ea8:	08001ff7 	.word	0x08001ff7
 8001eac:	08001f19 	.word	0x08001f19
 8001eb0:	08001fd9 	.word	0x08001fd9
 8001eb4:	08001e65 	.word	0x08001e65
 8001eb8:	08001e65 	.word	0x08001e65
 8001ebc:	08002019 	.word	0x08002019
 8001ec0:	08001e65 	.word	0x08001e65
 8001ec4:	08001f19 	.word	0x08001f19
 8001ec8:	08001e65 	.word	0x08001e65
 8001ecc:	08001e65 	.word	0x08001e65
 8001ed0:	08001fe1 	.word	0x08001fe1
 8001ed4:	682b      	ldr	r3, [r5, #0]
 8001ed6:	1d1a      	adds	r2, r3, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	602a      	str	r2, [r5, #0]
 8001edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0a4      	b.n	8002032 <_printf_i+0x1f6>
 8001ee8:	6820      	ldr	r0, [r4, #0]
 8001eea:	6829      	ldr	r1, [r5, #0]
 8001eec:	0606      	lsls	r6, r0, #24
 8001eee:	f101 0304 	add.w	r3, r1, #4
 8001ef2:	d50a      	bpl.n	8001f0a <_printf_i+0xce>
 8001ef4:	680e      	ldr	r6, [r1, #0]
 8001ef6:	602b      	str	r3, [r5, #0]
 8001ef8:	2e00      	cmp	r6, #0
 8001efa:	da03      	bge.n	8001f04 <_printf_i+0xc8>
 8001efc:	232d      	movs	r3, #45	; 0x2d
 8001efe:	4276      	negs	r6, r6
 8001f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f04:	230a      	movs	r3, #10
 8001f06:	485e      	ldr	r0, [pc, #376]	; (8002080 <_printf_i+0x244>)
 8001f08:	e019      	b.n	8001f3e <_printf_i+0x102>
 8001f0a:	680e      	ldr	r6, [r1, #0]
 8001f0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f10:	602b      	str	r3, [r5, #0]
 8001f12:	bf18      	it	ne
 8001f14:	b236      	sxthne	r6, r6
 8001f16:	e7ef      	b.n	8001ef8 <_printf_i+0xbc>
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	6820      	ldr	r0, [r4, #0]
 8001f1c:	1d19      	adds	r1, r3, #4
 8001f1e:	6029      	str	r1, [r5, #0]
 8001f20:	0601      	lsls	r1, r0, #24
 8001f22:	d501      	bpl.n	8001f28 <_printf_i+0xec>
 8001f24:	681e      	ldr	r6, [r3, #0]
 8001f26:	e002      	b.n	8001f2e <_printf_i+0xf2>
 8001f28:	0646      	lsls	r6, r0, #25
 8001f2a:	d5fb      	bpl.n	8001f24 <_printf_i+0xe8>
 8001f2c:	881e      	ldrh	r6, [r3, #0]
 8001f2e:	2f6f      	cmp	r7, #111	; 0x6f
 8001f30:	bf0c      	ite	eq
 8001f32:	2308      	moveq	r3, #8
 8001f34:	230a      	movne	r3, #10
 8001f36:	4852      	ldr	r0, [pc, #328]	; (8002080 <_printf_i+0x244>)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f3e:	6865      	ldr	r5, [r4, #4]
 8001f40:	2d00      	cmp	r5, #0
 8001f42:	bfa8      	it	ge
 8001f44:	6821      	ldrge	r1, [r4, #0]
 8001f46:	60a5      	str	r5, [r4, #8]
 8001f48:	bfa4      	itt	ge
 8001f4a:	f021 0104 	bicge.w	r1, r1, #4
 8001f4e:	6021      	strge	r1, [r4, #0]
 8001f50:	b90e      	cbnz	r6, 8001f56 <_printf_i+0x11a>
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	d04d      	beq.n	8001ff2 <_printf_i+0x1b6>
 8001f56:	4615      	mov	r5, r2
 8001f58:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f5c:	fb03 6711 	mls	r7, r3, r1, r6
 8001f60:	5dc7      	ldrb	r7, [r0, r7]
 8001f62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001f66:	4637      	mov	r7, r6
 8001f68:	42bb      	cmp	r3, r7
 8001f6a:	460e      	mov	r6, r1
 8001f6c:	d9f4      	bls.n	8001f58 <_printf_i+0x11c>
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d10b      	bne.n	8001f8a <_printf_i+0x14e>
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	07de      	lsls	r6, r3, #31
 8001f76:	d508      	bpl.n	8001f8a <_printf_i+0x14e>
 8001f78:	6923      	ldr	r3, [r4, #16]
 8001f7a:	6861      	ldr	r1, [r4, #4]
 8001f7c:	4299      	cmp	r1, r3
 8001f7e:	bfde      	ittt	le
 8001f80:	2330      	movle	r3, #48	; 0x30
 8001f82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f8a:	1b52      	subs	r2, r2, r5
 8001f8c:	6122      	str	r2, [r4, #16]
 8001f8e:	464b      	mov	r3, r9
 8001f90:	4621      	mov	r1, r4
 8001f92:	4640      	mov	r0, r8
 8001f94:	f8cd a000 	str.w	sl, [sp]
 8001f98:	aa03      	add	r2, sp, #12
 8001f9a:	f7ff fedf 	bl	8001d5c <_printf_common>
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	d14c      	bne.n	800203c <_printf_i+0x200>
 8001fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa6:	b004      	add	sp, #16
 8001fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fac:	4834      	ldr	r0, [pc, #208]	; (8002080 <_printf_i+0x244>)
 8001fae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001fb2:	6829      	ldr	r1, [r5, #0]
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	f851 6b04 	ldr.w	r6, [r1], #4
 8001fba:	6029      	str	r1, [r5, #0]
 8001fbc:	061d      	lsls	r5, r3, #24
 8001fbe:	d514      	bpl.n	8001fea <_printf_i+0x1ae>
 8001fc0:	07df      	lsls	r7, r3, #31
 8001fc2:	bf44      	itt	mi
 8001fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8001fc8:	6023      	strmi	r3, [r4, #0]
 8001fca:	b91e      	cbnz	r6, 8001fd4 <_printf_i+0x198>
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	f023 0320 	bic.w	r3, r3, #32
 8001fd2:	6023      	str	r3, [r4, #0]
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	e7af      	b.n	8001f38 <_printf_i+0xfc>
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	6023      	str	r3, [r4, #0]
 8001fe0:	2378      	movs	r3, #120	; 0x78
 8001fe2:	4828      	ldr	r0, [pc, #160]	; (8002084 <_printf_i+0x248>)
 8001fe4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fe8:	e7e3      	b.n	8001fb2 <_printf_i+0x176>
 8001fea:	0659      	lsls	r1, r3, #25
 8001fec:	bf48      	it	mi
 8001fee:	b2b6      	uxthmi	r6, r6
 8001ff0:	e7e6      	b.n	8001fc0 <_printf_i+0x184>
 8001ff2:	4615      	mov	r5, r2
 8001ff4:	e7bb      	b.n	8001f6e <_printf_i+0x132>
 8001ff6:	682b      	ldr	r3, [r5, #0]
 8001ff8:	6826      	ldr	r6, [r4, #0]
 8001ffa:	1d18      	adds	r0, r3, #4
 8001ffc:	6961      	ldr	r1, [r4, #20]
 8001ffe:	6028      	str	r0, [r5, #0]
 8002000:	0635      	lsls	r5, r6, #24
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	d501      	bpl.n	800200a <_printf_i+0x1ce>
 8002006:	6019      	str	r1, [r3, #0]
 8002008:	e002      	b.n	8002010 <_printf_i+0x1d4>
 800200a:	0670      	lsls	r0, r6, #25
 800200c:	d5fb      	bpl.n	8002006 <_printf_i+0x1ca>
 800200e:	8019      	strh	r1, [r3, #0]
 8002010:	2300      	movs	r3, #0
 8002012:	4615      	mov	r5, r2
 8002014:	6123      	str	r3, [r4, #16]
 8002016:	e7ba      	b.n	8001f8e <_printf_i+0x152>
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	2100      	movs	r1, #0
 800201c:	1d1a      	adds	r2, r3, #4
 800201e:	602a      	str	r2, [r5, #0]
 8002020:	681d      	ldr	r5, [r3, #0]
 8002022:	6862      	ldr	r2, [r4, #4]
 8002024:	4628      	mov	r0, r5
 8002026:	f000 fa9b 	bl	8002560 <memchr>
 800202a:	b108      	cbz	r0, 8002030 <_printf_i+0x1f4>
 800202c:	1b40      	subs	r0, r0, r5
 800202e:	6060      	str	r0, [r4, #4]
 8002030:	6863      	ldr	r3, [r4, #4]
 8002032:	6123      	str	r3, [r4, #16]
 8002034:	2300      	movs	r3, #0
 8002036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800203a:	e7a8      	b.n	8001f8e <_printf_i+0x152>
 800203c:	462a      	mov	r2, r5
 800203e:	4649      	mov	r1, r9
 8002040:	4640      	mov	r0, r8
 8002042:	6923      	ldr	r3, [r4, #16]
 8002044:	47d0      	blx	sl
 8002046:	3001      	adds	r0, #1
 8002048:	d0ab      	beq.n	8001fa2 <_printf_i+0x166>
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	079b      	lsls	r3, r3, #30
 800204e:	d413      	bmi.n	8002078 <_printf_i+0x23c>
 8002050:	68e0      	ldr	r0, [r4, #12]
 8002052:	9b03      	ldr	r3, [sp, #12]
 8002054:	4298      	cmp	r0, r3
 8002056:	bfb8      	it	lt
 8002058:	4618      	movlt	r0, r3
 800205a:	e7a4      	b.n	8001fa6 <_printf_i+0x16a>
 800205c:	2301      	movs	r3, #1
 800205e:	4632      	mov	r2, r6
 8002060:	4649      	mov	r1, r9
 8002062:	4640      	mov	r0, r8
 8002064:	47d0      	blx	sl
 8002066:	3001      	adds	r0, #1
 8002068:	d09b      	beq.n	8001fa2 <_printf_i+0x166>
 800206a:	3501      	adds	r5, #1
 800206c:	68e3      	ldr	r3, [r4, #12]
 800206e:	9903      	ldr	r1, [sp, #12]
 8002070:	1a5b      	subs	r3, r3, r1
 8002072:	42ab      	cmp	r3, r5
 8002074:	dcf2      	bgt.n	800205c <_printf_i+0x220>
 8002076:	e7eb      	b.n	8002050 <_printf_i+0x214>
 8002078:	2500      	movs	r5, #0
 800207a:	f104 0619 	add.w	r6, r4, #25
 800207e:	e7f5      	b.n	800206c <_printf_i+0x230>
 8002080:	08002755 	.word	0x08002755
 8002084:	08002766 	.word	0x08002766

08002088 <_sbrk_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	2300      	movs	r3, #0
 800208c:	4d05      	ldr	r5, [pc, #20]	; (80020a4 <_sbrk_r+0x1c>)
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	602b      	str	r3, [r5, #0]
 8002094:	f7fe f99c 	bl	80003d0 <_sbrk>
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	d102      	bne.n	80020a2 <_sbrk_r+0x1a>
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	b103      	cbz	r3, 80020a2 <_sbrk_r+0x1a>
 80020a0:	6023      	str	r3, [r4, #0]
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
 80020a4:	200000e4 	.word	0x200000e4

080020a8 <__sread>:
 80020a8:	b510      	push	{r4, lr}
 80020aa:	460c      	mov	r4, r1
 80020ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020b0:	f000 fab8 	bl	8002624 <_read_r>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	bfab      	itete	ge
 80020b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020ba:	89a3      	ldrhlt	r3, [r4, #12]
 80020bc:	181b      	addge	r3, r3, r0
 80020be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020c2:	bfac      	ite	ge
 80020c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80020c6:	81a3      	strhlt	r3, [r4, #12]
 80020c8:	bd10      	pop	{r4, pc}

080020ca <__swrite>:
 80020ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ce:	461f      	mov	r7, r3
 80020d0:	898b      	ldrh	r3, [r1, #12]
 80020d2:	4605      	mov	r5, r0
 80020d4:	05db      	lsls	r3, r3, #23
 80020d6:	460c      	mov	r4, r1
 80020d8:	4616      	mov	r6, r2
 80020da:	d505      	bpl.n	80020e8 <__swrite+0x1e>
 80020dc:	2302      	movs	r3, #2
 80020de:	2200      	movs	r2, #0
 80020e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020e4:	f000 f9c4 	bl	8002470 <_lseek_r>
 80020e8:	89a3      	ldrh	r3, [r4, #12]
 80020ea:	4632      	mov	r2, r6
 80020ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020f0:	81a3      	strh	r3, [r4, #12]
 80020f2:	4628      	mov	r0, r5
 80020f4:	463b      	mov	r3, r7
 80020f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020fe:	f000 b869 	b.w	80021d4 <_write_r>

08002102 <__sseek>:
 8002102:	b510      	push	{r4, lr}
 8002104:	460c      	mov	r4, r1
 8002106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800210a:	f000 f9b1 	bl	8002470 <_lseek_r>
 800210e:	1c43      	adds	r3, r0, #1
 8002110:	89a3      	ldrh	r3, [r4, #12]
 8002112:	bf15      	itete	ne
 8002114:	6560      	strne	r0, [r4, #84]	; 0x54
 8002116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800211a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800211e:	81a3      	strheq	r3, [r4, #12]
 8002120:	bf18      	it	ne
 8002122:	81a3      	strhne	r3, [r4, #12]
 8002124:	bd10      	pop	{r4, pc}

08002126 <__sclose>:
 8002126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800212a:	f000 b8d3 	b.w	80022d4 <_close_r>
	...

08002130 <__swbuf_r>:
 8002130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002132:	460e      	mov	r6, r1
 8002134:	4614      	mov	r4, r2
 8002136:	4605      	mov	r5, r0
 8002138:	b118      	cbz	r0, 8002142 <__swbuf_r+0x12>
 800213a:	6983      	ldr	r3, [r0, #24]
 800213c:	b90b      	cbnz	r3, 8002142 <__swbuf_r+0x12>
 800213e:	f7ff fb81 	bl	8001844 <__sinit>
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <__swbuf_r+0x98>)
 8002144:	429c      	cmp	r4, r3
 8002146:	d12b      	bne.n	80021a0 <__swbuf_r+0x70>
 8002148:	686c      	ldr	r4, [r5, #4]
 800214a:	69a3      	ldr	r3, [r4, #24]
 800214c:	60a3      	str	r3, [r4, #8]
 800214e:	89a3      	ldrh	r3, [r4, #12]
 8002150:	071a      	lsls	r2, r3, #28
 8002152:	d52f      	bpl.n	80021b4 <__swbuf_r+0x84>
 8002154:	6923      	ldr	r3, [r4, #16]
 8002156:	b36b      	cbz	r3, 80021b4 <__swbuf_r+0x84>
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	6820      	ldr	r0, [r4, #0]
 800215c:	b2f6      	uxtb	r6, r6
 800215e:	1ac0      	subs	r0, r0, r3
 8002160:	6963      	ldr	r3, [r4, #20]
 8002162:	4637      	mov	r7, r6
 8002164:	4283      	cmp	r3, r0
 8002166:	dc04      	bgt.n	8002172 <__swbuf_r+0x42>
 8002168:	4621      	mov	r1, r4
 800216a:	4628      	mov	r0, r5
 800216c:	f000 f944 	bl	80023f8 <_fflush_r>
 8002170:	bb30      	cbnz	r0, 80021c0 <__swbuf_r+0x90>
 8002172:	68a3      	ldr	r3, [r4, #8]
 8002174:	3001      	adds	r0, #1
 8002176:	3b01      	subs	r3, #1
 8002178:	60a3      	str	r3, [r4, #8]
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	6022      	str	r2, [r4, #0]
 8002180:	701e      	strb	r6, [r3, #0]
 8002182:	6963      	ldr	r3, [r4, #20]
 8002184:	4283      	cmp	r3, r0
 8002186:	d004      	beq.n	8002192 <__swbuf_r+0x62>
 8002188:	89a3      	ldrh	r3, [r4, #12]
 800218a:	07db      	lsls	r3, r3, #31
 800218c:	d506      	bpl.n	800219c <__swbuf_r+0x6c>
 800218e:	2e0a      	cmp	r6, #10
 8002190:	d104      	bne.n	800219c <__swbuf_r+0x6c>
 8002192:	4621      	mov	r1, r4
 8002194:	4628      	mov	r0, r5
 8002196:	f000 f92f 	bl	80023f8 <_fflush_r>
 800219a:	b988      	cbnz	r0, 80021c0 <__swbuf_r+0x90>
 800219c:	4638      	mov	r0, r7
 800219e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <__swbuf_r+0x9c>)
 80021a2:	429c      	cmp	r4, r3
 80021a4:	d101      	bne.n	80021aa <__swbuf_r+0x7a>
 80021a6:	68ac      	ldr	r4, [r5, #8]
 80021a8:	e7cf      	b.n	800214a <__swbuf_r+0x1a>
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <__swbuf_r+0xa0>)
 80021ac:	429c      	cmp	r4, r3
 80021ae:	bf08      	it	eq
 80021b0:	68ec      	ldreq	r4, [r5, #12]
 80021b2:	e7ca      	b.n	800214a <__swbuf_r+0x1a>
 80021b4:	4621      	mov	r1, r4
 80021b6:	4628      	mov	r0, r5
 80021b8:	f000 f81e 	bl	80021f8 <__swsetup_r>
 80021bc:	2800      	cmp	r0, #0
 80021be:	d0cb      	beq.n	8002158 <__swbuf_r+0x28>
 80021c0:	f04f 37ff 	mov.w	r7, #4294967295
 80021c4:	e7ea      	b.n	800219c <__swbuf_r+0x6c>
 80021c6:	bf00      	nop
 80021c8:	08002704 	.word	0x08002704
 80021cc:	08002724 	.word	0x08002724
 80021d0:	080026e4 	.word	0x080026e4

080021d4 <_write_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4604      	mov	r4, r0
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	2200      	movs	r2, #0
 80021de:	4d05      	ldr	r5, [pc, #20]	; (80021f4 <_write_r+0x20>)
 80021e0:	602a      	str	r2, [r5, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f7fd ffd4 	bl	8000190 <_write>
 80021e8:	1c43      	adds	r3, r0, #1
 80021ea:	d102      	bne.n	80021f2 <_write_r+0x1e>
 80021ec:	682b      	ldr	r3, [r5, #0]
 80021ee:	b103      	cbz	r3, 80021f2 <_write_r+0x1e>
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	bd38      	pop	{r3, r4, r5, pc}
 80021f4:	200000e4 	.word	0x200000e4

080021f8 <__swsetup_r>:
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <__swsetup_r+0xcc>)
 80021fa:	b570      	push	{r4, r5, r6, lr}
 80021fc:	681d      	ldr	r5, [r3, #0]
 80021fe:	4606      	mov	r6, r0
 8002200:	460c      	mov	r4, r1
 8002202:	b125      	cbz	r5, 800220e <__swsetup_r+0x16>
 8002204:	69ab      	ldr	r3, [r5, #24]
 8002206:	b913      	cbnz	r3, 800220e <__swsetup_r+0x16>
 8002208:	4628      	mov	r0, r5
 800220a:	f7ff fb1b 	bl	8001844 <__sinit>
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <__swsetup_r+0xd0>)
 8002210:	429c      	cmp	r4, r3
 8002212:	d10f      	bne.n	8002234 <__swsetup_r+0x3c>
 8002214:	686c      	ldr	r4, [r5, #4]
 8002216:	89a3      	ldrh	r3, [r4, #12]
 8002218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800221c:	0719      	lsls	r1, r3, #28
 800221e:	d42c      	bmi.n	800227a <__swsetup_r+0x82>
 8002220:	06dd      	lsls	r5, r3, #27
 8002222:	d411      	bmi.n	8002248 <__swsetup_r+0x50>
 8002224:	2309      	movs	r3, #9
 8002226:	6033      	str	r3, [r6, #0]
 8002228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	81a3      	strh	r3, [r4, #12]
 8002232:	e03e      	b.n	80022b2 <__swsetup_r+0xba>
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <__swsetup_r+0xd4>)
 8002236:	429c      	cmp	r4, r3
 8002238:	d101      	bne.n	800223e <__swsetup_r+0x46>
 800223a:	68ac      	ldr	r4, [r5, #8]
 800223c:	e7eb      	b.n	8002216 <__swsetup_r+0x1e>
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <__swsetup_r+0xd8>)
 8002240:	429c      	cmp	r4, r3
 8002242:	bf08      	it	eq
 8002244:	68ec      	ldreq	r4, [r5, #12]
 8002246:	e7e6      	b.n	8002216 <__swsetup_r+0x1e>
 8002248:	0758      	lsls	r0, r3, #29
 800224a:	d512      	bpl.n	8002272 <__swsetup_r+0x7a>
 800224c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800224e:	b141      	cbz	r1, 8002262 <__swsetup_r+0x6a>
 8002250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002254:	4299      	cmp	r1, r3
 8002256:	d002      	beq.n	800225e <__swsetup_r+0x66>
 8002258:	4630      	mov	r0, r6
 800225a:	f000 f99b 	bl	8002594 <_free_r>
 800225e:	2300      	movs	r3, #0
 8002260:	6363      	str	r3, [r4, #52]	; 0x34
 8002262:	89a3      	ldrh	r3, [r4, #12]
 8002264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002268:	81a3      	strh	r3, [r4, #12]
 800226a:	2300      	movs	r3, #0
 800226c:	6063      	str	r3, [r4, #4]
 800226e:	6923      	ldr	r3, [r4, #16]
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	6923      	ldr	r3, [r4, #16]
 800227c:	b94b      	cbnz	r3, 8002292 <__swsetup_r+0x9a>
 800227e:	89a3      	ldrh	r3, [r4, #12]
 8002280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002288:	d003      	beq.n	8002292 <__swsetup_r+0x9a>
 800228a:	4621      	mov	r1, r4
 800228c:	4630      	mov	r0, r6
 800228e:	f000 f927 	bl	80024e0 <__smakebuf_r>
 8002292:	89a0      	ldrh	r0, [r4, #12]
 8002294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002298:	f010 0301 	ands.w	r3, r0, #1
 800229c:	d00a      	beq.n	80022b4 <__swsetup_r+0xbc>
 800229e:	2300      	movs	r3, #0
 80022a0:	60a3      	str	r3, [r4, #8]
 80022a2:	6963      	ldr	r3, [r4, #20]
 80022a4:	425b      	negs	r3, r3
 80022a6:	61a3      	str	r3, [r4, #24]
 80022a8:	6923      	ldr	r3, [r4, #16]
 80022aa:	b943      	cbnz	r3, 80022be <__swsetup_r+0xc6>
 80022ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022b0:	d1ba      	bne.n	8002228 <__swsetup_r+0x30>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	0781      	lsls	r1, r0, #30
 80022b6:	bf58      	it	pl
 80022b8:	6963      	ldrpl	r3, [r4, #20]
 80022ba:	60a3      	str	r3, [r4, #8]
 80022bc:	e7f4      	b.n	80022a8 <__swsetup_r+0xb0>
 80022be:	2000      	movs	r0, #0
 80022c0:	e7f7      	b.n	80022b2 <__swsetup_r+0xba>
 80022c2:	bf00      	nop
 80022c4:	2000000c 	.word	0x2000000c
 80022c8:	08002704 	.word	0x08002704
 80022cc:	08002724 	.word	0x08002724
 80022d0:	080026e4 	.word	0x080026e4

080022d4 <_close_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	2300      	movs	r3, #0
 80022d8:	4d05      	ldr	r5, [pc, #20]	; (80022f0 <_close_r+0x1c>)
 80022da:	4604      	mov	r4, r0
 80022dc:	4608      	mov	r0, r1
 80022de:	602b      	str	r3, [r5, #0]
 80022e0:	f7fe f846 	bl	8000370 <_close>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_close_r+0x1a>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_close_r+0x1a>
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	200000e4 	.word	0x200000e4

080022f4 <__sflush_r>:
 80022f4:	898a      	ldrh	r2, [r1, #12]
 80022f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f8:	4605      	mov	r5, r0
 80022fa:	0710      	lsls	r0, r2, #28
 80022fc:	460c      	mov	r4, r1
 80022fe:	d457      	bmi.n	80023b0 <__sflush_r+0xbc>
 8002300:	684b      	ldr	r3, [r1, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	dc04      	bgt.n	8002310 <__sflush_r+0x1c>
 8002306:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	dc01      	bgt.n	8002310 <__sflush_r+0x1c>
 800230c:	2000      	movs	r0, #0
 800230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002312:	2e00      	cmp	r6, #0
 8002314:	d0fa      	beq.n	800230c <__sflush_r+0x18>
 8002316:	2300      	movs	r3, #0
 8002318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800231c:	682f      	ldr	r7, [r5, #0]
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	d032      	beq.n	8002388 <__sflush_r+0x94>
 8002322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	075a      	lsls	r2, r3, #29
 8002328:	d505      	bpl.n	8002336 <__sflush_r+0x42>
 800232a:	6863      	ldr	r3, [r4, #4]
 800232c:	1ac0      	subs	r0, r0, r3
 800232e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002330:	b10b      	cbz	r3, 8002336 <__sflush_r+0x42>
 8002332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002334:	1ac0      	subs	r0, r0, r3
 8002336:	2300      	movs	r3, #0
 8002338:	4602      	mov	r2, r0
 800233a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800233c:	4628      	mov	r0, r5
 800233e:	6a21      	ldr	r1, [r4, #32]
 8002340:	47b0      	blx	r6
 8002342:	1c43      	adds	r3, r0, #1
 8002344:	89a3      	ldrh	r3, [r4, #12]
 8002346:	d106      	bne.n	8002356 <__sflush_r+0x62>
 8002348:	6829      	ldr	r1, [r5, #0]
 800234a:	291d      	cmp	r1, #29
 800234c:	d82c      	bhi.n	80023a8 <__sflush_r+0xb4>
 800234e:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <__sflush_r+0x100>)
 8002350:	40ca      	lsrs	r2, r1
 8002352:	07d6      	lsls	r6, r2, #31
 8002354:	d528      	bpl.n	80023a8 <__sflush_r+0xb4>
 8002356:	2200      	movs	r2, #0
 8002358:	6062      	str	r2, [r4, #4]
 800235a:	6922      	ldr	r2, [r4, #16]
 800235c:	04d9      	lsls	r1, r3, #19
 800235e:	6022      	str	r2, [r4, #0]
 8002360:	d504      	bpl.n	800236c <__sflush_r+0x78>
 8002362:	1c42      	adds	r2, r0, #1
 8002364:	d101      	bne.n	800236a <__sflush_r+0x76>
 8002366:	682b      	ldr	r3, [r5, #0]
 8002368:	b903      	cbnz	r3, 800236c <__sflush_r+0x78>
 800236a:	6560      	str	r0, [r4, #84]	; 0x54
 800236c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800236e:	602f      	str	r7, [r5, #0]
 8002370:	2900      	cmp	r1, #0
 8002372:	d0cb      	beq.n	800230c <__sflush_r+0x18>
 8002374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002378:	4299      	cmp	r1, r3
 800237a:	d002      	beq.n	8002382 <__sflush_r+0x8e>
 800237c:	4628      	mov	r0, r5
 800237e:	f000 f909 	bl	8002594 <_free_r>
 8002382:	2000      	movs	r0, #0
 8002384:	6360      	str	r0, [r4, #52]	; 0x34
 8002386:	e7c2      	b.n	800230e <__sflush_r+0x1a>
 8002388:	6a21      	ldr	r1, [r4, #32]
 800238a:	2301      	movs	r3, #1
 800238c:	4628      	mov	r0, r5
 800238e:	47b0      	blx	r6
 8002390:	1c41      	adds	r1, r0, #1
 8002392:	d1c7      	bne.n	8002324 <__sflush_r+0x30>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0c4      	beq.n	8002324 <__sflush_r+0x30>
 800239a:	2b1d      	cmp	r3, #29
 800239c:	d001      	beq.n	80023a2 <__sflush_r+0xae>
 800239e:	2b16      	cmp	r3, #22
 80023a0:	d101      	bne.n	80023a6 <__sflush_r+0xb2>
 80023a2:	602f      	str	r7, [r5, #0]
 80023a4:	e7b2      	b.n	800230c <__sflush_r+0x18>
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ac:	81a3      	strh	r3, [r4, #12]
 80023ae:	e7ae      	b.n	800230e <__sflush_r+0x1a>
 80023b0:	690f      	ldr	r7, [r1, #16]
 80023b2:	2f00      	cmp	r7, #0
 80023b4:	d0aa      	beq.n	800230c <__sflush_r+0x18>
 80023b6:	0793      	lsls	r3, r2, #30
 80023b8:	bf18      	it	ne
 80023ba:	2300      	movne	r3, #0
 80023bc:	680e      	ldr	r6, [r1, #0]
 80023be:	bf08      	it	eq
 80023c0:	694b      	ldreq	r3, [r1, #20]
 80023c2:	1bf6      	subs	r6, r6, r7
 80023c4:	600f      	str	r7, [r1, #0]
 80023c6:	608b      	str	r3, [r1, #8]
 80023c8:	2e00      	cmp	r6, #0
 80023ca:	dd9f      	ble.n	800230c <__sflush_r+0x18>
 80023cc:	4633      	mov	r3, r6
 80023ce:	463a      	mov	r2, r7
 80023d0:	4628      	mov	r0, r5
 80023d2:	6a21      	ldr	r1, [r4, #32]
 80023d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80023d8:	47e0      	blx	ip
 80023da:	2800      	cmp	r0, #0
 80023dc:	dc06      	bgt.n	80023ec <__sflush_r+0xf8>
 80023de:	89a3      	ldrh	r3, [r4, #12]
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e8:	81a3      	strh	r3, [r4, #12]
 80023ea:	e790      	b.n	800230e <__sflush_r+0x1a>
 80023ec:	4407      	add	r7, r0
 80023ee:	1a36      	subs	r6, r6, r0
 80023f0:	e7ea      	b.n	80023c8 <__sflush_r+0xd4>
 80023f2:	bf00      	nop
 80023f4:	20400001 	.word	0x20400001

080023f8 <_fflush_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	690b      	ldr	r3, [r1, #16]
 80023fc:	4605      	mov	r5, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	b913      	cbnz	r3, 8002408 <_fflush_r+0x10>
 8002402:	2500      	movs	r5, #0
 8002404:	4628      	mov	r0, r5
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	b118      	cbz	r0, 8002412 <_fflush_r+0x1a>
 800240a:	6983      	ldr	r3, [r0, #24]
 800240c:	b90b      	cbnz	r3, 8002412 <_fflush_r+0x1a>
 800240e:	f7ff fa19 	bl	8001844 <__sinit>
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <_fflush_r+0x6c>)
 8002414:	429c      	cmp	r4, r3
 8002416:	d11b      	bne.n	8002450 <_fflush_r+0x58>
 8002418:	686c      	ldr	r4, [r5, #4]
 800241a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0ef      	beq.n	8002402 <_fflush_r+0xa>
 8002422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002424:	07d0      	lsls	r0, r2, #31
 8002426:	d404      	bmi.n	8002432 <_fflush_r+0x3a>
 8002428:	0599      	lsls	r1, r3, #22
 800242a:	d402      	bmi.n	8002432 <_fflush_r+0x3a>
 800242c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800242e:	f7ff faa7 	bl	8001980 <__retarget_lock_acquire_recursive>
 8002432:	4628      	mov	r0, r5
 8002434:	4621      	mov	r1, r4
 8002436:	f7ff ff5d 	bl	80022f4 <__sflush_r>
 800243a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800243c:	4605      	mov	r5, r0
 800243e:	07da      	lsls	r2, r3, #31
 8002440:	d4e0      	bmi.n	8002404 <_fflush_r+0xc>
 8002442:	89a3      	ldrh	r3, [r4, #12]
 8002444:	059b      	lsls	r3, r3, #22
 8002446:	d4dd      	bmi.n	8002404 <_fflush_r+0xc>
 8002448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800244a:	f7ff fa9a 	bl	8001982 <__retarget_lock_release_recursive>
 800244e:	e7d9      	b.n	8002404 <_fflush_r+0xc>
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <_fflush_r+0x70>)
 8002452:	429c      	cmp	r4, r3
 8002454:	d101      	bne.n	800245a <_fflush_r+0x62>
 8002456:	68ac      	ldr	r4, [r5, #8]
 8002458:	e7df      	b.n	800241a <_fflush_r+0x22>
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <_fflush_r+0x74>)
 800245c:	429c      	cmp	r4, r3
 800245e:	bf08      	it	eq
 8002460:	68ec      	ldreq	r4, [r5, #12]
 8002462:	e7da      	b.n	800241a <_fflush_r+0x22>
 8002464:	08002704 	.word	0x08002704
 8002468:	08002724 	.word	0x08002724
 800246c:	080026e4 	.word	0x080026e4

08002470 <_lseek_r>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4604      	mov	r4, r0
 8002474:	4608      	mov	r0, r1
 8002476:	4611      	mov	r1, r2
 8002478:	2200      	movs	r2, #0
 800247a:	4d05      	ldr	r5, [pc, #20]	; (8002490 <_lseek_r+0x20>)
 800247c:	602a      	str	r2, [r5, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	f7fd ff9a 	bl	80003b8 <_lseek>
 8002484:	1c43      	adds	r3, r0, #1
 8002486:	d102      	bne.n	800248e <_lseek_r+0x1e>
 8002488:	682b      	ldr	r3, [r5, #0]
 800248a:	b103      	cbz	r3, 800248e <_lseek_r+0x1e>
 800248c:	6023      	str	r3, [r4, #0]
 800248e:	bd38      	pop	{r3, r4, r5, pc}
 8002490:	200000e4 	.word	0x200000e4

08002494 <__swhatbuf_r>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	460e      	mov	r6, r1
 8002498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800249c:	4614      	mov	r4, r2
 800249e:	2900      	cmp	r1, #0
 80024a0:	461d      	mov	r5, r3
 80024a2:	b096      	sub	sp, #88	; 0x58
 80024a4:	da08      	bge.n	80024b8 <__swhatbuf_r+0x24>
 80024a6:	2200      	movs	r2, #0
 80024a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80024ac:	602a      	str	r2, [r5, #0]
 80024ae:	061a      	lsls	r2, r3, #24
 80024b0:	d410      	bmi.n	80024d4 <__swhatbuf_r+0x40>
 80024b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b6:	e00e      	b.n	80024d6 <__swhatbuf_r+0x42>
 80024b8:	466a      	mov	r2, sp
 80024ba:	f000 f8c5 	bl	8002648 <_fstat_r>
 80024be:	2800      	cmp	r0, #0
 80024c0:	dbf1      	blt.n	80024a6 <__swhatbuf_r+0x12>
 80024c2:	9a01      	ldr	r2, [sp, #4]
 80024c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024cc:	425a      	negs	r2, r3
 80024ce:	415a      	adcs	r2, r3
 80024d0:	602a      	str	r2, [r5, #0]
 80024d2:	e7ee      	b.n	80024b2 <__swhatbuf_r+0x1e>
 80024d4:	2340      	movs	r3, #64	; 0x40
 80024d6:	2000      	movs	r0, #0
 80024d8:	6023      	str	r3, [r4, #0]
 80024da:	b016      	add	sp, #88	; 0x58
 80024dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080024e0 <__smakebuf_r>:
 80024e0:	898b      	ldrh	r3, [r1, #12]
 80024e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024e4:	079d      	lsls	r5, r3, #30
 80024e6:	4606      	mov	r6, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	d507      	bpl.n	80024fc <__smakebuf_r+0x1c>
 80024ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	6123      	str	r3, [r4, #16]
 80024f4:	2301      	movs	r3, #1
 80024f6:	6163      	str	r3, [r4, #20]
 80024f8:	b002      	add	sp, #8
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	466a      	mov	r2, sp
 80024fe:	ab01      	add	r3, sp, #4
 8002500:	f7ff ffc8 	bl	8002494 <__swhatbuf_r>
 8002504:	9900      	ldr	r1, [sp, #0]
 8002506:	4605      	mov	r5, r0
 8002508:	4630      	mov	r0, r6
 800250a:	f7ff fa5b 	bl	80019c4 <_malloc_r>
 800250e:	b948      	cbnz	r0, 8002524 <__smakebuf_r+0x44>
 8002510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002514:	059a      	lsls	r2, r3, #22
 8002516:	d4ef      	bmi.n	80024f8 <__smakebuf_r+0x18>
 8002518:	f023 0303 	bic.w	r3, r3, #3
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	81a3      	strh	r3, [r4, #12]
 8002522:	e7e3      	b.n	80024ec <__smakebuf_r+0xc>
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <__smakebuf_r+0x7c>)
 8002526:	62b3      	str	r3, [r6, #40]	; 0x28
 8002528:	89a3      	ldrh	r3, [r4, #12]
 800252a:	6020      	str	r0, [r4, #0]
 800252c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002530:	81a3      	strh	r3, [r4, #12]
 8002532:	9b00      	ldr	r3, [sp, #0]
 8002534:	6120      	str	r0, [r4, #16]
 8002536:	6163      	str	r3, [r4, #20]
 8002538:	9b01      	ldr	r3, [sp, #4]
 800253a:	b15b      	cbz	r3, 8002554 <__smakebuf_r+0x74>
 800253c:	4630      	mov	r0, r6
 800253e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002542:	f000 f893 	bl	800266c <_isatty_r>
 8002546:	b128      	cbz	r0, 8002554 <__smakebuf_r+0x74>
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	81a3      	strh	r3, [r4, #12]
 8002554:	89a0      	ldrh	r0, [r4, #12]
 8002556:	4305      	orrs	r5, r0
 8002558:	81a5      	strh	r5, [r4, #12]
 800255a:	e7cd      	b.n	80024f8 <__smakebuf_r+0x18>
 800255c:	080017dd 	.word	0x080017dd

08002560 <memchr>:
 8002560:	4603      	mov	r3, r0
 8002562:	b510      	push	{r4, lr}
 8002564:	b2c9      	uxtb	r1, r1
 8002566:	4402      	add	r2, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	4618      	mov	r0, r3
 800256c:	d101      	bne.n	8002572 <memchr+0x12>
 800256e:	2000      	movs	r0, #0
 8002570:	e003      	b.n	800257a <memchr+0x1a>
 8002572:	7804      	ldrb	r4, [r0, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	428c      	cmp	r4, r1
 8002578:	d1f6      	bne.n	8002568 <memchr+0x8>
 800257a:	bd10      	pop	{r4, pc}

0800257c <__malloc_lock>:
 800257c:	4801      	ldr	r0, [pc, #4]	; (8002584 <__malloc_lock+0x8>)
 800257e:	f7ff b9ff 	b.w	8001980 <__retarget_lock_acquire_recursive>
 8002582:	bf00      	nop
 8002584:	200000d8 	.word	0x200000d8

08002588 <__malloc_unlock>:
 8002588:	4801      	ldr	r0, [pc, #4]	; (8002590 <__malloc_unlock+0x8>)
 800258a:	f7ff b9fa 	b.w	8001982 <__retarget_lock_release_recursive>
 800258e:	bf00      	nop
 8002590:	200000d8 	.word	0x200000d8

08002594 <_free_r>:
 8002594:	b538      	push	{r3, r4, r5, lr}
 8002596:	4605      	mov	r5, r0
 8002598:	2900      	cmp	r1, #0
 800259a:	d040      	beq.n	800261e <_free_r+0x8a>
 800259c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025a0:	1f0c      	subs	r4, r1, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bfb8      	it	lt
 80025a6:	18e4      	addlt	r4, r4, r3
 80025a8:	f7ff ffe8 	bl	800257c <__malloc_lock>
 80025ac:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <_free_r+0x8c>)
 80025ae:	6813      	ldr	r3, [r2, #0]
 80025b0:	b933      	cbnz	r3, 80025c0 <_free_r+0x2c>
 80025b2:	6063      	str	r3, [r4, #4]
 80025b4:	6014      	str	r4, [r2, #0]
 80025b6:	4628      	mov	r0, r5
 80025b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025bc:	f7ff bfe4 	b.w	8002588 <__malloc_unlock>
 80025c0:	42a3      	cmp	r3, r4
 80025c2:	d908      	bls.n	80025d6 <_free_r+0x42>
 80025c4:	6820      	ldr	r0, [r4, #0]
 80025c6:	1821      	adds	r1, r4, r0
 80025c8:	428b      	cmp	r3, r1
 80025ca:	bf01      	itttt	eq
 80025cc:	6819      	ldreq	r1, [r3, #0]
 80025ce:	685b      	ldreq	r3, [r3, #4]
 80025d0:	1809      	addeq	r1, r1, r0
 80025d2:	6021      	streq	r1, [r4, #0]
 80025d4:	e7ed      	b.n	80025b2 <_free_r+0x1e>
 80025d6:	461a      	mov	r2, r3
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	b10b      	cbz	r3, 80025e0 <_free_r+0x4c>
 80025dc:	42a3      	cmp	r3, r4
 80025de:	d9fa      	bls.n	80025d6 <_free_r+0x42>
 80025e0:	6811      	ldr	r1, [r2, #0]
 80025e2:	1850      	adds	r0, r2, r1
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	d10b      	bne.n	8002600 <_free_r+0x6c>
 80025e8:	6820      	ldr	r0, [r4, #0]
 80025ea:	4401      	add	r1, r0
 80025ec:	1850      	adds	r0, r2, r1
 80025ee:	4283      	cmp	r3, r0
 80025f0:	6011      	str	r1, [r2, #0]
 80025f2:	d1e0      	bne.n	80025b6 <_free_r+0x22>
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4401      	add	r1, r0
 80025fa:	6011      	str	r1, [r2, #0]
 80025fc:	6053      	str	r3, [r2, #4]
 80025fe:	e7da      	b.n	80025b6 <_free_r+0x22>
 8002600:	d902      	bls.n	8002608 <_free_r+0x74>
 8002602:	230c      	movs	r3, #12
 8002604:	602b      	str	r3, [r5, #0]
 8002606:	e7d6      	b.n	80025b6 <_free_r+0x22>
 8002608:	6820      	ldr	r0, [r4, #0]
 800260a:	1821      	adds	r1, r4, r0
 800260c:	428b      	cmp	r3, r1
 800260e:	bf01      	itttt	eq
 8002610:	6819      	ldreq	r1, [r3, #0]
 8002612:	685b      	ldreq	r3, [r3, #4]
 8002614:	1809      	addeq	r1, r1, r0
 8002616:	6021      	streq	r1, [r4, #0]
 8002618:	6063      	str	r3, [r4, #4]
 800261a:	6054      	str	r4, [r2, #4]
 800261c:	e7cb      	b.n	80025b6 <_free_r+0x22>
 800261e:	bd38      	pop	{r3, r4, r5, pc}
 8002620:	200000dc 	.word	0x200000dc

08002624 <_read_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	2200      	movs	r2, #0
 800262e:	4d05      	ldr	r5, [pc, #20]	; (8002644 <_read_r+0x20>)
 8002630:	602a      	str	r2, [r5, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f7fd fe7f 	bl	8000336 <_read>
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d102      	bne.n	8002642 <_read_r+0x1e>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	b103      	cbz	r3, 8002642 <_read_r+0x1e>
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	200000e4 	.word	0x200000e4

08002648 <_fstat_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	2300      	movs	r3, #0
 800264c:	4d06      	ldr	r5, [pc, #24]	; (8002668 <_fstat_r+0x20>)
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	602b      	str	r3, [r5, #0]
 8002656:	f7fd fe96 	bl	8000386 <_fstat>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	d102      	bne.n	8002664 <_fstat_r+0x1c>
 800265e:	682b      	ldr	r3, [r5, #0]
 8002660:	b103      	cbz	r3, 8002664 <_fstat_r+0x1c>
 8002662:	6023      	str	r3, [r4, #0]
 8002664:	bd38      	pop	{r3, r4, r5, pc}
 8002666:	bf00      	nop
 8002668:	200000e4 	.word	0x200000e4

0800266c <_isatty_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	2300      	movs	r3, #0
 8002670:	4d05      	ldr	r5, [pc, #20]	; (8002688 <_isatty_r+0x1c>)
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	f7fd fe94 	bl	80003a4 <_isatty>
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	d102      	bne.n	8002686 <_isatty_r+0x1a>
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	b103      	cbz	r3, 8002686 <_isatty_r+0x1a>
 8002684:	6023      	str	r3, [r4, #0]
 8002686:	bd38      	pop	{r3, r4, r5, pc}
 8002688:	200000e4 	.word	0x200000e4

0800268c <_init>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	bf00      	nop
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr

08002698 <_fini>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	bf00      	nop
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr
