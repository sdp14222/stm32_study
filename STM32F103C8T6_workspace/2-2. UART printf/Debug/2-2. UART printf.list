
2-2. UART printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08004b58  08004b58  00014b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f6c  08004f6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004f6c  08004f6c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f6c  08004f6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200001dc  08005150  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005150  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005618  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158c  00000000  00000000  0002581d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00026db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00027498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fa  00000000  00000000  00027ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007af4  00000000  00000000  0003f4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083449  00000000  00000000  00046fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca40f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a94  00000000  00000000  000ca460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b40 	.word	0x08004b40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004b40 	.word	0x08004b40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_GPIO_Init+0x40>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <MX_GPIO_Init+0x40>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_GPIO_Init+0x40>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_GPIO_Init+0x40>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <MX_GPIO_Init+0x40>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <MX_GPIO_Init+0x40>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000

08000acc <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 10);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	230a      	movs	r3, #10
 8000ade:	68b9      	ldr	r1, [r7, #8]
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <_write+0x24>)
 8000ae2:	f001 f96c 	bl	8001dbe <HAL_UART_Transmit>
	return len;
 8000ae6:	687b      	ldr	r3, [r7, #4]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001fc 	.word	0x200001fc

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afa:	f000 fa0b 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f81f 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f7ff ffc1 	bl	8000a88 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b06:	f000 f969 	bl	8000ddc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t cnt = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	80fb      	strh	r3, [r7, #6]
  float f = 0.123456789;
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <main+0x44>)
 8000b10:	603b      	str	r3, [r7, #0]

  while (1)
  {
	  printf("Hello World! %d %f\n", cnt++, f);
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	80fa      	strh	r2, [r7, #6]
 8000b18:	461c      	mov	r4, r3
 8000b1a:	6838      	ldr	r0, [r7, #0]
 8000b1c:	f7ff fc84 	bl	8000428 <__aeabi_f2d>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4621      	mov	r1, r4
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <main+0x48>)
 8000b28:	f001 ff46 	bl	80029b8 <iprintf>
	  HAL_Delay(1000);
 8000b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b30:	f000 fa52 	bl	8000fd8 <HAL_Delay>
	  printf("Hello World! %d %f\n", cnt++, f);
 8000b34:	e7ed      	b.n	8000b12 <main+0x1e>
 8000b36:	bf00      	nop
 8000b38:	3dfcd6ea 	.word	0x3dfcd6ea
 8000b3c:	08004b58 	.word	0x08004b58

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b090      	sub	sp, #64	; 0x40
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	2228      	movs	r2, #40	; 0x28
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 faca 	bl	80020e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fcb1 	bl	80014f0 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b94:	f000 f819 	bl	8000bca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ff1e 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bbe:	f000 f804 	bl	8000bca <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3740      	adds	r7, #64	; 0x40
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bce:	b672      	cpsid	i
}
 8000bd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <HAL_MspInit+0x5c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	61d3      	str	r3, [r2, #28]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_MspInit+0x60>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_MspInit+0x60>)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7e:	f000 f98f 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
	return 1;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <_kill>:

int _kill(int pid, int sig)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c9e:	f001 f9f9 	bl	8002094 <__errno>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2216      	movs	r2, #22
 8000ca6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_exit>:

void _exit (int status)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe7 	bl	8000c94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cc6:	e7fe      	b.n	8000cc6 <_exit+0x12>

08000cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
	}

return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d28:	605a      	str	r2, [r3, #4]
	return 0;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
	return 0;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f001 f97e 	bl	8002094 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20005000 	.word	0x20005000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	200001f8 	.word	0x200001f8
 8000dcc:	20000258 	.word	0x20000258

08000dd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART1_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART1_UART_Init+0x4c>)
 8000e14:	f000 ff86 	bl	8001d24 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f7ff fed4 	bl	8000bca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001fc 	.word	0x200001fc
 8000e2c:	40013800 	.word	0x40013800

08000e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d131      	bne.n	8000eb4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_UART_MspInit+0x90>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_UART_MspInit+0x90>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0x90>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_UART_MspInit+0x90>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x90>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_UART_MspInit+0x90>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <HAL_UART_MspInit+0x94>)
 8000e96:	f000 f9a7 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_MspInit+0x94>)
 8000eb0:	f000 f99a 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eee:	f7ff ff6f 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f001 f8d5 	bl	80020a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fdfd 	bl	8000af4 <main>
  bx lr
 8000efa:	4770      	bx	lr
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000f04:	08004f74 	.word	0x08004f74
  ldr r2, =_sbss
 8000f08:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000f0c:	20000254 	.word	0x20000254

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x28>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f92b 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe50 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f935 	bl	80011ce <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f90b 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000240 	.word	0x20000240

08000fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	20000240 	.word	0x20000240

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fff0 	bl	8000fc4 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffe0 	bl	8000fc4 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff90 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff49 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff90 	bl	80010d8 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5f 	bl	8001084 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb0 	bl	800113c <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b08b      	sub	sp, #44	; 0x2c
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	e169      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011fc:	2201      	movs	r2, #1
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8158 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a9a      	ldr	r2, [pc, #616]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d05e      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001224:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d875      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800122a:	4a98      	ldr	r2, [pc, #608]	; (800148c <HAL_GPIO_Init+0x2a4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d058      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001230:	4a96      	ldr	r2, [pc, #600]	; (800148c <HAL_GPIO_Init+0x2a4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d86f      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001236:	4a96      	ldr	r2, [pc, #600]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d052      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 800123c:	4a94      	ldr	r2, [pc, #592]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d869      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001242:	4a94      	ldr	r2, [pc, #592]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d04c      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001248:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d863      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800124e:	4a92      	ldr	r2, [pc, #584]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d046      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001254:	4a90      	ldr	r2, [pc, #576]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d85d      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d82a      	bhi.n	80012b4 <HAL_GPIO_Init+0xcc>
 800125e:	2b12      	cmp	r3, #18
 8001260:	d859      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <HAL_GPIO_Init+0x80>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012bd 	.word	0x080012bd
 8001270:	080012cf 	.word	0x080012cf
 8001274:	08001311 	.word	0x08001311
 8001278:	08001317 	.word	0x08001317
 800127c:	08001317 	.word	0x08001317
 8001280:	08001317 	.word	0x08001317
 8001284:	08001317 	.word	0x08001317
 8001288:	08001317 	.word	0x08001317
 800128c:	08001317 	.word	0x08001317
 8001290:	08001317 	.word	0x08001317
 8001294:	08001317 	.word	0x08001317
 8001298:	08001317 	.word	0x08001317
 800129c:	08001317 	.word	0x08001317
 80012a0:	08001317 	.word	0x08001317
 80012a4:	08001317 	.word	0x08001317
 80012a8:	08001317 	.word	0x08001317
 80012ac:	080012c5 	.word	0x080012c5
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	4a79      	ldr	r2, [pc, #484]	; (800149c <HAL_GPIO_Init+0x2b4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ba:	e02c      	b.n	8001316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e029      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e024      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e01f      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	330c      	adds	r3, #12
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e01a      	b.n	8001318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ea:	2304      	movs	r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e013      	b.n	8001318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	611a      	str	r2, [r3, #16]
          break;
 8001302:	e009      	b.n	8001318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001304:	2308      	movs	r3, #8
 8001306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	615a      	str	r2, [r3, #20]
          break;
 800130e:	e003      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x130>
          break;
 8001316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d801      	bhi.n	8001322 <HAL_GPIO_Init+0x13a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_Init+0x13e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d802      	bhi.n	8001334 <HAL_GPIO_Init+0x14c>
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x152>
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	3b08      	subs	r3, #8
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	210f      	movs	r1, #15
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	6a39      	ldr	r1, [r7, #32]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80b1 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a4c      	ldr	r2, [pc, #304]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <HAL_GPIO_Init+0x2c0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3f      	ldr	r2, [pc, #252]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d00d      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_GPIO_Init+0x1e0>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d4:	2300      	movs	r3, #0
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e6:	492f      	ldr	r1, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	492c      	ldr	r1, [pc, #176]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4928      	ldr	r1, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	491e      	ldr	r1, [pc, #120]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001440:	4013      	ands	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4914      	ldr	r1, [pc, #80]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e021      	b.n	80014ca <HAL_GPIO_Init+0x2e2>
 8001486:	bf00      	nop
 8001488:	10320000 	.word	0x10320000
 800148c:	10310000 	.word	0x10310000
 8001490:	10220000 	.word	0x10220000
 8001494:	10210000 	.word	0x10210000
 8001498:	10120000 	.word	0x10120000
 800149c:	10110000 	.word	0x10110000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40011400 	.word	0x40011400
 80014b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4909      	ldr	r1, [pc, #36]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	3301      	adds	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae8e 	bne.w	80011fc <HAL_GPIO_Init+0x14>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	372c      	adds	r7, #44	; 0x2c
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e272      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8087 	beq.w	800161e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001510:	4b92      	ldr	r3, [pc, #584]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b04      	cmp	r3, #4
 800151a:	d00c      	beq.n	8001536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800151c:	4b8f      	ldr	r3, [pc, #572]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d112      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
 8001528:	4b8c      	ldr	r3, [pc, #560]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d10b      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d06c      	beq.n	800161c <HAL_RCC_OscConfig+0x12c>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d168      	bne.n	800161c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e24c      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x76>
 8001558:	4b80      	ldr	r3, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a7f      	ldr	r2, [pc, #508]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e02e      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x98>
 800156e:	4b7b      	ldr	r3, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7a      	ldr	r2, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b78      	ldr	r3, [pc, #480]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a77      	ldr	r2, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0xbc>
 8001592:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a71      	ldr	r2, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 80015ac:	4b6b      	ldr	r3, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6a      	ldr	r2, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a67      	ldr	r2, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fcfa 	bl	8000fc4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fcf6 	bl	8000fc4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e200      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xe4>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fce6 	bl	8000fc4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fce2 	bl	8000fc4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1ec      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x10c>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d063      	beq.n	80016f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d11c      	bne.n	800167c <HAL_RCC_OscConfig+0x18c>
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x176>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e1c0      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4939      	ldr	r1, [pc, #228]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e03a      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_OscConfig+0x270>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fc9b 	bl	8000fc4 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fc97 	bl	8000fc4 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1a1      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4927      	ldr	r1, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <HAL_RCC_OscConfig+0x270>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc7a 	bl	8000fc4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc76 	bl	8000fc4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e180      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d03a      	beq.n	8001774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d019      	beq.n	800173a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_RCC_OscConfig+0x274>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fc5a 	bl	8000fc4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fc56 	bl	8000fc4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e160      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f000 fad8 	bl	8001ce8 <RCC_Delay>
 8001738:	e01c      	b.n	8001774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_RCC_OscConfig+0x274>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fc40 	bl	8000fc4 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001746:	e00f      	b.n	8001768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fc3c 	bl	8000fc4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d908      	bls.n	8001768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e146      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	42420000 	.word	0x42420000
 8001764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e9      	bne.n	8001748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a6 	beq.w	80018ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a87      	ldr	r2, [pc, #540]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <HAL_RCC_OscConfig+0x4c8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x4c8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7e      	ldr	r2, [pc, #504]	; (80019b8 <HAL_RCC_OscConfig+0x4c8>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fbfd 	bl	8000fc4 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fbf9 	bl	8000fc4 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e103      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCC_OscConfig+0x4c8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x312>
 80017f4:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e02d      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x334>
 800180a:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a69      	ldr	r2, [pc, #420]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a66      	ldr	r2, [pc, #408]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	e01c      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x356>
 800182c:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a60      	ldr	r2, [pc, #384]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a5d      	ldr	r2, [pc, #372]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a5a      	ldr	r2, [pc, #360]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	4b58      	ldr	r3, [pc, #352]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a57      	ldr	r2, [pc, #348]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d015      	beq.n	8001892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fbad 	bl	8000fc4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fba9 	bl	8000fc4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0b1      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ee      	beq.n	800186e <HAL_RCC_OscConfig+0x37e>
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff fb97 	bl	8000fc4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fb93 	bl	8000fc4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e09b      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4b40      	ldr	r3, [pc, #256]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a3b      	ldr	r2, [pc, #236]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8087 	beq.w	80019e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d061      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d146      	bne.n	800197a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fb67 	bl	8000fc4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff fb63 	bl	8000fc4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e06d      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d108      	bne.n	8001934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	4921      	ldr	r1, [pc, #132]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a19      	ldr	r1, [r3, #32]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	430b      	orrs	r3, r1
 8001946:	491b      	ldr	r1, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x4cc>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff fb37 	bl	8000fc4 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff fb33 	bl	8000fc4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e03d      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x46a>
 8001978:	e035      	b.n	80019e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_RCC_OscConfig+0x4cc>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fb20 	bl	8000fc4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff fb1c 	bl	8000fc4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e026      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x498>
 80019a6:	e01e      	b.n	80019e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e019      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40007000 	.word	0x40007000
 80019bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0d0      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 0207 	bic.w	r2, r3, #7
 8001a1e:	4965      	ldr	r1, [pc, #404]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	494d      	ldr	r1, [pc, #308]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d040      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e07f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e073      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06b      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4936      	ldr	r1, [pc, #216]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff fa6e 	bl	8000fc4 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff fa6a 	bl	8000fc4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e053      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d210      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 0207 	bic.w	r2, r3, #7
 8001b2a:	4922      	ldr	r1, [pc, #136]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e032      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4916      	ldr	r1, [pc, #88]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 f821 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	490a      	ldr	r1, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f9cc 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08004b7c 	.word	0x08004b7c
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b490      	push	{r4, r7}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xac>)
 8001bd0:	1d3c      	adds	r4, r7, #4
 8001bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bd8:	f240 2301 	movw	r3, #513	; 0x201
 8001bdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x40>
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x46>
 8001c06:	e02b      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c0a:	623b      	str	r3, [r7, #32]
      break;
 8001c0c:	e02b      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	0c9b      	lsrs	r3, r3, #18
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3328      	adds	r3, #40	; 0x28
 8001c18:	443b      	add	r3, r7
 8001c1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c1e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d012      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0c5b      	lsrs	r3, r3, #17
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	3328      	adds	r3, #40	; 0x28
 8001c36:	443b      	add	r3, r7
 8001c38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c42:	fb03 f202 	mul.w	r2, r3, r2
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	e004      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	623b      	str	r3, [r7, #32]
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c62:	623b      	str	r3, [r7, #32]
      break;
 8001c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c66:	6a3b      	ldr	r3, [r7, #32]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3728      	adds	r7, #40	; 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc90      	pop	{r4, r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	08004b6c 	.word	0x08004b6c
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	007a1200 	.word	0x007a1200
 8001c80:	003d0900 	.word	0x003d0900

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	f7ff fff2 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08004b8c 	.word	0x08004b8c

08001cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0adb      	lsrs	r3, r3, #11
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	08004b8c 	.word	0x08004b8c

08001ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <RCC_Delay+0x34>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <RCC_Delay+0x38>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0a5b      	lsrs	r3, r3, #9
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d04:	bf00      	nop
  }
  while (Delay --);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	60fa      	str	r2, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <RCC_Delay+0x1c>
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	10624dd3 	.word	0x10624dd3

08001d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e03f      	b.n	8001db6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff f870 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2224      	movs	r2, #36	; 0x24
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f905 	bl	8001f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b08a      	sub	sp, #40	; 0x28
 8001dc2:	af02      	add	r7, sp, #8
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d17c      	bne.n	8001ed8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_UART_Transmit+0x2c>
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e075      	b.n	8001eda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_UART_Transmit+0x3e>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e06e      	b.n	8001eda <HAL_UART_Transmit+0x11c>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2221      	movs	r2, #33	; 0x21
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e12:	f7ff f8d7 	bl	8000fc4 <HAL_GetTick>
 8001e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	88fa      	ldrh	r2, [r7, #6]
 8001e1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2c:	d108      	bne.n	8001e40 <HAL_UART_Transmit+0x82>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d104      	bne.n	8001e40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	e003      	b.n	8001e48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e50:	e02a      	b.n	8001ea8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f840 	bl	8001ee2 <UART_WaitOnFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e036      	b.n	8001eda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10b      	bne.n	8001e8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	3302      	adds	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	e007      	b.n	8001e9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	3301      	adds	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1cf      	bne.n	8001e52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2140      	movs	r1, #64	; 0x40
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f810 	bl	8001ee2 <UART_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e006      	b.n	8001eda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e000      	b.n	8001eda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ef2:	e02c      	b.n	8001f4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efa:	d028      	beq.n	8001f4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f02:	f7ff f85f 	bl	8000fc4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d21d      	bcs.n	8001f4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e00f      	b.n	8001f6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4013      	ands	r3, r2
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d0c3      	beq.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fb2:	f023 030c 	bic.w	r3, r3, #12
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2c      	ldr	r2, [pc, #176]	; (800208c <UART_SetConfig+0x114>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d103      	bne.n	8001fe8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fe0:	f7ff fe6e 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	e002      	b.n	8001fee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fe8:	f7ff fe56 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8001fec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009a      	lsls	r2, r3, #2
 8001ff8:	441a      	add	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <UART_SetConfig+0x118>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	0119      	lsls	r1, r3, #4
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fbb2 f2f3 	udiv	r2, r2, r3
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <UART_SetConfig+0x118>)
 8002026:	fba3 0302 	umull	r0, r3, r3, r2
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2064      	movs	r0, #100	; 0x64
 800202e:	fb00 f303 	mul.w	r3, r0, r3
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	3332      	adds	r3, #50	; 0x32
 8002038:	4a15      	ldr	r2, [pc, #84]	; (8002090 <UART_SetConfig+0x118>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002044:	4419      	add	r1, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	009a      	lsls	r2, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fbb2 f2f3 	udiv	r2, r2, r3
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <UART_SetConfig+0x118>)
 800205e:	fba3 0302 	umull	r0, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2064      	movs	r0, #100	; 0x64
 8002066:	fb00 f303 	mul.w	r3, r0, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	3332      	adds	r3, #50	; 0x32
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <UART_SetConfig+0x118>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	f003 020f 	and.w	r2, r3, #15
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	440a      	add	r2, r1
 8002082:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40013800 	.word	0x40013800
 8002090:	51eb851f 	.word	0x51eb851f

08002094 <__errno>:
 8002094:	4b01      	ldr	r3, [pc, #4]	; (800209c <__errno+0x8>)
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	2000000c 	.word	0x2000000c

080020a0 <__libc_init_array>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	2600      	movs	r6, #0
 80020a4:	4d0c      	ldr	r5, [pc, #48]	; (80020d8 <__libc_init_array+0x38>)
 80020a6:	4c0d      	ldr	r4, [pc, #52]	; (80020dc <__libc_init_array+0x3c>)
 80020a8:	1b64      	subs	r4, r4, r5
 80020aa:	10a4      	asrs	r4, r4, #2
 80020ac:	42a6      	cmp	r6, r4
 80020ae:	d109      	bne.n	80020c4 <__libc_init_array+0x24>
 80020b0:	f002 fd46 	bl	8004b40 <_init>
 80020b4:	2600      	movs	r6, #0
 80020b6:	4d0a      	ldr	r5, [pc, #40]	; (80020e0 <__libc_init_array+0x40>)
 80020b8:	4c0a      	ldr	r4, [pc, #40]	; (80020e4 <__libc_init_array+0x44>)
 80020ba:	1b64      	subs	r4, r4, r5
 80020bc:	10a4      	asrs	r4, r4, #2
 80020be:	42a6      	cmp	r6, r4
 80020c0:	d105      	bne.n	80020ce <__libc_init_array+0x2e>
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c8:	4798      	blx	r3
 80020ca:	3601      	adds	r6, #1
 80020cc:	e7ee      	b.n	80020ac <__libc_init_array+0xc>
 80020ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d2:	4798      	blx	r3
 80020d4:	3601      	adds	r6, #1
 80020d6:	e7f2      	b.n	80020be <__libc_init_array+0x1e>
 80020d8:	08004f6c 	.word	0x08004f6c
 80020dc:	08004f6c 	.word	0x08004f6c
 80020e0:	08004f6c 	.word	0x08004f6c
 80020e4:	08004f70 	.word	0x08004f70

080020e8 <memset>:
 80020e8:	4603      	mov	r3, r0
 80020ea:	4402      	add	r2, r0
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d100      	bne.n	80020f2 <memset+0xa>
 80020f0:	4770      	bx	lr
 80020f2:	f803 1b01 	strb.w	r1, [r3], #1
 80020f6:	e7f9      	b.n	80020ec <memset+0x4>

080020f8 <__cvt>:
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020fe:	461f      	mov	r7, r3
 8002100:	bfbb      	ittet	lt
 8002102:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002106:	461f      	movlt	r7, r3
 8002108:	2300      	movge	r3, #0
 800210a:	232d      	movlt	r3, #45	; 0x2d
 800210c:	b088      	sub	sp, #32
 800210e:	4614      	mov	r4, r2
 8002110:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002112:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002114:	7013      	strb	r3, [r2, #0]
 8002116:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002118:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800211c:	f023 0820 	bic.w	r8, r3, #32
 8002120:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002124:	d005      	beq.n	8002132 <__cvt+0x3a>
 8002126:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800212a:	d100      	bne.n	800212e <__cvt+0x36>
 800212c:	3501      	adds	r5, #1
 800212e:	2302      	movs	r3, #2
 8002130:	e000      	b.n	8002134 <__cvt+0x3c>
 8002132:	2303      	movs	r3, #3
 8002134:	aa07      	add	r2, sp, #28
 8002136:	9204      	str	r2, [sp, #16]
 8002138:	aa06      	add	r2, sp, #24
 800213a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800213e:	e9cd 3500 	strd	r3, r5, [sp]
 8002142:	4622      	mov	r2, r4
 8002144:	463b      	mov	r3, r7
 8002146:	f000 fcdb 	bl	8002b00 <_dtoa_r>
 800214a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800214e:	4606      	mov	r6, r0
 8002150:	d102      	bne.n	8002158 <__cvt+0x60>
 8002152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002154:	07db      	lsls	r3, r3, #31
 8002156:	d522      	bpl.n	800219e <__cvt+0xa6>
 8002158:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800215c:	eb06 0905 	add.w	r9, r6, r5
 8002160:	d110      	bne.n	8002184 <__cvt+0x8c>
 8002162:	7833      	ldrb	r3, [r6, #0]
 8002164:	2b30      	cmp	r3, #48	; 0x30
 8002166:	d10a      	bne.n	800217e <__cvt+0x86>
 8002168:	2200      	movs	r2, #0
 800216a:	2300      	movs	r3, #0
 800216c:	4620      	mov	r0, r4
 800216e:	4639      	mov	r1, r7
 8002170:	f7fe fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 8002174:	b918      	cbnz	r0, 800217e <__cvt+0x86>
 8002176:	f1c5 0501 	rsb	r5, r5, #1
 800217a:	f8ca 5000 	str.w	r5, [sl]
 800217e:	f8da 3000 	ldr.w	r3, [sl]
 8002182:	4499      	add	r9, r3
 8002184:	2200      	movs	r2, #0
 8002186:	2300      	movs	r3, #0
 8002188:	4620      	mov	r0, r4
 800218a:	4639      	mov	r1, r7
 800218c:	f7fe fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8002190:	b108      	cbz	r0, 8002196 <__cvt+0x9e>
 8002192:	f8cd 901c 	str.w	r9, [sp, #28]
 8002196:	2230      	movs	r2, #48	; 0x30
 8002198:	9b07      	ldr	r3, [sp, #28]
 800219a:	454b      	cmp	r3, r9
 800219c:	d307      	bcc.n	80021ae <__cvt+0xb6>
 800219e:	4630      	mov	r0, r6
 80021a0:	9b07      	ldr	r3, [sp, #28]
 80021a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80021a4:	1b9b      	subs	r3, r3, r6
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	b008      	add	sp, #32
 80021aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ae:	1c59      	adds	r1, r3, #1
 80021b0:	9107      	str	r1, [sp, #28]
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e7f0      	b.n	8002198 <__cvt+0xa0>

080021b6 <__exponent>:
 80021b6:	4603      	mov	r3, r0
 80021b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ba:	2900      	cmp	r1, #0
 80021bc:	f803 2b02 	strb.w	r2, [r3], #2
 80021c0:	bfb6      	itet	lt
 80021c2:	222d      	movlt	r2, #45	; 0x2d
 80021c4:	222b      	movge	r2, #43	; 0x2b
 80021c6:	4249      	neglt	r1, r1
 80021c8:	2909      	cmp	r1, #9
 80021ca:	7042      	strb	r2, [r0, #1]
 80021cc:	dd2b      	ble.n	8002226 <__exponent+0x70>
 80021ce:	f10d 0407 	add.w	r4, sp, #7
 80021d2:	46a4      	mov	ip, r4
 80021d4:	270a      	movs	r7, #10
 80021d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80021da:	460a      	mov	r2, r1
 80021dc:	46a6      	mov	lr, r4
 80021de:	fb07 1516 	mls	r5, r7, r6, r1
 80021e2:	2a63      	cmp	r2, #99	; 0x63
 80021e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80021e8:	4631      	mov	r1, r6
 80021ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80021ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80021f2:	dcf0      	bgt.n	80021d6 <__exponent+0x20>
 80021f4:	3130      	adds	r1, #48	; 0x30
 80021f6:	f1ae 0502 	sub.w	r5, lr, #2
 80021fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80021fe:	4629      	mov	r1, r5
 8002200:	1c44      	adds	r4, r0, #1
 8002202:	4561      	cmp	r1, ip
 8002204:	d30a      	bcc.n	800221c <__exponent+0x66>
 8002206:	f10d 0209 	add.w	r2, sp, #9
 800220a:	eba2 020e 	sub.w	r2, r2, lr
 800220e:	4565      	cmp	r5, ip
 8002210:	bf88      	it	hi
 8002212:	2200      	movhi	r2, #0
 8002214:	4413      	add	r3, r2
 8002216:	1a18      	subs	r0, r3, r0
 8002218:	b003      	add	sp, #12
 800221a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800221c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002220:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002224:	e7ed      	b.n	8002202 <__exponent+0x4c>
 8002226:	2330      	movs	r3, #48	; 0x30
 8002228:	3130      	adds	r1, #48	; 0x30
 800222a:	7083      	strb	r3, [r0, #2]
 800222c:	70c1      	strb	r1, [r0, #3]
 800222e:	1d03      	adds	r3, r0, #4
 8002230:	e7f1      	b.n	8002216 <__exponent+0x60>
	...

08002234 <_printf_float>:
 8002234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002238:	b091      	sub	sp, #68	; 0x44
 800223a:	460c      	mov	r4, r1
 800223c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002240:	4616      	mov	r6, r2
 8002242:	461f      	mov	r7, r3
 8002244:	4605      	mov	r5, r0
 8002246:	f001 fb3f 	bl	80038c8 <_localeconv_r>
 800224a:	6803      	ldr	r3, [r0, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	9309      	str	r3, [sp, #36]	; 0x24
 8002250:	f7fd ff7e 	bl	8000150 <strlen>
 8002254:	2300      	movs	r3, #0
 8002256:	930e      	str	r3, [sp, #56]	; 0x38
 8002258:	f8d8 3000 	ldr.w	r3, [r8]
 800225c:	900a      	str	r0, [sp, #40]	; 0x28
 800225e:	3307      	adds	r3, #7
 8002260:	f023 0307 	bic.w	r3, r3, #7
 8002264:	f103 0208 	add.w	r2, r3, #8
 8002268:	f894 9018 	ldrb.w	r9, [r4, #24]
 800226c:	f8d4 b000 	ldr.w	fp, [r4]
 8002270:	f8c8 2000 	str.w	r2, [r8]
 8002274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002278:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800227c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002280:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002284:	930b      	str	r3, [sp, #44]	; 0x2c
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	4640      	mov	r0, r8
 800228c:	4b9c      	ldr	r3, [pc, #624]	; (8002500 <_printf_float+0x2cc>)
 800228e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002290:	f7fe fbbc 	bl	8000a0c <__aeabi_dcmpun>
 8002294:	bb70      	cbnz	r0, 80022f4 <_printf_float+0xc0>
 8002296:	f04f 32ff 	mov.w	r2, #4294967295
 800229a:	4640      	mov	r0, r8
 800229c:	4b98      	ldr	r3, [pc, #608]	; (8002500 <_printf_float+0x2cc>)
 800229e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022a0:	f7fe fb96 	bl	80009d0 <__aeabi_dcmple>
 80022a4:	bb30      	cbnz	r0, 80022f4 <_printf_float+0xc0>
 80022a6:	2200      	movs	r2, #0
 80022a8:	2300      	movs	r3, #0
 80022aa:	4640      	mov	r0, r8
 80022ac:	4651      	mov	r1, sl
 80022ae:	f7fe fb85 	bl	80009bc <__aeabi_dcmplt>
 80022b2:	b110      	cbz	r0, 80022ba <_printf_float+0x86>
 80022b4:	232d      	movs	r3, #45	; 0x2d
 80022b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022ba:	4b92      	ldr	r3, [pc, #584]	; (8002504 <_printf_float+0x2d0>)
 80022bc:	4892      	ldr	r0, [pc, #584]	; (8002508 <_printf_float+0x2d4>)
 80022be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80022c2:	bf94      	ite	ls
 80022c4:	4698      	movls	r8, r3
 80022c6:	4680      	movhi	r8, r0
 80022c8:	2303      	movs	r3, #3
 80022ca:	f04f 0a00 	mov.w	sl, #0
 80022ce:	6123      	str	r3, [r4, #16]
 80022d0:	f02b 0304 	bic.w	r3, fp, #4
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	4633      	mov	r3, r6
 80022d8:	4621      	mov	r1, r4
 80022da:	4628      	mov	r0, r5
 80022dc:	9700      	str	r7, [sp, #0]
 80022de:	aa0f      	add	r2, sp, #60	; 0x3c
 80022e0:	f000 f9d4 	bl	800268c <_printf_common>
 80022e4:	3001      	adds	r0, #1
 80022e6:	f040 8090 	bne.w	800240a <_printf_float+0x1d6>
 80022ea:	f04f 30ff 	mov.w	r0, #4294967295
 80022ee:	b011      	add	sp, #68	; 0x44
 80022f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022f4:	4642      	mov	r2, r8
 80022f6:	4653      	mov	r3, sl
 80022f8:	4640      	mov	r0, r8
 80022fa:	4651      	mov	r1, sl
 80022fc:	f7fe fb86 	bl	8000a0c <__aeabi_dcmpun>
 8002300:	b148      	cbz	r0, 8002316 <_printf_float+0xe2>
 8002302:	f1ba 0f00 	cmp.w	sl, #0
 8002306:	bfb8      	it	lt
 8002308:	232d      	movlt	r3, #45	; 0x2d
 800230a:	4880      	ldr	r0, [pc, #512]	; (800250c <_printf_float+0x2d8>)
 800230c:	bfb8      	it	lt
 800230e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002312:	4b7f      	ldr	r3, [pc, #508]	; (8002510 <_printf_float+0x2dc>)
 8002314:	e7d3      	b.n	80022be <_printf_float+0x8a>
 8002316:	6863      	ldr	r3, [r4, #4]
 8002318:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	d142      	bne.n	80023a6 <_printf_float+0x172>
 8002320:	2306      	movs	r3, #6
 8002322:	6063      	str	r3, [r4, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	9206      	str	r2, [sp, #24]
 8002328:	aa0e      	add	r2, sp, #56	; 0x38
 800232a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800232e:	aa0d      	add	r2, sp, #52	; 0x34
 8002330:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002334:	9203      	str	r2, [sp, #12]
 8002336:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800233a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800233e:	6023      	str	r3, [r4, #0]
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	4642      	mov	r2, r8
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4628      	mov	r0, r5
 8002348:	4653      	mov	r3, sl
 800234a:	910b      	str	r1, [sp, #44]	; 0x2c
 800234c:	f7ff fed4 	bl	80020f8 <__cvt>
 8002350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002352:	4680      	mov	r8, r0
 8002354:	2947      	cmp	r1, #71	; 0x47
 8002356:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002358:	d108      	bne.n	800236c <_printf_float+0x138>
 800235a:	1cc8      	adds	r0, r1, #3
 800235c:	db02      	blt.n	8002364 <_printf_float+0x130>
 800235e:	6863      	ldr	r3, [r4, #4]
 8002360:	4299      	cmp	r1, r3
 8002362:	dd40      	ble.n	80023e6 <_printf_float+0x1b2>
 8002364:	f1a9 0902 	sub.w	r9, r9, #2
 8002368:	fa5f f989 	uxtb.w	r9, r9
 800236c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002370:	d81f      	bhi.n	80023b2 <_printf_float+0x17e>
 8002372:	464a      	mov	r2, r9
 8002374:	3901      	subs	r1, #1
 8002376:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800237a:	910d      	str	r1, [sp, #52]	; 0x34
 800237c:	f7ff ff1b 	bl	80021b6 <__exponent>
 8002380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002382:	4682      	mov	sl, r0
 8002384:	1813      	adds	r3, r2, r0
 8002386:	2a01      	cmp	r2, #1
 8002388:	6123      	str	r3, [r4, #16]
 800238a:	dc02      	bgt.n	8002392 <_printf_float+0x15e>
 800238c:	6822      	ldr	r2, [r4, #0]
 800238e:	07d2      	lsls	r2, r2, #31
 8002390:	d501      	bpl.n	8002396 <_printf_float+0x162>
 8002392:	3301      	adds	r3, #1
 8002394:	6123      	str	r3, [r4, #16]
 8002396:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800239a:	2b00      	cmp	r3, #0
 800239c:	d09b      	beq.n	80022d6 <_printf_float+0xa2>
 800239e:	232d      	movs	r3, #45	; 0x2d
 80023a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023a4:	e797      	b.n	80022d6 <_printf_float+0xa2>
 80023a6:	2947      	cmp	r1, #71	; 0x47
 80023a8:	d1bc      	bne.n	8002324 <_printf_float+0xf0>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ba      	bne.n	8002324 <_printf_float+0xf0>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e7b7      	b.n	8002322 <_printf_float+0xee>
 80023b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80023b6:	d118      	bne.n	80023ea <_printf_float+0x1b6>
 80023b8:	2900      	cmp	r1, #0
 80023ba:	6863      	ldr	r3, [r4, #4]
 80023bc:	dd0b      	ble.n	80023d6 <_printf_float+0x1a2>
 80023be:	6121      	str	r1, [r4, #16]
 80023c0:	b913      	cbnz	r3, 80023c8 <_printf_float+0x194>
 80023c2:	6822      	ldr	r2, [r4, #0]
 80023c4:	07d0      	lsls	r0, r2, #31
 80023c6:	d502      	bpl.n	80023ce <_printf_float+0x19a>
 80023c8:	3301      	adds	r3, #1
 80023ca:	440b      	add	r3, r1
 80023cc:	6123      	str	r3, [r4, #16]
 80023ce:	f04f 0a00 	mov.w	sl, #0
 80023d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80023d4:	e7df      	b.n	8002396 <_printf_float+0x162>
 80023d6:	b913      	cbnz	r3, 80023de <_printf_float+0x1aa>
 80023d8:	6822      	ldr	r2, [r4, #0]
 80023da:	07d2      	lsls	r2, r2, #31
 80023dc:	d501      	bpl.n	80023e2 <_printf_float+0x1ae>
 80023de:	3302      	adds	r3, #2
 80023e0:	e7f4      	b.n	80023cc <_printf_float+0x198>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e7f2      	b.n	80023cc <_printf_float+0x198>
 80023e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80023ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023ec:	4299      	cmp	r1, r3
 80023ee:	db05      	blt.n	80023fc <_printf_float+0x1c8>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	6121      	str	r1, [r4, #16]
 80023f4:	07d8      	lsls	r0, r3, #31
 80023f6:	d5ea      	bpl.n	80023ce <_printf_float+0x19a>
 80023f8:	1c4b      	adds	r3, r1, #1
 80023fa:	e7e7      	b.n	80023cc <_printf_float+0x198>
 80023fc:	2900      	cmp	r1, #0
 80023fe:	bfcc      	ite	gt
 8002400:	2201      	movgt	r2, #1
 8002402:	f1c1 0202 	rsble	r2, r1, #2
 8002406:	4413      	add	r3, r2
 8002408:	e7e0      	b.n	80023cc <_printf_float+0x198>
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	055a      	lsls	r2, r3, #21
 800240e:	d407      	bmi.n	8002420 <_printf_float+0x1ec>
 8002410:	6923      	ldr	r3, [r4, #16]
 8002412:	4642      	mov	r2, r8
 8002414:	4631      	mov	r1, r6
 8002416:	4628      	mov	r0, r5
 8002418:	47b8      	blx	r7
 800241a:	3001      	adds	r0, #1
 800241c:	d12b      	bne.n	8002476 <_printf_float+0x242>
 800241e:	e764      	b.n	80022ea <_printf_float+0xb6>
 8002420:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002424:	f240 80dd 	bls.w	80025e2 <_printf_float+0x3ae>
 8002428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800242c:	2200      	movs	r2, #0
 800242e:	2300      	movs	r3, #0
 8002430:	f7fe faba 	bl	80009a8 <__aeabi_dcmpeq>
 8002434:	2800      	cmp	r0, #0
 8002436:	d033      	beq.n	80024a0 <_printf_float+0x26c>
 8002438:	2301      	movs	r3, #1
 800243a:	4631      	mov	r1, r6
 800243c:	4628      	mov	r0, r5
 800243e:	4a35      	ldr	r2, [pc, #212]	; (8002514 <_printf_float+0x2e0>)
 8002440:	47b8      	blx	r7
 8002442:	3001      	adds	r0, #1
 8002444:	f43f af51 	beq.w	80022ea <_printf_float+0xb6>
 8002448:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800244c:	429a      	cmp	r2, r3
 800244e:	db02      	blt.n	8002456 <_printf_float+0x222>
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	07d8      	lsls	r0, r3, #31
 8002454:	d50f      	bpl.n	8002476 <_printf_float+0x242>
 8002456:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800245a:	4631      	mov	r1, r6
 800245c:	4628      	mov	r0, r5
 800245e:	47b8      	blx	r7
 8002460:	3001      	adds	r0, #1
 8002462:	f43f af42 	beq.w	80022ea <_printf_float+0xb6>
 8002466:	f04f 0800 	mov.w	r8, #0
 800246a:	f104 091a 	add.w	r9, r4, #26
 800246e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002470:	3b01      	subs	r3, #1
 8002472:	4543      	cmp	r3, r8
 8002474:	dc09      	bgt.n	800248a <_printf_float+0x256>
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	079b      	lsls	r3, r3, #30
 800247a:	f100 8102 	bmi.w	8002682 <_printf_float+0x44e>
 800247e:	68e0      	ldr	r0, [r4, #12]
 8002480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002482:	4298      	cmp	r0, r3
 8002484:	bfb8      	it	lt
 8002486:	4618      	movlt	r0, r3
 8002488:	e731      	b.n	80022ee <_printf_float+0xba>
 800248a:	2301      	movs	r3, #1
 800248c:	464a      	mov	r2, r9
 800248e:	4631      	mov	r1, r6
 8002490:	4628      	mov	r0, r5
 8002492:	47b8      	blx	r7
 8002494:	3001      	adds	r0, #1
 8002496:	f43f af28 	beq.w	80022ea <_printf_float+0xb6>
 800249a:	f108 0801 	add.w	r8, r8, #1
 800249e:	e7e6      	b.n	800246e <_printf_float+0x23a>
 80024a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	dc38      	bgt.n	8002518 <_printf_float+0x2e4>
 80024a6:	2301      	movs	r3, #1
 80024a8:	4631      	mov	r1, r6
 80024aa:	4628      	mov	r0, r5
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <_printf_float+0x2e0>)
 80024ae:	47b8      	blx	r7
 80024b0:	3001      	adds	r0, #1
 80024b2:	f43f af1a 	beq.w	80022ea <_printf_float+0xb6>
 80024b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80024ba:	4313      	orrs	r3, r2
 80024bc:	d102      	bne.n	80024c4 <_printf_float+0x290>
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	07d9      	lsls	r1, r3, #31
 80024c2:	d5d8      	bpl.n	8002476 <_printf_float+0x242>
 80024c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024c8:	4631      	mov	r1, r6
 80024ca:	4628      	mov	r0, r5
 80024cc:	47b8      	blx	r7
 80024ce:	3001      	adds	r0, #1
 80024d0:	f43f af0b 	beq.w	80022ea <_printf_float+0xb6>
 80024d4:	f04f 0900 	mov.w	r9, #0
 80024d8:	f104 0a1a 	add.w	sl, r4, #26
 80024dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024de:	425b      	negs	r3, r3
 80024e0:	454b      	cmp	r3, r9
 80024e2:	dc01      	bgt.n	80024e8 <_printf_float+0x2b4>
 80024e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024e6:	e794      	b.n	8002412 <_printf_float+0x1de>
 80024e8:	2301      	movs	r3, #1
 80024ea:	4652      	mov	r2, sl
 80024ec:	4631      	mov	r1, r6
 80024ee:	4628      	mov	r0, r5
 80024f0:	47b8      	blx	r7
 80024f2:	3001      	adds	r0, #1
 80024f4:	f43f aef9 	beq.w	80022ea <_printf_float+0xb6>
 80024f8:	f109 0901 	add.w	r9, r9, #1
 80024fc:	e7ee      	b.n	80024dc <_printf_float+0x2a8>
 80024fe:	bf00      	nop
 8002500:	7fefffff 	.word	0x7fefffff
 8002504:	08004b98 	.word	0x08004b98
 8002508:	08004b9c 	.word	0x08004b9c
 800250c:	08004ba4 	.word	0x08004ba4
 8002510:	08004ba0 	.word	0x08004ba0
 8002514:	08004ba8 	.word	0x08004ba8
 8002518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800251a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800251c:	429a      	cmp	r2, r3
 800251e:	bfa8      	it	ge
 8002520:	461a      	movge	r2, r3
 8002522:	2a00      	cmp	r2, #0
 8002524:	4691      	mov	r9, r2
 8002526:	dc37      	bgt.n	8002598 <_printf_float+0x364>
 8002528:	f04f 0b00 	mov.w	fp, #0
 800252c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002530:	f104 021a 	add.w	r2, r4, #26
 8002534:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002538:	ebaa 0309 	sub.w	r3, sl, r9
 800253c:	455b      	cmp	r3, fp
 800253e:	dc33      	bgt.n	80025a8 <_printf_float+0x374>
 8002540:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002544:	429a      	cmp	r2, r3
 8002546:	db3b      	blt.n	80025c0 <_printf_float+0x38c>
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	07da      	lsls	r2, r3, #31
 800254c:	d438      	bmi.n	80025c0 <_printf_float+0x38c>
 800254e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002550:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002552:	eba3 020a 	sub.w	r2, r3, sl
 8002556:	eba3 0901 	sub.w	r9, r3, r1
 800255a:	4591      	cmp	r9, r2
 800255c:	bfa8      	it	ge
 800255e:	4691      	movge	r9, r2
 8002560:	f1b9 0f00 	cmp.w	r9, #0
 8002564:	dc34      	bgt.n	80025d0 <_printf_float+0x39c>
 8002566:	f04f 0800 	mov.w	r8, #0
 800256a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800256e:	f104 0a1a 	add.w	sl, r4, #26
 8002572:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	eba3 0309 	sub.w	r3, r3, r9
 800257c:	4543      	cmp	r3, r8
 800257e:	f77f af7a 	ble.w	8002476 <_printf_float+0x242>
 8002582:	2301      	movs	r3, #1
 8002584:	4652      	mov	r2, sl
 8002586:	4631      	mov	r1, r6
 8002588:	4628      	mov	r0, r5
 800258a:	47b8      	blx	r7
 800258c:	3001      	adds	r0, #1
 800258e:	f43f aeac 	beq.w	80022ea <_printf_float+0xb6>
 8002592:	f108 0801 	add.w	r8, r8, #1
 8002596:	e7ec      	b.n	8002572 <_printf_float+0x33e>
 8002598:	4613      	mov	r3, r2
 800259a:	4631      	mov	r1, r6
 800259c:	4642      	mov	r2, r8
 800259e:	4628      	mov	r0, r5
 80025a0:	47b8      	blx	r7
 80025a2:	3001      	adds	r0, #1
 80025a4:	d1c0      	bne.n	8002528 <_printf_float+0x2f4>
 80025a6:	e6a0      	b.n	80022ea <_printf_float+0xb6>
 80025a8:	2301      	movs	r3, #1
 80025aa:	4631      	mov	r1, r6
 80025ac:	4628      	mov	r0, r5
 80025ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80025b0:	47b8      	blx	r7
 80025b2:	3001      	adds	r0, #1
 80025b4:	f43f ae99 	beq.w	80022ea <_printf_float+0xb6>
 80025b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80025ba:	f10b 0b01 	add.w	fp, fp, #1
 80025be:	e7b9      	b.n	8002534 <_printf_float+0x300>
 80025c0:	4631      	mov	r1, r6
 80025c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025c6:	4628      	mov	r0, r5
 80025c8:	47b8      	blx	r7
 80025ca:	3001      	adds	r0, #1
 80025cc:	d1bf      	bne.n	800254e <_printf_float+0x31a>
 80025ce:	e68c      	b.n	80022ea <_printf_float+0xb6>
 80025d0:	464b      	mov	r3, r9
 80025d2:	4631      	mov	r1, r6
 80025d4:	4628      	mov	r0, r5
 80025d6:	eb08 020a 	add.w	r2, r8, sl
 80025da:	47b8      	blx	r7
 80025dc:	3001      	adds	r0, #1
 80025de:	d1c2      	bne.n	8002566 <_printf_float+0x332>
 80025e0:	e683      	b.n	80022ea <_printf_float+0xb6>
 80025e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025e4:	2a01      	cmp	r2, #1
 80025e6:	dc01      	bgt.n	80025ec <_printf_float+0x3b8>
 80025e8:	07db      	lsls	r3, r3, #31
 80025ea:	d537      	bpl.n	800265c <_printf_float+0x428>
 80025ec:	2301      	movs	r3, #1
 80025ee:	4642      	mov	r2, r8
 80025f0:	4631      	mov	r1, r6
 80025f2:	4628      	mov	r0, r5
 80025f4:	47b8      	blx	r7
 80025f6:	3001      	adds	r0, #1
 80025f8:	f43f ae77 	beq.w	80022ea <_printf_float+0xb6>
 80025fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002600:	4631      	mov	r1, r6
 8002602:	4628      	mov	r0, r5
 8002604:	47b8      	blx	r7
 8002606:	3001      	adds	r0, #1
 8002608:	f43f ae6f 	beq.w	80022ea <_printf_float+0xb6>
 800260c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002610:	2200      	movs	r2, #0
 8002612:	2300      	movs	r3, #0
 8002614:	f7fe f9c8 	bl	80009a8 <__aeabi_dcmpeq>
 8002618:	b9d8      	cbnz	r0, 8002652 <_printf_float+0x41e>
 800261a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800261c:	f108 0201 	add.w	r2, r8, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	4631      	mov	r1, r6
 8002624:	4628      	mov	r0, r5
 8002626:	47b8      	blx	r7
 8002628:	3001      	adds	r0, #1
 800262a:	d10e      	bne.n	800264a <_printf_float+0x416>
 800262c:	e65d      	b.n	80022ea <_printf_float+0xb6>
 800262e:	2301      	movs	r3, #1
 8002630:	464a      	mov	r2, r9
 8002632:	4631      	mov	r1, r6
 8002634:	4628      	mov	r0, r5
 8002636:	47b8      	blx	r7
 8002638:	3001      	adds	r0, #1
 800263a:	f43f ae56 	beq.w	80022ea <_printf_float+0xb6>
 800263e:	f108 0801 	add.w	r8, r8, #1
 8002642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002644:	3b01      	subs	r3, #1
 8002646:	4543      	cmp	r3, r8
 8002648:	dcf1      	bgt.n	800262e <_printf_float+0x3fa>
 800264a:	4653      	mov	r3, sl
 800264c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002650:	e6e0      	b.n	8002414 <_printf_float+0x1e0>
 8002652:	f04f 0800 	mov.w	r8, #0
 8002656:	f104 091a 	add.w	r9, r4, #26
 800265a:	e7f2      	b.n	8002642 <_printf_float+0x40e>
 800265c:	2301      	movs	r3, #1
 800265e:	4642      	mov	r2, r8
 8002660:	e7df      	b.n	8002622 <_printf_float+0x3ee>
 8002662:	2301      	movs	r3, #1
 8002664:	464a      	mov	r2, r9
 8002666:	4631      	mov	r1, r6
 8002668:	4628      	mov	r0, r5
 800266a:	47b8      	blx	r7
 800266c:	3001      	adds	r0, #1
 800266e:	f43f ae3c 	beq.w	80022ea <_printf_float+0xb6>
 8002672:	f108 0801 	add.w	r8, r8, #1
 8002676:	68e3      	ldr	r3, [r4, #12]
 8002678:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800267a:	1a5b      	subs	r3, r3, r1
 800267c:	4543      	cmp	r3, r8
 800267e:	dcf0      	bgt.n	8002662 <_printf_float+0x42e>
 8002680:	e6fd      	b.n	800247e <_printf_float+0x24a>
 8002682:	f04f 0800 	mov.w	r8, #0
 8002686:	f104 0919 	add.w	r9, r4, #25
 800268a:	e7f4      	b.n	8002676 <_printf_float+0x442>

0800268c <_printf_common>:
 800268c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002690:	4616      	mov	r6, r2
 8002692:	4699      	mov	r9, r3
 8002694:	688a      	ldr	r2, [r1, #8]
 8002696:	690b      	ldr	r3, [r1, #16]
 8002698:	4607      	mov	r7, r0
 800269a:	4293      	cmp	r3, r2
 800269c:	bfb8      	it	lt
 800269e:	4613      	movlt	r3, r2
 80026a0:	6033      	str	r3, [r6, #0]
 80026a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026a6:	460c      	mov	r4, r1
 80026a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026ac:	b10a      	cbz	r2, 80026b2 <_printf_common+0x26>
 80026ae:	3301      	adds	r3, #1
 80026b0:	6033      	str	r3, [r6, #0]
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	0699      	lsls	r1, r3, #26
 80026b6:	bf42      	ittt	mi
 80026b8:	6833      	ldrmi	r3, [r6, #0]
 80026ba:	3302      	addmi	r3, #2
 80026bc:	6033      	strmi	r3, [r6, #0]
 80026be:	6825      	ldr	r5, [r4, #0]
 80026c0:	f015 0506 	ands.w	r5, r5, #6
 80026c4:	d106      	bne.n	80026d4 <_printf_common+0x48>
 80026c6:	f104 0a19 	add.w	sl, r4, #25
 80026ca:	68e3      	ldr	r3, [r4, #12]
 80026cc:	6832      	ldr	r2, [r6, #0]
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	42ab      	cmp	r3, r5
 80026d2:	dc28      	bgt.n	8002726 <_printf_common+0x9a>
 80026d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026d8:	1e13      	subs	r3, r2, #0
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	bf18      	it	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	0692      	lsls	r2, r2, #26
 80026e2:	d42d      	bmi.n	8002740 <_printf_common+0xb4>
 80026e4:	4649      	mov	r1, r9
 80026e6:	4638      	mov	r0, r7
 80026e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026ec:	47c0      	blx	r8
 80026ee:	3001      	adds	r0, #1
 80026f0:	d020      	beq.n	8002734 <_printf_common+0xa8>
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	68e5      	ldr	r5, [r4, #12]
 80026f6:	f003 0306 	and.w	r3, r3, #6
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf18      	it	ne
 80026fe:	2500      	movne	r5, #0
 8002700:	6832      	ldr	r2, [r6, #0]
 8002702:	f04f 0600 	mov.w	r6, #0
 8002706:	68a3      	ldr	r3, [r4, #8]
 8002708:	bf08      	it	eq
 800270a:	1aad      	subeq	r5, r5, r2
 800270c:	6922      	ldr	r2, [r4, #16]
 800270e:	bf08      	it	eq
 8002710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002714:	4293      	cmp	r3, r2
 8002716:	bfc4      	itt	gt
 8002718:	1a9b      	subgt	r3, r3, r2
 800271a:	18ed      	addgt	r5, r5, r3
 800271c:	341a      	adds	r4, #26
 800271e:	42b5      	cmp	r5, r6
 8002720:	d11a      	bne.n	8002758 <_printf_common+0xcc>
 8002722:	2000      	movs	r0, #0
 8002724:	e008      	b.n	8002738 <_printf_common+0xac>
 8002726:	2301      	movs	r3, #1
 8002728:	4652      	mov	r2, sl
 800272a:	4649      	mov	r1, r9
 800272c:	4638      	mov	r0, r7
 800272e:	47c0      	blx	r8
 8002730:	3001      	adds	r0, #1
 8002732:	d103      	bne.n	800273c <_printf_common+0xb0>
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800273c:	3501      	adds	r5, #1
 800273e:	e7c4      	b.n	80026ca <_printf_common+0x3e>
 8002740:	2030      	movs	r0, #48	; 0x30
 8002742:	18e1      	adds	r1, r4, r3
 8002744:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800274e:	4422      	add	r2, r4
 8002750:	3302      	adds	r3, #2
 8002752:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002756:	e7c5      	b.n	80026e4 <_printf_common+0x58>
 8002758:	2301      	movs	r3, #1
 800275a:	4622      	mov	r2, r4
 800275c:	4649      	mov	r1, r9
 800275e:	4638      	mov	r0, r7
 8002760:	47c0      	blx	r8
 8002762:	3001      	adds	r0, #1
 8002764:	d0e6      	beq.n	8002734 <_printf_common+0xa8>
 8002766:	3601      	adds	r6, #1
 8002768:	e7d9      	b.n	800271e <_printf_common+0x92>
	...

0800276c <_printf_i>:
 800276c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002770:	7e0f      	ldrb	r7, [r1, #24]
 8002772:	4691      	mov	r9, r2
 8002774:	2f78      	cmp	r7, #120	; 0x78
 8002776:	4680      	mov	r8, r0
 8002778:	460c      	mov	r4, r1
 800277a:	469a      	mov	sl, r3
 800277c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800277e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002782:	d807      	bhi.n	8002794 <_printf_i+0x28>
 8002784:	2f62      	cmp	r7, #98	; 0x62
 8002786:	d80a      	bhi.n	800279e <_printf_i+0x32>
 8002788:	2f00      	cmp	r7, #0
 800278a:	f000 80d9 	beq.w	8002940 <_printf_i+0x1d4>
 800278e:	2f58      	cmp	r7, #88	; 0x58
 8002790:	f000 80a4 	beq.w	80028dc <_printf_i+0x170>
 8002794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800279c:	e03a      	b.n	8002814 <_printf_i+0xa8>
 800279e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027a2:	2b15      	cmp	r3, #21
 80027a4:	d8f6      	bhi.n	8002794 <_printf_i+0x28>
 80027a6:	a101      	add	r1, pc, #4	; (adr r1, 80027ac <_printf_i+0x40>)
 80027a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027ac:	08002805 	.word	0x08002805
 80027b0:	08002819 	.word	0x08002819
 80027b4:	08002795 	.word	0x08002795
 80027b8:	08002795 	.word	0x08002795
 80027bc:	08002795 	.word	0x08002795
 80027c0:	08002795 	.word	0x08002795
 80027c4:	08002819 	.word	0x08002819
 80027c8:	08002795 	.word	0x08002795
 80027cc:	08002795 	.word	0x08002795
 80027d0:	08002795 	.word	0x08002795
 80027d4:	08002795 	.word	0x08002795
 80027d8:	08002927 	.word	0x08002927
 80027dc:	08002849 	.word	0x08002849
 80027e0:	08002909 	.word	0x08002909
 80027e4:	08002795 	.word	0x08002795
 80027e8:	08002795 	.word	0x08002795
 80027ec:	08002949 	.word	0x08002949
 80027f0:	08002795 	.word	0x08002795
 80027f4:	08002849 	.word	0x08002849
 80027f8:	08002795 	.word	0x08002795
 80027fc:	08002795 	.word	0x08002795
 8002800:	08002911 	.word	0x08002911
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	1d1a      	adds	r2, r3, #4
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	602a      	str	r2, [r5, #0]
 800280c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002814:	2301      	movs	r3, #1
 8002816:	e0a4      	b.n	8002962 <_printf_i+0x1f6>
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	6829      	ldr	r1, [r5, #0]
 800281c:	0606      	lsls	r6, r0, #24
 800281e:	f101 0304 	add.w	r3, r1, #4
 8002822:	d50a      	bpl.n	800283a <_printf_i+0xce>
 8002824:	680e      	ldr	r6, [r1, #0]
 8002826:	602b      	str	r3, [r5, #0]
 8002828:	2e00      	cmp	r6, #0
 800282a:	da03      	bge.n	8002834 <_printf_i+0xc8>
 800282c:	232d      	movs	r3, #45	; 0x2d
 800282e:	4276      	negs	r6, r6
 8002830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002834:	230a      	movs	r3, #10
 8002836:	485e      	ldr	r0, [pc, #376]	; (80029b0 <_printf_i+0x244>)
 8002838:	e019      	b.n	800286e <_printf_i+0x102>
 800283a:	680e      	ldr	r6, [r1, #0]
 800283c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002840:	602b      	str	r3, [r5, #0]
 8002842:	bf18      	it	ne
 8002844:	b236      	sxthne	r6, r6
 8002846:	e7ef      	b.n	8002828 <_printf_i+0xbc>
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	1d19      	adds	r1, r3, #4
 800284e:	6029      	str	r1, [r5, #0]
 8002850:	0601      	lsls	r1, r0, #24
 8002852:	d501      	bpl.n	8002858 <_printf_i+0xec>
 8002854:	681e      	ldr	r6, [r3, #0]
 8002856:	e002      	b.n	800285e <_printf_i+0xf2>
 8002858:	0646      	lsls	r6, r0, #25
 800285a:	d5fb      	bpl.n	8002854 <_printf_i+0xe8>
 800285c:	881e      	ldrh	r6, [r3, #0]
 800285e:	2f6f      	cmp	r7, #111	; 0x6f
 8002860:	bf0c      	ite	eq
 8002862:	2308      	moveq	r3, #8
 8002864:	230a      	movne	r3, #10
 8002866:	4852      	ldr	r0, [pc, #328]	; (80029b0 <_printf_i+0x244>)
 8002868:	2100      	movs	r1, #0
 800286a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800286e:	6865      	ldr	r5, [r4, #4]
 8002870:	2d00      	cmp	r5, #0
 8002872:	bfa8      	it	ge
 8002874:	6821      	ldrge	r1, [r4, #0]
 8002876:	60a5      	str	r5, [r4, #8]
 8002878:	bfa4      	itt	ge
 800287a:	f021 0104 	bicge.w	r1, r1, #4
 800287e:	6021      	strge	r1, [r4, #0]
 8002880:	b90e      	cbnz	r6, 8002886 <_printf_i+0x11a>
 8002882:	2d00      	cmp	r5, #0
 8002884:	d04d      	beq.n	8002922 <_printf_i+0x1b6>
 8002886:	4615      	mov	r5, r2
 8002888:	fbb6 f1f3 	udiv	r1, r6, r3
 800288c:	fb03 6711 	mls	r7, r3, r1, r6
 8002890:	5dc7      	ldrb	r7, [r0, r7]
 8002892:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002896:	4637      	mov	r7, r6
 8002898:	42bb      	cmp	r3, r7
 800289a:	460e      	mov	r6, r1
 800289c:	d9f4      	bls.n	8002888 <_printf_i+0x11c>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d10b      	bne.n	80028ba <_printf_i+0x14e>
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	07de      	lsls	r6, r3, #31
 80028a6:	d508      	bpl.n	80028ba <_printf_i+0x14e>
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	6861      	ldr	r1, [r4, #4]
 80028ac:	4299      	cmp	r1, r3
 80028ae:	bfde      	ittt	le
 80028b0:	2330      	movle	r3, #48	; 0x30
 80028b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028ba:	1b52      	subs	r2, r2, r5
 80028bc:	6122      	str	r2, [r4, #16]
 80028be:	464b      	mov	r3, r9
 80028c0:	4621      	mov	r1, r4
 80028c2:	4640      	mov	r0, r8
 80028c4:	f8cd a000 	str.w	sl, [sp]
 80028c8:	aa03      	add	r2, sp, #12
 80028ca:	f7ff fedf 	bl	800268c <_printf_common>
 80028ce:	3001      	adds	r0, #1
 80028d0:	d14c      	bne.n	800296c <_printf_i+0x200>
 80028d2:	f04f 30ff 	mov.w	r0, #4294967295
 80028d6:	b004      	add	sp, #16
 80028d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028dc:	4834      	ldr	r0, [pc, #208]	; (80029b0 <_printf_i+0x244>)
 80028de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028e2:	6829      	ldr	r1, [r5, #0]
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80028ea:	6029      	str	r1, [r5, #0]
 80028ec:	061d      	lsls	r5, r3, #24
 80028ee:	d514      	bpl.n	800291a <_printf_i+0x1ae>
 80028f0:	07df      	lsls	r7, r3, #31
 80028f2:	bf44      	itt	mi
 80028f4:	f043 0320 	orrmi.w	r3, r3, #32
 80028f8:	6023      	strmi	r3, [r4, #0]
 80028fa:	b91e      	cbnz	r6, 8002904 <_printf_i+0x198>
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	f023 0320 	bic.w	r3, r3, #32
 8002902:	6023      	str	r3, [r4, #0]
 8002904:	2310      	movs	r3, #16
 8002906:	e7af      	b.n	8002868 <_printf_i+0xfc>
 8002908:	6823      	ldr	r3, [r4, #0]
 800290a:	f043 0320 	orr.w	r3, r3, #32
 800290e:	6023      	str	r3, [r4, #0]
 8002910:	2378      	movs	r3, #120	; 0x78
 8002912:	4828      	ldr	r0, [pc, #160]	; (80029b4 <_printf_i+0x248>)
 8002914:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002918:	e7e3      	b.n	80028e2 <_printf_i+0x176>
 800291a:	0659      	lsls	r1, r3, #25
 800291c:	bf48      	it	mi
 800291e:	b2b6      	uxthmi	r6, r6
 8002920:	e7e6      	b.n	80028f0 <_printf_i+0x184>
 8002922:	4615      	mov	r5, r2
 8002924:	e7bb      	b.n	800289e <_printf_i+0x132>
 8002926:	682b      	ldr	r3, [r5, #0]
 8002928:	6826      	ldr	r6, [r4, #0]
 800292a:	1d18      	adds	r0, r3, #4
 800292c:	6961      	ldr	r1, [r4, #20]
 800292e:	6028      	str	r0, [r5, #0]
 8002930:	0635      	lsls	r5, r6, #24
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	d501      	bpl.n	800293a <_printf_i+0x1ce>
 8002936:	6019      	str	r1, [r3, #0]
 8002938:	e002      	b.n	8002940 <_printf_i+0x1d4>
 800293a:	0670      	lsls	r0, r6, #25
 800293c:	d5fb      	bpl.n	8002936 <_printf_i+0x1ca>
 800293e:	8019      	strh	r1, [r3, #0]
 8002940:	2300      	movs	r3, #0
 8002942:	4615      	mov	r5, r2
 8002944:	6123      	str	r3, [r4, #16]
 8002946:	e7ba      	b.n	80028be <_printf_i+0x152>
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	2100      	movs	r1, #0
 800294c:	1d1a      	adds	r2, r3, #4
 800294e:	602a      	str	r2, [r5, #0]
 8002950:	681d      	ldr	r5, [r3, #0]
 8002952:	6862      	ldr	r2, [r4, #4]
 8002954:	4628      	mov	r0, r5
 8002956:	f000 ffc7 	bl	80038e8 <memchr>
 800295a:	b108      	cbz	r0, 8002960 <_printf_i+0x1f4>
 800295c:	1b40      	subs	r0, r0, r5
 800295e:	6060      	str	r0, [r4, #4]
 8002960:	6863      	ldr	r3, [r4, #4]
 8002962:	6123      	str	r3, [r4, #16]
 8002964:	2300      	movs	r3, #0
 8002966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800296a:	e7a8      	b.n	80028be <_printf_i+0x152>
 800296c:	462a      	mov	r2, r5
 800296e:	4649      	mov	r1, r9
 8002970:	4640      	mov	r0, r8
 8002972:	6923      	ldr	r3, [r4, #16]
 8002974:	47d0      	blx	sl
 8002976:	3001      	adds	r0, #1
 8002978:	d0ab      	beq.n	80028d2 <_printf_i+0x166>
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	079b      	lsls	r3, r3, #30
 800297e:	d413      	bmi.n	80029a8 <_printf_i+0x23c>
 8002980:	68e0      	ldr	r0, [r4, #12]
 8002982:	9b03      	ldr	r3, [sp, #12]
 8002984:	4298      	cmp	r0, r3
 8002986:	bfb8      	it	lt
 8002988:	4618      	movlt	r0, r3
 800298a:	e7a4      	b.n	80028d6 <_printf_i+0x16a>
 800298c:	2301      	movs	r3, #1
 800298e:	4632      	mov	r2, r6
 8002990:	4649      	mov	r1, r9
 8002992:	4640      	mov	r0, r8
 8002994:	47d0      	blx	sl
 8002996:	3001      	adds	r0, #1
 8002998:	d09b      	beq.n	80028d2 <_printf_i+0x166>
 800299a:	3501      	adds	r5, #1
 800299c:	68e3      	ldr	r3, [r4, #12]
 800299e:	9903      	ldr	r1, [sp, #12]
 80029a0:	1a5b      	subs	r3, r3, r1
 80029a2:	42ab      	cmp	r3, r5
 80029a4:	dcf2      	bgt.n	800298c <_printf_i+0x220>
 80029a6:	e7eb      	b.n	8002980 <_printf_i+0x214>
 80029a8:	2500      	movs	r5, #0
 80029aa:	f104 0619 	add.w	r6, r4, #25
 80029ae:	e7f5      	b.n	800299c <_printf_i+0x230>
 80029b0:	08004baa 	.word	0x08004baa
 80029b4:	08004bbb 	.word	0x08004bbb

080029b8 <iprintf>:
 80029b8:	b40f      	push	{r0, r1, r2, r3}
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <iprintf+0x2c>)
 80029bc:	b513      	push	{r0, r1, r4, lr}
 80029be:	681c      	ldr	r4, [r3, #0]
 80029c0:	b124      	cbz	r4, 80029cc <iprintf+0x14>
 80029c2:	69a3      	ldr	r3, [r4, #24]
 80029c4:	b913      	cbnz	r3, 80029cc <iprintf+0x14>
 80029c6:	4620      	mov	r0, r4
 80029c8:	f000 fee0 	bl	800378c <__sinit>
 80029cc:	ab05      	add	r3, sp, #20
 80029ce:	4620      	mov	r0, r4
 80029d0:	9a04      	ldr	r2, [sp, #16]
 80029d2:	68a1      	ldr	r1, [r4, #8]
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	f001 fc3d 	bl	8004254 <_vfiprintf_r>
 80029da:	b002      	add	sp, #8
 80029dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e0:	b004      	add	sp, #16
 80029e2:	4770      	bx	lr
 80029e4:	2000000c 	.word	0x2000000c

080029e8 <quorem>:
 80029e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ec:	6903      	ldr	r3, [r0, #16]
 80029ee:	690c      	ldr	r4, [r1, #16]
 80029f0:	4607      	mov	r7, r0
 80029f2:	42a3      	cmp	r3, r4
 80029f4:	f2c0 8082 	blt.w	8002afc <quorem+0x114>
 80029f8:	3c01      	subs	r4, #1
 80029fa:	f100 0514 	add.w	r5, r0, #20
 80029fe:	f101 0814 	add.w	r8, r1, #20
 8002a02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a10:	3301      	adds	r3, #1
 8002a12:	429a      	cmp	r2, r3
 8002a14:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002a1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a20:	d331      	bcc.n	8002a86 <quorem+0x9e>
 8002a22:	f04f 0e00 	mov.w	lr, #0
 8002a26:	4640      	mov	r0, r8
 8002a28:	46ac      	mov	ip, r5
 8002a2a:	46f2      	mov	sl, lr
 8002a2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a30:	b293      	uxth	r3, r2
 8002a32:	fb06 e303 	mla	r3, r6, r3, lr
 8002a36:	0c12      	lsrs	r2, r2, #16
 8002a38:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	fb06 e202 	mla	r2, r6, r2, lr
 8002a42:	ebaa 0303 	sub.w	r3, sl, r3
 8002a46:	f8dc a000 	ldr.w	sl, [ip]
 8002a4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002a4e:	fa1f fa8a 	uxth.w	sl, sl
 8002a52:	4453      	add	r3, sl
 8002a54:	f8dc a000 	ldr.w	sl, [ip]
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002a5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a68:	4581      	cmp	r9, r0
 8002a6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002a6e:	f84c 3b04 	str.w	r3, [ip], #4
 8002a72:	d2db      	bcs.n	8002a2c <quorem+0x44>
 8002a74:	f855 300b 	ldr.w	r3, [r5, fp]
 8002a78:	b92b      	cbnz	r3, 8002a86 <quorem+0x9e>
 8002a7a:	9b01      	ldr	r3, [sp, #4]
 8002a7c:	3b04      	subs	r3, #4
 8002a7e:	429d      	cmp	r5, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	d32f      	bcc.n	8002ae4 <quorem+0xfc>
 8002a84:	613c      	str	r4, [r7, #16]
 8002a86:	4638      	mov	r0, r7
 8002a88:	f001 f9c8 	bl	8003e1c <__mcmp>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	db25      	blt.n	8002adc <quorem+0xf4>
 8002a90:	4628      	mov	r0, r5
 8002a92:	f04f 0c00 	mov.w	ip, #0
 8002a96:	3601      	adds	r6, #1
 8002a98:	f858 1b04 	ldr.w	r1, [r8], #4
 8002a9c:	f8d0 e000 	ldr.w	lr, [r0]
 8002aa0:	b28b      	uxth	r3, r1
 8002aa2:	ebac 0303 	sub.w	r3, ip, r3
 8002aa6:	fa1f f28e 	uxth.w	r2, lr
 8002aaa:	4413      	add	r3, r2
 8002aac:	0c0a      	lsrs	r2, r1, #16
 8002aae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002ab2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002abc:	45c1      	cmp	r9, r8
 8002abe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002ac2:	f840 3b04 	str.w	r3, [r0], #4
 8002ac6:	d2e7      	bcs.n	8002a98 <quorem+0xb0>
 8002ac8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002acc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002ad0:	b922      	cbnz	r2, 8002adc <quorem+0xf4>
 8002ad2:	3b04      	subs	r3, #4
 8002ad4:	429d      	cmp	r5, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	d30a      	bcc.n	8002af0 <quorem+0x108>
 8002ada:	613c      	str	r4, [r7, #16]
 8002adc:	4630      	mov	r0, r6
 8002ade:	b003      	add	sp, #12
 8002ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d1cb      	bne.n	8002a84 <quorem+0x9c>
 8002aec:	3c01      	subs	r4, #1
 8002aee:	e7c6      	b.n	8002a7e <quorem+0x96>
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	3b04      	subs	r3, #4
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	d1f0      	bne.n	8002ada <quorem+0xf2>
 8002af8:	3c01      	subs	r4, #1
 8002afa:	e7eb      	b.n	8002ad4 <quorem+0xec>
 8002afc:	2000      	movs	r0, #0
 8002afe:	e7ee      	b.n	8002ade <quorem+0xf6>

08002b00 <_dtoa_r>:
 8002b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b04:	4616      	mov	r6, r2
 8002b06:	461f      	mov	r7, r3
 8002b08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002b0a:	b099      	sub	sp, #100	; 0x64
 8002b0c:	4605      	mov	r5, r0
 8002b0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002b12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002b16:	b974      	cbnz	r4, 8002b36 <_dtoa_r+0x36>
 8002b18:	2010      	movs	r0, #16
 8002b1a:	f000 fedd 	bl	80038d8 <malloc>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	6268      	str	r0, [r5, #36]	; 0x24
 8002b22:	b920      	cbnz	r0, 8002b2e <_dtoa_r+0x2e>
 8002b24:	21ea      	movs	r1, #234	; 0xea
 8002b26:	4ba8      	ldr	r3, [pc, #672]	; (8002dc8 <_dtoa_r+0x2c8>)
 8002b28:	48a8      	ldr	r0, [pc, #672]	; (8002dcc <_dtoa_r+0x2cc>)
 8002b2a:	f001 fde9 	bl	8004700 <__assert_func>
 8002b2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002b32:	6004      	str	r4, [r0, #0]
 8002b34:	60c4      	str	r4, [r0, #12]
 8002b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	b151      	cbz	r1, 8002b52 <_dtoa_r+0x52>
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	4093      	lsls	r3, r2
 8002b42:	604a      	str	r2, [r1, #4]
 8002b44:	608b      	str	r3, [r1, #8]
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 ff2a 	bl	80039a0 <_Bfree>
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	1e3b      	subs	r3, r7, #0
 8002b54:	bfaf      	iteee	ge
 8002b56:	2300      	movge	r3, #0
 8002b58:	2201      	movlt	r2, #1
 8002b5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002b5e:	9305      	strlt	r3, [sp, #20]
 8002b60:	bfa8      	it	ge
 8002b62:	f8c8 3000 	strge.w	r3, [r8]
 8002b66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002b6a:	4b99      	ldr	r3, [pc, #612]	; (8002dd0 <_dtoa_r+0x2d0>)
 8002b6c:	bfb8      	it	lt
 8002b6e:	f8c8 2000 	strlt.w	r2, [r8]
 8002b72:	ea33 0309 	bics.w	r3, r3, r9
 8002b76:	d119      	bne.n	8002bac <_dtoa_r+0xac>
 8002b78:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002b84:	4333      	orrs	r3, r6
 8002b86:	f000 857f 	beq.w	8003688 <_dtoa_r+0xb88>
 8002b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002b8c:	b953      	cbnz	r3, 8002ba4 <_dtoa_r+0xa4>
 8002b8e:	4b91      	ldr	r3, [pc, #580]	; (8002dd4 <_dtoa_r+0x2d4>)
 8002b90:	e022      	b.n	8002bd8 <_dtoa_r+0xd8>
 8002b92:	4b91      	ldr	r3, [pc, #580]	; (8002dd8 <_dtoa_r+0x2d8>)
 8002b94:	9303      	str	r3, [sp, #12]
 8002b96:	3308      	adds	r3, #8
 8002b98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	9803      	ldr	r0, [sp, #12]
 8002b9e:	b019      	add	sp, #100	; 0x64
 8002ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba4:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <_dtoa_r+0x2d4>)
 8002ba6:	9303      	str	r3, [sp, #12]
 8002ba8:	3303      	adds	r3, #3
 8002baa:	e7f5      	b.n	8002b98 <_dtoa_r+0x98>
 8002bac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002bb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002bb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f7fd fef4 	bl	80009a8 <__aeabi_dcmpeq>
 8002bc0:	4680      	mov	r8, r0
 8002bc2:	b158      	cbz	r0, 8002bdc <_dtoa_r+0xdc>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8558 	beq.w	8003682 <_dtoa_r+0xb82>
 8002bd2:	4882      	ldr	r0, [pc, #520]	; (8002ddc <_dtoa_r+0x2dc>)
 8002bd4:	6018      	str	r0, [r3, #0]
 8002bd6:	1e43      	subs	r3, r0, #1
 8002bd8:	9303      	str	r3, [sp, #12]
 8002bda:	e7df      	b.n	8002b9c <_dtoa_r+0x9c>
 8002bdc:	ab16      	add	r3, sp, #88	; 0x58
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	ab17      	add	r3, sp, #92	; 0x5c
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4628      	mov	r0, r5
 8002be6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002bea:	f001 f9bf 	bl	8003f6c <__d2b>
 8002bee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002bf2:	4683      	mov	fp, r0
 8002bf4:	2c00      	cmp	r4, #0
 8002bf6:	d07f      	beq.n	8002cf8 <_dtoa_r+0x1f8>
 8002bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bfe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002c02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c06:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002c0a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002c0e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002c12:	2200      	movs	r2, #0
 8002c14:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <_dtoa_r+0x2e0>)
 8002c16:	f7fd faa7 	bl	8000168 <__aeabi_dsub>
 8002c1a:	a365      	add	r3, pc, #404	; (adr r3, 8002db0 <_dtoa_r+0x2b0>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fc5a 	bl	80004d8 <__aeabi_dmul>
 8002c24:	a364      	add	r3, pc, #400	; (adr r3, 8002db8 <_dtoa_r+0x2b8>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	f7fd fa9f 	bl	800016c <__adddf3>
 8002c2e:	4606      	mov	r6, r0
 8002c30:	4620      	mov	r0, r4
 8002c32:	460f      	mov	r7, r1
 8002c34:	f7fd fbe6 	bl	8000404 <__aeabi_i2d>
 8002c38:	a361      	add	r3, pc, #388	; (adr r3, 8002dc0 <_dtoa_r+0x2c0>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f7fd fc4b 	bl	80004d8 <__aeabi_dmul>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4630      	mov	r0, r6
 8002c48:	4639      	mov	r1, r7
 8002c4a:	f7fd fa8f 	bl	800016c <__adddf3>
 8002c4e:	4606      	mov	r6, r0
 8002c50:	460f      	mov	r7, r1
 8002c52:	f7fd fef1 	bl	8000a38 <__aeabi_d2iz>
 8002c56:	2200      	movs	r2, #0
 8002c58:	4682      	mov	sl, r0
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	4639      	mov	r1, r7
 8002c60:	f7fd feac 	bl	80009bc <__aeabi_dcmplt>
 8002c64:	b148      	cbz	r0, 8002c7a <_dtoa_r+0x17a>
 8002c66:	4650      	mov	r0, sl
 8002c68:	f7fd fbcc 	bl	8000404 <__aeabi_i2d>
 8002c6c:	4632      	mov	r2, r6
 8002c6e:	463b      	mov	r3, r7
 8002c70:	f7fd fe9a 	bl	80009a8 <__aeabi_dcmpeq>
 8002c74:	b908      	cbnz	r0, 8002c7a <_dtoa_r+0x17a>
 8002c76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002c7a:	f1ba 0f16 	cmp.w	sl, #22
 8002c7e:	d858      	bhi.n	8002d32 <_dtoa_r+0x232>
 8002c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c84:	4b57      	ldr	r3, [pc, #348]	; (8002de4 <_dtoa_r+0x2e4>)
 8002c86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f7fd fe95 	bl	80009bc <__aeabi_dcmplt>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d04f      	beq.n	8002d36 <_dtoa_r+0x236>
 8002c96:	2300      	movs	r3, #0
 8002c98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002c9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002ca0:	1b1c      	subs	r4, r3, r4
 8002ca2:	1e63      	subs	r3, r4, #1
 8002ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ca6:	bf49      	itett	mi
 8002ca8:	f1c4 0301 	rsbmi	r3, r4, #1
 8002cac:	2300      	movpl	r3, #0
 8002cae:	9306      	strmi	r3, [sp, #24]
 8002cb0:	2300      	movmi	r3, #0
 8002cb2:	bf54      	ite	pl
 8002cb4:	9306      	strpl	r3, [sp, #24]
 8002cb6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002cb8:	f1ba 0f00 	cmp.w	sl, #0
 8002cbc:	db3d      	blt.n	8002d3a <_dtoa_r+0x23a>
 8002cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cc0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002cc4:	4453      	add	r3, sl
 8002cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc8:	2300      	movs	r3, #0
 8002cca:	930a      	str	r3, [sp, #40]	; 0x28
 8002ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002cce:	2b09      	cmp	r3, #9
 8002cd0:	f200 808c 	bhi.w	8002dec <_dtoa_r+0x2ec>
 8002cd4:	2b05      	cmp	r3, #5
 8002cd6:	bfc4      	itt	gt
 8002cd8:	3b04      	subgt	r3, #4
 8002cda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002cdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002cde:	bfc8      	it	gt
 8002ce0:	2400      	movgt	r4, #0
 8002ce2:	f1a3 0302 	sub.w	r3, r3, #2
 8002ce6:	bfd8      	it	le
 8002ce8:	2401      	movle	r4, #1
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	f200 808a 	bhi.w	8002e04 <_dtoa_r+0x304>
 8002cf0:	e8df f003 	tbb	[pc, r3]
 8002cf4:	5b4d4f2d 	.word	0x5b4d4f2d
 8002cf8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002cfc:	441c      	add	r4, r3
 8002cfe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	bfc3      	ittte	gt
 8002d06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002d0a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002d0e:	fa09 f303 	lslgt.w	r3, r9, r3
 8002d12:	f1c3 0320 	rsble	r3, r3, #32
 8002d16:	bfc6      	itte	gt
 8002d18:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002d1c:	4318      	orrgt	r0, r3
 8002d1e:	fa06 f003 	lslle.w	r0, r6, r3
 8002d22:	f7fd fb5f 	bl	80003e4 <__aeabi_ui2d>
 8002d26:	2301      	movs	r3, #1
 8002d28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002d2c:	3c01      	subs	r4, #1
 8002d2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d30:	e76f      	b.n	8002c12 <_dtoa_r+0x112>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e7b2      	b.n	8002c9c <_dtoa_r+0x19c>
 8002d36:	900f      	str	r0, [sp, #60]	; 0x3c
 8002d38:	e7b1      	b.n	8002c9e <_dtoa_r+0x19e>
 8002d3a:	9b06      	ldr	r3, [sp, #24]
 8002d3c:	eba3 030a 	sub.w	r3, r3, sl
 8002d40:	9306      	str	r3, [sp, #24]
 8002d42:	f1ca 0300 	rsb	r3, sl, #0
 8002d46:	930a      	str	r3, [sp, #40]	; 0x28
 8002d48:	2300      	movs	r3, #0
 8002d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8002d4c:	e7be      	b.n	8002ccc <_dtoa_r+0x1cc>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	dc58      	bgt.n	8002e0a <_dtoa_r+0x30a>
 8002d58:	f04f 0901 	mov.w	r9, #1
 8002d5c:	464b      	mov	r3, r9
 8002d5e:	f8cd 9020 	str.w	r9, [sp, #32]
 8002d62:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8002d66:	2200      	movs	r2, #0
 8002d68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002d6a:	6042      	str	r2, [r0, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	f102 0614 	add.w	r6, r2, #20
 8002d72:	429e      	cmp	r6, r3
 8002d74:	6841      	ldr	r1, [r0, #4]
 8002d76:	d94e      	bls.n	8002e16 <_dtoa_r+0x316>
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f000 fdd1 	bl	8003920 <_Balloc>
 8002d7e:	9003      	str	r0, [sp, #12]
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d14c      	bne.n	8002e1e <_dtoa_r+0x31e>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <_dtoa_r+0x2e8>)
 8002d8c:	e6cc      	b.n	8002b28 <_dtoa_r+0x28>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e7de      	b.n	8002d50 <_dtoa_r+0x250>
 8002d92:	2300      	movs	r3, #0
 8002d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d98:	eb0a 0903 	add.w	r9, sl, r3
 8002d9c:	f109 0301 	add.w	r3, r9, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	9308      	str	r3, [sp, #32]
 8002da4:	bfb8      	it	lt
 8002da6:	2301      	movlt	r3, #1
 8002da8:	e7dd      	b.n	8002d66 <_dtoa_r+0x266>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e7f2      	b.n	8002d94 <_dtoa_r+0x294>
 8002dae:	bf00      	nop
 8002db0:	636f4361 	.word	0x636f4361
 8002db4:	3fd287a7 	.word	0x3fd287a7
 8002db8:	8b60c8b3 	.word	0x8b60c8b3
 8002dbc:	3fc68a28 	.word	0x3fc68a28
 8002dc0:	509f79fb 	.word	0x509f79fb
 8002dc4:	3fd34413 	.word	0x3fd34413
 8002dc8:	08004bd9 	.word	0x08004bd9
 8002dcc:	08004bf0 	.word	0x08004bf0
 8002dd0:	7ff00000 	.word	0x7ff00000
 8002dd4:	08004bd5 	.word	0x08004bd5
 8002dd8:	08004bcc 	.word	0x08004bcc
 8002ddc:	08004ba9 	.word	0x08004ba9
 8002de0:	3ff80000 	.word	0x3ff80000
 8002de4:	08004d40 	.word	0x08004d40
 8002de8:	08004c4b 	.word	0x08004c4b
 8002dec:	2401      	movs	r4, #1
 8002dee:	2300      	movs	r3, #0
 8002df0:	940b      	str	r4, [sp, #44]	; 0x2c
 8002df2:	9322      	str	r3, [sp, #136]	; 0x88
 8002df4:	f04f 39ff 	mov.w	r9, #4294967295
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2312      	movs	r3, #18
 8002dfc:	f8cd 9020 	str.w	r9, [sp, #32]
 8002e00:	9223      	str	r2, [sp, #140]	; 0x8c
 8002e02:	e7b0      	b.n	8002d66 <_dtoa_r+0x266>
 8002e04:	2301      	movs	r3, #1
 8002e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e08:	e7f4      	b.n	8002df4 <_dtoa_r+0x2f4>
 8002e0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002e0e:	464b      	mov	r3, r9
 8002e10:	f8cd 9020 	str.w	r9, [sp, #32]
 8002e14:	e7a7      	b.n	8002d66 <_dtoa_r+0x266>
 8002e16:	3101      	adds	r1, #1
 8002e18:	6041      	str	r1, [r0, #4]
 8002e1a:	0052      	lsls	r2, r2, #1
 8002e1c:	e7a7      	b.n	8002d6e <_dtoa_r+0x26e>
 8002e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e20:	9a03      	ldr	r2, [sp, #12]
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	9b08      	ldr	r3, [sp, #32]
 8002e26:	2b0e      	cmp	r3, #14
 8002e28:	f200 80a8 	bhi.w	8002f7c <_dtoa_r+0x47c>
 8002e2c:	2c00      	cmp	r4, #0
 8002e2e:	f000 80a5 	beq.w	8002f7c <_dtoa_r+0x47c>
 8002e32:	f1ba 0f00 	cmp.w	sl, #0
 8002e36:	dd34      	ble.n	8002ea2 <_dtoa_r+0x3a2>
 8002e38:	4a9a      	ldr	r2, [pc, #616]	; (80030a4 <_dtoa_r+0x5a4>)
 8002e3a:	f00a 030f 	and.w	r3, sl, #15
 8002e3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e42:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8002e46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002e4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8002e52:	d016      	beq.n	8002e82 <_dtoa_r+0x382>
 8002e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002e58:	4b93      	ldr	r3, [pc, #588]	; (80030a8 <_dtoa_r+0x5a8>)
 8002e5a:	2703      	movs	r7, #3
 8002e5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e60:	f7fd fc64 	bl	800072c <__aeabi_ddiv>
 8002e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e68:	f004 040f 	and.w	r4, r4, #15
 8002e6c:	4e8e      	ldr	r6, [pc, #568]	; (80030a8 <_dtoa_r+0x5a8>)
 8002e6e:	b954      	cbnz	r4, 8002e86 <_dtoa_r+0x386>
 8002e70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e78:	f7fd fc58 	bl	800072c <__aeabi_ddiv>
 8002e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e80:	e029      	b.n	8002ed6 <_dtoa_r+0x3d6>
 8002e82:	2702      	movs	r7, #2
 8002e84:	e7f2      	b.n	8002e6c <_dtoa_r+0x36c>
 8002e86:	07e1      	lsls	r1, r4, #31
 8002e88:	d508      	bpl.n	8002e9c <_dtoa_r+0x39c>
 8002e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002e8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002e92:	f7fd fb21 	bl	80004d8 <__aeabi_dmul>
 8002e96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002e9a:	3701      	adds	r7, #1
 8002e9c:	1064      	asrs	r4, r4, #1
 8002e9e:	3608      	adds	r6, #8
 8002ea0:	e7e5      	b.n	8002e6e <_dtoa_r+0x36e>
 8002ea2:	f000 80a5 	beq.w	8002ff0 <_dtoa_r+0x4f0>
 8002ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002eaa:	f1ca 0400 	rsb	r4, sl, #0
 8002eae:	4b7d      	ldr	r3, [pc, #500]	; (80030a4 <_dtoa_r+0x5a4>)
 8002eb0:	f004 020f 	and.w	r2, r4, #15
 8002eb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fb0c 	bl	80004d8 <__aeabi_dmul>
 8002ec0:	2702      	movs	r7, #2
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ec8:	4e77      	ldr	r6, [pc, #476]	; (80030a8 <_dtoa_r+0x5a8>)
 8002eca:	1124      	asrs	r4, r4, #4
 8002ecc:	2c00      	cmp	r4, #0
 8002ece:	f040 8084 	bne.w	8002fda <_dtoa_r+0x4da>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1d2      	bne.n	8002e7c <_dtoa_r+0x37c>
 8002ed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 808b 	beq.w	8002ff4 <_dtoa_r+0x4f4>
 8002ede:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002ee2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002ee6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002eea:	2200      	movs	r2, #0
 8002eec:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <_dtoa_r+0x5ac>)
 8002eee:	f7fd fd65 	bl	80009bc <__aeabi_dcmplt>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d07e      	beq.n	8002ff4 <_dtoa_r+0x4f4>
 8002ef6:	9b08      	ldr	r3, [sp, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d07b      	beq.n	8002ff4 <_dtoa_r+0x4f4>
 8002efc:	f1b9 0f00 	cmp.w	r9, #0
 8002f00:	dd38      	ble.n	8002f74 <_dtoa_r+0x474>
 8002f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f06:	2200      	movs	r2, #0
 8002f08:	4b69      	ldr	r3, [pc, #420]	; (80030b0 <_dtoa_r+0x5b0>)
 8002f0a:	f7fd fae5 	bl	80004d8 <__aeabi_dmul>
 8002f0e:	464c      	mov	r4, r9
 8002f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f14:	f10a 38ff 	add.w	r8, sl, #4294967295
 8002f18:	3701      	adds	r7, #1
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f7fd fa72 	bl	8000404 <__aeabi_i2d>
 8002f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f24:	f7fd fad8 	bl	80004d8 <__aeabi_dmul>
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <_dtoa_r+0x5b4>)
 8002f2c:	f7fd f91e 	bl	800016c <__adddf3>
 8002f30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8002f34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002f38:	9611      	str	r6, [sp, #68]	; 0x44
 8002f3a:	2c00      	cmp	r4, #0
 8002f3c:	d15d      	bne.n	8002ffa <_dtoa_r+0x4fa>
 8002f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f42:	2200      	movs	r2, #0
 8002f44:	4b5c      	ldr	r3, [pc, #368]	; (80030b8 <_dtoa_r+0x5b8>)
 8002f46:	f7fd f90f 	bl	8000168 <__aeabi_dsub>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f52:	4633      	mov	r3, r6
 8002f54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f56:	f7fd fd4f 	bl	80009f8 <__aeabi_dcmpgt>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	f040 829c 	bne.w	8003498 <_dtoa_r+0x998>
 8002f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8002f6a:	f7fd fd27 	bl	80009bc <__aeabi_dcmplt>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	f040 8290 	bne.w	8003494 <_dtoa_r+0x994>
 8002f74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8002f78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f2c0 8152 	blt.w	8003228 <_dtoa_r+0x728>
 8002f84:	f1ba 0f0e 	cmp.w	sl, #14
 8002f88:	f300 814e 	bgt.w	8003228 <_dtoa_r+0x728>
 8002f8c:	4b45      	ldr	r3, [pc, #276]	; (80030a4 <_dtoa_r+0x5a4>)
 8002f8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002f92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8002f9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f280 80db 	bge.w	8003158 <_dtoa_r+0x658>
 8002fa2:	9b08      	ldr	r3, [sp, #32]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f300 80d7 	bgt.w	8003158 <_dtoa_r+0x658>
 8002faa:	f040 8272 	bne.w	8003492 <_dtoa_r+0x992>
 8002fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4b40      	ldr	r3, [pc, #256]	; (80030b8 <_dtoa_r+0x5b8>)
 8002fb6:	f7fd fa8f 	bl	80004d8 <__aeabi_dmul>
 8002fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fbe:	f7fd fd11 	bl	80009e4 <__aeabi_dcmpge>
 8002fc2:	9c08      	ldr	r4, [sp, #32]
 8002fc4:	4626      	mov	r6, r4
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	f040 8248 	bne.w	800345c <_dtoa_r+0x95c>
 8002fcc:	2331      	movs	r3, #49	; 0x31
 8002fce:	9f03      	ldr	r7, [sp, #12]
 8002fd0:	f10a 0a01 	add.w	sl, sl, #1
 8002fd4:	f807 3b01 	strb.w	r3, [r7], #1
 8002fd8:	e244      	b.n	8003464 <_dtoa_r+0x964>
 8002fda:	07e2      	lsls	r2, r4, #31
 8002fdc:	d505      	bpl.n	8002fea <_dtoa_r+0x4ea>
 8002fde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002fe2:	f7fd fa79 	bl	80004d8 <__aeabi_dmul>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	3701      	adds	r7, #1
 8002fea:	1064      	asrs	r4, r4, #1
 8002fec:	3608      	adds	r6, #8
 8002fee:	e76d      	b.n	8002ecc <_dtoa_r+0x3cc>
 8002ff0:	2702      	movs	r7, #2
 8002ff2:	e770      	b.n	8002ed6 <_dtoa_r+0x3d6>
 8002ff4:	46d0      	mov	r8, sl
 8002ff6:	9c08      	ldr	r4, [sp, #32]
 8002ff8:	e78f      	b.n	8002f1a <_dtoa_r+0x41a>
 8002ffa:	9903      	ldr	r1, [sp, #12]
 8002ffc:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <_dtoa_r+0x5a4>)
 8002ffe:	4421      	add	r1, r4
 8003000:	9112      	str	r1, [sp, #72]	; 0x48
 8003002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003004:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003008:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800300c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003010:	2900      	cmp	r1, #0
 8003012:	d055      	beq.n	80030c0 <_dtoa_r+0x5c0>
 8003014:	2000      	movs	r0, #0
 8003016:	4929      	ldr	r1, [pc, #164]	; (80030bc <_dtoa_r+0x5bc>)
 8003018:	f7fd fb88 	bl	800072c <__aeabi_ddiv>
 800301c:	463b      	mov	r3, r7
 800301e:	4632      	mov	r2, r6
 8003020:	f7fd f8a2 	bl	8000168 <__aeabi_dsub>
 8003024:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003028:	9f03      	ldr	r7, [sp, #12]
 800302a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800302e:	f7fd fd03 	bl	8000a38 <__aeabi_d2iz>
 8003032:	4604      	mov	r4, r0
 8003034:	f7fd f9e6 	bl	8000404 <__aeabi_i2d>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003040:	f7fd f892 	bl	8000168 <__aeabi_dsub>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	3430      	adds	r4, #48	; 0x30
 800304a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800304e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003052:	f807 4b01 	strb.w	r4, [r7], #1
 8003056:	f7fd fcb1 	bl	80009bc <__aeabi_dcmplt>
 800305a:	2800      	cmp	r0, #0
 800305c:	d174      	bne.n	8003148 <_dtoa_r+0x648>
 800305e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003062:	2000      	movs	r0, #0
 8003064:	4911      	ldr	r1, [pc, #68]	; (80030ac <_dtoa_r+0x5ac>)
 8003066:	f7fd f87f 	bl	8000168 <__aeabi_dsub>
 800306a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800306e:	f7fd fca5 	bl	80009bc <__aeabi_dcmplt>
 8003072:	2800      	cmp	r0, #0
 8003074:	f040 80b7 	bne.w	80031e6 <_dtoa_r+0x6e6>
 8003078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800307a:	429f      	cmp	r7, r3
 800307c:	f43f af7a 	beq.w	8002f74 <_dtoa_r+0x474>
 8003080:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003084:	2200      	movs	r2, #0
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <_dtoa_r+0x5b0>)
 8003088:	f7fd fa26 	bl	80004d8 <__aeabi_dmul>
 800308c:	2200      	movs	r2, #0
 800308e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <_dtoa_r+0x5b0>)
 8003098:	f7fd fa1e 	bl	80004d8 <__aeabi_dmul>
 800309c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030a0:	e7c3      	b.n	800302a <_dtoa_r+0x52a>
 80030a2:	bf00      	nop
 80030a4:	08004d40 	.word	0x08004d40
 80030a8:	08004d18 	.word	0x08004d18
 80030ac:	3ff00000 	.word	0x3ff00000
 80030b0:	40240000 	.word	0x40240000
 80030b4:	401c0000 	.word	0x401c0000
 80030b8:	40140000 	.word	0x40140000
 80030bc:	3fe00000 	.word	0x3fe00000
 80030c0:	4630      	mov	r0, r6
 80030c2:	4639      	mov	r1, r7
 80030c4:	f7fd fa08 	bl	80004d8 <__aeabi_dmul>
 80030c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80030ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030ce:	9c03      	ldr	r4, [sp, #12]
 80030d0:	9314      	str	r3, [sp, #80]	; 0x50
 80030d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030d6:	f7fd fcaf 	bl	8000a38 <__aeabi_d2iz>
 80030da:	9015      	str	r0, [sp, #84]	; 0x54
 80030dc:	f7fd f992 	bl	8000404 <__aeabi_i2d>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030e8:	f7fd f83e 	bl	8000168 <__aeabi_dsub>
 80030ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80030ee:	4606      	mov	r6, r0
 80030f0:	3330      	adds	r3, #48	; 0x30
 80030f2:	f804 3b01 	strb.w	r3, [r4], #1
 80030f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80030f8:	460f      	mov	r7, r1
 80030fa:	429c      	cmp	r4, r3
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	d124      	bne.n	800314c <_dtoa_r+0x64c>
 8003102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003106:	4bb0      	ldr	r3, [pc, #704]	; (80033c8 <_dtoa_r+0x8c8>)
 8003108:	f7fd f830 	bl	800016c <__adddf3>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4630      	mov	r0, r6
 8003112:	4639      	mov	r1, r7
 8003114:	f7fd fc70 	bl	80009f8 <__aeabi_dcmpgt>
 8003118:	2800      	cmp	r0, #0
 800311a:	d163      	bne.n	80031e4 <_dtoa_r+0x6e4>
 800311c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003120:	2000      	movs	r0, #0
 8003122:	49a9      	ldr	r1, [pc, #676]	; (80033c8 <_dtoa_r+0x8c8>)
 8003124:	f7fd f820 	bl	8000168 <__aeabi_dsub>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4630      	mov	r0, r6
 800312e:	4639      	mov	r1, r7
 8003130:	f7fd fc44 	bl	80009bc <__aeabi_dcmplt>
 8003134:	2800      	cmp	r0, #0
 8003136:	f43f af1d 	beq.w	8002f74 <_dtoa_r+0x474>
 800313a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800313c:	1e7b      	subs	r3, r7, #1
 800313e:	9314      	str	r3, [sp, #80]	; 0x50
 8003140:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d0f8      	beq.n	800313a <_dtoa_r+0x63a>
 8003148:	46c2      	mov	sl, r8
 800314a:	e03b      	b.n	80031c4 <_dtoa_r+0x6c4>
 800314c:	4b9f      	ldr	r3, [pc, #636]	; (80033cc <_dtoa_r+0x8cc>)
 800314e:	f7fd f9c3 	bl	80004d8 <__aeabi_dmul>
 8003152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003156:	e7bc      	b.n	80030d2 <_dtoa_r+0x5d2>
 8003158:	9f03      	ldr	r7, [sp, #12]
 800315a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800315e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003162:	4640      	mov	r0, r8
 8003164:	4649      	mov	r1, r9
 8003166:	f7fd fae1 	bl	800072c <__aeabi_ddiv>
 800316a:	f7fd fc65 	bl	8000a38 <__aeabi_d2iz>
 800316e:	4604      	mov	r4, r0
 8003170:	f7fd f948 	bl	8000404 <__aeabi_i2d>
 8003174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003178:	f7fd f9ae 	bl	80004d8 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4640      	mov	r0, r8
 8003182:	4649      	mov	r1, r9
 8003184:	f7fc fff0 	bl	8000168 <__aeabi_dsub>
 8003188:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800318c:	f807 6b01 	strb.w	r6, [r7], #1
 8003190:	9e03      	ldr	r6, [sp, #12]
 8003192:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003196:	1bbe      	subs	r6, r7, r6
 8003198:	45b4      	cmp	ip, r6
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	d136      	bne.n	800320e <_dtoa_r+0x70e>
 80031a0:	f7fc ffe4 	bl	800016c <__adddf3>
 80031a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031a8:	4680      	mov	r8, r0
 80031aa:	4689      	mov	r9, r1
 80031ac:	f7fd fc24 	bl	80009f8 <__aeabi_dcmpgt>
 80031b0:	bb58      	cbnz	r0, 800320a <_dtoa_r+0x70a>
 80031b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031b6:	4640      	mov	r0, r8
 80031b8:	4649      	mov	r1, r9
 80031ba:	f7fd fbf5 	bl	80009a8 <__aeabi_dcmpeq>
 80031be:	b108      	cbz	r0, 80031c4 <_dtoa_r+0x6c4>
 80031c0:	07e1      	lsls	r1, r4, #31
 80031c2:	d422      	bmi.n	800320a <_dtoa_r+0x70a>
 80031c4:	4628      	mov	r0, r5
 80031c6:	4659      	mov	r1, fp
 80031c8:	f000 fbea 	bl	80039a0 <_Bfree>
 80031cc:	2300      	movs	r3, #0
 80031ce:	703b      	strb	r3, [r7, #0]
 80031d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80031d2:	f10a 0001 	add.w	r0, sl, #1
 80031d6:	6018      	str	r0, [r3, #0]
 80031d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f43f acde 	beq.w	8002b9c <_dtoa_r+0x9c>
 80031e0:	601f      	str	r7, [r3, #0]
 80031e2:	e4db      	b.n	8002b9c <_dtoa_r+0x9c>
 80031e4:	4627      	mov	r7, r4
 80031e6:	463b      	mov	r3, r7
 80031e8:	461f      	mov	r7, r3
 80031ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80031ee:	2a39      	cmp	r2, #57	; 0x39
 80031f0:	d107      	bne.n	8003202 <_dtoa_r+0x702>
 80031f2:	9a03      	ldr	r2, [sp, #12]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1f7      	bne.n	80031e8 <_dtoa_r+0x6e8>
 80031f8:	2230      	movs	r2, #48	; 0x30
 80031fa:	9903      	ldr	r1, [sp, #12]
 80031fc:	f108 0801 	add.w	r8, r8, #1
 8003200:	700a      	strb	r2, [r1, #0]
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	3201      	adds	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	e79e      	b.n	8003148 <_dtoa_r+0x648>
 800320a:	46d0      	mov	r8, sl
 800320c:	e7eb      	b.n	80031e6 <_dtoa_r+0x6e6>
 800320e:	2200      	movs	r2, #0
 8003210:	4b6e      	ldr	r3, [pc, #440]	; (80033cc <_dtoa_r+0x8cc>)
 8003212:	f7fd f961 	bl	80004d8 <__aeabi_dmul>
 8003216:	2200      	movs	r2, #0
 8003218:	2300      	movs	r3, #0
 800321a:	4680      	mov	r8, r0
 800321c:	4689      	mov	r9, r1
 800321e:	f7fd fbc3 	bl	80009a8 <__aeabi_dcmpeq>
 8003222:	2800      	cmp	r0, #0
 8003224:	d09b      	beq.n	800315e <_dtoa_r+0x65e>
 8003226:	e7cd      	b.n	80031c4 <_dtoa_r+0x6c4>
 8003228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800322a:	2a00      	cmp	r2, #0
 800322c:	f000 80d0 	beq.w	80033d0 <_dtoa_r+0x8d0>
 8003230:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003232:	2a01      	cmp	r2, #1
 8003234:	f300 80ae 	bgt.w	8003394 <_dtoa_r+0x894>
 8003238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800323a:	2a00      	cmp	r2, #0
 800323c:	f000 80a6 	beq.w	800338c <_dtoa_r+0x88c>
 8003240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003244:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003246:	9f06      	ldr	r7, [sp, #24]
 8003248:	9a06      	ldr	r2, [sp, #24]
 800324a:	2101      	movs	r1, #1
 800324c:	441a      	add	r2, r3
 800324e:	9206      	str	r2, [sp, #24]
 8003250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003252:	4628      	mov	r0, r5
 8003254:	441a      	add	r2, r3
 8003256:	9209      	str	r2, [sp, #36]	; 0x24
 8003258:	f000 fc58 	bl	8003b0c <__i2b>
 800325c:	4606      	mov	r6, r0
 800325e:	2f00      	cmp	r7, #0
 8003260:	dd0c      	ble.n	800327c <_dtoa_r+0x77c>
 8003262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003264:	2b00      	cmp	r3, #0
 8003266:	dd09      	ble.n	800327c <_dtoa_r+0x77c>
 8003268:	42bb      	cmp	r3, r7
 800326a:	bfa8      	it	ge
 800326c:	463b      	movge	r3, r7
 800326e:	9a06      	ldr	r2, [sp, #24]
 8003270:	1aff      	subs	r7, r7, r3
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	9206      	str	r2, [sp, #24]
 8003276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	9309      	str	r3, [sp, #36]	; 0x24
 800327c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800327e:	b1f3      	cbz	r3, 80032be <_dtoa_r+0x7be>
 8003280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80a8 	beq.w	80033d8 <_dtoa_r+0x8d8>
 8003288:	2c00      	cmp	r4, #0
 800328a:	dd10      	ble.n	80032ae <_dtoa_r+0x7ae>
 800328c:	4631      	mov	r1, r6
 800328e:	4622      	mov	r2, r4
 8003290:	4628      	mov	r0, r5
 8003292:	f000 fcf9 	bl	8003c88 <__pow5mult>
 8003296:	465a      	mov	r2, fp
 8003298:	4601      	mov	r1, r0
 800329a:	4606      	mov	r6, r0
 800329c:	4628      	mov	r0, r5
 800329e:	f000 fc4b 	bl	8003b38 <__multiply>
 80032a2:	4680      	mov	r8, r0
 80032a4:	4659      	mov	r1, fp
 80032a6:	4628      	mov	r0, r5
 80032a8:	f000 fb7a 	bl	80039a0 <_Bfree>
 80032ac:	46c3      	mov	fp, r8
 80032ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032b0:	1b1a      	subs	r2, r3, r4
 80032b2:	d004      	beq.n	80032be <_dtoa_r+0x7be>
 80032b4:	4659      	mov	r1, fp
 80032b6:	4628      	mov	r0, r5
 80032b8:	f000 fce6 	bl	8003c88 <__pow5mult>
 80032bc:	4683      	mov	fp, r0
 80032be:	2101      	movs	r1, #1
 80032c0:	4628      	mov	r0, r5
 80032c2:	f000 fc23 	bl	8003b0c <__i2b>
 80032c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032c8:	4604      	mov	r4, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f340 8086 	ble.w	80033dc <_dtoa_r+0x8dc>
 80032d0:	461a      	mov	r2, r3
 80032d2:	4601      	mov	r1, r0
 80032d4:	4628      	mov	r0, r5
 80032d6:	f000 fcd7 	bl	8003c88 <__pow5mult>
 80032da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80032dc:	4604      	mov	r4, r0
 80032de:	2b01      	cmp	r3, #1
 80032e0:	dd7f      	ble.n	80033e2 <_dtoa_r+0x8e2>
 80032e2:	f04f 0800 	mov.w	r8, #0
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80032ec:	6918      	ldr	r0, [r3, #16]
 80032ee:	f000 fbbf 	bl	8003a70 <__hi0bits>
 80032f2:	f1c0 0020 	rsb	r0, r0, #32
 80032f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032f8:	4418      	add	r0, r3
 80032fa:	f010 001f 	ands.w	r0, r0, #31
 80032fe:	f000 8092 	beq.w	8003426 <_dtoa_r+0x926>
 8003302:	f1c0 0320 	rsb	r3, r0, #32
 8003306:	2b04      	cmp	r3, #4
 8003308:	f340 808a 	ble.w	8003420 <_dtoa_r+0x920>
 800330c:	f1c0 001c 	rsb	r0, r0, #28
 8003310:	9b06      	ldr	r3, [sp, #24]
 8003312:	4407      	add	r7, r0
 8003314:	4403      	add	r3, r0
 8003316:	9306      	str	r3, [sp, #24]
 8003318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800331a:	4403      	add	r3, r0
 800331c:	9309      	str	r3, [sp, #36]	; 0x24
 800331e:	9b06      	ldr	r3, [sp, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	dd05      	ble.n	8003330 <_dtoa_r+0x830>
 8003324:	4659      	mov	r1, fp
 8003326:	461a      	mov	r2, r3
 8003328:	4628      	mov	r0, r5
 800332a:	f000 fd07 	bl	8003d3c <__lshift>
 800332e:	4683      	mov	fp, r0
 8003330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	dd05      	ble.n	8003342 <_dtoa_r+0x842>
 8003336:	4621      	mov	r1, r4
 8003338:	461a      	mov	r2, r3
 800333a:	4628      	mov	r0, r5
 800333c:	f000 fcfe 	bl	8003d3c <__lshift>
 8003340:	4604      	mov	r4, r0
 8003342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d070      	beq.n	800342a <_dtoa_r+0x92a>
 8003348:	4621      	mov	r1, r4
 800334a:	4658      	mov	r0, fp
 800334c:	f000 fd66 	bl	8003e1c <__mcmp>
 8003350:	2800      	cmp	r0, #0
 8003352:	da6a      	bge.n	800342a <_dtoa_r+0x92a>
 8003354:	2300      	movs	r3, #0
 8003356:	4659      	mov	r1, fp
 8003358:	220a      	movs	r2, #10
 800335a:	4628      	mov	r0, r5
 800335c:	f000 fb42 	bl	80039e4 <__multadd>
 8003360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003362:	4683      	mov	fp, r0
 8003364:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8194 	beq.w	8003696 <_dtoa_r+0xb96>
 800336e:	4631      	mov	r1, r6
 8003370:	2300      	movs	r3, #0
 8003372:	220a      	movs	r2, #10
 8003374:	4628      	mov	r0, r5
 8003376:	f000 fb35 	bl	80039e4 <__multadd>
 800337a:	f1b9 0f00 	cmp.w	r9, #0
 800337e:	4606      	mov	r6, r0
 8003380:	f300 8093 	bgt.w	80034aa <_dtoa_r+0x9aa>
 8003384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003386:	2b02      	cmp	r3, #2
 8003388:	dc57      	bgt.n	800343a <_dtoa_r+0x93a>
 800338a:	e08e      	b.n	80034aa <_dtoa_r+0x9aa>
 800338c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800338e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003392:	e757      	b.n	8003244 <_dtoa_r+0x744>
 8003394:	9b08      	ldr	r3, [sp, #32]
 8003396:	1e5c      	subs	r4, r3, #1
 8003398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800339a:	42a3      	cmp	r3, r4
 800339c:	bfb7      	itett	lt
 800339e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80033a0:	1b1c      	subge	r4, r3, r4
 80033a2:	1ae2      	sublt	r2, r4, r3
 80033a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80033a6:	bfbe      	ittt	lt
 80033a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80033aa:	189b      	addlt	r3, r3, r2
 80033ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80033ae:	9b08      	ldr	r3, [sp, #32]
 80033b0:	bfb8      	it	lt
 80033b2:	2400      	movlt	r4, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bfbb      	ittet	lt
 80033b8:	9b06      	ldrlt	r3, [sp, #24]
 80033ba:	9a08      	ldrlt	r2, [sp, #32]
 80033bc:	9f06      	ldrge	r7, [sp, #24]
 80033be:	1a9f      	sublt	r7, r3, r2
 80033c0:	bfac      	ite	ge
 80033c2:	9b08      	ldrge	r3, [sp, #32]
 80033c4:	2300      	movlt	r3, #0
 80033c6:	e73f      	b.n	8003248 <_dtoa_r+0x748>
 80033c8:	3fe00000 	.word	0x3fe00000
 80033cc:	40240000 	.word	0x40240000
 80033d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80033d2:	9f06      	ldr	r7, [sp, #24]
 80033d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80033d6:	e742      	b.n	800325e <_dtoa_r+0x75e>
 80033d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033da:	e76b      	b.n	80032b4 <_dtoa_r+0x7b4>
 80033dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033de:	2b01      	cmp	r3, #1
 80033e0:	dc19      	bgt.n	8003416 <_dtoa_r+0x916>
 80033e2:	9b04      	ldr	r3, [sp, #16]
 80033e4:	b9bb      	cbnz	r3, 8003416 <_dtoa_r+0x916>
 80033e6:	9b05      	ldr	r3, [sp, #20]
 80033e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ec:	b99b      	cbnz	r3, 8003416 <_dtoa_r+0x916>
 80033ee:	9b05      	ldr	r3, [sp, #20]
 80033f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033f4:	0d1b      	lsrs	r3, r3, #20
 80033f6:	051b      	lsls	r3, r3, #20
 80033f8:	b183      	cbz	r3, 800341c <_dtoa_r+0x91c>
 80033fa:	f04f 0801 	mov.w	r8, #1
 80033fe:	9b06      	ldr	r3, [sp, #24]
 8003400:	3301      	adds	r3, #1
 8003402:	9306      	str	r3, [sp, #24]
 8003404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003406:	3301      	adds	r3, #1
 8003408:	9309      	str	r3, [sp, #36]	; 0x24
 800340a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f af6a 	bne.w	80032e6 <_dtoa_r+0x7e6>
 8003412:	2001      	movs	r0, #1
 8003414:	e76f      	b.n	80032f6 <_dtoa_r+0x7f6>
 8003416:	f04f 0800 	mov.w	r8, #0
 800341a:	e7f6      	b.n	800340a <_dtoa_r+0x90a>
 800341c:	4698      	mov	r8, r3
 800341e:	e7f4      	b.n	800340a <_dtoa_r+0x90a>
 8003420:	f43f af7d 	beq.w	800331e <_dtoa_r+0x81e>
 8003424:	4618      	mov	r0, r3
 8003426:	301c      	adds	r0, #28
 8003428:	e772      	b.n	8003310 <_dtoa_r+0x810>
 800342a:	9b08      	ldr	r3, [sp, #32]
 800342c:	2b00      	cmp	r3, #0
 800342e:	dc36      	bgt.n	800349e <_dtoa_r+0x99e>
 8003430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003432:	2b02      	cmp	r3, #2
 8003434:	dd33      	ble.n	800349e <_dtoa_r+0x99e>
 8003436:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800343a:	f1b9 0f00 	cmp.w	r9, #0
 800343e:	d10d      	bne.n	800345c <_dtoa_r+0x95c>
 8003440:	4621      	mov	r1, r4
 8003442:	464b      	mov	r3, r9
 8003444:	2205      	movs	r2, #5
 8003446:	4628      	mov	r0, r5
 8003448:	f000 facc 	bl	80039e4 <__multadd>
 800344c:	4601      	mov	r1, r0
 800344e:	4604      	mov	r4, r0
 8003450:	4658      	mov	r0, fp
 8003452:	f000 fce3 	bl	8003e1c <__mcmp>
 8003456:	2800      	cmp	r0, #0
 8003458:	f73f adb8 	bgt.w	8002fcc <_dtoa_r+0x4cc>
 800345c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800345e:	9f03      	ldr	r7, [sp, #12]
 8003460:	ea6f 0a03 	mvn.w	sl, r3
 8003464:	f04f 0800 	mov.w	r8, #0
 8003468:	4621      	mov	r1, r4
 800346a:	4628      	mov	r0, r5
 800346c:	f000 fa98 	bl	80039a0 <_Bfree>
 8003470:	2e00      	cmp	r6, #0
 8003472:	f43f aea7 	beq.w	80031c4 <_dtoa_r+0x6c4>
 8003476:	f1b8 0f00 	cmp.w	r8, #0
 800347a:	d005      	beq.n	8003488 <_dtoa_r+0x988>
 800347c:	45b0      	cmp	r8, r6
 800347e:	d003      	beq.n	8003488 <_dtoa_r+0x988>
 8003480:	4641      	mov	r1, r8
 8003482:	4628      	mov	r0, r5
 8003484:	f000 fa8c 	bl	80039a0 <_Bfree>
 8003488:	4631      	mov	r1, r6
 800348a:	4628      	mov	r0, r5
 800348c:	f000 fa88 	bl	80039a0 <_Bfree>
 8003490:	e698      	b.n	80031c4 <_dtoa_r+0x6c4>
 8003492:	2400      	movs	r4, #0
 8003494:	4626      	mov	r6, r4
 8003496:	e7e1      	b.n	800345c <_dtoa_r+0x95c>
 8003498:	46c2      	mov	sl, r8
 800349a:	4626      	mov	r6, r4
 800349c:	e596      	b.n	8002fcc <_dtoa_r+0x4cc>
 800349e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80fd 	beq.w	80036a4 <_dtoa_r+0xba4>
 80034aa:	2f00      	cmp	r7, #0
 80034ac:	dd05      	ble.n	80034ba <_dtoa_r+0x9ba>
 80034ae:	4631      	mov	r1, r6
 80034b0:	463a      	mov	r2, r7
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 fc42 	bl	8003d3c <__lshift>
 80034b8:	4606      	mov	r6, r0
 80034ba:	f1b8 0f00 	cmp.w	r8, #0
 80034be:	d05c      	beq.n	800357a <_dtoa_r+0xa7a>
 80034c0:	4628      	mov	r0, r5
 80034c2:	6871      	ldr	r1, [r6, #4]
 80034c4:	f000 fa2c 	bl	8003920 <_Balloc>
 80034c8:	4607      	mov	r7, r0
 80034ca:	b928      	cbnz	r0, 80034d8 <_dtoa_r+0x9d8>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80034d2:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <_dtoa_r+0xbd0>)
 80034d4:	f7ff bb28 	b.w	8002b28 <_dtoa_r+0x28>
 80034d8:	6932      	ldr	r2, [r6, #16]
 80034da:	f106 010c 	add.w	r1, r6, #12
 80034de:	3202      	adds	r2, #2
 80034e0:	0092      	lsls	r2, r2, #2
 80034e2:	300c      	adds	r0, #12
 80034e4:	f000 fa0e 	bl	8003904 <memcpy>
 80034e8:	2201      	movs	r2, #1
 80034ea:	4639      	mov	r1, r7
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 fc25 	bl	8003d3c <__lshift>
 80034f2:	46b0      	mov	r8, r6
 80034f4:	4606      	mov	r6, r0
 80034f6:	9b03      	ldr	r3, [sp, #12]
 80034f8:	3301      	adds	r3, #1
 80034fa:	9308      	str	r3, [sp, #32]
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	444b      	add	r3, r9
 8003500:	930a      	str	r3, [sp, #40]	; 0x28
 8003502:	9b04      	ldr	r3, [sp, #16]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	9309      	str	r3, [sp, #36]	; 0x24
 800350a:	9b08      	ldr	r3, [sp, #32]
 800350c:	4621      	mov	r1, r4
 800350e:	3b01      	subs	r3, #1
 8003510:	4658      	mov	r0, fp
 8003512:	9304      	str	r3, [sp, #16]
 8003514:	f7ff fa68 	bl	80029e8 <quorem>
 8003518:	4603      	mov	r3, r0
 800351a:	4641      	mov	r1, r8
 800351c:	3330      	adds	r3, #48	; 0x30
 800351e:	9006      	str	r0, [sp, #24]
 8003520:	4658      	mov	r0, fp
 8003522:	930b      	str	r3, [sp, #44]	; 0x2c
 8003524:	f000 fc7a 	bl	8003e1c <__mcmp>
 8003528:	4632      	mov	r2, r6
 800352a:	4681      	mov	r9, r0
 800352c:	4621      	mov	r1, r4
 800352e:	4628      	mov	r0, r5
 8003530:	f000 fc90 	bl	8003e54 <__mdiff>
 8003534:	68c2      	ldr	r2, [r0, #12]
 8003536:	4607      	mov	r7, r0
 8003538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800353a:	bb02      	cbnz	r2, 800357e <_dtoa_r+0xa7e>
 800353c:	4601      	mov	r1, r0
 800353e:	4658      	mov	r0, fp
 8003540:	f000 fc6c 	bl	8003e1c <__mcmp>
 8003544:	4602      	mov	r2, r0
 8003546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003548:	4639      	mov	r1, r7
 800354a:	4628      	mov	r0, r5
 800354c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003550:	f000 fa26 	bl	80039a0 <_Bfree>
 8003554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003558:	9f08      	ldr	r7, [sp, #32]
 800355a:	ea43 0102 	orr.w	r1, r3, r2
 800355e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003560:	430b      	orrs	r3, r1
 8003562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003564:	d10d      	bne.n	8003582 <_dtoa_r+0xa82>
 8003566:	2b39      	cmp	r3, #57	; 0x39
 8003568:	d029      	beq.n	80035be <_dtoa_r+0xabe>
 800356a:	f1b9 0f00 	cmp.w	r9, #0
 800356e:	dd01      	ble.n	8003574 <_dtoa_r+0xa74>
 8003570:	9b06      	ldr	r3, [sp, #24]
 8003572:	3331      	adds	r3, #49	; 0x31
 8003574:	9a04      	ldr	r2, [sp, #16]
 8003576:	7013      	strb	r3, [r2, #0]
 8003578:	e776      	b.n	8003468 <_dtoa_r+0x968>
 800357a:	4630      	mov	r0, r6
 800357c:	e7b9      	b.n	80034f2 <_dtoa_r+0x9f2>
 800357e:	2201      	movs	r2, #1
 8003580:	e7e2      	b.n	8003548 <_dtoa_r+0xa48>
 8003582:	f1b9 0f00 	cmp.w	r9, #0
 8003586:	db06      	blt.n	8003596 <_dtoa_r+0xa96>
 8003588:	9922      	ldr	r1, [sp, #136]	; 0x88
 800358a:	ea41 0909 	orr.w	r9, r1, r9
 800358e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003590:	ea59 0101 	orrs.w	r1, r9, r1
 8003594:	d120      	bne.n	80035d8 <_dtoa_r+0xad8>
 8003596:	2a00      	cmp	r2, #0
 8003598:	ddec      	ble.n	8003574 <_dtoa_r+0xa74>
 800359a:	4659      	mov	r1, fp
 800359c:	2201      	movs	r2, #1
 800359e:	4628      	mov	r0, r5
 80035a0:	9308      	str	r3, [sp, #32]
 80035a2:	f000 fbcb 	bl	8003d3c <__lshift>
 80035a6:	4621      	mov	r1, r4
 80035a8:	4683      	mov	fp, r0
 80035aa:	f000 fc37 	bl	8003e1c <__mcmp>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	9b08      	ldr	r3, [sp, #32]
 80035b2:	dc02      	bgt.n	80035ba <_dtoa_r+0xaba>
 80035b4:	d1de      	bne.n	8003574 <_dtoa_r+0xa74>
 80035b6:	07da      	lsls	r2, r3, #31
 80035b8:	d5dc      	bpl.n	8003574 <_dtoa_r+0xa74>
 80035ba:	2b39      	cmp	r3, #57	; 0x39
 80035bc:	d1d8      	bne.n	8003570 <_dtoa_r+0xa70>
 80035be:	2339      	movs	r3, #57	; 0x39
 80035c0:	9a04      	ldr	r2, [sp, #16]
 80035c2:	7013      	strb	r3, [r2, #0]
 80035c4:	463b      	mov	r3, r7
 80035c6:	461f      	mov	r7, r3
 80035c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	2a39      	cmp	r2, #57	; 0x39
 80035d0:	d050      	beq.n	8003674 <_dtoa_r+0xb74>
 80035d2:	3201      	adds	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e747      	b.n	8003468 <_dtoa_r+0x968>
 80035d8:	2a00      	cmp	r2, #0
 80035da:	dd03      	ble.n	80035e4 <_dtoa_r+0xae4>
 80035dc:	2b39      	cmp	r3, #57	; 0x39
 80035de:	d0ee      	beq.n	80035be <_dtoa_r+0xabe>
 80035e0:	3301      	adds	r3, #1
 80035e2:	e7c7      	b.n	8003574 <_dtoa_r+0xa74>
 80035e4:	9a08      	ldr	r2, [sp, #32]
 80035e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80035ec:	428a      	cmp	r2, r1
 80035ee:	d02a      	beq.n	8003646 <_dtoa_r+0xb46>
 80035f0:	4659      	mov	r1, fp
 80035f2:	2300      	movs	r3, #0
 80035f4:	220a      	movs	r2, #10
 80035f6:	4628      	mov	r0, r5
 80035f8:	f000 f9f4 	bl	80039e4 <__multadd>
 80035fc:	45b0      	cmp	r8, r6
 80035fe:	4683      	mov	fp, r0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	f04f 020a 	mov.w	r2, #10
 8003608:	4641      	mov	r1, r8
 800360a:	4628      	mov	r0, r5
 800360c:	d107      	bne.n	800361e <_dtoa_r+0xb1e>
 800360e:	f000 f9e9 	bl	80039e4 <__multadd>
 8003612:	4680      	mov	r8, r0
 8003614:	4606      	mov	r6, r0
 8003616:	9b08      	ldr	r3, [sp, #32]
 8003618:	3301      	adds	r3, #1
 800361a:	9308      	str	r3, [sp, #32]
 800361c:	e775      	b.n	800350a <_dtoa_r+0xa0a>
 800361e:	f000 f9e1 	bl	80039e4 <__multadd>
 8003622:	4631      	mov	r1, r6
 8003624:	4680      	mov	r8, r0
 8003626:	2300      	movs	r3, #0
 8003628:	220a      	movs	r2, #10
 800362a:	4628      	mov	r0, r5
 800362c:	f000 f9da 	bl	80039e4 <__multadd>
 8003630:	4606      	mov	r6, r0
 8003632:	e7f0      	b.n	8003616 <_dtoa_r+0xb16>
 8003634:	f1b9 0f00 	cmp.w	r9, #0
 8003638:	bfcc      	ite	gt
 800363a:	464f      	movgt	r7, r9
 800363c:	2701      	movle	r7, #1
 800363e:	f04f 0800 	mov.w	r8, #0
 8003642:	9a03      	ldr	r2, [sp, #12]
 8003644:	4417      	add	r7, r2
 8003646:	4659      	mov	r1, fp
 8003648:	2201      	movs	r2, #1
 800364a:	4628      	mov	r0, r5
 800364c:	9308      	str	r3, [sp, #32]
 800364e:	f000 fb75 	bl	8003d3c <__lshift>
 8003652:	4621      	mov	r1, r4
 8003654:	4683      	mov	fp, r0
 8003656:	f000 fbe1 	bl	8003e1c <__mcmp>
 800365a:	2800      	cmp	r0, #0
 800365c:	dcb2      	bgt.n	80035c4 <_dtoa_r+0xac4>
 800365e:	d102      	bne.n	8003666 <_dtoa_r+0xb66>
 8003660:	9b08      	ldr	r3, [sp, #32]
 8003662:	07db      	lsls	r3, r3, #31
 8003664:	d4ae      	bmi.n	80035c4 <_dtoa_r+0xac4>
 8003666:	463b      	mov	r3, r7
 8003668:	461f      	mov	r7, r3
 800366a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800366e:	2a30      	cmp	r2, #48	; 0x30
 8003670:	d0fa      	beq.n	8003668 <_dtoa_r+0xb68>
 8003672:	e6f9      	b.n	8003468 <_dtoa_r+0x968>
 8003674:	9a03      	ldr	r2, [sp, #12]
 8003676:	429a      	cmp	r2, r3
 8003678:	d1a5      	bne.n	80035c6 <_dtoa_r+0xac6>
 800367a:	2331      	movs	r3, #49	; 0x31
 800367c:	f10a 0a01 	add.w	sl, sl, #1
 8003680:	e779      	b.n	8003576 <_dtoa_r+0xa76>
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <_dtoa_r+0xbd4>)
 8003684:	f7ff baa8 	b.w	8002bd8 <_dtoa_r+0xd8>
 8003688:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800368a:	2b00      	cmp	r3, #0
 800368c:	f47f aa81 	bne.w	8002b92 <_dtoa_r+0x92>
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <_dtoa_r+0xbd8>)
 8003692:	f7ff baa1 	b.w	8002bd8 <_dtoa_r+0xd8>
 8003696:	f1b9 0f00 	cmp.w	r9, #0
 800369a:	dc03      	bgt.n	80036a4 <_dtoa_r+0xba4>
 800369c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800369e:	2b02      	cmp	r3, #2
 80036a0:	f73f aecb 	bgt.w	800343a <_dtoa_r+0x93a>
 80036a4:	9f03      	ldr	r7, [sp, #12]
 80036a6:	4621      	mov	r1, r4
 80036a8:	4658      	mov	r0, fp
 80036aa:	f7ff f99d 	bl	80029e8 <quorem>
 80036ae:	9a03      	ldr	r2, [sp, #12]
 80036b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80036b4:	f807 3b01 	strb.w	r3, [r7], #1
 80036b8:	1aba      	subs	r2, r7, r2
 80036ba:	4591      	cmp	r9, r2
 80036bc:	ddba      	ble.n	8003634 <_dtoa_r+0xb34>
 80036be:	4659      	mov	r1, fp
 80036c0:	2300      	movs	r3, #0
 80036c2:	220a      	movs	r2, #10
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f98d 	bl	80039e4 <__multadd>
 80036ca:	4683      	mov	fp, r0
 80036cc:	e7eb      	b.n	80036a6 <_dtoa_r+0xba6>
 80036ce:	bf00      	nop
 80036d0:	08004c4b 	.word	0x08004c4b
 80036d4:	08004ba8 	.word	0x08004ba8
 80036d8:	08004bcc 	.word	0x08004bcc

080036dc <std>:
 80036dc:	2300      	movs	r3, #0
 80036de:	b510      	push	{r4, lr}
 80036e0:	4604      	mov	r4, r0
 80036e2:	e9c0 3300 	strd	r3, r3, [r0]
 80036e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036ea:	6083      	str	r3, [r0, #8]
 80036ec:	8181      	strh	r1, [r0, #12]
 80036ee:	6643      	str	r3, [r0, #100]	; 0x64
 80036f0:	81c2      	strh	r2, [r0, #14]
 80036f2:	6183      	str	r3, [r0, #24]
 80036f4:	4619      	mov	r1, r3
 80036f6:	2208      	movs	r2, #8
 80036f8:	305c      	adds	r0, #92	; 0x5c
 80036fa:	f7fe fcf5 	bl	80020e8 <memset>
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <std+0x38>)
 8003700:	6224      	str	r4, [r4, #32]
 8003702:	6263      	str	r3, [r4, #36]	; 0x24
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <std+0x3c>)
 8003706:	62a3      	str	r3, [r4, #40]	; 0x28
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <std+0x40>)
 800370a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <std+0x44>)
 800370e:	6323      	str	r3, [r4, #48]	; 0x30
 8003710:	bd10      	pop	{r4, pc}
 8003712:	bf00      	nop
 8003714:	080044d5 	.word	0x080044d5
 8003718:	080044f7 	.word	0x080044f7
 800371c:	0800452f 	.word	0x0800452f
 8003720:	08004553 	.word	0x08004553

08003724 <_cleanup_r>:
 8003724:	4901      	ldr	r1, [pc, #4]	; (800372c <_cleanup_r+0x8>)
 8003726:	f000 b8af 	b.w	8003888 <_fwalk_reent>
 800372a:	bf00      	nop
 800372c:	08004861 	.word	0x08004861

08003730 <__sfmoreglue>:
 8003730:	2268      	movs	r2, #104	; 0x68
 8003732:	b570      	push	{r4, r5, r6, lr}
 8003734:	1e4d      	subs	r5, r1, #1
 8003736:	4355      	muls	r5, r2
 8003738:	460e      	mov	r6, r1
 800373a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800373e:	f000 fced 	bl	800411c <_malloc_r>
 8003742:	4604      	mov	r4, r0
 8003744:	b140      	cbz	r0, 8003758 <__sfmoreglue+0x28>
 8003746:	2100      	movs	r1, #0
 8003748:	e9c0 1600 	strd	r1, r6, [r0]
 800374c:	300c      	adds	r0, #12
 800374e:	60a0      	str	r0, [r4, #8]
 8003750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003754:	f7fe fcc8 	bl	80020e8 <memset>
 8003758:	4620      	mov	r0, r4
 800375a:	bd70      	pop	{r4, r5, r6, pc}

0800375c <__sfp_lock_acquire>:
 800375c:	4801      	ldr	r0, [pc, #4]	; (8003764 <__sfp_lock_acquire+0x8>)
 800375e:	f000 b8b8 	b.w	80038d2 <__retarget_lock_acquire_recursive>
 8003762:	bf00      	nop
 8003764:	20000245 	.word	0x20000245

08003768 <__sfp_lock_release>:
 8003768:	4801      	ldr	r0, [pc, #4]	; (8003770 <__sfp_lock_release+0x8>)
 800376a:	f000 b8b3 	b.w	80038d4 <__retarget_lock_release_recursive>
 800376e:	bf00      	nop
 8003770:	20000245 	.word	0x20000245

08003774 <__sinit_lock_acquire>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__sinit_lock_acquire+0x8>)
 8003776:	f000 b8ac 	b.w	80038d2 <__retarget_lock_acquire_recursive>
 800377a:	bf00      	nop
 800377c:	20000246 	.word	0x20000246

08003780 <__sinit_lock_release>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__sinit_lock_release+0x8>)
 8003782:	f000 b8a7 	b.w	80038d4 <__retarget_lock_release_recursive>
 8003786:	bf00      	nop
 8003788:	20000246 	.word	0x20000246

0800378c <__sinit>:
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
 8003790:	f7ff fff0 	bl	8003774 <__sinit_lock_acquire>
 8003794:	69a3      	ldr	r3, [r4, #24]
 8003796:	b11b      	cbz	r3, 80037a0 <__sinit+0x14>
 8003798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800379c:	f7ff bff0 	b.w	8003780 <__sinit_lock_release>
 80037a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037a4:	6523      	str	r3, [r4, #80]	; 0x50
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <__sinit+0x68>)
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <__sinit+0x6c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80037ae:	42a3      	cmp	r3, r4
 80037b0:	bf08      	it	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	4620      	mov	r0, r4
 80037b6:	bf08      	it	eq
 80037b8:	61a3      	streq	r3, [r4, #24]
 80037ba:	f000 f81f 	bl	80037fc <__sfp>
 80037be:	6060      	str	r0, [r4, #4]
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 f81b 	bl	80037fc <__sfp>
 80037c6:	60a0      	str	r0, [r4, #8]
 80037c8:	4620      	mov	r0, r4
 80037ca:	f000 f817 	bl	80037fc <__sfp>
 80037ce:	2200      	movs	r2, #0
 80037d0:	2104      	movs	r1, #4
 80037d2:	60e0      	str	r0, [r4, #12]
 80037d4:	6860      	ldr	r0, [r4, #4]
 80037d6:	f7ff ff81 	bl	80036dc <std>
 80037da:	2201      	movs	r2, #1
 80037dc:	2109      	movs	r1, #9
 80037de:	68a0      	ldr	r0, [r4, #8]
 80037e0:	f7ff ff7c 	bl	80036dc <std>
 80037e4:	2202      	movs	r2, #2
 80037e6:	2112      	movs	r1, #18
 80037e8:	68e0      	ldr	r0, [r4, #12]
 80037ea:	f7ff ff77 	bl	80036dc <std>
 80037ee:	2301      	movs	r3, #1
 80037f0:	61a3      	str	r3, [r4, #24]
 80037f2:	e7d1      	b.n	8003798 <__sinit+0xc>
 80037f4:	08004b94 	.word	0x08004b94
 80037f8:	08003725 	.word	0x08003725

080037fc <__sfp>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	4607      	mov	r7, r0
 8003800:	f7ff ffac 	bl	800375c <__sfp_lock_acquire>
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <__sfp+0x84>)
 8003806:	681e      	ldr	r6, [r3, #0]
 8003808:	69b3      	ldr	r3, [r6, #24]
 800380a:	b913      	cbnz	r3, 8003812 <__sfp+0x16>
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff ffbd 	bl	800378c <__sinit>
 8003812:	3648      	adds	r6, #72	; 0x48
 8003814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003818:	3b01      	subs	r3, #1
 800381a:	d503      	bpl.n	8003824 <__sfp+0x28>
 800381c:	6833      	ldr	r3, [r6, #0]
 800381e:	b30b      	cbz	r3, 8003864 <__sfp+0x68>
 8003820:	6836      	ldr	r6, [r6, #0]
 8003822:	e7f7      	b.n	8003814 <__sfp+0x18>
 8003824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003828:	b9d5      	cbnz	r5, 8003860 <__sfp+0x64>
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <__sfp+0x88>)
 800382c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003830:	60e3      	str	r3, [r4, #12]
 8003832:	6665      	str	r5, [r4, #100]	; 0x64
 8003834:	f000 f84c 	bl	80038d0 <__retarget_lock_init_recursive>
 8003838:	f7ff ff96 	bl	8003768 <__sfp_lock_release>
 800383c:	2208      	movs	r2, #8
 800383e:	4629      	mov	r1, r5
 8003840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003848:	6025      	str	r5, [r4, #0]
 800384a:	61a5      	str	r5, [r4, #24]
 800384c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003850:	f7fe fc4a 	bl	80020e8 <memset>
 8003854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800385c:	4620      	mov	r0, r4
 800385e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003860:	3468      	adds	r4, #104	; 0x68
 8003862:	e7d9      	b.n	8003818 <__sfp+0x1c>
 8003864:	2104      	movs	r1, #4
 8003866:	4638      	mov	r0, r7
 8003868:	f7ff ff62 	bl	8003730 <__sfmoreglue>
 800386c:	4604      	mov	r4, r0
 800386e:	6030      	str	r0, [r6, #0]
 8003870:	2800      	cmp	r0, #0
 8003872:	d1d5      	bne.n	8003820 <__sfp+0x24>
 8003874:	f7ff ff78 	bl	8003768 <__sfp_lock_release>
 8003878:	230c      	movs	r3, #12
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	e7ee      	b.n	800385c <__sfp+0x60>
 800387e:	bf00      	nop
 8003880:	08004b94 	.word	0x08004b94
 8003884:	ffff0001 	.word	0xffff0001

08003888 <_fwalk_reent>:
 8003888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800388c:	4606      	mov	r6, r0
 800388e:	4688      	mov	r8, r1
 8003890:	2700      	movs	r7, #0
 8003892:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800389a:	f1b9 0901 	subs.w	r9, r9, #1
 800389e:	d505      	bpl.n	80038ac <_fwalk_reent+0x24>
 80038a0:	6824      	ldr	r4, [r4, #0]
 80038a2:	2c00      	cmp	r4, #0
 80038a4:	d1f7      	bne.n	8003896 <_fwalk_reent+0xe>
 80038a6:	4638      	mov	r0, r7
 80038a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ac:	89ab      	ldrh	r3, [r5, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d907      	bls.n	80038c2 <_fwalk_reent+0x3a>
 80038b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b6:	3301      	adds	r3, #1
 80038b8:	d003      	beq.n	80038c2 <_fwalk_reent+0x3a>
 80038ba:	4629      	mov	r1, r5
 80038bc:	4630      	mov	r0, r6
 80038be:	47c0      	blx	r8
 80038c0:	4307      	orrs	r7, r0
 80038c2:	3568      	adds	r5, #104	; 0x68
 80038c4:	e7e9      	b.n	800389a <_fwalk_reent+0x12>
	...

080038c8 <_localeconv_r>:
 80038c8:	4800      	ldr	r0, [pc, #0]	; (80038cc <_localeconv_r+0x4>)
 80038ca:	4770      	bx	lr
 80038cc:	20000160 	.word	0x20000160

080038d0 <__retarget_lock_init_recursive>:
 80038d0:	4770      	bx	lr

080038d2 <__retarget_lock_acquire_recursive>:
 80038d2:	4770      	bx	lr

080038d4 <__retarget_lock_release_recursive>:
 80038d4:	4770      	bx	lr
	...

080038d8 <malloc>:
 80038d8:	4b02      	ldr	r3, [pc, #8]	; (80038e4 <malloc+0xc>)
 80038da:	4601      	mov	r1, r0
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	f000 bc1d 	b.w	800411c <_malloc_r>
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c

080038e8 <memchr>:
 80038e8:	4603      	mov	r3, r0
 80038ea:	b510      	push	{r4, lr}
 80038ec:	b2c9      	uxtb	r1, r1
 80038ee:	4402      	add	r2, r0
 80038f0:	4293      	cmp	r3, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	d101      	bne.n	80038fa <memchr+0x12>
 80038f6:	2000      	movs	r0, #0
 80038f8:	e003      	b.n	8003902 <memchr+0x1a>
 80038fa:	7804      	ldrb	r4, [r0, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	428c      	cmp	r4, r1
 8003900:	d1f6      	bne.n	80038f0 <memchr+0x8>
 8003902:	bd10      	pop	{r4, pc}

08003904 <memcpy>:
 8003904:	440a      	add	r2, r1
 8003906:	4291      	cmp	r1, r2
 8003908:	f100 33ff 	add.w	r3, r0, #4294967295
 800390c:	d100      	bne.n	8003910 <memcpy+0xc>
 800390e:	4770      	bx	lr
 8003910:	b510      	push	{r4, lr}
 8003912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003916:	4291      	cmp	r1, r2
 8003918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800391c:	d1f9      	bne.n	8003912 <memcpy+0xe>
 800391e:	bd10      	pop	{r4, pc}

08003920 <_Balloc>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003924:	4604      	mov	r4, r0
 8003926:	460d      	mov	r5, r1
 8003928:	b976      	cbnz	r6, 8003948 <_Balloc+0x28>
 800392a:	2010      	movs	r0, #16
 800392c:	f7ff ffd4 	bl	80038d8 <malloc>
 8003930:	4602      	mov	r2, r0
 8003932:	6260      	str	r0, [r4, #36]	; 0x24
 8003934:	b920      	cbnz	r0, 8003940 <_Balloc+0x20>
 8003936:	2166      	movs	r1, #102	; 0x66
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <_Balloc+0x78>)
 800393a:	4818      	ldr	r0, [pc, #96]	; (800399c <_Balloc+0x7c>)
 800393c:	f000 fee0 	bl	8004700 <__assert_func>
 8003940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003944:	6006      	str	r6, [r0, #0]
 8003946:	60c6      	str	r6, [r0, #12]
 8003948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800394a:	68f3      	ldr	r3, [r6, #12]
 800394c:	b183      	cbz	r3, 8003970 <_Balloc+0x50>
 800394e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003956:	b9b8      	cbnz	r0, 8003988 <_Balloc+0x68>
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f605 	lsl.w	r6, r1, r5
 800395e:	1d72      	adds	r2, r6, #5
 8003960:	4620      	mov	r0, r4
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	f000 fb5e 	bl	8004024 <_calloc_r>
 8003968:	b160      	cbz	r0, 8003984 <_Balloc+0x64>
 800396a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800396e:	e00e      	b.n	800398e <_Balloc+0x6e>
 8003970:	2221      	movs	r2, #33	; 0x21
 8003972:	2104      	movs	r1, #4
 8003974:	4620      	mov	r0, r4
 8003976:	f000 fb55 	bl	8004024 <_calloc_r>
 800397a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800397c:	60f0      	str	r0, [r6, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e4      	bne.n	800394e <_Balloc+0x2e>
 8003984:	2000      	movs	r0, #0
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	6802      	ldr	r2, [r0, #0]
 800398a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800398e:	2300      	movs	r3, #0
 8003990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003994:	e7f7      	b.n	8003986 <_Balloc+0x66>
 8003996:	bf00      	nop
 8003998:	08004bd9 	.word	0x08004bd9
 800399c:	08004cbc 	.word	0x08004cbc

080039a0 <_Bfree>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80039a4:	4605      	mov	r5, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	b976      	cbnz	r6, 80039c8 <_Bfree+0x28>
 80039aa:	2010      	movs	r0, #16
 80039ac:	f7ff ff94 	bl	80038d8 <malloc>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6268      	str	r0, [r5, #36]	; 0x24
 80039b4:	b920      	cbnz	r0, 80039c0 <_Bfree+0x20>
 80039b6:	218a      	movs	r1, #138	; 0x8a
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <_Bfree+0x3c>)
 80039ba:	4809      	ldr	r0, [pc, #36]	; (80039e0 <_Bfree+0x40>)
 80039bc:	f000 fea0 	bl	8004700 <__assert_func>
 80039c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80039c4:	6006      	str	r6, [r0, #0]
 80039c6:	60c6      	str	r6, [r0, #12]
 80039c8:	b13c      	cbz	r4, 80039da <_Bfree+0x3a>
 80039ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039cc:	6862      	ldr	r2, [r4, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039d4:	6021      	str	r1, [r4, #0]
 80039d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	08004bd9 	.word	0x08004bd9
 80039e0:	08004cbc 	.word	0x08004cbc

080039e4 <__multadd>:
 80039e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e8:	4607      	mov	r7, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	461e      	mov	r6, r3
 80039ee:	2000      	movs	r0, #0
 80039f0:	690d      	ldr	r5, [r1, #16]
 80039f2:	f101 0c14 	add.w	ip, r1, #20
 80039f6:	f8dc 3000 	ldr.w	r3, [ip]
 80039fa:	3001      	adds	r0, #1
 80039fc:	b299      	uxth	r1, r3
 80039fe:	fb02 6101 	mla	r1, r2, r1, r6
 8003a02:	0c1e      	lsrs	r6, r3, #16
 8003a04:	0c0b      	lsrs	r3, r1, #16
 8003a06:	fb02 3306 	mla	r3, r2, r6, r3
 8003a0a:	b289      	uxth	r1, r1
 8003a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003a10:	4285      	cmp	r5, r0
 8003a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003a16:	f84c 1b04 	str.w	r1, [ip], #4
 8003a1a:	dcec      	bgt.n	80039f6 <__multadd+0x12>
 8003a1c:	b30e      	cbz	r6, 8003a62 <__multadd+0x7e>
 8003a1e:	68a3      	ldr	r3, [r4, #8]
 8003a20:	42ab      	cmp	r3, r5
 8003a22:	dc19      	bgt.n	8003a58 <__multadd+0x74>
 8003a24:	6861      	ldr	r1, [r4, #4]
 8003a26:	4638      	mov	r0, r7
 8003a28:	3101      	adds	r1, #1
 8003a2a:	f7ff ff79 	bl	8003920 <_Balloc>
 8003a2e:	4680      	mov	r8, r0
 8003a30:	b928      	cbnz	r0, 8003a3e <__multadd+0x5a>
 8003a32:	4602      	mov	r2, r0
 8003a34:	21b5      	movs	r1, #181	; 0xb5
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <__multadd+0x84>)
 8003a38:	480c      	ldr	r0, [pc, #48]	; (8003a6c <__multadd+0x88>)
 8003a3a:	f000 fe61 	bl	8004700 <__assert_func>
 8003a3e:	6922      	ldr	r2, [r4, #16]
 8003a40:	f104 010c 	add.w	r1, r4, #12
 8003a44:	3202      	adds	r2, #2
 8003a46:	0092      	lsls	r2, r2, #2
 8003a48:	300c      	adds	r0, #12
 8003a4a:	f7ff ff5b 	bl	8003904 <memcpy>
 8003a4e:	4621      	mov	r1, r4
 8003a50:	4638      	mov	r0, r7
 8003a52:	f7ff ffa5 	bl	80039a0 <_Bfree>
 8003a56:	4644      	mov	r4, r8
 8003a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a5c:	3501      	adds	r5, #1
 8003a5e:	615e      	str	r6, [r3, #20]
 8003a60:	6125      	str	r5, [r4, #16]
 8003a62:	4620      	mov	r0, r4
 8003a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a68:	08004c4b 	.word	0x08004c4b
 8003a6c:	08004cbc 	.word	0x08004cbc

08003a70 <__hi0bits>:
 8003a70:	0c02      	lsrs	r2, r0, #16
 8003a72:	0412      	lsls	r2, r2, #16
 8003a74:	4603      	mov	r3, r0
 8003a76:	b9ca      	cbnz	r2, 8003aac <__hi0bits+0x3c>
 8003a78:	0403      	lsls	r3, r0, #16
 8003a7a:	2010      	movs	r0, #16
 8003a7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003a80:	bf04      	itt	eq
 8003a82:	021b      	lsleq	r3, r3, #8
 8003a84:	3008      	addeq	r0, #8
 8003a86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003a8a:	bf04      	itt	eq
 8003a8c:	011b      	lsleq	r3, r3, #4
 8003a8e:	3004      	addeq	r0, #4
 8003a90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003a94:	bf04      	itt	eq
 8003a96:	009b      	lsleq	r3, r3, #2
 8003a98:	3002      	addeq	r0, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	db05      	blt.n	8003aaa <__hi0bits+0x3a>
 8003a9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003aa2:	f100 0001 	add.w	r0, r0, #1
 8003aa6:	bf08      	it	eq
 8003aa8:	2020      	moveq	r0, #32
 8003aaa:	4770      	bx	lr
 8003aac:	2000      	movs	r0, #0
 8003aae:	e7e5      	b.n	8003a7c <__hi0bits+0xc>

08003ab0 <__lo0bits>:
 8003ab0:	6803      	ldr	r3, [r0, #0]
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f013 0007 	ands.w	r0, r3, #7
 8003ab8:	d00b      	beq.n	8003ad2 <__lo0bits+0x22>
 8003aba:	07d9      	lsls	r1, r3, #31
 8003abc:	d421      	bmi.n	8003b02 <__lo0bits+0x52>
 8003abe:	0798      	lsls	r0, r3, #30
 8003ac0:	bf49      	itett	mi
 8003ac2:	085b      	lsrmi	r3, r3, #1
 8003ac4:	089b      	lsrpl	r3, r3, #2
 8003ac6:	2001      	movmi	r0, #1
 8003ac8:	6013      	strmi	r3, [r2, #0]
 8003aca:	bf5c      	itt	pl
 8003acc:	2002      	movpl	r0, #2
 8003ace:	6013      	strpl	r3, [r2, #0]
 8003ad0:	4770      	bx	lr
 8003ad2:	b299      	uxth	r1, r3
 8003ad4:	b909      	cbnz	r1, 8003ada <__lo0bits+0x2a>
 8003ad6:	2010      	movs	r0, #16
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	b2d9      	uxtb	r1, r3
 8003adc:	b909      	cbnz	r1, 8003ae2 <__lo0bits+0x32>
 8003ade:	3008      	adds	r0, #8
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	0719      	lsls	r1, r3, #28
 8003ae4:	bf04      	itt	eq
 8003ae6:	091b      	lsreq	r3, r3, #4
 8003ae8:	3004      	addeq	r0, #4
 8003aea:	0799      	lsls	r1, r3, #30
 8003aec:	bf04      	itt	eq
 8003aee:	089b      	lsreq	r3, r3, #2
 8003af0:	3002      	addeq	r0, #2
 8003af2:	07d9      	lsls	r1, r3, #31
 8003af4:	d403      	bmi.n	8003afe <__lo0bits+0x4e>
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	f100 0001 	add.w	r0, r0, #1
 8003afc:	d003      	beq.n	8003b06 <__lo0bits+0x56>
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4770      	bx	lr
 8003b02:	2000      	movs	r0, #0
 8003b04:	4770      	bx	lr
 8003b06:	2020      	movs	r0, #32
 8003b08:	4770      	bx	lr
	...

08003b0c <__i2b>:
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	460c      	mov	r4, r1
 8003b10:	2101      	movs	r1, #1
 8003b12:	f7ff ff05 	bl	8003920 <_Balloc>
 8003b16:	4602      	mov	r2, r0
 8003b18:	b928      	cbnz	r0, 8003b26 <__i2b+0x1a>
 8003b1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <__i2b+0x24>)
 8003b20:	4804      	ldr	r0, [pc, #16]	; (8003b34 <__i2b+0x28>)
 8003b22:	f000 fded 	bl	8004700 <__assert_func>
 8003b26:	2301      	movs	r3, #1
 8003b28:	6144      	str	r4, [r0, #20]
 8003b2a:	6103      	str	r3, [r0, #16]
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	bf00      	nop
 8003b30:	08004c4b 	.word	0x08004c4b
 8003b34:	08004cbc 	.word	0x08004cbc

08003b38 <__multiply>:
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	4691      	mov	r9, r2
 8003b3e:	690a      	ldr	r2, [r1, #16]
 8003b40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003b44:	460c      	mov	r4, r1
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bfbe      	ittt	lt
 8003b4a:	460b      	movlt	r3, r1
 8003b4c:	464c      	movlt	r4, r9
 8003b4e:	4699      	movlt	r9, r3
 8003b50:	6927      	ldr	r7, [r4, #16]
 8003b52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003b56:	68a3      	ldr	r3, [r4, #8]
 8003b58:	6861      	ldr	r1, [r4, #4]
 8003b5a:	eb07 060a 	add.w	r6, r7, sl
 8003b5e:	42b3      	cmp	r3, r6
 8003b60:	b085      	sub	sp, #20
 8003b62:	bfb8      	it	lt
 8003b64:	3101      	addlt	r1, #1
 8003b66:	f7ff fedb 	bl	8003920 <_Balloc>
 8003b6a:	b930      	cbnz	r0, 8003b7a <__multiply+0x42>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f240 115d 	movw	r1, #349	; 0x15d
 8003b72:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <__multiply+0x148>)
 8003b74:	4843      	ldr	r0, [pc, #268]	; (8003c84 <__multiply+0x14c>)
 8003b76:	f000 fdc3 	bl	8004700 <__assert_func>
 8003b7a:	f100 0514 	add.w	r5, r0, #20
 8003b7e:	462b      	mov	r3, r5
 8003b80:	2200      	movs	r2, #0
 8003b82:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003b86:	4543      	cmp	r3, r8
 8003b88:	d321      	bcc.n	8003bce <__multiply+0x96>
 8003b8a:	f104 0314 	add.w	r3, r4, #20
 8003b8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003b92:	f109 0314 	add.w	r3, r9, #20
 8003b96:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003b9a:	9202      	str	r2, [sp, #8]
 8003b9c:	1b3a      	subs	r2, r7, r4
 8003b9e:	3a15      	subs	r2, #21
 8003ba0:	f022 0203 	bic.w	r2, r2, #3
 8003ba4:	3204      	adds	r2, #4
 8003ba6:	f104 0115 	add.w	r1, r4, #21
 8003baa:	428f      	cmp	r7, r1
 8003bac:	bf38      	it	cc
 8003bae:	2204      	movcc	r2, #4
 8003bb0:	9201      	str	r2, [sp, #4]
 8003bb2:	9a02      	ldr	r2, [sp, #8]
 8003bb4:	9303      	str	r3, [sp, #12]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d80c      	bhi.n	8003bd4 <__multiply+0x9c>
 8003bba:	2e00      	cmp	r6, #0
 8003bbc:	dd03      	ble.n	8003bc6 <__multiply+0x8e>
 8003bbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d059      	beq.n	8003c7a <__multiply+0x142>
 8003bc6:	6106      	str	r6, [r0, #16]
 8003bc8:	b005      	add	sp, #20
 8003bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bce:	f843 2b04 	str.w	r2, [r3], #4
 8003bd2:	e7d8      	b.n	8003b86 <__multiply+0x4e>
 8003bd4:	f8b3 a000 	ldrh.w	sl, [r3]
 8003bd8:	f1ba 0f00 	cmp.w	sl, #0
 8003bdc:	d023      	beq.n	8003c26 <__multiply+0xee>
 8003bde:	46a9      	mov	r9, r5
 8003be0:	f04f 0c00 	mov.w	ip, #0
 8003be4:	f104 0e14 	add.w	lr, r4, #20
 8003be8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003bec:	f8d9 1000 	ldr.w	r1, [r9]
 8003bf0:	fa1f fb82 	uxth.w	fp, r2
 8003bf4:	b289      	uxth	r1, r1
 8003bf6:	fb0a 110b 	mla	r1, sl, fp, r1
 8003bfa:	4461      	add	r1, ip
 8003bfc:	f8d9 c000 	ldr.w	ip, [r9]
 8003c00:	0c12      	lsrs	r2, r2, #16
 8003c02:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003c06:	fb0a c202 	mla	r2, sl, r2, ip
 8003c0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003c0e:	b289      	uxth	r1, r1
 8003c10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c14:	4577      	cmp	r7, lr
 8003c16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c1a:	f849 1b04 	str.w	r1, [r9], #4
 8003c1e:	d8e3      	bhi.n	8003be8 <__multiply+0xb0>
 8003c20:	9a01      	ldr	r2, [sp, #4]
 8003c22:	f845 c002 	str.w	ip, [r5, r2]
 8003c26:	9a03      	ldr	r2, [sp, #12]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c2e:	f1b9 0f00 	cmp.w	r9, #0
 8003c32:	d020      	beq.n	8003c76 <__multiply+0x13e>
 8003c34:	46ae      	mov	lr, r5
 8003c36:	f04f 0a00 	mov.w	sl, #0
 8003c3a:	6829      	ldr	r1, [r5, #0]
 8003c3c:	f104 0c14 	add.w	ip, r4, #20
 8003c40:	f8bc b000 	ldrh.w	fp, [ip]
 8003c44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003c48:	b289      	uxth	r1, r1
 8003c4a:	fb09 220b 	mla	r2, r9, fp, r2
 8003c4e:	4492      	add	sl, r2
 8003c50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003c54:	f84e 1b04 	str.w	r1, [lr], #4
 8003c58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003c5c:	f8be 1000 	ldrh.w	r1, [lr]
 8003c60:	0c12      	lsrs	r2, r2, #16
 8003c62:	fb09 1102 	mla	r1, r9, r2, r1
 8003c66:	4567      	cmp	r7, ip
 8003c68:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003c6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003c70:	d8e6      	bhi.n	8003c40 <__multiply+0x108>
 8003c72:	9a01      	ldr	r2, [sp, #4]
 8003c74:	50a9      	str	r1, [r5, r2]
 8003c76:	3504      	adds	r5, #4
 8003c78:	e79b      	b.n	8003bb2 <__multiply+0x7a>
 8003c7a:	3e01      	subs	r6, #1
 8003c7c:	e79d      	b.n	8003bba <__multiply+0x82>
 8003c7e:	bf00      	nop
 8003c80:	08004c4b 	.word	0x08004c4b
 8003c84:	08004cbc 	.word	0x08004cbc

08003c88 <__pow5mult>:
 8003c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	4615      	mov	r5, r2
 8003c8e:	f012 0203 	ands.w	r2, r2, #3
 8003c92:	4606      	mov	r6, r0
 8003c94:	460f      	mov	r7, r1
 8003c96:	d007      	beq.n	8003ca8 <__pow5mult+0x20>
 8003c98:	4c25      	ldr	r4, [pc, #148]	; (8003d30 <__pow5mult+0xa8>)
 8003c9a:	3a01      	subs	r2, #1
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ca2:	f7ff fe9f 	bl	80039e4 <__multadd>
 8003ca6:	4607      	mov	r7, r0
 8003ca8:	10ad      	asrs	r5, r5, #2
 8003caa:	d03d      	beq.n	8003d28 <__pow5mult+0xa0>
 8003cac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003cae:	b97c      	cbnz	r4, 8003cd0 <__pow5mult+0x48>
 8003cb0:	2010      	movs	r0, #16
 8003cb2:	f7ff fe11 	bl	80038d8 <malloc>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6270      	str	r0, [r6, #36]	; 0x24
 8003cba:	b928      	cbnz	r0, 8003cc8 <__pow5mult+0x40>
 8003cbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <__pow5mult+0xac>)
 8003cc2:	481d      	ldr	r0, [pc, #116]	; (8003d38 <__pow5mult+0xb0>)
 8003cc4:	f000 fd1c 	bl	8004700 <__assert_func>
 8003cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ccc:	6004      	str	r4, [r0, #0]
 8003cce:	60c4      	str	r4, [r0, #12]
 8003cd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003cd8:	b94c      	cbnz	r4, 8003cee <__pow5mult+0x66>
 8003cda:	f240 2171 	movw	r1, #625	; 0x271
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7ff ff14 	bl	8003b0c <__i2b>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	f8c8 0008 	str.w	r0, [r8, #8]
 8003cec:	6003      	str	r3, [r0, #0]
 8003cee:	f04f 0900 	mov.w	r9, #0
 8003cf2:	07eb      	lsls	r3, r5, #31
 8003cf4:	d50a      	bpl.n	8003d0c <__pow5mult+0x84>
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f7ff ff1c 	bl	8003b38 <__multiply>
 8003d00:	4680      	mov	r8, r0
 8003d02:	4639      	mov	r1, r7
 8003d04:	4630      	mov	r0, r6
 8003d06:	f7ff fe4b 	bl	80039a0 <_Bfree>
 8003d0a:	4647      	mov	r7, r8
 8003d0c:	106d      	asrs	r5, r5, #1
 8003d0e:	d00b      	beq.n	8003d28 <__pow5mult+0xa0>
 8003d10:	6820      	ldr	r0, [r4, #0]
 8003d12:	b938      	cbnz	r0, 8003d24 <__pow5mult+0x9c>
 8003d14:	4622      	mov	r2, r4
 8003d16:	4621      	mov	r1, r4
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f7ff ff0d 	bl	8003b38 <__multiply>
 8003d1e:	6020      	str	r0, [r4, #0]
 8003d20:	f8c0 9000 	str.w	r9, [r0]
 8003d24:	4604      	mov	r4, r0
 8003d26:	e7e4      	b.n	8003cf2 <__pow5mult+0x6a>
 8003d28:	4638      	mov	r0, r7
 8003d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2e:	bf00      	nop
 8003d30:	08004e08 	.word	0x08004e08
 8003d34:	08004bd9 	.word	0x08004bd9
 8003d38:	08004cbc 	.word	0x08004cbc

08003d3c <__lshift>:
 8003d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d40:	460c      	mov	r4, r1
 8003d42:	4607      	mov	r7, r0
 8003d44:	4691      	mov	r9, r2
 8003d46:	6923      	ldr	r3, [r4, #16]
 8003d48:	6849      	ldr	r1, [r1, #4]
 8003d4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d4e:	68a3      	ldr	r3, [r4, #8]
 8003d50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d54:	f108 0601 	add.w	r6, r8, #1
 8003d58:	42b3      	cmp	r3, r6
 8003d5a:	db0b      	blt.n	8003d74 <__lshift+0x38>
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f7ff fddf 	bl	8003920 <_Balloc>
 8003d62:	4605      	mov	r5, r0
 8003d64:	b948      	cbnz	r0, 8003d7a <__lshift+0x3e>
 8003d66:	4602      	mov	r2, r0
 8003d68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <__lshift+0xd8>)
 8003d6e:	482a      	ldr	r0, [pc, #168]	; (8003e18 <__lshift+0xdc>)
 8003d70:	f000 fcc6 	bl	8004700 <__assert_func>
 8003d74:	3101      	adds	r1, #1
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	e7ee      	b.n	8003d58 <__lshift+0x1c>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f100 0114 	add.w	r1, r0, #20
 8003d80:	f100 0210 	add.w	r2, r0, #16
 8003d84:	4618      	mov	r0, r3
 8003d86:	4553      	cmp	r3, sl
 8003d88:	db37      	blt.n	8003dfa <__lshift+0xbe>
 8003d8a:	6920      	ldr	r0, [r4, #16]
 8003d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d90:	f104 0314 	add.w	r3, r4, #20
 8003d94:	f019 091f 	ands.w	r9, r9, #31
 8003d98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003d9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003da0:	d02f      	beq.n	8003e02 <__lshift+0xc6>
 8003da2:	468a      	mov	sl, r1
 8003da4:	f04f 0c00 	mov.w	ip, #0
 8003da8:	f1c9 0e20 	rsb	lr, r9, #32
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	fa02 f209 	lsl.w	r2, r2, r9
 8003db2:	ea42 020c 	orr.w	r2, r2, ip
 8003db6:	f84a 2b04 	str.w	r2, [sl], #4
 8003dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dbe:	4298      	cmp	r0, r3
 8003dc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003dc4:	d8f2      	bhi.n	8003dac <__lshift+0x70>
 8003dc6:	1b03      	subs	r3, r0, r4
 8003dc8:	3b15      	subs	r3, #21
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	3304      	adds	r3, #4
 8003dd0:	f104 0215 	add.w	r2, r4, #21
 8003dd4:	4290      	cmp	r0, r2
 8003dd6:	bf38      	it	cc
 8003dd8:	2304      	movcc	r3, #4
 8003dda:	f841 c003 	str.w	ip, [r1, r3]
 8003dde:	f1bc 0f00 	cmp.w	ip, #0
 8003de2:	d001      	beq.n	8003de8 <__lshift+0xac>
 8003de4:	f108 0602 	add.w	r6, r8, #2
 8003de8:	3e01      	subs	r6, #1
 8003dea:	4638      	mov	r0, r7
 8003dec:	4621      	mov	r1, r4
 8003dee:	612e      	str	r6, [r5, #16]
 8003df0:	f7ff fdd6 	bl	80039a0 <_Bfree>
 8003df4:	4628      	mov	r0, r5
 8003df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8003dfe:	3301      	adds	r3, #1
 8003e00:	e7c1      	b.n	8003d86 <__lshift+0x4a>
 8003e02:	3904      	subs	r1, #4
 8003e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e08:	4298      	cmp	r0, r3
 8003e0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8003e0e:	d8f9      	bhi.n	8003e04 <__lshift+0xc8>
 8003e10:	e7ea      	b.n	8003de8 <__lshift+0xac>
 8003e12:	bf00      	nop
 8003e14:	08004c4b 	.word	0x08004c4b
 8003e18:	08004cbc 	.word	0x08004cbc

08003e1c <__mcmp>:
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	690a      	ldr	r2, [r1, #16]
 8003e20:	6900      	ldr	r0, [r0, #16]
 8003e22:	b530      	push	{r4, r5, lr}
 8003e24:	1a80      	subs	r0, r0, r2
 8003e26:	d10d      	bne.n	8003e44 <__mcmp+0x28>
 8003e28:	3314      	adds	r3, #20
 8003e2a:	3114      	adds	r1, #20
 8003e2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003e30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003e34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003e38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003e3c:	4295      	cmp	r5, r2
 8003e3e:	d002      	beq.n	8003e46 <__mcmp+0x2a>
 8003e40:	d304      	bcc.n	8003e4c <__mcmp+0x30>
 8003e42:	2001      	movs	r0, #1
 8003e44:	bd30      	pop	{r4, r5, pc}
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	d3f4      	bcc.n	8003e34 <__mcmp+0x18>
 8003e4a:	e7fb      	b.n	8003e44 <__mcmp+0x28>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	e7f8      	b.n	8003e44 <__mcmp+0x28>
	...

08003e54 <__mdiff>:
 8003e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	460d      	mov	r5, r1
 8003e5a:	4607      	mov	r7, r0
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4628      	mov	r0, r5
 8003e60:	4614      	mov	r4, r2
 8003e62:	f7ff ffdb 	bl	8003e1c <__mcmp>
 8003e66:	1e06      	subs	r6, r0, #0
 8003e68:	d111      	bne.n	8003e8e <__mdiff+0x3a>
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f7ff fd57 	bl	8003920 <_Balloc>
 8003e72:	4602      	mov	r2, r0
 8003e74:	b928      	cbnz	r0, 8003e82 <__mdiff+0x2e>
 8003e76:	f240 2132 	movw	r1, #562	; 0x232
 8003e7a:	4b3a      	ldr	r3, [pc, #232]	; (8003f64 <__mdiff+0x110>)
 8003e7c:	483a      	ldr	r0, [pc, #232]	; (8003f68 <__mdiff+0x114>)
 8003e7e:	f000 fc3f 	bl	8004700 <__assert_func>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003e88:	4610      	mov	r0, r2
 8003e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8e:	bfa4      	itt	ge
 8003e90:	4623      	movge	r3, r4
 8003e92:	462c      	movge	r4, r5
 8003e94:	4638      	mov	r0, r7
 8003e96:	6861      	ldr	r1, [r4, #4]
 8003e98:	bfa6      	itte	ge
 8003e9a:	461d      	movge	r5, r3
 8003e9c:	2600      	movge	r6, #0
 8003e9e:	2601      	movlt	r6, #1
 8003ea0:	f7ff fd3e 	bl	8003920 <_Balloc>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	b918      	cbnz	r0, 8003eb0 <__mdiff+0x5c>
 8003ea8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003eac:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <__mdiff+0x110>)
 8003eae:	e7e5      	b.n	8003e7c <__mdiff+0x28>
 8003eb0:	f102 0814 	add.w	r8, r2, #20
 8003eb4:	46c2      	mov	sl, r8
 8003eb6:	f04f 0c00 	mov.w	ip, #0
 8003eba:	6927      	ldr	r7, [r4, #16]
 8003ebc:	60c6      	str	r6, [r0, #12]
 8003ebe:	692e      	ldr	r6, [r5, #16]
 8003ec0:	f104 0014 	add.w	r0, r4, #20
 8003ec4:	f105 0914 	add.w	r9, r5, #20
 8003ec8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8003ecc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003ed0:	3410      	adds	r4, #16
 8003ed2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8003ed6:	f859 3b04 	ldr.w	r3, [r9], #4
 8003eda:	fa1f f18b 	uxth.w	r1, fp
 8003ede:	448c      	add	ip, r1
 8003ee0:	b299      	uxth	r1, r3
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	ebac 0101 	sub.w	r1, ip, r1
 8003ee8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003eec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003ef0:	b289      	uxth	r1, r1
 8003ef2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003ef6:	454e      	cmp	r6, r9
 8003ef8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003efc:	f84a 3b04 	str.w	r3, [sl], #4
 8003f00:	d8e7      	bhi.n	8003ed2 <__mdiff+0x7e>
 8003f02:	1b73      	subs	r3, r6, r5
 8003f04:	3b15      	subs	r3, #21
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	3515      	adds	r5, #21
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	42ae      	cmp	r6, r5
 8003f10:	bf38      	it	cc
 8003f12:	2304      	movcc	r3, #4
 8003f14:	4418      	add	r0, r3
 8003f16:	4443      	add	r3, r8
 8003f18:	461e      	mov	r6, r3
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	4575      	cmp	r5, lr
 8003f1e:	d30e      	bcc.n	8003f3e <__mdiff+0xea>
 8003f20:	f10e 0103 	add.w	r1, lr, #3
 8003f24:	1a09      	subs	r1, r1, r0
 8003f26:	f021 0103 	bic.w	r1, r1, #3
 8003f2a:	3803      	subs	r0, #3
 8003f2c:	4586      	cmp	lr, r0
 8003f2e:	bf38      	it	cc
 8003f30:	2100      	movcc	r1, #0
 8003f32:	4419      	add	r1, r3
 8003f34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003f38:	b18b      	cbz	r3, 8003f5e <__mdiff+0x10a>
 8003f3a:	6117      	str	r7, [r2, #16]
 8003f3c:	e7a4      	b.n	8003e88 <__mdiff+0x34>
 8003f3e:	f855 8b04 	ldr.w	r8, [r5], #4
 8003f42:	fa1f f188 	uxth.w	r1, r8
 8003f46:	4461      	add	r1, ip
 8003f48:	140c      	asrs	r4, r1, #16
 8003f4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003f4e:	b289      	uxth	r1, r1
 8003f50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003f54:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003f58:	f846 1b04 	str.w	r1, [r6], #4
 8003f5c:	e7de      	b.n	8003f1c <__mdiff+0xc8>
 8003f5e:	3f01      	subs	r7, #1
 8003f60:	e7e8      	b.n	8003f34 <__mdiff+0xe0>
 8003f62:	bf00      	nop
 8003f64:	08004c4b 	.word	0x08004c4b
 8003f68:	08004cbc 	.word	0x08004cbc

08003f6c <__d2b>:
 8003f6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003f70:	2101      	movs	r1, #1
 8003f72:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8003f76:	4690      	mov	r8, r2
 8003f78:	461d      	mov	r5, r3
 8003f7a:	f7ff fcd1 	bl	8003920 <_Balloc>
 8003f7e:	4604      	mov	r4, r0
 8003f80:	b930      	cbnz	r0, 8003f90 <__d2b+0x24>
 8003f82:	4602      	mov	r2, r0
 8003f84:	f240 310a 	movw	r1, #778	; 0x30a
 8003f88:	4b24      	ldr	r3, [pc, #144]	; (800401c <__d2b+0xb0>)
 8003f8a:	4825      	ldr	r0, [pc, #148]	; (8004020 <__d2b+0xb4>)
 8003f8c:	f000 fbb8 	bl	8004700 <__assert_func>
 8003f90:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003f94:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8003f98:	bb2d      	cbnz	r5, 8003fe6 <__d2b+0x7a>
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	f1b8 0300 	subs.w	r3, r8, #0
 8003fa0:	d026      	beq.n	8003ff0 <__d2b+0x84>
 8003fa2:	4668      	mov	r0, sp
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	f7ff fd83 	bl	8003ab0 <__lo0bits>
 8003faa:	9900      	ldr	r1, [sp, #0]
 8003fac:	b1f0      	cbz	r0, 8003fec <__d2b+0x80>
 8003fae:	9a01      	ldr	r2, [sp, #4]
 8003fb0:	f1c0 0320 	rsb	r3, r0, #32
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	40c2      	lsrs	r2, r0
 8003fbc:	6163      	str	r3, [r4, #20]
 8003fbe:	9201      	str	r2, [sp, #4]
 8003fc0:	9b01      	ldr	r3, [sp, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bf14      	ite	ne
 8003fc6:	2102      	movne	r1, #2
 8003fc8:	2101      	moveq	r1, #1
 8003fca:	61a3      	str	r3, [r4, #24]
 8003fcc:	6121      	str	r1, [r4, #16]
 8003fce:	b1c5      	cbz	r5, 8004002 <__d2b+0x96>
 8003fd0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003fd4:	4405      	add	r5, r0
 8003fd6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003fda:	603d      	str	r5, [r7, #0]
 8003fdc:	6030      	str	r0, [r6, #0]
 8003fde:	4620      	mov	r0, r4
 8003fe0:	b002      	add	sp, #8
 8003fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fea:	e7d6      	b.n	8003f9a <__d2b+0x2e>
 8003fec:	6161      	str	r1, [r4, #20]
 8003fee:	e7e7      	b.n	8003fc0 <__d2b+0x54>
 8003ff0:	a801      	add	r0, sp, #4
 8003ff2:	f7ff fd5d 	bl	8003ab0 <__lo0bits>
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	9b01      	ldr	r3, [sp, #4]
 8003ffa:	6121      	str	r1, [r4, #16]
 8003ffc:	6163      	str	r3, [r4, #20]
 8003ffe:	3020      	adds	r0, #32
 8004000:	e7e5      	b.n	8003fce <__d2b+0x62>
 8004002:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004006:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800400a:	6038      	str	r0, [r7, #0]
 800400c:	6918      	ldr	r0, [r3, #16]
 800400e:	f7ff fd2f 	bl	8003a70 <__hi0bits>
 8004012:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004016:	6031      	str	r1, [r6, #0]
 8004018:	e7e1      	b.n	8003fde <__d2b+0x72>
 800401a:	bf00      	nop
 800401c:	08004c4b 	.word	0x08004c4b
 8004020:	08004cbc 	.word	0x08004cbc

08004024 <_calloc_r>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	fba1 5402 	umull	r5, r4, r1, r2
 800402a:	b934      	cbnz	r4, 800403a <_calloc_r+0x16>
 800402c:	4629      	mov	r1, r5
 800402e:	f000 f875 	bl	800411c <_malloc_r>
 8004032:	4606      	mov	r6, r0
 8004034:	b928      	cbnz	r0, 8004042 <_calloc_r+0x1e>
 8004036:	4630      	mov	r0, r6
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	220c      	movs	r2, #12
 800403c:	2600      	movs	r6, #0
 800403e:	6002      	str	r2, [r0, #0]
 8004040:	e7f9      	b.n	8004036 <_calloc_r+0x12>
 8004042:	462a      	mov	r2, r5
 8004044:	4621      	mov	r1, r4
 8004046:	f7fe f84f 	bl	80020e8 <memset>
 800404a:	e7f4      	b.n	8004036 <_calloc_r+0x12>

0800404c <_free_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4605      	mov	r5, r0
 8004050:	2900      	cmp	r1, #0
 8004052:	d040      	beq.n	80040d6 <_free_r+0x8a>
 8004054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004058:	1f0c      	subs	r4, r1, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	bfb8      	it	lt
 800405e:	18e4      	addlt	r4, r4, r3
 8004060:	f000 fcd6 	bl	8004a10 <__malloc_lock>
 8004064:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <_free_r+0x8c>)
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	b933      	cbnz	r3, 8004078 <_free_r+0x2c>
 800406a:	6063      	str	r3, [r4, #4]
 800406c:	6014      	str	r4, [r2, #0]
 800406e:	4628      	mov	r0, r5
 8004070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004074:	f000 bcd2 	b.w	8004a1c <__malloc_unlock>
 8004078:	42a3      	cmp	r3, r4
 800407a:	d908      	bls.n	800408e <_free_r+0x42>
 800407c:	6820      	ldr	r0, [r4, #0]
 800407e:	1821      	adds	r1, r4, r0
 8004080:	428b      	cmp	r3, r1
 8004082:	bf01      	itttt	eq
 8004084:	6819      	ldreq	r1, [r3, #0]
 8004086:	685b      	ldreq	r3, [r3, #4]
 8004088:	1809      	addeq	r1, r1, r0
 800408a:	6021      	streq	r1, [r4, #0]
 800408c:	e7ed      	b.n	800406a <_free_r+0x1e>
 800408e:	461a      	mov	r2, r3
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	b10b      	cbz	r3, 8004098 <_free_r+0x4c>
 8004094:	42a3      	cmp	r3, r4
 8004096:	d9fa      	bls.n	800408e <_free_r+0x42>
 8004098:	6811      	ldr	r1, [r2, #0]
 800409a:	1850      	adds	r0, r2, r1
 800409c:	42a0      	cmp	r0, r4
 800409e:	d10b      	bne.n	80040b8 <_free_r+0x6c>
 80040a0:	6820      	ldr	r0, [r4, #0]
 80040a2:	4401      	add	r1, r0
 80040a4:	1850      	adds	r0, r2, r1
 80040a6:	4283      	cmp	r3, r0
 80040a8:	6011      	str	r1, [r2, #0]
 80040aa:	d1e0      	bne.n	800406e <_free_r+0x22>
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4401      	add	r1, r0
 80040b2:	6011      	str	r1, [r2, #0]
 80040b4:	6053      	str	r3, [r2, #4]
 80040b6:	e7da      	b.n	800406e <_free_r+0x22>
 80040b8:	d902      	bls.n	80040c0 <_free_r+0x74>
 80040ba:	230c      	movs	r3, #12
 80040bc:	602b      	str	r3, [r5, #0]
 80040be:	e7d6      	b.n	800406e <_free_r+0x22>
 80040c0:	6820      	ldr	r0, [r4, #0]
 80040c2:	1821      	adds	r1, r4, r0
 80040c4:	428b      	cmp	r3, r1
 80040c6:	bf01      	itttt	eq
 80040c8:	6819      	ldreq	r1, [r3, #0]
 80040ca:	685b      	ldreq	r3, [r3, #4]
 80040cc:	1809      	addeq	r1, r1, r0
 80040ce:	6021      	streq	r1, [r4, #0]
 80040d0:	6063      	str	r3, [r4, #4]
 80040d2:	6054      	str	r4, [r2, #4]
 80040d4:	e7cb      	b.n	800406e <_free_r+0x22>
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	20000248 	.word	0x20000248

080040dc <sbrk_aligned>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4e0e      	ldr	r6, [pc, #56]	; (8004118 <sbrk_aligned+0x3c>)
 80040e0:	460c      	mov	r4, r1
 80040e2:	6831      	ldr	r1, [r6, #0]
 80040e4:	4605      	mov	r5, r0
 80040e6:	b911      	cbnz	r1, 80040ee <sbrk_aligned+0x12>
 80040e8:	f000 f9e4 	bl	80044b4 <_sbrk_r>
 80040ec:	6030      	str	r0, [r6, #0]
 80040ee:	4621      	mov	r1, r4
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 f9df 	bl	80044b4 <_sbrk_r>
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	d00a      	beq.n	8004110 <sbrk_aligned+0x34>
 80040fa:	1cc4      	adds	r4, r0, #3
 80040fc:	f024 0403 	bic.w	r4, r4, #3
 8004100:	42a0      	cmp	r0, r4
 8004102:	d007      	beq.n	8004114 <sbrk_aligned+0x38>
 8004104:	1a21      	subs	r1, r4, r0
 8004106:	4628      	mov	r0, r5
 8004108:	f000 f9d4 	bl	80044b4 <_sbrk_r>
 800410c:	3001      	adds	r0, #1
 800410e:	d101      	bne.n	8004114 <sbrk_aligned+0x38>
 8004110:	f04f 34ff 	mov.w	r4, #4294967295
 8004114:	4620      	mov	r0, r4
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	2000024c 	.word	0x2000024c

0800411c <_malloc_r>:
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	1ccd      	adds	r5, r1, #3
 8004122:	f025 0503 	bic.w	r5, r5, #3
 8004126:	3508      	adds	r5, #8
 8004128:	2d0c      	cmp	r5, #12
 800412a:	bf38      	it	cc
 800412c:	250c      	movcc	r5, #12
 800412e:	2d00      	cmp	r5, #0
 8004130:	4607      	mov	r7, r0
 8004132:	db01      	blt.n	8004138 <_malloc_r+0x1c>
 8004134:	42a9      	cmp	r1, r5
 8004136:	d905      	bls.n	8004144 <_malloc_r+0x28>
 8004138:	230c      	movs	r3, #12
 800413a:	2600      	movs	r6, #0
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4630      	mov	r0, r6
 8004140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004144:	4e2e      	ldr	r6, [pc, #184]	; (8004200 <_malloc_r+0xe4>)
 8004146:	f000 fc63 	bl	8004a10 <__malloc_lock>
 800414a:	6833      	ldr	r3, [r6, #0]
 800414c:	461c      	mov	r4, r3
 800414e:	bb34      	cbnz	r4, 800419e <_malloc_r+0x82>
 8004150:	4629      	mov	r1, r5
 8004152:	4638      	mov	r0, r7
 8004154:	f7ff ffc2 	bl	80040dc <sbrk_aligned>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	4604      	mov	r4, r0
 800415c:	d14d      	bne.n	80041fa <_malloc_r+0xde>
 800415e:	6834      	ldr	r4, [r6, #0]
 8004160:	4626      	mov	r6, r4
 8004162:	2e00      	cmp	r6, #0
 8004164:	d140      	bne.n	80041e8 <_malloc_r+0xcc>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	4631      	mov	r1, r6
 800416a:	4638      	mov	r0, r7
 800416c:	eb04 0803 	add.w	r8, r4, r3
 8004170:	f000 f9a0 	bl	80044b4 <_sbrk_r>
 8004174:	4580      	cmp	r8, r0
 8004176:	d13a      	bne.n	80041ee <_malloc_r+0xd2>
 8004178:	6821      	ldr	r1, [r4, #0]
 800417a:	3503      	adds	r5, #3
 800417c:	1a6d      	subs	r5, r5, r1
 800417e:	f025 0503 	bic.w	r5, r5, #3
 8004182:	3508      	adds	r5, #8
 8004184:	2d0c      	cmp	r5, #12
 8004186:	bf38      	it	cc
 8004188:	250c      	movcc	r5, #12
 800418a:	4638      	mov	r0, r7
 800418c:	4629      	mov	r1, r5
 800418e:	f7ff ffa5 	bl	80040dc <sbrk_aligned>
 8004192:	3001      	adds	r0, #1
 8004194:	d02b      	beq.n	80041ee <_malloc_r+0xd2>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	442b      	add	r3, r5
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	e00e      	b.n	80041bc <_malloc_r+0xa0>
 800419e:	6822      	ldr	r2, [r4, #0]
 80041a0:	1b52      	subs	r2, r2, r5
 80041a2:	d41e      	bmi.n	80041e2 <_malloc_r+0xc6>
 80041a4:	2a0b      	cmp	r2, #11
 80041a6:	d916      	bls.n	80041d6 <_malloc_r+0xba>
 80041a8:	1961      	adds	r1, r4, r5
 80041aa:	42a3      	cmp	r3, r4
 80041ac:	6025      	str	r5, [r4, #0]
 80041ae:	bf18      	it	ne
 80041b0:	6059      	strne	r1, [r3, #4]
 80041b2:	6863      	ldr	r3, [r4, #4]
 80041b4:	bf08      	it	eq
 80041b6:	6031      	streq	r1, [r6, #0]
 80041b8:	5162      	str	r2, [r4, r5]
 80041ba:	604b      	str	r3, [r1, #4]
 80041bc:	4638      	mov	r0, r7
 80041be:	f104 060b 	add.w	r6, r4, #11
 80041c2:	f000 fc2b 	bl	8004a1c <__malloc_unlock>
 80041c6:	f026 0607 	bic.w	r6, r6, #7
 80041ca:	1d23      	adds	r3, r4, #4
 80041cc:	1af2      	subs	r2, r6, r3
 80041ce:	d0b6      	beq.n	800413e <_malloc_r+0x22>
 80041d0:	1b9b      	subs	r3, r3, r6
 80041d2:	50a3      	str	r3, [r4, r2]
 80041d4:	e7b3      	b.n	800413e <_malloc_r+0x22>
 80041d6:	6862      	ldr	r2, [r4, #4]
 80041d8:	42a3      	cmp	r3, r4
 80041da:	bf0c      	ite	eq
 80041dc:	6032      	streq	r2, [r6, #0]
 80041de:	605a      	strne	r2, [r3, #4]
 80041e0:	e7ec      	b.n	80041bc <_malloc_r+0xa0>
 80041e2:	4623      	mov	r3, r4
 80041e4:	6864      	ldr	r4, [r4, #4]
 80041e6:	e7b2      	b.n	800414e <_malloc_r+0x32>
 80041e8:	4634      	mov	r4, r6
 80041ea:	6876      	ldr	r6, [r6, #4]
 80041ec:	e7b9      	b.n	8004162 <_malloc_r+0x46>
 80041ee:	230c      	movs	r3, #12
 80041f0:	4638      	mov	r0, r7
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	f000 fc12 	bl	8004a1c <__malloc_unlock>
 80041f8:	e7a1      	b.n	800413e <_malloc_r+0x22>
 80041fa:	6025      	str	r5, [r4, #0]
 80041fc:	e7de      	b.n	80041bc <_malloc_r+0xa0>
 80041fe:	bf00      	nop
 8004200:	20000248 	.word	0x20000248

08004204 <__sfputc_r>:
 8004204:	6893      	ldr	r3, [r2, #8]
 8004206:	b410      	push	{r4}
 8004208:	3b01      	subs	r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	6093      	str	r3, [r2, #8]
 800420e:	da07      	bge.n	8004220 <__sfputc_r+0x1c>
 8004210:	6994      	ldr	r4, [r2, #24]
 8004212:	42a3      	cmp	r3, r4
 8004214:	db01      	blt.n	800421a <__sfputc_r+0x16>
 8004216:	290a      	cmp	r1, #10
 8004218:	d102      	bne.n	8004220 <__sfputc_r+0x1c>
 800421a:	bc10      	pop	{r4}
 800421c:	f000 b99e 	b.w	800455c <__swbuf_r>
 8004220:	6813      	ldr	r3, [r2, #0]
 8004222:	1c58      	adds	r0, r3, #1
 8004224:	6010      	str	r0, [r2, #0]
 8004226:	7019      	strb	r1, [r3, #0]
 8004228:	4608      	mov	r0, r1
 800422a:	bc10      	pop	{r4}
 800422c:	4770      	bx	lr

0800422e <__sfputs_r>:
 800422e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004230:	4606      	mov	r6, r0
 8004232:	460f      	mov	r7, r1
 8004234:	4614      	mov	r4, r2
 8004236:	18d5      	adds	r5, r2, r3
 8004238:	42ac      	cmp	r4, r5
 800423a:	d101      	bne.n	8004240 <__sfputs_r+0x12>
 800423c:	2000      	movs	r0, #0
 800423e:	e007      	b.n	8004250 <__sfputs_r+0x22>
 8004240:	463a      	mov	r2, r7
 8004242:	4630      	mov	r0, r6
 8004244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004248:	f7ff ffdc 	bl	8004204 <__sfputc_r>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d1f3      	bne.n	8004238 <__sfputs_r+0xa>
 8004250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004254 <_vfiprintf_r>:
 8004254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	460d      	mov	r5, r1
 800425a:	4614      	mov	r4, r2
 800425c:	4698      	mov	r8, r3
 800425e:	4606      	mov	r6, r0
 8004260:	b09d      	sub	sp, #116	; 0x74
 8004262:	b118      	cbz	r0, 800426c <_vfiprintf_r+0x18>
 8004264:	6983      	ldr	r3, [r0, #24]
 8004266:	b90b      	cbnz	r3, 800426c <_vfiprintf_r+0x18>
 8004268:	f7ff fa90 	bl	800378c <__sinit>
 800426c:	4b89      	ldr	r3, [pc, #548]	; (8004494 <_vfiprintf_r+0x240>)
 800426e:	429d      	cmp	r5, r3
 8004270:	d11b      	bne.n	80042aa <_vfiprintf_r+0x56>
 8004272:	6875      	ldr	r5, [r6, #4]
 8004274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004276:	07d9      	lsls	r1, r3, #31
 8004278:	d405      	bmi.n	8004286 <_vfiprintf_r+0x32>
 800427a:	89ab      	ldrh	r3, [r5, #12]
 800427c:	059a      	lsls	r2, r3, #22
 800427e:	d402      	bmi.n	8004286 <_vfiprintf_r+0x32>
 8004280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004282:	f7ff fb26 	bl	80038d2 <__retarget_lock_acquire_recursive>
 8004286:	89ab      	ldrh	r3, [r5, #12]
 8004288:	071b      	lsls	r3, r3, #28
 800428a:	d501      	bpl.n	8004290 <_vfiprintf_r+0x3c>
 800428c:	692b      	ldr	r3, [r5, #16]
 800428e:	b9eb      	cbnz	r3, 80042cc <_vfiprintf_r+0x78>
 8004290:	4629      	mov	r1, r5
 8004292:	4630      	mov	r0, r6
 8004294:	f000 f9c6 	bl	8004624 <__swsetup_r>
 8004298:	b1c0      	cbz	r0, 80042cc <_vfiprintf_r+0x78>
 800429a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800429c:	07dc      	lsls	r4, r3, #31
 800429e:	d50e      	bpl.n	80042be <_vfiprintf_r+0x6a>
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	b01d      	add	sp, #116	; 0x74
 80042a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <_vfiprintf_r+0x244>)
 80042ac:	429d      	cmp	r5, r3
 80042ae:	d101      	bne.n	80042b4 <_vfiprintf_r+0x60>
 80042b0:	68b5      	ldr	r5, [r6, #8]
 80042b2:	e7df      	b.n	8004274 <_vfiprintf_r+0x20>
 80042b4:	4b79      	ldr	r3, [pc, #484]	; (800449c <_vfiprintf_r+0x248>)
 80042b6:	429d      	cmp	r5, r3
 80042b8:	bf08      	it	eq
 80042ba:	68f5      	ldreq	r5, [r6, #12]
 80042bc:	e7da      	b.n	8004274 <_vfiprintf_r+0x20>
 80042be:	89ab      	ldrh	r3, [r5, #12]
 80042c0:	0598      	lsls	r0, r3, #22
 80042c2:	d4ed      	bmi.n	80042a0 <_vfiprintf_r+0x4c>
 80042c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042c6:	f7ff fb05 	bl	80038d4 <__retarget_lock_release_recursive>
 80042ca:	e7e9      	b.n	80042a0 <_vfiprintf_r+0x4c>
 80042cc:	2300      	movs	r3, #0
 80042ce:	9309      	str	r3, [sp, #36]	; 0x24
 80042d0:	2320      	movs	r3, #32
 80042d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042d6:	2330      	movs	r3, #48	; 0x30
 80042d8:	f04f 0901 	mov.w	r9, #1
 80042dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80044a0 <_vfiprintf_r+0x24c>
 80042e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042e8:	4623      	mov	r3, r4
 80042ea:	469a      	mov	sl, r3
 80042ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f0:	b10a      	cbz	r2, 80042f6 <_vfiprintf_r+0xa2>
 80042f2:	2a25      	cmp	r2, #37	; 0x25
 80042f4:	d1f9      	bne.n	80042ea <_vfiprintf_r+0x96>
 80042f6:	ebba 0b04 	subs.w	fp, sl, r4
 80042fa:	d00b      	beq.n	8004314 <_vfiprintf_r+0xc0>
 80042fc:	465b      	mov	r3, fp
 80042fe:	4622      	mov	r2, r4
 8004300:	4629      	mov	r1, r5
 8004302:	4630      	mov	r0, r6
 8004304:	f7ff ff93 	bl	800422e <__sfputs_r>
 8004308:	3001      	adds	r0, #1
 800430a:	f000 80aa 	beq.w	8004462 <_vfiprintf_r+0x20e>
 800430e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004310:	445a      	add	r2, fp
 8004312:	9209      	str	r2, [sp, #36]	; 0x24
 8004314:	f89a 3000 	ldrb.w	r3, [sl]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a2 	beq.w	8004462 <_vfiprintf_r+0x20e>
 800431e:	2300      	movs	r3, #0
 8004320:	f04f 32ff 	mov.w	r2, #4294967295
 8004324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004328:	f10a 0a01 	add.w	sl, sl, #1
 800432c:	9304      	str	r3, [sp, #16]
 800432e:	9307      	str	r3, [sp, #28]
 8004330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004334:	931a      	str	r3, [sp, #104]	; 0x68
 8004336:	4654      	mov	r4, sl
 8004338:	2205      	movs	r2, #5
 800433a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433e:	4858      	ldr	r0, [pc, #352]	; (80044a0 <_vfiprintf_r+0x24c>)
 8004340:	f7ff fad2 	bl	80038e8 <memchr>
 8004344:	9a04      	ldr	r2, [sp, #16]
 8004346:	b9d8      	cbnz	r0, 8004380 <_vfiprintf_r+0x12c>
 8004348:	06d1      	lsls	r1, r2, #27
 800434a:	bf44      	itt	mi
 800434c:	2320      	movmi	r3, #32
 800434e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004352:	0713      	lsls	r3, r2, #28
 8004354:	bf44      	itt	mi
 8004356:	232b      	movmi	r3, #43	; 0x2b
 8004358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800435c:	f89a 3000 	ldrb.w	r3, [sl]
 8004360:	2b2a      	cmp	r3, #42	; 0x2a
 8004362:	d015      	beq.n	8004390 <_vfiprintf_r+0x13c>
 8004364:	4654      	mov	r4, sl
 8004366:	2000      	movs	r0, #0
 8004368:	f04f 0c0a 	mov.w	ip, #10
 800436c:	9a07      	ldr	r2, [sp, #28]
 800436e:	4621      	mov	r1, r4
 8004370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004374:	3b30      	subs	r3, #48	; 0x30
 8004376:	2b09      	cmp	r3, #9
 8004378:	d94e      	bls.n	8004418 <_vfiprintf_r+0x1c4>
 800437a:	b1b0      	cbz	r0, 80043aa <_vfiprintf_r+0x156>
 800437c:	9207      	str	r2, [sp, #28]
 800437e:	e014      	b.n	80043aa <_vfiprintf_r+0x156>
 8004380:	eba0 0308 	sub.w	r3, r0, r8
 8004384:	fa09 f303 	lsl.w	r3, r9, r3
 8004388:	4313      	orrs	r3, r2
 800438a:	46a2      	mov	sl, r4
 800438c:	9304      	str	r3, [sp, #16]
 800438e:	e7d2      	b.n	8004336 <_vfiprintf_r+0xe2>
 8004390:	9b03      	ldr	r3, [sp, #12]
 8004392:	1d19      	adds	r1, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	9103      	str	r1, [sp, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	bfbb      	ittet	lt
 800439c:	425b      	neglt	r3, r3
 800439e:	f042 0202 	orrlt.w	r2, r2, #2
 80043a2:	9307      	strge	r3, [sp, #28]
 80043a4:	9307      	strlt	r3, [sp, #28]
 80043a6:	bfb8      	it	lt
 80043a8:	9204      	strlt	r2, [sp, #16]
 80043aa:	7823      	ldrb	r3, [r4, #0]
 80043ac:	2b2e      	cmp	r3, #46	; 0x2e
 80043ae:	d10c      	bne.n	80043ca <_vfiprintf_r+0x176>
 80043b0:	7863      	ldrb	r3, [r4, #1]
 80043b2:	2b2a      	cmp	r3, #42	; 0x2a
 80043b4:	d135      	bne.n	8004422 <_vfiprintf_r+0x1ce>
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	3402      	adds	r4, #2
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	9203      	str	r2, [sp, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bfb8      	it	lt
 80043c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80043c8:	9305      	str	r3, [sp, #20]
 80043ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80044a4 <_vfiprintf_r+0x250>
 80043ce:	2203      	movs	r2, #3
 80043d0:	4650      	mov	r0, sl
 80043d2:	7821      	ldrb	r1, [r4, #0]
 80043d4:	f7ff fa88 	bl	80038e8 <memchr>
 80043d8:	b140      	cbz	r0, 80043ec <_vfiprintf_r+0x198>
 80043da:	2340      	movs	r3, #64	; 0x40
 80043dc:	eba0 000a 	sub.w	r0, r0, sl
 80043e0:	fa03 f000 	lsl.w	r0, r3, r0
 80043e4:	9b04      	ldr	r3, [sp, #16]
 80043e6:	3401      	adds	r4, #1
 80043e8:	4303      	orrs	r3, r0
 80043ea:	9304      	str	r3, [sp, #16]
 80043ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f0:	2206      	movs	r2, #6
 80043f2:	482d      	ldr	r0, [pc, #180]	; (80044a8 <_vfiprintf_r+0x254>)
 80043f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043f8:	f7ff fa76 	bl	80038e8 <memchr>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d03f      	beq.n	8004480 <_vfiprintf_r+0x22c>
 8004400:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <_vfiprintf_r+0x258>)
 8004402:	bb1b      	cbnz	r3, 800444c <_vfiprintf_r+0x1f8>
 8004404:	9b03      	ldr	r3, [sp, #12]
 8004406:	3307      	adds	r3, #7
 8004408:	f023 0307 	bic.w	r3, r3, #7
 800440c:	3308      	adds	r3, #8
 800440e:	9303      	str	r3, [sp, #12]
 8004410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004412:	443b      	add	r3, r7
 8004414:	9309      	str	r3, [sp, #36]	; 0x24
 8004416:	e767      	b.n	80042e8 <_vfiprintf_r+0x94>
 8004418:	460c      	mov	r4, r1
 800441a:	2001      	movs	r0, #1
 800441c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004420:	e7a5      	b.n	800436e <_vfiprintf_r+0x11a>
 8004422:	2300      	movs	r3, #0
 8004424:	f04f 0c0a 	mov.w	ip, #10
 8004428:	4619      	mov	r1, r3
 800442a:	3401      	adds	r4, #1
 800442c:	9305      	str	r3, [sp, #20]
 800442e:	4620      	mov	r0, r4
 8004430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004434:	3a30      	subs	r2, #48	; 0x30
 8004436:	2a09      	cmp	r2, #9
 8004438:	d903      	bls.n	8004442 <_vfiprintf_r+0x1ee>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0c5      	beq.n	80043ca <_vfiprintf_r+0x176>
 800443e:	9105      	str	r1, [sp, #20]
 8004440:	e7c3      	b.n	80043ca <_vfiprintf_r+0x176>
 8004442:	4604      	mov	r4, r0
 8004444:	2301      	movs	r3, #1
 8004446:	fb0c 2101 	mla	r1, ip, r1, r2
 800444a:	e7f0      	b.n	800442e <_vfiprintf_r+0x1da>
 800444c:	ab03      	add	r3, sp, #12
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	462a      	mov	r2, r5
 8004452:	4630      	mov	r0, r6
 8004454:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <_vfiprintf_r+0x25c>)
 8004456:	a904      	add	r1, sp, #16
 8004458:	f7fd feec 	bl	8002234 <_printf_float>
 800445c:	4607      	mov	r7, r0
 800445e:	1c78      	adds	r0, r7, #1
 8004460:	d1d6      	bne.n	8004410 <_vfiprintf_r+0x1bc>
 8004462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004464:	07d9      	lsls	r1, r3, #31
 8004466:	d405      	bmi.n	8004474 <_vfiprintf_r+0x220>
 8004468:	89ab      	ldrh	r3, [r5, #12]
 800446a:	059a      	lsls	r2, r3, #22
 800446c:	d402      	bmi.n	8004474 <_vfiprintf_r+0x220>
 800446e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004470:	f7ff fa30 	bl	80038d4 <__retarget_lock_release_recursive>
 8004474:	89ab      	ldrh	r3, [r5, #12]
 8004476:	065b      	lsls	r3, r3, #25
 8004478:	f53f af12 	bmi.w	80042a0 <_vfiprintf_r+0x4c>
 800447c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800447e:	e711      	b.n	80042a4 <_vfiprintf_r+0x50>
 8004480:	ab03      	add	r3, sp, #12
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	462a      	mov	r2, r5
 8004486:	4630      	mov	r0, r6
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <_vfiprintf_r+0x25c>)
 800448a:	a904      	add	r1, sp, #16
 800448c:	f7fe f96e 	bl	800276c <_printf_i>
 8004490:	e7e4      	b.n	800445c <_vfiprintf_r+0x208>
 8004492:	bf00      	nop
 8004494:	08004c7c 	.word	0x08004c7c
 8004498:	08004c9c 	.word	0x08004c9c
 800449c:	08004c5c 	.word	0x08004c5c
 80044a0:	08004e14 	.word	0x08004e14
 80044a4:	08004e1a 	.word	0x08004e1a
 80044a8:	08004e1e 	.word	0x08004e1e
 80044ac:	08002235 	.word	0x08002235
 80044b0:	0800422f 	.word	0x0800422f

080044b4 <_sbrk_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	2300      	movs	r3, #0
 80044b8:	4d05      	ldr	r5, [pc, #20]	; (80044d0 <_sbrk_r+0x1c>)
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	f7fc fc50 	bl	8000d64 <_sbrk>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_sbrk_r+0x1a>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_sbrk_r+0x1a>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	20000250 	.word	0x20000250

080044d4 <__sread>:
 80044d4:	b510      	push	{r4, lr}
 80044d6:	460c      	mov	r4, r1
 80044d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044dc:	f000 faa4 	bl	8004a28 <_read_r>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	bfab      	itete	ge
 80044e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044e6:	89a3      	ldrhlt	r3, [r4, #12]
 80044e8:	181b      	addge	r3, r3, r0
 80044ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044ee:	bfac      	ite	ge
 80044f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80044f2:	81a3      	strhlt	r3, [r4, #12]
 80044f4:	bd10      	pop	{r4, pc}

080044f6 <__swrite>:
 80044f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044fa:	461f      	mov	r7, r3
 80044fc:	898b      	ldrh	r3, [r1, #12]
 80044fe:	4605      	mov	r5, r0
 8004500:	05db      	lsls	r3, r3, #23
 8004502:	460c      	mov	r4, r1
 8004504:	4616      	mov	r6, r2
 8004506:	d505      	bpl.n	8004514 <__swrite+0x1e>
 8004508:	2302      	movs	r3, #2
 800450a:	2200      	movs	r2, #0
 800450c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004510:	f000 f9f4 	bl	80048fc <_lseek_r>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	4632      	mov	r2, r6
 8004518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800451c:	81a3      	strh	r3, [r4, #12]
 800451e:	4628      	mov	r0, r5
 8004520:	463b      	mov	r3, r7
 8004522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800452a:	f000 b869 	b.w	8004600 <_write_r>

0800452e <__sseek>:
 800452e:	b510      	push	{r4, lr}
 8004530:	460c      	mov	r4, r1
 8004532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004536:	f000 f9e1 	bl	80048fc <_lseek_r>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	bf15      	itete	ne
 8004540:	6560      	strne	r0, [r4, #84]	; 0x54
 8004542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800454a:	81a3      	strheq	r3, [r4, #12]
 800454c:	bf18      	it	ne
 800454e:	81a3      	strhne	r3, [r4, #12]
 8004550:	bd10      	pop	{r4, pc}

08004552 <__sclose>:
 8004552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004556:	f000 b8f1 	b.w	800473c <_close_r>
	...

0800455c <__swbuf_r>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	460e      	mov	r6, r1
 8004560:	4614      	mov	r4, r2
 8004562:	4605      	mov	r5, r0
 8004564:	b118      	cbz	r0, 800456e <__swbuf_r+0x12>
 8004566:	6983      	ldr	r3, [r0, #24]
 8004568:	b90b      	cbnz	r3, 800456e <__swbuf_r+0x12>
 800456a:	f7ff f90f 	bl	800378c <__sinit>
 800456e:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <__swbuf_r+0x98>)
 8004570:	429c      	cmp	r4, r3
 8004572:	d12b      	bne.n	80045cc <__swbuf_r+0x70>
 8004574:	686c      	ldr	r4, [r5, #4]
 8004576:	69a3      	ldr	r3, [r4, #24]
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	071a      	lsls	r2, r3, #28
 800457e:	d52f      	bpl.n	80045e0 <__swbuf_r+0x84>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	b36b      	cbz	r3, 80045e0 <__swbuf_r+0x84>
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	6820      	ldr	r0, [r4, #0]
 8004588:	b2f6      	uxtb	r6, r6
 800458a:	1ac0      	subs	r0, r0, r3
 800458c:	6963      	ldr	r3, [r4, #20]
 800458e:	4637      	mov	r7, r6
 8004590:	4283      	cmp	r3, r0
 8004592:	dc04      	bgt.n	800459e <__swbuf_r+0x42>
 8004594:	4621      	mov	r1, r4
 8004596:	4628      	mov	r0, r5
 8004598:	f000 f962 	bl	8004860 <_fflush_r>
 800459c:	bb30      	cbnz	r0, 80045ec <__swbuf_r+0x90>
 800459e:	68a3      	ldr	r3, [r4, #8]
 80045a0:	3001      	adds	r0, #1
 80045a2:	3b01      	subs	r3, #1
 80045a4:	60a3      	str	r3, [r4, #8]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	6022      	str	r2, [r4, #0]
 80045ac:	701e      	strb	r6, [r3, #0]
 80045ae:	6963      	ldr	r3, [r4, #20]
 80045b0:	4283      	cmp	r3, r0
 80045b2:	d004      	beq.n	80045be <__swbuf_r+0x62>
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	07db      	lsls	r3, r3, #31
 80045b8:	d506      	bpl.n	80045c8 <__swbuf_r+0x6c>
 80045ba:	2e0a      	cmp	r6, #10
 80045bc:	d104      	bne.n	80045c8 <__swbuf_r+0x6c>
 80045be:	4621      	mov	r1, r4
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 f94d 	bl	8004860 <_fflush_r>
 80045c6:	b988      	cbnz	r0, 80045ec <__swbuf_r+0x90>
 80045c8:	4638      	mov	r0, r7
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <__swbuf_r+0x9c>)
 80045ce:	429c      	cmp	r4, r3
 80045d0:	d101      	bne.n	80045d6 <__swbuf_r+0x7a>
 80045d2:	68ac      	ldr	r4, [r5, #8]
 80045d4:	e7cf      	b.n	8004576 <__swbuf_r+0x1a>
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <__swbuf_r+0xa0>)
 80045d8:	429c      	cmp	r4, r3
 80045da:	bf08      	it	eq
 80045dc:	68ec      	ldreq	r4, [r5, #12]
 80045de:	e7ca      	b.n	8004576 <__swbuf_r+0x1a>
 80045e0:	4621      	mov	r1, r4
 80045e2:	4628      	mov	r0, r5
 80045e4:	f000 f81e 	bl	8004624 <__swsetup_r>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d0cb      	beq.n	8004584 <__swbuf_r+0x28>
 80045ec:	f04f 37ff 	mov.w	r7, #4294967295
 80045f0:	e7ea      	b.n	80045c8 <__swbuf_r+0x6c>
 80045f2:	bf00      	nop
 80045f4:	08004c7c 	.word	0x08004c7c
 80045f8:	08004c9c 	.word	0x08004c9c
 80045fc:	08004c5c 	.word	0x08004c5c

08004600 <_write_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4604      	mov	r4, r0
 8004604:	4608      	mov	r0, r1
 8004606:	4611      	mov	r1, r2
 8004608:	2200      	movs	r2, #0
 800460a:	4d05      	ldr	r5, [pc, #20]	; (8004620 <_write_r+0x20>)
 800460c:	602a      	str	r2, [r5, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	f7fc fa5c 	bl	8000acc <_write>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_write_r+0x1e>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	b103      	cbz	r3, 800461e <_write_r+0x1e>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	20000250 	.word	0x20000250

08004624 <__swsetup_r>:
 8004624:	4b32      	ldr	r3, [pc, #200]	; (80046f0 <__swsetup_r+0xcc>)
 8004626:	b570      	push	{r4, r5, r6, lr}
 8004628:	681d      	ldr	r5, [r3, #0]
 800462a:	4606      	mov	r6, r0
 800462c:	460c      	mov	r4, r1
 800462e:	b125      	cbz	r5, 800463a <__swsetup_r+0x16>
 8004630:	69ab      	ldr	r3, [r5, #24]
 8004632:	b913      	cbnz	r3, 800463a <__swsetup_r+0x16>
 8004634:	4628      	mov	r0, r5
 8004636:	f7ff f8a9 	bl	800378c <__sinit>
 800463a:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <__swsetup_r+0xd0>)
 800463c:	429c      	cmp	r4, r3
 800463e:	d10f      	bne.n	8004660 <__swsetup_r+0x3c>
 8004640:	686c      	ldr	r4, [r5, #4]
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004648:	0719      	lsls	r1, r3, #28
 800464a:	d42c      	bmi.n	80046a6 <__swsetup_r+0x82>
 800464c:	06dd      	lsls	r5, r3, #27
 800464e:	d411      	bmi.n	8004674 <__swsetup_r+0x50>
 8004650:	2309      	movs	r3, #9
 8004652:	6033      	str	r3, [r6, #0]
 8004654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	e03e      	b.n	80046de <__swsetup_r+0xba>
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <__swsetup_r+0xd4>)
 8004662:	429c      	cmp	r4, r3
 8004664:	d101      	bne.n	800466a <__swsetup_r+0x46>
 8004666:	68ac      	ldr	r4, [r5, #8]
 8004668:	e7eb      	b.n	8004642 <__swsetup_r+0x1e>
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <__swsetup_r+0xd8>)
 800466c:	429c      	cmp	r4, r3
 800466e:	bf08      	it	eq
 8004670:	68ec      	ldreq	r4, [r5, #12]
 8004672:	e7e6      	b.n	8004642 <__swsetup_r+0x1e>
 8004674:	0758      	lsls	r0, r3, #29
 8004676:	d512      	bpl.n	800469e <__swsetup_r+0x7a>
 8004678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800467a:	b141      	cbz	r1, 800468e <__swsetup_r+0x6a>
 800467c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004680:	4299      	cmp	r1, r3
 8004682:	d002      	beq.n	800468a <__swsetup_r+0x66>
 8004684:	4630      	mov	r0, r6
 8004686:	f7ff fce1 	bl	800404c <_free_r>
 800468a:	2300      	movs	r3, #0
 800468c:	6363      	str	r3, [r4, #52]	; 0x34
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	2300      	movs	r3, #0
 8004698:	6063      	str	r3, [r4, #4]
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f043 0308 	orr.w	r3, r3, #8
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	b94b      	cbnz	r3, 80046be <__swsetup_r+0x9a>
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b4:	d003      	beq.n	80046be <__swsetup_r+0x9a>
 80046b6:	4621      	mov	r1, r4
 80046b8:	4630      	mov	r0, r6
 80046ba:	f000 f957 	bl	800496c <__smakebuf_r>
 80046be:	89a0      	ldrh	r0, [r4, #12]
 80046c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046c4:	f010 0301 	ands.w	r3, r0, #1
 80046c8:	d00a      	beq.n	80046e0 <__swsetup_r+0xbc>
 80046ca:	2300      	movs	r3, #0
 80046cc:	60a3      	str	r3, [r4, #8]
 80046ce:	6963      	ldr	r3, [r4, #20]
 80046d0:	425b      	negs	r3, r3
 80046d2:	61a3      	str	r3, [r4, #24]
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	b943      	cbnz	r3, 80046ea <__swsetup_r+0xc6>
 80046d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046dc:	d1ba      	bne.n	8004654 <__swsetup_r+0x30>
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	0781      	lsls	r1, r0, #30
 80046e2:	bf58      	it	pl
 80046e4:	6963      	ldrpl	r3, [r4, #20]
 80046e6:	60a3      	str	r3, [r4, #8]
 80046e8:	e7f4      	b.n	80046d4 <__swsetup_r+0xb0>
 80046ea:	2000      	movs	r0, #0
 80046ec:	e7f7      	b.n	80046de <__swsetup_r+0xba>
 80046ee:	bf00      	nop
 80046f0:	2000000c 	.word	0x2000000c
 80046f4:	08004c7c 	.word	0x08004c7c
 80046f8:	08004c9c 	.word	0x08004c9c
 80046fc:	08004c5c 	.word	0x08004c5c

08004700 <__assert_func>:
 8004700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004702:	4614      	mov	r4, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <__assert_func+0x2c>)
 8004708:	4605      	mov	r5, r0
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68d8      	ldr	r0, [r3, #12]
 800470e:	b14c      	cbz	r4, 8004724 <__assert_func+0x24>
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <__assert_func+0x30>)
 8004712:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004716:	9100      	str	r1, [sp, #0]
 8004718:	462b      	mov	r3, r5
 800471a:	4906      	ldr	r1, [pc, #24]	; (8004734 <__assert_func+0x34>)
 800471c:	f000 f8dc 	bl	80048d8 <fiprintf>
 8004720:	f000 f9a1 	bl	8004a66 <abort>
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <__assert_func+0x38>)
 8004726:	461c      	mov	r4, r3
 8004728:	e7f3      	b.n	8004712 <__assert_func+0x12>
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c
 8004730:	08004e25 	.word	0x08004e25
 8004734:	08004e32 	.word	0x08004e32
 8004738:	08004e60 	.word	0x08004e60

0800473c <_close_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	2300      	movs	r3, #0
 8004740:	4d05      	ldr	r5, [pc, #20]	; (8004758 <_close_r+0x1c>)
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	f7fc fadb 	bl	8000d02 <_close>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_close_r+0x1a>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_close_r+0x1a>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	20000250 	.word	0x20000250

0800475c <__sflush_r>:
 800475c:	898a      	ldrh	r2, [r1, #12]
 800475e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004760:	4605      	mov	r5, r0
 8004762:	0710      	lsls	r0, r2, #28
 8004764:	460c      	mov	r4, r1
 8004766:	d457      	bmi.n	8004818 <__sflush_r+0xbc>
 8004768:	684b      	ldr	r3, [r1, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	dc04      	bgt.n	8004778 <__sflush_r+0x1c>
 800476e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	dc01      	bgt.n	8004778 <__sflush_r+0x1c>
 8004774:	2000      	movs	r0, #0
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800477a:	2e00      	cmp	r6, #0
 800477c:	d0fa      	beq.n	8004774 <__sflush_r+0x18>
 800477e:	2300      	movs	r3, #0
 8004780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004784:	682f      	ldr	r7, [r5, #0]
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	d032      	beq.n	80047f0 <__sflush_r+0x94>
 800478a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	075a      	lsls	r2, r3, #29
 8004790:	d505      	bpl.n	800479e <__sflush_r+0x42>
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	1ac0      	subs	r0, r0, r3
 8004796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004798:	b10b      	cbz	r3, 800479e <__sflush_r+0x42>
 800479a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800479c:	1ac0      	subs	r0, r0, r3
 800479e:	2300      	movs	r3, #0
 80047a0:	4602      	mov	r2, r0
 80047a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047a4:	4628      	mov	r0, r5
 80047a6:	6a21      	ldr	r1, [r4, #32]
 80047a8:	47b0      	blx	r6
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	d106      	bne.n	80047be <__sflush_r+0x62>
 80047b0:	6829      	ldr	r1, [r5, #0]
 80047b2:	291d      	cmp	r1, #29
 80047b4:	d82c      	bhi.n	8004810 <__sflush_r+0xb4>
 80047b6:	4a29      	ldr	r2, [pc, #164]	; (800485c <__sflush_r+0x100>)
 80047b8:	40ca      	lsrs	r2, r1
 80047ba:	07d6      	lsls	r6, r2, #31
 80047bc:	d528      	bpl.n	8004810 <__sflush_r+0xb4>
 80047be:	2200      	movs	r2, #0
 80047c0:	6062      	str	r2, [r4, #4]
 80047c2:	6922      	ldr	r2, [r4, #16]
 80047c4:	04d9      	lsls	r1, r3, #19
 80047c6:	6022      	str	r2, [r4, #0]
 80047c8:	d504      	bpl.n	80047d4 <__sflush_r+0x78>
 80047ca:	1c42      	adds	r2, r0, #1
 80047cc:	d101      	bne.n	80047d2 <__sflush_r+0x76>
 80047ce:	682b      	ldr	r3, [r5, #0]
 80047d0:	b903      	cbnz	r3, 80047d4 <__sflush_r+0x78>
 80047d2:	6560      	str	r0, [r4, #84]	; 0x54
 80047d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047d6:	602f      	str	r7, [r5, #0]
 80047d8:	2900      	cmp	r1, #0
 80047da:	d0cb      	beq.n	8004774 <__sflush_r+0x18>
 80047dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047e0:	4299      	cmp	r1, r3
 80047e2:	d002      	beq.n	80047ea <__sflush_r+0x8e>
 80047e4:	4628      	mov	r0, r5
 80047e6:	f7ff fc31 	bl	800404c <_free_r>
 80047ea:	2000      	movs	r0, #0
 80047ec:	6360      	str	r0, [r4, #52]	; 0x34
 80047ee:	e7c2      	b.n	8004776 <__sflush_r+0x1a>
 80047f0:	6a21      	ldr	r1, [r4, #32]
 80047f2:	2301      	movs	r3, #1
 80047f4:	4628      	mov	r0, r5
 80047f6:	47b0      	blx	r6
 80047f8:	1c41      	adds	r1, r0, #1
 80047fa:	d1c7      	bne.n	800478c <__sflush_r+0x30>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0c4      	beq.n	800478c <__sflush_r+0x30>
 8004802:	2b1d      	cmp	r3, #29
 8004804:	d001      	beq.n	800480a <__sflush_r+0xae>
 8004806:	2b16      	cmp	r3, #22
 8004808:	d101      	bne.n	800480e <__sflush_r+0xb2>
 800480a:	602f      	str	r7, [r5, #0]
 800480c:	e7b2      	b.n	8004774 <__sflush_r+0x18>
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	e7ae      	b.n	8004776 <__sflush_r+0x1a>
 8004818:	690f      	ldr	r7, [r1, #16]
 800481a:	2f00      	cmp	r7, #0
 800481c:	d0aa      	beq.n	8004774 <__sflush_r+0x18>
 800481e:	0793      	lsls	r3, r2, #30
 8004820:	bf18      	it	ne
 8004822:	2300      	movne	r3, #0
 8004824:	680e      	ldr	r6, [r1, #0]
 8004826:	bf08      	it	eq
 8004828:	694b      	ldreq	r3, [r1, #20]
 800482a:	1bf6      	subs	r6, r6, r7
 800482c:	600f      	str	r7, [r1, #0]
 800482e:	608b      	str	r3, [r1, #8]
 8004830:	2e00      	cmp	r6, #0
 8004832:	dd9f      	ble.n	8004774 <__sflush_r+0x18>
 8004834:	4633      	mov	r3, r6
 8004836:	463a      	mov	r2, r7
 8004838:	4628      	mov	r0, r5
 800483a:	6a21      	ldr	r1, [r4, #32]
 800483c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004840:	47e0      	blx	ip
 8004842:	2800      	cmp	r0, #0
 8004844:	dc06      	bgt.n	8004854 <__sflush_r+0xf8>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004850:	81a3      	strh	r3, [r4, #12]
 8004852:	e790      	b.n	8004776 <__sflush_r+0x1a>
 8004854:	4407      	add	r7, r0
 8004856:	1a36      	subs	r6, r6, r0
 8004858:	e7ea      	b.n	8004830 <__sflush_r+0xd4>
 800485a:	bf00      	nop
 800485c:	20400001 	.word	0x20400001

08004860 <_fflush_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	690b      	ldr	r3, [r1, #16]
 8004864:	4605      	mov	r5, r0
 8004866:	460c      	mov	r4, r1
 8004868:	b913      	cbnz	r3, 8004870 <_fflush_r+0x10>
 800486a:	2500      	movs	r5, #0
 800486c:	4628      	mov	r0, r5
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	b118      	cbz	r0, 800487a <_fflush_r+0x1a>
 8004872:	6983      	ldr	r3, [r0, #24]
 8004874:	b90b      	cbnz	r3, 800487a <_fflush_r+0x1a>
 8004876:	f7fe ff89 	bl	800378c <__sinit>
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <_fflush_r+0x6c>)
 800487c:	429c      	cmp	r4, r3
 800487e:	d11b      	bne.n	80048b8 <_fflush_r+0x58>
 8004880:	686c      	ldr	r4, [r5, #4]
 8004882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0ef      	beq.n	800486a <_fflush_r+0xa>
 800488a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800488c:	07d0      	lsls	r0, r2, #31
 800488e:	d404      	bmi.n	800489a <_fflush_r+0x3a>
 8004890:	0599      	lsls	r1, r3, #22
 8004892:	d402      	bmi.n	800489a <_fflush_r+0x3a>
 8004894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004896:	f7ff f81c 	bl	80038d2 <__retarget_lock_acquire_recursive>
 800489a:	4628      	mov	r0, r5
 800489c:	4621      	mov	r1, r4
 800489e:	f7ff ff5d 	bl	800475c <__sflush_r>
 80048a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048a4:	4605      	mov	r5, r0
 80048a6:	07da      	lsls	r2, r3, #31
 80048a8:	d4e0      	bmi.n	800486c <_fflush_r+0xc>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	059b      	lsls	r3, r3, #22
 80048ae:	d4dd      	bmi.n	800486c <_fflush_r+0xc>
 80048b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048b2:	f7ff f80f 	bl	80038d4 <__retarget_lock_release_recursive>
 80048b6:	e7d9      	b.n	800486c <_fflush_r+0xc>
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <_fflush_r+0x70>)
 80048ba:	429c      	cmp	r4, r3
 80048bc:	d101      	bne.n	80048c2 <_fflush_r+0x62>
 80048be:	68ac      	ldr	r4, [r5, #8]
 80048c0:	e7df      	b.n	8004882 <_fflush_r+0x22>
 80048c2:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <_fflush_r+0x74>)
 80048c4:	429c      	cmp	r4, r3
 80048c6:	bf08      	it	eq
 80048c8:	68ec      	ldreq	r4, [r5, #12]
 80048ca:	e7da      	b.n	8004882 <_fflush_r+0x22>
 80048cc:	08004c7c 	.word	0x08004c7c
 80048d0:	08004c9c 	.word	0x08004c9c
 80048d4:	08004c5c 	.word	0x08004c5c

080048d8 <fiprintf>:
 80048d8:	b40e      	push	{r1, r2, r3}
 80048da:	b503      	push	{r0, r1, lr}
 80048dc:	4601      	mov	r1, r0
 80048de:	ab03      	add	r3, sp, #12
 80048e0:	4805      	ldr	r0, [pc, #20]	; (80048f8 <fiprintf+0x20>)
 80048e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80048e6:	6800      	ldr	r0, [r0, #0]
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	f7ff fcb3 	bl	8004254 <_vfiprintf_r>
 80048ee:	b002      	add	sp, #8
 80048f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f4:	b003      	add	sp, #12
 80048f6:	4770      	bx	lr
 80048f8:	2000000c 	.word	0x2000000c

080048fc <_lseek_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	2200      	movs	r2, #0
 8004906:	4d05      	ldr	r5, [pc, #20]	; (800491c <_lseek_r+0x20>)
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fc fa1d 	bl	8000d4a <_lseek>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_lseek_r+0x1e>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_lseek_r+0x1e>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20000250 	.word	0x20000250

08004920 <__swhatbuf_r>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	460e      	mov	r6, r1
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	4614      	mov	r4, r2
 800492a:	2900      	cmp	r1, #0
 800492c:	461d      	mov	r5, r3
 800492e:	b096      	sub	sp, #88	; 0x58
 8004930:	da08      	bge.n	8004944 <__swhatbuf_r+0x24>
 8004932:	2200      	movs	r2, #0
 8004934:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	061a      	lsls	r2, r3, #24
 800493c:	d410      	bmi.n	8004960 <__swhatbuf_r+0x40>
 800493e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004942:	e00e      	b.n	8004962 <__swhatbuf_r+0x42>
 8004944:	466a      	mov	r2, sp
 8004946:	f000 f895 	bl	8004a74 <_fstat_r>
 800494a:	2800      	cmp	r0, #0
 800494c:	dbf1      	blt.n	8004932 <__swhatbuf_r+0x12>
 800494e:	9a01      	ldr	r2, [sp, #4]
 8004950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004958:	425a      	negs	r2, r3
 800495a:	415a      	adcs	r2, r3
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	e7ee      	b.n	800493e <__swhatbuf_r+0x1e>
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	2000      	movs	r0, #0
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	b016      	add	sp, #88	; 0x58
 8004968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800496c <__smakebuf_r>:
 800496c:	898b      	ldrh	r3, [r1, #12]
 800496e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004970:	079d      	lsls	r5, r3, #30
 8004972:	4606      	mov	r6, r0
 8004974:	460c      	mov	r4, r1
 8004976:	d507      	bpl.n	8004988 <__smakebuf_r+0x1c>
 8004978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	2301      	movs	r3, #1
 8004982:	6163      	str	r3, [r4, #20]
 8004984:	b002      	add	sp, #8
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	466a      	mov	r2, sp
 800498a:	ab01      	add	r3, sp, #4
 800498c:	f7ff ffc8 	bl	8004920 <__swhatbuf_r>
 8004990:	9900      	ldr	r1, [sp, #0]
 8004992:	4605      	mov	r5, r0
 8004994:	4630      	mov	r0, r6
 8004996:	f7ff fbc1 	bl	800411c <_malloc_r>
 800499a:	b948      	cbnz	r0, 80049b0 <__smakebuf_r+0x44>
 800499c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a0:	059a      	lsls	r2, r3, #22
 80049a2:	d4ef      	bmi.n	8004984 <__smakebuf_r+0x18>
 80049a4:	f023 0303 	bic.w	r3, r3, #3
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	e7e3      	b.n	8004978 <__smakebuf_r+0xc>
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <__smakebuf_r+0x7c>)
 80049b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	6020      	str	r0, [r4, #0]
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	6120      	str	r0, [r4, #16]
 80049c2:	6163      	str	r3, [r4, #20]
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	b15b      	cbz	r3, 80049e0 <__smakebuf_r+0x74>
 80049c8:	4630      	mov	r0, r6
 80049ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ce:	f000 f863 	bl	8004a98 <_isatty_r>
 80049d2:	b128      	cbz	r0, 80049e0 <__smakebuf_r+0x74>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	89a0      	ldrh	r0, [r4, #12]
 80049e2:	4305      	orrs	r5, r0
 80049e4:	81a5      	strh	r5, [r4, #12]
 80049e6:	e7cd      	b.n	8004984 <__smakebuf_r+0x18>
 80049e8:	08003725 	.word	0x08003725

080049ec <__ascii_mbtowc>:
 80049ec:	b082      	sub	sp, #8
 80049ee:	b901      	cbnz	r1, 80049f2 <__ascii_mbtowc+0x6>
 80049f0:	a901      	add	r1, sp, #4
 80049f2:	b142      	cbz	r2, 8004a06 <__ascii_mbtowc+0x1a>
 80049f4:	b14b      	cbz	r3, 8004a0a <__ascii_mbtowc+0x1e>
 80049f6:	7813      	ldrb	r3, [r2, #0]
 80049f8:	600b      	str	r3, [r1, #0]
 80049fa:	7812      	ldrb	r2, [r2, #0]
 80049fc:	1e10      	subs	r0, r2, #0
 80049fe:	bf18      	it	ne
 8004a00:	2001      	movne	r0, #1
 8004a02:	b002      	add	sp, #8
 8004a04:	4770      	bx	lr
 8004a06:	4610      	mov	r0, r2
 8004a08:	e7fb      	b.n	8004a02 <__ascii_mbtowc+0x16>
 8004a0a:	f06f 0001 	mvn.w	r0, #1
 8004a0e:	e7f8      	b.n	8004a02 <__ascii_mbtowc+0x16>

08004a10 <__malloc_lock>:
 8004a10:	4801      	ldr	r0, [pc, #4]	; (8004a18 <__malloc_lock+0x8>)
 8004a12:	f7fe bf5e 	b.w	80038d2 <__retarget_lock_acquire_recursive>
 8004a16:	bf00      	nop
 8004a18:	20000244 	.word	0x20000244

08004a1c <__malloc_unlock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <__malloc_unlock+0x8>)
 8004a1e:	f7fe bf59 	b.w	80038d4 <__retarget_lock_release_recursive>
 8004a22:	bf00      	nop
 8004a24:	20000244 	.word	0x20000244

08004a28 <_read_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	2200      	movs	r2, #0
 8004a32:	4d05      	ldr	r5, [pc, #20]	; (8004a48 <_read_r+0x20>)
 8004a34:	602a      	str	r2, [r5, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f7fc f946 	bl	8000cc8 <_read>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d102      	bne.n	8004a46 <_read_r+0x1e>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	b103      	cbz	r3, 8004a46 <_read_r+0x1e>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	20000250 	.word	0x20000250

08004a4c <__ascii_wctomb>:
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4608      	mov	r0, r1
 8004a50:	b141      	cbz	r1, 8004a64 <__ascii_wctomb+0x18>
 8004a52:	2aff      	cmp	r2, #255	; 0xff
 8004a54:	d904      	bls.n	8004a60 <__ascii_wctomb+0x14>
 8004a56:	228a      	movs	r2, #138	; 0x8a
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	4770      	bx	lr
 8004a60:	2001      	movs	r0, #1
 8004a62:	700a      	strb	r2, [r1, #0]
 8004a64:	4770      	bx	lr

08004a66 <abort>:
 8004a66:	2006      	movs	r0, #6
 8004a68:	b508      	push	{r3, lr}
 8004a6a:	f000 f84d 	bl	8004b08 <raise>
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f7fc f920 	bl	8000cb4 <_exit>

08004a74 <_fstat_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	2300      	movs	r3, #0
 8004a78:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_fstat_r+0x20>)
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	f7fc f949 	bl	8000d18 <_fstat>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	d102      	bne.n	8004a90 <_fstat_r+0x1c>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	b103      	cbz	r3, 8004a90 <_fstat_r+0x1c>
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
 8004a92:	bf00      	nop
 8004a94:	20000250 	.word	0x20000250

08004a98 <_isatty_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4d05      	ldr	r5, [pc, #20]	; (8004ab4 <_isatty_r+0x1c>)
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7fc f947 	bl	8000d36 <_isatty>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d102      	bne.n	8004ab2 <_isatty_r+0x1a>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	b103      	cbz	r3, 8004ab2 <_isatty_r+0x1a>
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20000250 	.word	0x20000250

08004ab8 <_raise_r>:
 8004ab8:	291f      	cmp	r1, #31
 8004aba:	b538      	push	{r3, r4, r5, lr}
 8004abc:	4604      	mov	r4, r0
 8004abe:	460d      	mov	r5, r1
 8004ac0:	d904      	bls.n	8004acc <_raise_r+0x14>
 8004ac2:	2316      	movs	r3, #22
 8004ac4:	6003      	str	r3, [r0, #0]
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ace:	b112      	cbz	r2, 8004ad6 <_raise_r+0x1e>
 8004ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ad4:	b94b      	cbnz	r3, 8004aea <_raise_r+0x32>
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 f830 	bl	8004b3c <_getpid_r>
 8004adc:	462a      	mov	r2, r5
 8004ade:	4601      	mov	r1, r0
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae6:	f000 b817 	b.w	8004b18 <_kill_r>
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d00a      	beq.n	8004b04 <_raise_r+0x4c>
 8004aee:	1c59      	adds	r1, r3, #1
 8004af0:	d103      	bne.n	8004afa <_raise_r+0x42>
 8004af2:	2316      	movs	r3, #22
 8004af4:	6003      	str	r3, [r0, #0]
 8004af6:	2001      	movs	r0, #1
 8004af8:	e7e7      	b.n	8004aca <_raise_r+0x12>
 8004afa:	2400      	movs	r4, #0
 8004afc:	4628      	mov	r0, r5
 8004afe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b02:	4798      	blx	r3
 8004b04:	2000      	movs	r0, #0
 8004b06:	e7e0      	b.n	8004aca <_raise_r+0x12>

08004b08 <raise>:
 8004b08:	4b02      	ldr	r3, [pc, #8]	; (8004b14 <raise+0xc>)
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f7ff bfd3 	b.w	8004ab8 <_raise_r>
 8004b12:	bf00      	nop
 8004b14:	2000000c 	.word	0x2000000c

08004b18 <_kill_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	4d06      	ldr	r5, [pc, #24]	; (8004b38 <_kill_r+0x20>)
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	602b      	str	r3, [r5, #0]
 8004b26:	f7fc f8b5 	bl	8000c94 <_kill>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	d102      	bne.n	8004b34 <_kill_r+0x1c>
 8004b2e:	682b      	ldr	r3, [r5, #0]
 8004b30:	b103      	cbz	r3, 8004b34 <_kill_r+0x1c>
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	bd38      	pop	{r3, r4, r5, pc}
 8004b36:	bf00      	nop
 8004b38:	20000250 	.word	0x20000250

08004b3c <_getpid_r>:
 8004b3c:	f7fc b8a3 	b.w	8000c86 <_getpid>

08004b40 <_init>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr

08004b4c <_fini>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr
