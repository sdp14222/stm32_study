
2-2. UART printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000204c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021f4  080021f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080021f4  080021f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021f4  080021f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f4  080021f4  000121f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021f8  080021f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  0800226c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800226c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055ce  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001574  00000000  00000000  00025667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00026be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  000272c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fa  00000000  00000000  00027908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ae9  00000000  00000000  0003f302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008343c  00000000  00000000  00046deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002068  00000000  00000000  000ca278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002140 	.word	0x08002140

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002140 	.word	0x08002140

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MX_GPIO_Init+0x40>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a0d      	ldr	r2, [pc, #52]	; (800018c <MX_GPIO_Init+0x40>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <MX_GPIO_Init+0x40>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <MX_GPIO_Init+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <MX_GPIO_Init+0x40>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <MX_GPIO_Init+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]

}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40021000 	.word	0x40021000

08000190 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 10);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	b29a      	uxth	r2, r3
 80001a0:	230a      	movs	r3, #10
 80001a2:	68b9      	ldr	r1, [r7, #8]
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <_write+0x24>)
 80001a6:	f001 f938 	bl	800141a <HAL_UART_Transmit>
	return len;
 80001aa:	687b      	ldr	r3, [r7, #4]
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000090 	.word	0x20000090

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001bc:	f000 f9d8 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c0:	f000 f80e 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c4:	f7ff ffc2 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001c8:	f000 f936 	bl	8000438 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World!\n");
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <main+0x24>)
 80001ce:	f001 fb2f 	bl	8001830 <puts>
	  HAL_Delay(1000);
 80001d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d6:	f000 fa2d 	bl	8000634 <HAL_Delay>
	  printf("Hello World!\n");
 80001da:	e7f7      	b.n	80001cc <main+0x14>
 80001dc:	08002158 	.word	0x08002158

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	; 0x40
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 faa8 	bl	8001744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000202:	2301      	movs	r3, #1
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000210:	2301      	movs	r3, #1
 8000212:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000214:	2302      	movs	r3, #2
 8000216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fc8f 	bl	8000b4c <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000234:	f000 f819 	bl	800026a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000238:	230f      	movs	r3, #15
 800023a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023c:	2302      	movs	r3, #2
 800023e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fefc 	bl	8001050 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800025e:	f000 f804 	bl	800026a <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	; 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}

0800026a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800026e:	b672      	cpsid	i
}
 8000270:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000272:	e7fe      	b.n	8000272 <Error_Handler+0x8>

08000274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <HAL_MspInit+0x5c>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <HAL_MspInit+0x5c>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6193      	str	r3, [r2, #24]
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <HAL_MspInit+0x5c>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	60bb      	str	r3, [r7, #8]
 8000290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <HAL_MspInit+0x5c>)
 8000294:	69db      	ldr	r3, [r3, #28]
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <HAL_MspInit+0x5c>)
 8000298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800029c:	61d3      	str	r3, [r2, #28]
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <HAL_MspInit+0x5c>)
 80002a0:	69db      	ldr	r3, [r3, #28]
 80002a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <HAL_MspInit+0x60>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <HAL_MspInit+0x60>)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002c6:	bf00      	nop
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40010000 	.word	0x40010000

080002d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <NMI_Handler+0x4>

080002de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <HardFault_Handler+0x4>

080002e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <MemManage_Handler+0x4>

080002ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <BusFault_Handler+0x4>

080002f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <UsageFault_Handler+0x4>

080002f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr

0800030e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr

0800031a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800031e:	f000 f96d 	bl	80005fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}

08000326 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000326:	b580      	push	{r7, lr}
 8000328:	b086      	sub	sp, #24
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	60b9      	str	r1, [r7, #8]
 8000330:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
 8000336:	e00a      	b.n	800034e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000338:	f3af 8000 	nop.w
 800033c:	4601      	mov	r1, r0
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	60ba      	str	r2, [r7, #8]
 8000344:	b2ca      	uxtb	r2, r1
 8000346:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	3301      	adds	r3, #1
 800034c:	617b      	str	r3, [r7, #20]
 800034e:	697a      	ldr	r2, [r7, #20]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	429a      	cmp	r2, r3
 8000354:	dbf0      	blt.n	8000338 <_read+0x12>
	}

return len;
 8000356:	687b      	ldr	r3, [r7, #4]
}
 8000358:	4618      	mov	r0, r3
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	return -1;
 8000368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800036c:	4618      	mov	r0, r3
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr

08000376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000376:	b480      	push	{r7}
 8000378:	b083      	sub	sp, #12
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
 800037e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000386:	605a      	str	r2, [r3, #4]
	return 0;
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <_isatty>:

int _isatty(int file)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	return 1;
 800039c:	2301      	movs	r3, #1
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]
	return 0;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003c8:	4a14      	ldr	r2, [pc, #80]	; (800041c <_sbrk+0x5c>)
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <_sbrk+0x60>)
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <_sbrk+0x64>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d102      	bne.n	80003e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <_sbrk+0x64>)
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <_sbrk+0x68>)
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <_sbrk+0x64>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	693a      	ldr	r2, [r7, #16]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d207      	bcs.n	8000400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f0:	f001 f97e 	bl	80016f0 <__errno>
 80003f4:	4603      	mov	r3, r0
 80003f6:	220c      	movs	r2, #12
 80003f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	e009      	b.n	8000414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <_sbrk+0x64>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <_sbrk+0x64>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4413      	add	r3, r2
 800040e:	4a05      	ldr	r2, [pc, #20]	; (8000424 <_sbrk+0x64>)
 8000410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000412:	68fb      	ldr	r3, [r7, #12]
}
 8000414:	4618      	mov	r0, r3
 8000416:	3718      	adds	r7, #24
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20005000 	.word	0x20005000
 8000420:	00000400 	.word	0x00000400
 8000424:	2000008c 	.word	0x2000008c
 8000428:	200000e8 	.word	0x200000e8

0800042c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <MX_USART1_UART_Init+0x50>)
 8000440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000470:	f000 ff86 	bl	8001380 <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800047a:	f7ff fef6 	bl	800026a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000090 	.word	0x20000090
 8000488:	40013800 	.word	0x40013800

0800048c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a1c      	ldr	r2, [pc, #112]	; (8000518 <HAL_UART_MspInit+0x8c>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d131      	bne.n	8000510 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <HAL_UART_MspInit+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a1a      	ldr	r2, [pc, #104]	; (800051c <HAL_UART_MspInit+0x90>)
 80004b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <HAL_UART_MspInit+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_UART_MspInit+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <HAL_UART_MspInit+0x90>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_UART_MspInit+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e2:	2302      	movs	r3, #2
 80004e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e6:	2303      	movs	r3, #3
 80004e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <HAL_UART_MspInit+0x94>)
 80004f2:	f000 f9a7 	bl	8000844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <HAL_UART_MspInit+0x94>)
 800050c:	f000 f99a 	bl	8000844 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000510:	bf00      	nop
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40013800 	.word	0x40013800
 800051c:	40021000 	.word	0x40021000
 8000520:	40010800 	.word	0x40010800

08000524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000526:	490d      	ldr	r1, [pc, #52]	; (800055c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800053c:	4c0a      	ldr	r4, [pc, #40]	; (8000568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054a:	f7ff ff6f 	bl	800042c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054e:	f001 f8d5 	bl	80016fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000552:	f7ff fe31 	bl	80001b8 <main>
  bx lr
 8000556:	4770      	bx	lr
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000560:	080021fc 	.word	0x080021fc
  ldr r2, =_sbss
 8000564:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000568:	200000e8 	.word	0x200000e8

0800056c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_2_IRQHandler>
	...

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_Init+0x28>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_Init+0x28>)
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f92b 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000586:	200f      	movs	r0, #15
 8000588:	f000 f808 	bl	800059c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800058c:	f7ff fe72 	bl	8000274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40022000 	.word	0x40022000

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_InitTick+0x54>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_InitTick+0x58>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f935 	bl	800082a <HAL_SYSTICK_Config>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	e00e      	b.n	80005e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b0f      	cmp	r3, #15
 80005ce:	d80a      	bhi.n	80005e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d0:	2200      	movs	r2, #0
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	f04f 30ff 	mov.w	r0, #4294967295
 80005d8:	f000 f90b 	bl	80007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <HAL_InitTick+0x5c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e000      	b.n	80005e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000004 	.word	0x20000004

080005fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_IncTick+0x1c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x20>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x20>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	20000008 	.word	0x20000008
 800061c:	200000d4 	.word	0x200000d4

08000620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return uwTick;
 8000624:	4b02      	ldr	r3, [pc, #8]	; (8000630 <HAL_GetTick+0x10>)
 8000626:	681b      	ldr	r3, [r3, #0]
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	200000d4 	.word	0x200000d4

08000634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800063c:	f7ff fff0 	bl	8000620 <HAL_GetTick>
 8000640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800064c:	d005      	beq.n	800065a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_Delay+0x44>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4413      	add	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800065a:	bf00      	nop
 800065c:	f7ff ffe0 	bl	8000620 <HAL_GetTick>
 8000660:	4602      	mov	r2, r0
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	429a      	cmp	r2, r3
 800066a:	d8f7      	bhi.n	800065c <HAL_Delay+0x28>
  {
  }
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000008 	.word	0x20000008

0800067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__NVIC_GetPriorityGrouping+0x18>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	f003 0307 	and.w	r3, r3, #7
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff90 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff49 	bl	800067c <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5e 	bl	80006c4 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff90 	bl	8000734 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5f 	bl	80006e0 <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb0 	bl	8000798 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b08b      	sub	sp, #44	; 0x2c
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000856:	e169      	b.n	8000b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000858:	2201      	movs	r2, #1
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	4013      	ands	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	429a      	cmp	r2, r3
 8000872:	f040 8158 	bne.w	8000b26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	4a9a      	ldr	r2, [pc, #616]	; (8000ae4 <HAL_GPIO_Init+0x2a0>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d05e      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 8000880:	4a98      	ldr	r2, [pc, #608]	; (8000ae4 <HAL_GPIO_Init+0x2a0>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d875      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 8000886:	4a98      	ldr	r2, [pc, #608]	; (8000ae8 <HAL_GPIO_Init+0x2a4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d058      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 800088c:	4a96      	ldr	r2, [pc, #600]	; (8000ae8 <HAL_GPIO_Init+0x2a4>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d86f      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 8000892:	4a96      	ldr	r2, [pc, #600]	; (8000aec <HAL_GPIO_Init+0x2a8>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d052      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 8000898:	4a94      	ldr	r2, [pc, #592]	; (8000aec <HAL_GPIO_Init+0x2a8>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d869      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 800089e:	4a94      	ldr	r2, [pc, #592]	; (8000af0 <HAL_GPIO_Init+0x2ac>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d04c      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 80008a4:	4a92      	ldr	r2, [pc, #584]	; (8000af0 <HAL_GPIO_Init+0x2ac>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d863      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 80008aa:	4a92      	ldr	r2, [pc, #584]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d046      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 80008b0:	4a90      	ldr	r2, [pc, #576]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d85d      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d82a      	bhi.n	8000910 <HAL_GPIO_Init+0xcc>
 80008ba:	2b12      	cmp	r3, #18
 80008bc:	d859      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <HAL_GPIO_Init+0x80>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	0800093f 	.word	0x0800093f
 80008c8:	08000919 	.word	0x08000919
 80008cc:	0800092b 	.word	0x0800092b
 80008d0:	0800096d 	.word	0x0800096d
 80008d4:	08000973 	.word	0x08000973
 80008d8:	08000973 	.word	0x08000973
 80008dc:	08000973 	.word	0x08000973
 80008e0:	08000973 	.word	0x08000973
 80008e4:	08000973 	.word	0x08000973
 80008e8:	08000973 	.word	0x08000973
 80008ec:	08000973 	.word	0x08000973
 80008f0:	08000973 	.word	0x08000973
 80008f4:	08000973 	.word	0x08000973
 80008f8:	08000973 	.word	0x08000973
 80008fc:	08000973 	.word	0x08000973
 8000900:	08000973 	.word	0x08000973
 8000904:	08000973 	.word	0x08000973
 8000908:	08000921 	.word	0x08000921
 800090c:	08000935 	.word	0x08000935
 8000910:	4a79      	ldr	r2, [pc, #484]	; (8000af8 <HAL_GPIO_Init+0x2b4>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d013      	beq.n	800093e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000916:	e02c      	b.n	8000972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	623b      	str	r3, [r7, #32]
          break;
 800091e:	e029      	b.n	8000974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	3304      	adds	r3, #4
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e024      	b.n	8000974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	3308      	adds	r3, #8
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e01f      	b.n	8000974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	330c      	adds	r3, #12
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e01a      	b.n	8000974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000946:	2304      	movs	r3, #4
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e013      	b.n	8000974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d105      	bne.n	8000960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000954:	2308      	movs	r3, #8
 8000956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	611a      	str	r2, [r3, #16]
          break;
 800095e:	e009      	b.n	8000974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000960:	2308      	movs	r3, #8
 8000962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	615a      	str	r2, [r3, #20]
          break;
 800096a:	e003      	b.n	8000974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
          break;
 8000970:	e000      	b.n	8000974 <HAL_GPIO_Init+0x130>
          break;
 8000972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2bff      	cmp	r3, #255	; 0xff
 8000978:	d801      	bhi.n	800097e <HAL_GPIO_Init+0x13a>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	e001      	b.n	8000982 <HAL_GPIO_Init+0x13e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3304      	adds	r3, #4
 8000982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2bff      	cmp	r3, #255	; 0xff
 8000988:	d802      	bhi.n	8000990 <HAL_GPIO_Init+0x14c>
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	e002      	b.n	8000996 <HAL_GPIO_Init+0x152>
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	3b08      	subs	r3, #8
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	210f      	movs	r1, #15
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	401a      	ands	r2, r3
 80009a8:	6a39      	ldr	r1, [r7, #32]
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	431a      	orrs	r2, r3
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 80b1 	beq.w	8000b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c4:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a4c      	ldr	r2, [pc, #304]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009dc:	4a48      	ldr	r2, [pc, #288]	; (8000b00 <HAL_GPIO_Init+0x2bc>)
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	3302      	adds	r3, #2
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	220f      	movs	r2, #15
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a40      	ldr	r2, [pc, #256]	; (8000b04 <HAL_GPIO_Init+0x2c0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d013      	beq.n	8000a30 <HAL_GPIO_Init+0x1ec>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a3f      	ldr	r2, [pc, #252]	; (8000b08 <HAL_GPIO_Init+0x2c4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d00d      	beq.n	8000a2c <HAL_GPIO_Init+0x1e8>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a3e      	ldr	r2, [pc, #248]	; (8000b0c <HAL_GPIO_Init+0x2c8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d007      	beq.n	8000a28 <HAL_GPIO_Init+0x1e4>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3d      	ldr	r2, [pc, #244]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d101      	bne.n	8000a24 <HAL_GPIO_Init+0x1e0>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e006      	b.n	8000a32 <HAL_GPIO_Init+0x1ee>
 8000a24:	2304      	movs	r3, #4
 8000a26:	e004      	b.n	8000a32 <HAL_GPIO_Init+0x1ee>
 8000a28:	2302      	movs	r3, #2
 8000a2a:	e002      	b.n	8000a32 <HAL_GPIO_Init+0x1ee>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e000      	b.n	8000a32 <HAL_GPIO_Init+0x1ee>
 8000a30:	2300      	movs	r3, #0
 8000a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a34:	f002 0203 	and.w	r2, r2, #3
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	4093      	lsls	r3, r2
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a42:	492f      	ldr	r1, [pc, #188]	; (8000b00 <HAL_GPIO_Init+0x2bc>)
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3302      	adds	r3, #2
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	492c      	ldr	r1, [pc, #176]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	4928      	ldr	r1, [pc, #160]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	4922      	ldr	r1, [pc, #136]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	604b      	str	r3, [r1, #4]
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	491e      	ldr	r1, [pc, #120]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	4918      	ldr	r1, [pc, #96]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	608b      	str	r3, [r1, #8]
 8000ab8:	e006      	b.n	8000ac8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4914      	ldr	r1, [pc, #80]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d021      	beq.n	8000b18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	490e      	ldr	r1, [pc, #56]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60cb      	str	r3, [r1, #12]
 8000ae0:	e021      	b.n	8000b26 <HAL_GPIO_Init+0x2e2>
 8000ae2:	bf00      	nop
 8000ae4:	10320000 	.word	0x10320000
 8000ae8:	10310000 	.word	0x10310000
 8000aec:	10220000 	.word	0x10220000
 8000af0:	10210000 	.word	0x10210000
 8000af4:	10120000 	.word	0x10120000
 8000af8:	10110000 	.word	0x10110000
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000
 8000b04:	40010800 	.word	0x40010800
 8000b08:	40010c00 	.word	0x40010c00
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	40011400 	.word	0x40011400
 8000b14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_GPIO_Init+0x304>)
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4909      	ldr	r1, [pc, #36]	; (8000b48 <HAL_GPIO_Init+0x304>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	3301      	adds	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	fa22 f303 	lsr.w	r3, r2, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f47f ae8e 	bne.w	8000858 <HAL_GPIO_Init+0x14>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	372c      	adds	r7, #44	; 0x2c
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	40010400 	.word	0x40010400

08000b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e272      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8087 	beq.w	8000c7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b6c:	4b92      	ldr	r3, [pc, #584]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d00c      	beq.n	8000b92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b78:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d112      	bne.n	8000baa <HAL_RCC_OscConfig+0x5e>
 8000b84:	4b8c      	ldr	r3, [pc, #560]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b90:	d10b      	bne.n	8000baa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b92:	4b89      	ldr	r3, [pc, #548]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d06c      	beq.n	8000c78 <HAL_RCC_OscConfig+0x12c>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d168      	bne.n	8000c78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e24c      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb2:	d106      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x76>
 8000bb4:	4b80      	ldr	r3, [pc, #512]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a7f      	ldr	r2, [pc, #508]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e02e      	b.n	8000c20 <HAL_RCC_OscConfig+0xd4>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10c      	bne.n	8000be4 <HAL_RCC_OscConfig+0x98>
 8000bca:	4b7b      	ldr	r3, [pc, #492]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a7a      	ldr	r2, [pc, #488]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b78      	ldr	r3, [pc, #480]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a77      	ldr	r2, [pc, #476]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e01d      	b.n	8000c20 <HAL_RCC_OscConfig+0xd4>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bec:	d10c      	bne.n	8000c08 <HAL_RCC_OscConfig+0xbc>
 8000bee:	4b72      	ldr	r3, [pc, #456]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a71      	ldr	r2, [pc, #452]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	4b6f      	ldr	r3, [pc, #444]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a6e      	ldr	r2, [pc, #440]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e00b      	b.n	8000c20 <HAL_RCC_OscConfig+0xd4>
 8000c08:	4b6b      	ldr	r3, [pc, #428]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a6a      	ldr	r2, [pc, #424]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b68      	ldr	r3, [pc, #416]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a67      	ldr	r2, [pc, #412]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d013      	beq.n	8000c50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c28:	f7ff fcfa 	bl	8000620 <HAL_GetTick>
 8000c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2e:	e008      	b.n	8000c42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c30:	f7ff fcf6 	bl	8000620 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b64      	cmp	r3, #100	; 0x64
 8000c3c:	d901      	bls.n	8000c42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e200      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c42:	4b5d      	ldr	r3, [pc, #372]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f0      	beq.n	8000c30 <HAL_RCC_OscConfig+0xe4>
 8000c4e:	e014      	b.n	8000c7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c50:	f7ff fce6 	bl	8000620 <HAL_GetTick>
 8000c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c58:	f7ff fce2 	bl	8000620 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b64      	cmp	r3, #100	; 0x64
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e1ec      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6a:	4b53      	ldr	r3, [pc, #332]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f0      	bne.n	8000c58 <HAL_RCC_OscConfig+0x10c>
 8000c76:	e000      	b.n	8000c7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d063      	beq.n	8000d4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c86:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00b      	beq.n	8000caa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c92:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d11c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x18c>
 8000c9e:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d116      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000caa:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x176>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d001      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e1c0      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4939      	ldr	r1, [pc, #228]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	e03a      	b.n	8000d4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce0:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <HAL_RCC_OscConfig+0x270>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fc9b 	bl	8000620 <HAL_GetTick>
 8000cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cee:	f7ff fc97 	bl	8000620 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e1a1      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f0      	beq.n	8000cee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4927      	ldr	r1, [pc, #156]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
 8000d20:	e015      	b.n	8000d4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <HAL_RCC_OscConfig+0x270>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fc7a 	bl	8000620 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d30:	f7ff fc76 	bl	8000620 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e180      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f0      	bne.n	8000d30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d03a      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d019      	beq.n	8000d96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_RCC_OscConfig+0x274>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d68:	f7ff fc5a 	bl	8000620 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d70:	f7ff fc56 	bl	8000620 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e160      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 fad8 	bl	8001344 <RCC_Delay>
 8000d94:	e01c      	b.n	8000dd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_RCC_OscConfig+0x274>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9c:	f7ff fc40 	bl	8000620 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da2:	e00f      	b.n	8000dc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc3c 	bl	8000620 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d908      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e146      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	42420000 	.word	0x42420000
 8000dc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc4:	4b92      	ldr	r3, [pc, #584]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1e9      	bne.n	8000da4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80a6 	beq.w	8000f2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de2:	4b8b      	ldr	r3, [pc, #556]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10d      	bne.n	8000e0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b88      	ldr	r3, [pc, #544]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a87      	ldr	r2, [pc, #540]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b85      	ldr	r3, [pc, #532]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e06:	2301      	movs	r3, #1
 8000e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0a:	4b82      	ldr	r3, [pc, #520]	; (8001014 <HAL_RCC_OscConfig+0x4c8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d118      	bne.n	8000e48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e16:	4b7f      	ldr	r3, [pc, #508]	; (8001014 <HAL_RCC_OscConfig+0x4c8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a7e      	ldr	r2, [pc, #504]	; (8001014 <HAL_RCC_OscConfig+0x4c8>)
 8000e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fbfd 	bl	8000620 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2a:	f7ff fbf9 	bl	8000620 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b64      	cmp	r3, #100	; 0x64
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e103      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3c:	4b75      	ldr	r3, [pc, #468]	; (8001014 <HAL_RCC_OscConfig+0x4c8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f0      	beq.n	8000e2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d106      	bne.n	8000e5e <HAL_RCC_OscConfig+0x312>
 8000e50:	4b6f      	ldr	r3, [pc, #444]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e52:	6a1b      	ldr	r3, [r3, #32]
 8000e54:	4a6e      	ldr	r2, [pc, #440]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6213      	str	r3, [r2, #32]
 8000e5c:	e02d      	b.n	8000eba <HAL_RCC_OscConfig+0x36e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x334>
 8000e66:	4b6a      	ldr	r3, [pc, #424]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4a69      	ldr	r2, [pc, #420]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	6213      	str	r3, [r2, #32]
 8000e72:	4b67      	ldr	r3, [pc, #412]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	6a1b      	ldr	r3, [r3, #32]
 8000e76:	4a66      	ldr	r2, [pc, #408]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	f023 0304 	bic.w	r3, r3, #4
 8000e7c:	6213      	str	r3, [r2, #32]
 8000e7e:	e01c      	b.n	8000eba <HAL_RCC_OscConfig+0x36e>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d10c      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x356>
 8000e88:	4b61      	ldr	r3, [pc, #388]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a60      	ldr	r2, [pc, #384]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6213      	str	r3, [r2, #32]
 8000e94:	4b5e      	ldr	r3, [pc, #376]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a5d      	ldr	r2, [pc, #372]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6213      	str	r3, [r2, #32]
 8000ea0:	e00b      	b.n	8000eba <HAL_RCC_OscConfig+0x36e>
 8000ea2:	4b5b      	ldr	r3, [pc, #364]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4a5a      	ldr	r2, [pc, #360]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6213      	str	r3, [r2, #32]
 8000eae:	4b58      	ldr	r3, [pc, #352]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a57      	ldr	r2, [pc, #348]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0304 	bic.w	r3, r3, #4
 8000eb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d015      	beq.n	8000eee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec2:	f7ff fbad 	bl	8000620 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec8:	e00a      	b.n	8000ee0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eca:	f7ff fba9 	bl	8000620 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e0b1      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee0:	4b4b      	ldr	r3, [pc, #300]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0ee      	beq.n	8000eca <HAL_RCC_OscConfig+0x37e>
 8000eec:	e014      	b.n	8000f18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff fb97 	bl	8000620 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fb93 	bl	8000620 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e09b      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f0c:	4b40      	ldr	r3, [pc, #256]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1ee      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d105      	bne.n	8000f2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a3b      	ldr	r2, [pc, #236]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8087 	beq.w	8001042 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d061      	beq.n	8001004 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69db      	ldr	r3, [r3, #28]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d146      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f48:	4b33      	ldr	r3, [pc, #204]	; (8001018 <HAL_RCC_OscConfig+0x4cc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fb67 	bl	8000620 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff fb63 	bl	8000620 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e06d      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f0      	bne.n	8000f56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7c:	d108      	bne.n	8000f90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	4921      	ldr	r1, [pc, #132]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a19      	ldr	r1, [r3, #32]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	491b      	ldr	r1, [pc, #108]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_RCC_OscConfig+0x4cc>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fb37 	bl	8000620 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fb33 	bl	8000620 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e03d      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x46a>
 8000fd4:	e035      	b.n	8001042 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_RCC_OscConfig+0x4cc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fb20 	bl	8000620 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fb1c 	bl	8000620 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e026      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x498>
 8001002:	e01e      	b.n	8001042 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d107      	bne.n	800101c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e019      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
 8001010:	40021000 	.word	0x40021000
 8001014:	40007000 	.word	0x40007000
 8001018:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_RCC_OscConfig+0x500>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	429a      	cmp	r2, r3
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103a:	429a      	cmp	r2, r3
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0d0      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001064:	4b6a      	ldr	r3, [pc, #424]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d910      	bls.n	8001094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	4b67      	ldr	r3, [pc, #412]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 0207 	bic.w	r2, r3, #7
 800107a:	4965      	ldr	r1, [pc, #404]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d001      	beq.n	8001094 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0b8      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ac:	4b59      	ldr	r3, [pc, #356]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c4:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d0:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	494d      	ldr	r1, [pc, #308]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d040      	beq.n	8001170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d115      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e07f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e073      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e06b      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f023 0203 	bic.w	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4936      	ldr	r1, [pc, #216]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001140:	f7ff fa6e 	bl	8000620 <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	e00a      	b.n	800115e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001148:	f7ff fa6a 	bl	8000620 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f241 3288 	movw	r2, #5000	; 0x1388
 8001156:	4293      	cmp	r3, r2
 8001158:	d901      	bls.n	800115e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e053      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 020c 	and.w	r2, r3, #12
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	429a      	cmp	r2, r3
 800116e:	d1eb      	bne.n	8001148 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d210      	bcs.n	80011a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 0207 	bic.w	r2, r3, #7
 8001186:	4922      	ldr	r1, [pc, #136]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e032      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4916      	ldr	r1, [pc, #88]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	490e      	ldr	r1, [pc, #56]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011de:	f000 f821 	bl	8001224 <HAL_RCC_GetSysClockFreq>
 80011e2:	4602      	mov	r2, r0
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	490a      	ldr	r1, [pc, #40]	; (8001218 <HAL_RCC_ClockConfig+0x1c8>)
 80011f0:	5ccb      	ldrb	r3, [r1, r3]
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_RCC_ClockConfig+0x1cc>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_RCC_ClockConfig+0x1d0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9cc 	bl	800059c <HAL_InitTick>

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000
 8001214:	40021000 	.word	0x40021000
 8001218:	08002178 	.word	0x08002178
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001224:	b490      	push	{r4, r7}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800122c:	1d3c      	adds	r4, r7, #4
 800122e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001234:	f240 2301 	movw	r3, #513	; 0x201
 8001238:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d002      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0x40>
 800125e:	2b08      	cmp	r3, #8
 8001260:	d003      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x46>
 8001262:	e02b      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001266:	623b      	str	r3, [r7, #32]
      break;
 8001268:	e02b      	b.n	80012c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3328      	adds	r3, #40	; 0x28
 8001274:	443b      	add	r3, r7
 8001276:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800127a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d012      	beq.n	80012ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	0c5b      	lsrs	r3, r3, #17
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	3328      	adds	r3, #40	; 0x28
 8001292:	443b      	add	r3, r7
 8001294:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001298:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800129e:	fb03 f202 	mul.w	r2, r3, r2
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
 80012aa:	e004      	b.n	80012b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	623b      	str	r3, [r7, #32]
      break;
 80012ba:	e002      	b.n	80012c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012be:	623b      	str	r3, [r7, #32]
      break;
 80012c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012c2:	6a3b      	ldr	r3, [r7, #32]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc90      	pop	{r4, r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	08002168 	.word	0x08002168
 80012d4:	40021000 	.word	0x40021000
 80012d8:	007a1200 	.word	0x007a1200
 80012dc:	003d0900 	.word	0x003d0900

080012e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e4:	4b02      	ldr	r3, [pc, #8]	; (80012f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000000 	.word	0x20000000

080012f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012f8:	f7ff fff2 	bl	80012e0 <HAL_RCC_GetHCLKFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4903      	ldr	r1, [pc, #12]	; (8001318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	08002188 	.word	0x08002188

0800131c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001320:	f7ff ffde 	bl	80012e0 <HAL_RCC_GetHCLKFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	0adb      	lsrs	r3, r3, #11
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4903      	ldr	r1, [pc, #12]	; (8001340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	08002188 	.word	0x08002188

08001344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <RCC_Delay+0x34>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <RCC_Delay+0x38>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0a5b      	lsrs	r3, r3, #9
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001360:	bf00      	nop
  }
  while (Delay --);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1e5a      	subs	r2, r3, #1
 8001366:	60fa      	str	r2, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f9      	bne.n	8001360 <RCC_Delay+0x1c>
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000000 	.word	0x20000000
 800137c:	10624dd3 	.word	0x10624dd3

08001380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e03f      	b.n	8001412 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff f870 	bl	800048c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2224      	movs	r2, #36	; 0x24
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f905 	bl	80015d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2220      	movs	r2, #32
 8001404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2220      	movs	r2, #32
 800140c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b08a      	sub	sp, #40	; 0x28
 800141e:	af02      	add	r7, sp, #8
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4613      	mov	r3, r2
 8001428:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b20      	cmp	r3, #32
 8001438:	d17c      	bne.n	8001534 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <HAL_UART_Transmit+0x2c>
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e075      	b.n	8001536 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_UART_Transmit+0x3e>
 8001454:	2302      	movs	r3, #2
 8001456:	e06e      	b.n	8001536 <HAL_UART_Transmit+0x11c>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2221      	movs	r2, #33	; 0x21
 800146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800146e:	f7ff f8d7 	bl	8000620 <HAL_GetTick>
 8001472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001488:	d108      	bne.n	800149c <HAL_UART_Transmit+0x82>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d104      	bne.n	800149c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	e003      	b.n	80014a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80014ac:	e02a      	b.n	8001504 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2200      	movs	r2, #0
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 f840 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e036      	b.n	8001536 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10b      	bne.n	80014e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	3302      	adds	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	e007      	b.n	80014f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001508:	b29b      	uxth	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1cf      	bne.n	80014ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f810 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e006      	b.n	8001536 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2220      	movs	r2, #32
 800152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	e000      	b.n	8001536 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001534:	2302      	movs	r3, #2
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800154e:	e02c      	b.n	80015aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001556:	d028      	beq.n	80015aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <UART_WaitOnFlagUntilTimeout+0x30>
 800155e:	f7ff f85f 	bl	8000620 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	429a      	cmp	r2, r3
 800156c:	d21d      	bcs.n	80015aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800157c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2220      	movs	r2, #32
 8001592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e00f      	b.n	80015ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4013      	ands	r3, r2
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	bf0c      	ite	eq
 80015ba:	2301      	moveq	r3, #1
 80015bc:	2300      	movne	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d0c3      	beq.n	8001550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800160e:	f023 030c 	bic.w	r3, r3, #12
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	430b      	orrs	r3, r1
 800161a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699a      	ldr	r2, [r3, #24]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <UART_SetConfig+0x114>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d103      	bne.n	8001644 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800163c:	f7ff fe6e 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	e002      	b.n	800164a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001644:	f7ff fe56 	bl	80012f4 <HAL_RCC_GetPCLK1Freq>
 8001648:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	009a      	lsls	r2, r3, #2
 8001654:	441a      	add	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001660:	4a22      	ldr	r2, [pc, #136]	; (80016ec <UART_SetConfig+0x118>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	0119      	lsls	r1, r3, #4
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	009a      	lsls	r2, r3, #2
 8001674:	441a      	add	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <UART_SetConfig+0x118>)
 8001682:	fba3 0302 	umull	r0, r3, r3, r2
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2064      	movs	r0, #100	; 0x64
 800168a:	fb00 f303 	mul.w	r3, r0, r3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	3332      	adds	r3, #50	; 0x32
 8001694:	4a15      	ldr	r2, [pc, #84]	; (80016ec <UART_SetConfig+0x118>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a0:	4419      	add	r1, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	009a      	lsls	r2, r3, #2
 80016ac:	441a      	add	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <UART_SetConfig+0x118>)
 80016ba:	fba3 0302 	umull	r0, r3, r3, r2
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2064      	movs	r0, #100	; 0x64
 80016c2:	fb00 f303 	mul.w	r3, r0, r3
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	3332      	adds	r3, #50	; 0x32
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <UART_SetConfig+0x118>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	f003 020f 	and.w	r2, r3, #15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	440a      	add	r2, r1
 80016de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40013800 	.word	0x40013800
 80016ec:	51eb851f 	.word	0x51eb851f

080016f0 <__errno>:
 80016f0:	4b01      	ldr	r3, [pc, #4]	; (80016f8 <__errno+0x8>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000000c 	.word	0x2000000c

080016fc <__libc_init_array>:
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	2600      	movs	r6, #0
 8001700:	4d0c      	ldr	r5, [pc, #48]	; (8001734 <__libc_init_array+0x38>)
 8001702:	4c0d      	ldr	r4, [pc, #52]	; (8001738 <__libc_init_array+0x3c>)
 8001704:	1b64      	subs	r4, r4, r5
 8001706:	10a4      	asrs	r4, r4, #2
 8001708:	42a6      	cmp	r6, r4
 800170a:	d109      	bne.n	8001720 <__libc_init_array+0x24>
 800170c:	f000 fd18 	bl	8002140 <_init>
 8001710:	2600      	movs	r6, #0
 8001712:	4d0a      	ldr	r5, [pc, #40]	; (800173c <__libc_init_array+0x40>)
 8001714:	4c0a      	ldr	r4, [pc, #40]	; (8001740 <__libc_init_array+0x44>)
 8001716:	1b64      	subs	r4, r4, r5
 8001718:	10a4      	asrs	r4, r4, #2
 800171a:	42a6      	cmp	r6, r4
 800171c:	d105      	bne.n	800172a <__libc_init_array+0x2e>
 800171e:	bd70      	pop	{r4, r5, r6, pc}
 8001720:	f855 3b04 	ldr.w	r3, [r5], #4
 8001724:	4798      	blx	r3
 8001726:	3601      	adds	r6, #1
 8001728:	e7ee      	b.n	8001708 <__libc_init_array+0xc>
 800172a:	f855 3b04 	ldr.w	r3, [r5], #4
 800172e:	4798      	blx	r3
 8001730:	3601      	adds	r6, #1
 8001732:	e7f2      	b.n	800171a <__libc_init_array+0x1e>
 8001734:	080021f4 	.word	0x080021f4
 8001738:	080021f4 	.word	0x080021f4
 800173c:	080021f4 	.word	0x080021f4
 8001740:	080021f8 	.word	0x080021f8

08001744 <memset>:
 8001744:	4603      	mov	r3, r0
 8001746:	4402      	add	r2, r0
 8001748:	4293      	cmp	r3, r2
 800174a:	d100      	bne.n	800174e <memset+0xa>
 800174c:	4770      	bx	lr
 800174e:	f803 1b01 	strb.w	r1, [r3], #1
 8001752:	e7f9      	b.n	8001748 <memset+0x4>

08001754 <_puts_r>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	460e      	mov	r6, r1
 8001758:	4605      	mov	r5, r0
 800175a:	b118      	cbz	r0, 8001764 <_puts_r+0x10>
 800175c:	6983      	ldr	r3, [r0, #24]
 800175e:	b90b      	cbnz	r3, 8001764 <_puts_r+0x10>
 8001760:	f000 fa44 	bl	8001bec <__sinit>
 8001764:	69ab      	ldr	r3, [r5, #24]
 8001766:	68ac      	ldr	r4, [r5, #8]
 8001768:	b913      	cbnz	r3, 8001770 <_puts_r+0x1c>
 800176a:	4628      	mov	r0, r5
 800176c:	f000 fa3e 	bl	8001bec <__sinit>
 8001770:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <_puts_r+0xd0>)
 8001772:	429c      	cmp	r4, r3
 8001774:	d120      	bne.n	80017b8 <_puts_r+0x64>
 8001776:	686c      	ldr	r4, [r5, #4]
 8001778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800177a:	07db      	lsls	r3, r3, #31
 800177c:	d405      	bmi.n	800178a <_puts_r+0x36>
 800177e:	89a3      	ldrh	r3, [r4, #12]
 8001780:	0598      	lsls	r0, r3, #22
 8001782:	d402      	bmi.n	800178a <_puts_r+0x36>
 8001784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001786:	f000 facf 	bl	8001d28 <__retarget_lock_acquire_recursive>
 800178a:	89a3      	ldrh	r3, [r4, #12]
 800178c:	0719      	lsls	r1, r3, #28
 800178e:	d51d      	bpl.n	80017cc <_puts_r+0x78>
 8001790:	6923      	ldr	r3, [r4, #16]
 8001792:	b1db      	cbz	r3, 80017cc <_puts_r+0x78>
 8001794:	3e01      	subs	r6, #1
 8001796:	68a3      	ldr	r3, [r4, #8]
 8001798:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800179c:	3b01      	subs	r3, #1
 800179e:	60a3      	str	r3, [r4, #8]
 80017a0:	bb39      	cbnz	r1, 80017f2 <_puts_r+0x9e>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da38      	bge.n	8001818 <_puts_r+0xc4>
 80017a6:	4622      	mov	r2, r4
 80017a8:	210a      	movs	r1, #10
 80017aa:	4628      	mov	r0, r5
 80017ac:	f000 f848 	bl	8001840 <__swbuf_r>
 80017b0:	3001      	adds	r0, #1
 80017b2:	d011      	beq.n	80017d8 <_puts_r+0x84>
 80017b4:	250a      	movs	r5, #10
 80017b6:	e011      	b.n	80017dc <_puts_r+0x88>
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <_puts_r+0xd4>)
 80017ba:	429c      	cmp	r4, r3
 80017bc:	d101      	bne.n	80017c2 <_puts_r+0x6e>
 80017be:	68ac      	ldr	r4, [r5, #8]
 80017c0:	e7da      	b.n	8001778 <_puts_r+0x24>
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <_puts_r+0xd8>)
 80017c4:	429c      	cmp	r4, r3
 80017c6:	bf08      	it	eq
 80017c8:	68ec      	ldreq	r4, [r5, #12]
 80017ca:	e7d5      	b.n	8001778 <_puts_r+0x24>
 80017cc:	4621      	mov	r1, r4
 80017ce:	4628      	mov	r0, r5
 80017d0:	f000 f888 	bl	80018e4 <__swsetup_r>
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d0dd      	beq.n	8001794 <_puts_r+0x40>
 80017d8:	f04f 35ff 	mov.w	r5, #4294967295
 80017dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017de:	07da      	lsls	r2, r3, #31
 80017e0:	d405      	bmi.n	80017ee <_puts_r+0x9a>
 80017e2:	89a3      	ldrh	r3, [r4, #12]
 80017e4:	059b      	lsls	r3, r3, #22
 80017e6:	d402      	bmi.n	80017ee <_puts_r+0x9a>
 80017e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ea:	f000 fa9e 	bl	8001d2a <__retarget_lock_release_recursive>
 80017ee:	4628      	mov	r0, r5
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da04      	bge.n	8001800 <_puts_r+0xac>
 80017f6:	69a2      	ldr	r2, [r4, #24]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dc06      	bgt.n	800180a <_puts_r+0xb6>
 80017fc:	290a      	cmp	r1, #10
 80017fe:	d004      	beq.n	800180a <_puts_r+0xb6>
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	6022      	str	r2, [r4, #0]
 8001806:	7019      	strb	r1, [r3, #0]
 8001808:	e7c5      	b.n	8001796 <_puts_r+0x42>
 800180a:	4622      	mov	r2, r4
 800180c:	4628      	mov	r0, r5
 800180e:	f000 f817 	bl	8001840 <__swbuf_r>
 8001812:	3001      	adds	r0, #1
 8001814:	d1bf      	bne.n	8001796 <_puts_r+0x42>
 8001816:	e7df      	b.n	80017d8 <_puts_r+0x84>
 8001818:	250a      	movs	r5, #10
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	6022      	str	r2, [r4, #0]
 8001820:	701d      	strb	r5, [r3, #0]
 8001822:	e7db      	b.n	80017dc <_puts_r+0x88>
 8001824:	080021b4 	.word	0x080021b4
 8001828:	080021d4 	.word	0x080021d4
 800182c:	08002194 	.word	0x08002194

08001830 <puts>:
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <puts+0xc>)
 8001832:	4601      	mov	r1, r0
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	f7ff bf8d 	b.w	8001754 <_puts_r>
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c

08001840 <__swbuf_r>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	460e      	mov	r6, r1
 8001844:	4614      	mov	r4, r2
 8001846:	4605      	mov	r5, r0
 8001848:	b118      	cbz	r0, 8001852 <__swbuf_r+0x12>
 800184a:	6983      	ldr	r3, [r0, #24]
 800184c:	b90b      	cbnz	r3, 8001852 <__swbuf_r+0x12>
 800184e:	f000 f9cd 	bl	8001bec <__sinit>
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <__swbuf_r+0x98>)
 8001854:	429c      	cmp	r4, r3
 8001856:	d12b      	bne.n	80018b0 <__swbuf_r+0x70>
 8001858:	686c      	ldr	r4, [r5, #4]
 800185a:	69a3      	ldr	r3, [r4, #24]
 800185c:	60a3      	str	r3, [r4, #8]
 800185e:	89a3      	ldrh	r3, [r4, #12]
 8001860:	071a      	lsls	r2, r3, #28
 8001862:	d52f      	bpl.n	80018c4 <__swbuf_r+0x84>
 8001864:	6923      	ldr	r3, [r4, #16]
 8001866:	b36b      	cbz	r3, 80018c4 <__swbuf_r+0x84>
 8001868:	6923      	ldr	r3, [r4, #16]
 800186a:	6820      	ldr	r0, [r4, #0]
 800186c:	b2f6      	uxtb	r6, r6
 800186e:	1ac0      	subs	r0, r0, r3
 8001870:	6963      	ldr	r3, [r4, #20]
 8001872:	4637      	mov	r7, r6
 8001874:	4283      	cmp	r3, r0
 8001876:	dc04      	bgt.n	8001882 <__swbuf_r+0x42>
 8001878:	4621      	mov	r1, r4
 800187a:	4628      	mov	r0, r5
 800187c:	f000 f922 	bl	8001ac4 <_fflush_r>
 8001880:	bb30      	cbnz	r0, 80018d0 <__swbuf_r+0x90>
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	3001      	adds	r0, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	60a3      	str	r3, [r4, #8]
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	6022      	str	r2, [r4, #0]
 8001890:	701e      	strb	r6, [r3, #0]
 8001892:	6963      	ldr	r3, [r4, #20]
 8001894:	4283      	cmp	r3, r0
 8001896:	d004      	beq.n	80018a2 <__swbuf_r+0x62>
 8001898:	89a3      	ldrh	r3, [r4, #12]
 800189a:	07db      	lsls	r3, r3, #31
 800189c:	d506      	bpl.n	80018ac <__swbuf_r+0x6c>
 800189e:	2e0a      	cmp	r6, #10
 80018a0:	d104      	bne.n	80018ac <__swbuf_r+0x6c>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4628      	mov	r0, r5
 80018a6:	f000 f90d 	bl	8001ac4 <_fflush_r>
 80018aa:	b988      	cbnz	r0, 80018d0 <__swbuf_r+0x90>
 80018ac:	4638      	mov	r0, r7
 80018ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <__swbuf_r+0x9c>)
 80018b2:	429c      	cmp	r4, r3
 80018b4:	d101      	bne.n	80018ba <__swbuf_r+0x7a>
 80018b6:	68ac      	ldr	r4, [r5, #8]
 80018b8:	e7cf      	b.n	800185a <__swbuf_r+0x1a>
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <__swbuf_r+0xa0>)
 80018bc:	429c      	cmp	r4, r3
 80018be:	bf08      	it	eq
 80018c0:	68ec      	ldreq	r4, [r5, #12]
 80018c2:	e7ca      	b.n	800185a <__swbuf_r+0x1a>
 80018c4:	4621      	mov	r1, r4
 80018c6:	4628      	mov	r0, r5
 80018c8:	f000 f80c 	bl	80018e4 <__swsetup_r>
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d0cb      	beq.n	8001868 <__swbuf_r+0x28>
 80018d0:	f04f 37ff 	mov.w	r7, #4294967295
 80018d4:	e7ea      	b.n	80018ac <__swbuf_r+0x6c>
 80018d6:	bf00      	nop
 80018d8:	080021b4 	.word	0x080021b4
 80018dc:	080021d4 	.word	0x080021d4
 80018e0:	08002194 	.word	0x08002194

080018e4 <__swsetup_r>:
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <__swsetup_r+0xcc>)
 80018e6:	b570      	push	{r4, r5, r6, lr}
 80018e8:	681d      	ldr	r5, [r3, #0]
 80018ea:	4606      	mov	r6, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	b125      	cbz	r5, 80018fa <__swsetup_r+0x16>
 80018f0:	69ab      	ldr	r3, [r5, #24]
 80018f2:	b913      	cbnz	r3, 80018fa <__swsetup_r+0x16>
 80018f4:	4628      	mov	r0, r5
 80018f6:	f000 f979 	bl	8001bec <__sinit>
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <__swsetup_r+0xd0>)
 80018fc:	429c      	cmp	r4, r3
 80018fe:	d10f      	bne.n	8001920 <__swsetup_r+0x3c>
 8001900:	686c      	ldr	r4, [r5, #4]
 8001902:	89a3      	ldrh	r3, [r4, #12]
 8001904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001908:	0719      	lsls	r1, r3, #28
 800190a:	d42c      	bmi.n	8001966 <__swsetup_r+0x82>
 800190c:	06dd      	lsls	r5, r3, #27
 800190e:	d411      	bmi.n	8001934 <__swsetup_r+0x50>
 8001910:	2309      	movs	r3, #9
 8001912:	6033      	str	r3, [r6, #0]
 8001914:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	81a3      	strh	r3, [r4, #12]
 800191e:	e03e      	b.n	800199e <__swsetup_r+0xba>
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <__swsetup_r+0xd4>)
 8001922:	429c      	cmp	r4, r3
 8001924:	d101      	bne.n	800192a <__swsetup_r+0x46>
 8001926:	68ac      	ldr	r4, [r5, #8]
 8001928:	e7eb      	b.n	8001902 <__swsetup_r+0x1e>
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <__swsetup_r+0xd8>)
 800192c:	429c      	cmp	r4, r3
 800192e:	bf08      	it	eq
 8001930:	68ec      	ldreq	r4, [r5, #12]
 8001932:	e7e6      	b.n	8001902 <__swsetup_r+0x1e>
 8001934:	0758      	lsls	r0, r3, #29
 8001936:	d512      	bpl.n	800195e <__swsetup_r+0x7a>
 8001938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800193a:	b141      	cbz	r1, 800194e <__swsetup_r+0x6a>
 800193c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001940:	4299      	cmp	r1, r3
 8001942:	d002      	beq.n	800194a <__swsetup_r+0x66>
 8001944:	4630      	mov	r0, r6
 8001946:	f000 fa57 	bl	8001df8 <_free_r>
 800194a:	2300      	movs	r3, #0
 800194c:	6363      	str	r3, [r4, #52]	; 0x34
 800194e:	89a3      	ldrh	r3, [r4, #12]
 8001950:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001954:	81a3      	strh	r3, [r4, #12]
 8001956:	2300      	movs	r3, #0
 8001958:	6063      	str	r3, [r4, #4]
 800195a:	6923      	ldr	r3, [r4, #16]
 800195c:	6023      	str	r3, [r4, #0]
 800195e:	89a3      	ldrh	r3, [r4, #12]
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	81a3      	strh	r3, [r4, #12]
 8001966:	6923      	ldr	r3, [r4, #16]
 8001968:	b94b      	cbnz	r3, 800197e <__swsetup_r+0x9a>
 800196a:	89a3      	ldrh	r3, [r4, #12]
 800196c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001974:	d003      	beq.n	800197e <__swsetup_r+0x9a>
 8001976:	4621      	mov	r1, r4
 8001978:	4630      	mov	r0, r6
 800197a:	f000 f9fd 	bl	8001d78 <__smakebuf_r>
 800197e:	89a0      	ldrh	r0, [r4, #12]
 8001980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001984:	f010 0301 	ands.w	r3, r0, #1
 8001988:	d00a      	beq.n	80019a0 <__swsetup_r+0xbc>
 800198a:	2300      	movs	r3, #0
 800198c:	60a3      	str	r3, [r4, #8]
 800198e:	6963      	ldr	r3, [r4, #20]
 8001990:	425b      	negs	r3, r3
 8001992:	61a3      	str	r3, [r4, #24]
 8001994:	6923      	ldr	r3, [r4, #16]
 8001996:	b943      	cbnz	r3, 80019aa <__swsetup_r+0xc6>
 8001998:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800199c:	d1ba      	bne.n	8001914 <__swsetup_r+0x30>
 800199e:	bd70      	pop	{r4, r5, r6, pc}
 80019a0:	0781      	lsls	r1, r0, #30
 80019a2:	bf58      	it	pl
 80019a4:	6963      	ldrpl	r3, [r4, #20]
 80019a6:	60a3      	str	r3, [r4, #8]
 80019a8:	e7f4      	b.n	8001994 <__swsetup_r+0xb0>
 80019aa:	2000      	movs	r0, #0
 80019ac:	e7f7      	b.n	800199e <__swsetup_r+0xba>
 80019ae:	bf00      	nop
 80019b0:	2000000c 	.word	0x2000000c
 80019b4:	080021b4 	.word	0x080021b4
 80019b8:	080021d4 	.word	0x080021d4
 80019bc:	08002194 	.word	0x08002194

080019c0 <__sflush_r>:
 80019c0:	898a      	ldrh	r2, [r1, #12]
 80019c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c4:	4605      	mov	r5, r0
 80019c6:	0710      	lsls	r0, r2, #28
 80019c8:	460c      	mov	r4, r1
 80019ca:	d457      	bmi.n	8001a7c <__sflush_r+0xbc>
 80019cc:	684b      	ldr	r3, [r1, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dc04      	bgt.n	80019dc <__sflush_r+0x1c>
 80019d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dc01      	bgt.n	80019dc <__sflush_r+0x1c>
 80019d8:	2000      	movs	r0, #0
 80019da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019de:	2e00      	cmp	r6, #0
 80019e0:	d0fa      	beq.n	80019d8 <__sflush_r+0x18>
 80019e2:	2300      	movs	r3, #0
 80019e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019e8:	682f      	ldr	r7, [r5, #0]
 80019ea:	602b      	str	r3, [r5, #0]
 80019ec:	d032      	beq.n	8001a54 <__sflush_r+0x94>
 80019ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019f0:	89a3      	ldrh	r3, [r4, #12]
 80019f2:	075a      	lsls	r2, r3, #29
 80019f4:	d505      	bpl.n	8001a02 <__sflush_r+0x42>
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	1ac0      	subs	r0, r0, r3
 80019fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019fc:	b10b      	cbz	r3, 8001a02 <__sflush_r+0x42>
 80019fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a00:	1ac0      	subs	r0, r0, r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	4602      	mov	r2, r0
 8001a06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a08:	4628      	mov	r0, r5
 8001a0a:	6a21      	ldr	r1, [r4, #32]
 8001a0c:	47b0      	blx	r6
 8001a0e:	1c43      	adds	r3, r0, #1
 8001a10:	89a3      	ldrh	r3, [r4, #12]
 8001a12:	d106      	bne.n	8001a22 <__sflush_r+0x62>
 8001a14:	6829      	ldr	r1, [r5, #0]
 8001a16:	291d      	cmp	r1, #29
 8001a18:	d82c      	bhi.n	8001a74 <__sflush_r+0xb4>
 8001a1a:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <__sflush_r+0x100>)
 8001a1c:	40ca      	lsrs	r2, r1
 8001a1e:	07d6      	lsls	r6, r2, #31
 8001a20:	d528      	bpl.n	8001a74 <__sflush_r+0xb4>
 8001a22:	2200      	movs	r2, #0
 8001a24:	6062      	str	r2, [r4, #4]
 8001a26:	6922      	ldr	r2, [r4, #16]
 8001a28:	04d9      	lsls	r1, r3, #19
 8001a2a:	6022      	str	r2, [r4, #0]
 8001a2c:	d504      	bpl.n	8001a38 <__sflush_r+0x78>
 8001a2e:	1c42      	adds	r2, r0, #1
 8001a30:	d101      	bne.n	8001a36 <__sflush_r+0x76>
 8001a32:	682b      	ldr	r3, [r5, #0]
 8001a34:	b903      	cbnz	r3, 8001a38 <__sflush_r+0x78>
 8001a36:	6560      	str	r0, [r4, #84]	; 0x54
 8001a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a3a:	602f      	str	r7, [r5, #0]
 8001a3c:	2900      	cmp	r1, #0
 8001a3e:	d0cb      	beq.n	80019d8 <__sflush_r+0x18>
 8001a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a44:	4299      	cmp	r1, r3
 8001a46:	d002      	beq.n	8001a4e <__sflush_r+0x8e>
 8001a48:	4628      	mov	r0, r5
 8001a4a:	f000 f9d5 	bl	8001df8 <_free_r>
 8001a4e:	2000      	movs	r0, #0
 8001a50:	6360      	str	r0, [r4, #52]	; 0x34
 8001a52:	e7c2      	b.n	80019da <__sflush_r+0x1a>
 8001a54:	6a21      	ldr	r1, [r4, #32]
 8001a56:	2301      	movs	r3, #1
 8001a58:	4628      	mov	r0, r5
 8001a5a:	47b0      	blx	r6
 8001a5c:	1c41      	adds	r1, r0, #1
 8001a5e:	d1c7      	bne.n	80019f0 <__sflush_r+0x30>
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0c4      	beq.n	80019f0 <__sflush_r+0x30>
 8001a66:	2b1d      	cmp	r3, #29
 8001a68:	d001      	beq.n	8001a6e <__sflush_r+0xae>
 8001a6a:	2b16      	cmp	r3, #22
 8001a6c:	d101      	bne.n	8001a72 <__sflush_r+0xb2>
 8001a6e:	602f      	str	r7, [r5, #0]
 8001a70:	e7b2      	b.n	80019d8 <__sflush_r+0x18>
 8001a72:	89a3      	ldrh	r3, [r4, #12]
 8001a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a78:	81a3      	strh	r3, [r4, #12]
 8001a7a:	e7ae      	b.n	80019da <__sflush_r+0x1a>
 8001a7c:	690f      	ldr	r7, [r1, #16]
 8001a7e:	2f00      	cmp	r7, #0
 8001a80:	d0aa      	beq.n	80019d8 <__sflush_r+0x18>
 8001a82:	0793      	lsls	r3, r2, #30
 8001a84:	bf18      	it	ne
 8001a86:	2300      	movne	r3, #0
 8001a88:	680e      	ldr	r6, [r1, #0]
 8001a8a:	bf08      	it	eq
 8001a8c:	694b      	ldreq	r3, [r1, #20]
 8001a8e:	1bf6      	subs	r6, r6, r7
 8001a90:	600f      	str	r7, [r1, #0]
 8001a92:	608b      	str	r3, [r1, #8]
 8001a94:	2e00      	cmp	r6, #0
 8001a96:	dd9f      	ble.n	80019d8 <__sflush_r+0x18>
 8001a98:	4633      	mov	r3, r6
 8001a9a:	463a      	mov	r2, r7
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	6a21      	ldr	r1, [r4, #32]
 8001aa0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001aa4:	47e0      	blx	ip
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	dc06      	bgt.n	8001ab8 <__sflush_r+0xf8>
 8001aaa:	89a3      	ldrh	r3, [r4, #12]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab4:	81a3      	strh	r3, [r4, #12]
 8001ab6:	e790      	b.n	80019da <__sflush_r+0x1a>
 8001ab8:	4407      	add	r7, r0
 8001aba:	1a36      	subs	r6, r6, r0
 8001abc:	e7ea      	b.n	8001a94 <__sflush_r+0xd4>
 8001abe:	bf00      	nop
 8001ac0:	20400001 	.word	0x20400001

08001ac4 <_fflush_r>:
 8001ac4:	b538      	push	{r3, r4, r5, lr}
 8001ac6:	690b      	ldr	r3, [r1, #16]
 8001ac8:	4605      	mov	r5, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	b913      	cbnz	r3, 8001ad4 <_fflush_r+0x10>
 8001ace:	2500      	movs	r5, #0
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
 8001ad4:	b118      	cbz	r0, 8001ade <_fflush_r+0x1a>
 8001ad6:	6983      	ldr	r3, [r0, #24]
 8001ad8:	b90b      	cbnz	r3, 8001ade <_fflush_r+0x1a>
 8001ada:	f000 f887 	bl	8001bec <__sinit>
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <_fflush_r+0x6c>)
 8001ae0:	429c      	cmp	r4, r3
 8001ae2:	d11b      	bne.n	8001b1c <_fflush_r+0x58>
 8001ae4:	686c      	ldr	r4, [r5, #4]
 8001ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0ef      	beq.n	8001ace <_fflush_r+0xa>
 8001aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001af0:	07d0      	lsls	r0, r2, #31
 8001af2:	d404      	bmi.n	8001afe <_fflush_r+0x3a>
 8001af4:	0599      	lsls	r1, r3, #22
 8001af6:	d402      	bmi.n	8001afe <_fflush_r+0x3a>
 8001af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001afa:	f000 f915 	bl	8001d28 <__retarget_lock_acquire_recursive>
 8001afe:	4628      	mov	r0, r5
 8001b00:	4621      	mov	r1, r4
 8001b02:	f7ff ff5d 	bl	80019c0 <__sflush_r>
 8001b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b08:	4605      	mov	r5, r0
 8001b0a:	07da      	lsls	r2, r3, #31
 8001b0c:	d4e0      	bmi.n	8001ad0 <_fflush_r+0xc>
 8001b0e:	89a3      	ldrh	r3, [r4, #12]
 8001b10:	059b      	lsls	r3, r3, #22
 8001b12:	d4dd      	bmi.n	8001ad0 <_fflush_r+0xc>
 8001b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b16:	f000 f908 	bl	8001d2a <__retarget_lock_release_recursive>
 8001b1a:	e7d9      	b.n	8001ad0 <_fflush_r+0xc>
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <_fflush_r+0x70>)
 8001b1e:	429c      	cmp	r4, r3
 8001b20:	d101      	bne.n	8001b26 <_fflush_r+0x62>
 8001b22:	68ac      	ldr	r4, [r5, #8]
 8001b24:	e7df      	b.n	8001ae6 <_fflush_r+0x22>
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <_fflush_r+0x74>)
 8001b28:	429c      	cmp	r4, r3
 8001b2a:	bf08      	it	eq
 8001b2c:	68ec      	ldreq	r4, [r5, #12]
 8001b2e:	e7da      	b.n	8001ae6 <_fflush_r+0x22>
 8001b30:	080021b4 	.word	0x080021b4
 8001b34:	080021d4 	.word	0x080021d4
 8001b38:	08002194 	.word	0x08002194

08001b3c <std>:
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	b510      	push	{r4, lr}
 8001b40:	4604      	mov	r4, r0
 8001b42:	e9c0 3300 	strd	r3, r3, [r0]
 8001b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b4a:	6083      	str	r3, [r0, #8]
 8001b4c:	8181      	strh	r1, [r0, #12]
 8001b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8001b50:	81c2      	strh	r2, [r0, #14]
 8001b52:	6183      	str	r3, [r0, #24]
 8001b54:	4619      	mov	r1, r3
 8001b56:	2208      	movs	r2, #8
 8001b58:	305c      	adds	r0, #92	; 0x5c
 8001b5a:	f7ff fdf3 	bl	8001744 <memset>
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <std+0x38>)
 8001b60:	6224      	str	r4, [r4, #32]
 8001b62:	6263      	str	r3, [r4, #36]	; 0x24
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <std+0x3c>)
 8001b66:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <std+0x40>)
 8001b6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <std+0x44>)
 8001b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8001b70:	bd10      	pop	{r4, pc}
 8001b72:	bf00      	nop
 8001b74:	08001fd1 	.word	0x08001fd1
 8001b78:	08001ff3 	.word	0x08001ff3
 8001b7c:	0800202b 	.word	0x0800202b
 8001b80:	0800204f 	.word	0x0800204f

08001b84 <_cleanup_r>:
 8001b84:	4901      	ldr	r1, [pc, #4]	; (8001b8c <_cleanup_r+0x8>)
 8001b86:	f000 b8af 	b.w	8001ce8 <_fwalk_reent>
 8001b8a:	bf00      	nop
 8001b8c:	08001ac5 	.word	0x08001ac5

08001b90 <__sfmoreglue>:
 8001b90:	2268      	movs	r2, #104	; 0x68
 8001b92:	b570      	push	{r4, r5, r6, lr}
 8001b94:	1e4d      	subs	r5, r1, #1
 8001b96:	4355      	muls	r5, r2
 8001b98:	460e      	mov	r6, r1
 8001b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b9e:	f000 f993 	bl	8001ec8 <_malloc_r>
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	b140      	cbz	r0, 8001bb8 <__sfmoreglue+0x28>
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8001bac:	300c      	adds	r0, #12
 8001bae:	60a0      	str	r0, [r4, #8]
 8001bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bb4:	f7ff fdc6 	bl	8001744 <memset>
 8001bb8:	4620      	mov	r0, r4
 8001bba:	bd70      	pop	{r4, r5, r6, pc}

08001bbc <__sfp_lock_acquire>:
 8001bbc:	4801      	ldr	r0, [pc, #4]	; (8001bc4 <__sfp_lock_acquire+0x8>)
 8001bbe:	f000 b8b3 	b.w	8001d28 <__retarget_lock_acquire_recursive>
 8001bc2:	bf00      	nop
 8001bc4:	200000d9 	.word	0x200000d9

08001bc8 <__sfp_lock_release>:
 8001bc8:	4801      	ldr	r0, [pc, #4]	; (8001bd0 <__sfp_lock_release+0x8>)
 8001bca:	f000 b8ae 	b.w	8001d2a <__retarget_lock_release_recursive>
 8001bce:	bf00      	nop
 8001bd0:	200000d9 	.word	0x200000d9

08001bd4 <__sinit_lock_acquire>:
 8001bd4:	4801      	ldr	r0, [pc, #4]	; (8001bdc <__sinit_lock_acquire+0x8>)
 8001bd6:	f000 b8a7 	b.w	8001d28 <__retarget_lock_acquire_recursive>
 8001bda:	bf00      	nop
 8001bdc:	200000da 	.word	0x200000da

08001be0 <__sinit_lock_release>:
 8001be0:	4801      	ldr	r0, [pc, #4]	; (8001be8 <__sinit_lock_release+0x8>)
 8001be2:	f000 b8a2 	b.w	8001d2a <__retarget_lock_release_recursive>
 8001be6:	bf00      	nop
 8001be8:	200000da 	.word	0x200000da

08001bec <__sinit>:
 8001bec:	b510      	push	{r4, lr}
 8001bee:	4604      	mov	r4, r0
 8001bf0:	f7ff fff0 	bl	8001bd4 <__sinit_lock_acquire>
 8001bf4:	69a3      	ldr	r3, [r4, #24]
 8001bf6:	b11b      	cbz	r3, 8001c00 <__sinit+0x14>
 8001bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bfc:	f7ff bff0 	b.w	8001be0 <__sinit_lock_release>
 8001c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c04:	6523      	str	r3, [r4, #80]	; 0x50
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <__sinit+0x68>)
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <__sinit+0x6c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c0e:	42a3      	cmp	r3, r4
 8001c10:	bf08      	it	eq
 8001c12:	2301      	moveq	r3, #1
 8001c14:	4620      	mov	r0, r4
 8001c16:	bf08      	it	eq
 8001c18:	61a3      	streq	r3, [r4, #24]
 8001c1a:	f000 f81f 	bl	8001c5c <__sfp>
 8001c1e:	6060      	str	r0, [r4, #4]
 8001c20:	4620      	mov	r0, r4
 8001c22:	f000 f81b 	bl	8001c5c <__sfp>
 8001c26:	60a0      	str	r0, [r4, #8]
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f000 f817 	bl	8001c5c <__sfp>
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2104      	movs	r1, #4
 8001c32:	60e0      	str	r0, [r4, #12]
 8001c34:	6860      	ldr	r0, [r4, #4]
 8001c36:	f7ff ff81 	bl	8001b3c <std>
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2109      	movs	r1, #9
 8001c3e:	68a0      	ldr	r0, [r4, #8]
 8001c40:	f7ff ff7c 	bl	8001b3c <std>
 8001c44:	2202      	movs	r2, #2
 8001c46:	2112      	movs	r1, #18
 8001c48:	68e0      	ldr	r0, [r4, #12]
 8001c4a:	f7ff ff77 	bl	8001b3c <std>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61a3      	str	r3, [r4, #24]
 8001c52:	e7d1      	b.n	8001bf8 <__sinit+0xc>
 8001c54:	08002190 	.word	0x08002190
 8001c58:	08001b85 	.word	0x08001b85

08001c5c <__sfp>:
 8001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5e:	4607      	mov	r7, r0
 8001c60:	f7ff ffac 	bl	8001bbc <__sfp_lock_acquire>
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <__sfp+0x84>)
 8001c66:	681e      	ldr	r6, [r3, #0]
 8001c68:	69b3      	ldr	r3, [r6, #24]
 8001c6a:	b913      	cbnz	r3, 8001c72 <__sfp+0x16>
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	f7ff ffbd 	bl	8001bec <__sinit>
 8001c72:	3648      	adds	r6, #72	; 0x48
 8001c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	d503      	bpl.n	8001c84 <__sfp+0x28>
 8001c7c:	6833      	ldr	r3, [r6, #0]
 8001c7e:	b30b      	cbz	r3, 8001cc4 <__sfp+0x68>
 8001c80:	6836      	ldr	r6, [r6, #0]
 8001c82:	e7f7      	b.n	8001c74 <__sfp+0x18>
 8001c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c88:	b9d5      	cbnz	r5, 8001cc0 <__sfp+0x64>
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <__sfp+0x88>)
 8001c8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c90:	60e3      	str	r3, [r4, #12]
 8001c92:	6665      	str	r5, [r4, #100]	; 0x64
 8001c94:	f000 f847 	bl	8001d26 <__retarget_lock_init_recursive>
 8001c98:	f7ff ff96 	bl	8001bc8 <__sfp_lock_release>
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ca4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ca8:	6025      	str	r5, [r4, #0]
 8001caa:	61a5      	str	r5, [r4, #24]
 8001cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cb0:	f7ff fd48 	bl	8001744 <memset>
 8001cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc0:	3468      	adds	r4, #104	; 0x68
 8001cc2:	e7d9      	b.n	8001c78 <__sfp+0x1c>
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4638      	mov	r0, r7
 8001cc8:	f7ff ff62 	bl	8001b90 <__sfmoreglue>
 8001ccc:	4604      	mov	r4, r0
 8001cce:	6030      	str	r0, [r6, #0]
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d1d5      	bne.n	8001c80 <__sfp+0x24>
 8001cd4:	f7ff ff78 	bl	8001bc8 <__sfp_lock_release>
 8001cd8:	230c      	movs	r3, #12
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	e7ee      	b.n	8001cbc <__sfp+0x60>
 8001cde:	bf00      	nop
 8001ce0:	08002190 	.word	0x08002190
 8001ce4:	ffff0001 	.word	0xffff0001

08001ce8 <_fwalk_reent>:
 8001ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cec:	4606      	mov	r6, r0
 8001cee:	4688      	mov	r8, r1
 8001cf0:	2700      	movs	r7, #0
 8001cf2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8001cfe:	d505      	bpl.n	8001d0c <_fwalk_reent+0x24>
 8001d00:	6824      	ldr	r4, [r4, #0]
 8001d02:	2c00      	cmp	r4, #0
 8001d04:	d1f7      	bne.n	8001cf6 <_fwalk_reent+0xe>
 8001d06:	4638      	mov	r0, r7
 8001d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d0c:	89ab      	ldrh	r3, [r5, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d907      	bls.n	8001d22 <_fwalk_reent+0x3a>
 8001d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d16:	3301      	adds	r3, #1
 8001d18:	d003      	beq.n	8001d22 <_fwalk_reent+0x3a>
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	4630      	mov	r0, r6
 8001d1e:	47c0      	blx	r8
 8001d20:	4307      	orrs	r7, r0
 8001d22:	3568      	adds	r5, #104	; 0x68
 8001d24:	e7e9      	b.n	8001cfa <_fwalk_reent+0x12>

08001d26 <__retarget_lock_init_recursive>:
 8001d26:	4770      	bx	lr

08001d28 <__retarget_lock_acquire_recursive>:
 8001d28:	4770      	bx	lr

08001d2a <__retarget_lock_release_recursive>:
 8001d2a:	4770      	bx	lr

08001d2c <__swhatbuf_r>:
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	460e      	mov	r6, r1
 8001d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d34:	4614      	mov	r4, r2
 8001d36:	2900      	cmp	r1, #0
 8001d38:	461d      	mov	r5, r3
 8001d3a:	b096      	sub	sp, #88	; 0x58
 8001d3c:	da08      	bge.n	8001d50 <__swhatbuf_r+0x24>
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d44:	602a      	str	r2, [r5, #0]
 8001d46:	061a      	lsls	r2, r3, #24
 8001d48:	d410      	bmi.n	8001d6c <__swhatbuf_r+0x40>
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	e00e      	b.n	8001d6e <__swhatbuf_r+0x42>
 8001d50:	466a      	mov	r2, sp
 8001d52:	f000 f9a3 	bl	800209c <_fstat_r>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	dbf1      	blt.n	8001d3e <__swhatbuf_r+0x12>
 8001d5a:	9a01      	ldr	r2, [sp, #4]
 8001d5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d64:	425a      	negs	r2, r3
 8001d66:	415a      	adcs	r2, r3
 8001d68:	602a      	str	r2, [r5, #0]
 8001d6a:	e7ee      	b.n	8001d4a <__swhatbuf_r+0x1e>
 8001d6c:	2340      	movs	r3, #64	; 0x40
 8001d6e:	2000      	movs	r0, #0
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	b016      	add	sp, #88	; 0x58
 8001d74:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d78 <__smakebuf_r>:
 8001d78:	898b      	ldrh	r3, [r1, #12]
 8001d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d7c:	079d      	lsls	r5, r3, #30
 8001d7e:	4606      	mov	r6, r0
 8001d80:	460c      	mov	r4, r1
 8001d82:	d507      	bpl.n	8001d94 <__smakebuf_r+0x1c>
 8001d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	6123      	str	r3, [r4, #16]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	6163      	str	r3, [r4, #20]
 8001d90:	b002      	add	sp, #8
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	466a      	mov	r2, sp
 8001d96:	ab01      	add	r3, sp, #4
 8001d98:	f7ff ffc8 	bl	8001d2c <__swhatbuf_r>
 8001d9c:	9900      	ldr	r1, [sp, #0]
 8001d9e:	4605      	mov	r5, r0
 8001da0:	4630      	mov	r0, r6
 8001da2:	f000 f891 	bl	8001ec8 <_malloc_r>
 8001da6:	b948      	cbnz	r0, 8001dbc <__smakebuf_r+0x44>
 8001da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dac:	059a      	lsls	r2, r3, #22
 8001dae:	d4ef      	bmi.n	8001d90 <__smakebuf_r+0x18>
 8001db0:	f023 0303 	bic.w	r3, r3, #3
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	81a3      	strh	r3, [r4, #12]
 8001dba:	e7e3      	b.n	8001d84 <__smakebuf_r+0xc>
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <__smakebuf_r+0x7c>)
 8001dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8001dc0:	89a3      	ldrh	r3, [r4, #12]
 8001dc2:	6020      	str	r0, [r4, #0]
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc8:	81a3      	strh	r3, [r4, #12]
 8001dca:	9b00      	ldr	r3, [sp, #0]
 8001dcc:	6120      	str	r0, [r4, #16]
 8001dce:	6163      	str	r3, [r4, #20]
 8001dd0:	9b01      	ldr	r3, [sp, #4]
 8001dd2:	b15b      	cbz	r3, 8001dec <__smakebuf_r+0x74>
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dda:	f000 f971 	bl	80020c0 <_isatty_r>
 8001dde:	b128      	cbz	r0, 8001dec <__smakebuf_r+0x74>
 8001de0:	89a3      	ldrh	r3, [r4, #12]
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	81a3      	strh	r3, [r4, #12]
 8001dec:	89a0      	ldrh	r0, [r4, #12]
 8001dee:	4305      	orrs	r5, r0
 8001df0:	81a5      	strh	r5, [r4, #12]
 8001df2:	e7cd      	b.n	8001d90 <__smakebuf_r+0x18>
 8001df4:	08001b85 	.word	0x08001b85

08001df8 <_free_r>:
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	2900      	cmp	r1, #0
 8001dfe:	d040      	beq.n	8001e82 <_free_r+0x8a>
 8001e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e04:	1f0c      	subs	r4, r1, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	18e4      	addlt	r4, r4, r3
 8001e0c:	f000 f97a 	bl	8002104 <__malloc_lock>
 8001e10:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <_free_r+0x8c>)
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	b933      	cbnz	r3, 8001e24 <_free_r+0x2c>
 8001e16:	6063      	str	r3, [r4, #4]
 8001e18:	6014      	str	r4, [r2, #0]
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e20:	f000 b976 	b.w	8002110 <__malloc_unlock>
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	d908      	bls.n	8001e3a <_free_r+0x42>
 8001e28:	6820      	ldr	r0, [r4, #0]
 8001e2a:	1821      	adds	r1, r4, r0
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	bf01      	itttt	eq
 8001e30:	6819      	ldreq	r1, [r3, #0]
 8001e32:	685b      	ldreq	r3, [r3, #4]
 8001e34:	1809      	addeq	r1, r1, r0
 8001e36:	6021      	streq	r1, [r4, #0]
 8001e38:	e7ed      	b.n	8001e16 <_free_r+0x1e>
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	b10b      	cbz	r3, 8001e44 <_free_r+0x4c>
 8001e40:	42a3      	cmp	r3, r4
 8001e42:	d9fa      	bls.n	8001e3a <_free_r+0x42>
 8001e44:	6811      	ldr	r1, [r2, #0]
 8001e46:	1850      	adds	r0, r2, r1
 8001e48:	42a0      	cmp	r0, r4
 8001e4a:	d10b      	bne.n	8001e64 <_free_r+0x6c>
 8001e4c:	6820      	ldr	r0, [r4, #0]
 8001e4e:	4401      	add	r1, r0
 8001e50:	1850      	adds	r0, r2, r1
 8001e52:	4283      	cmp	r3, r0
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	d1e0      	bne.n	8001e1a <_free_r+0x22>
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4401      	add	r1, r0
 8001e5e:	6011      	str	r1, [r2, #0]
 8001e60:	6053      	str	r3, [r2, #4]
 8001e62:	e7da      	b.n	8001e1a <_free_r+0x22>
 8001e64:	d902      	bls.n	8001e6c <_free_r+0x74>
 8001e66:	230c      	movs	r3, #12
 8001e68:	602b      	str	r3, [r5, #0]
 8001e6a:	e7d6      	b.n	8001e1a <_free_r+0x22>
 8001e6c:	6820      	ldr	r0, [r4, #0]
 8001e6e:	1821      	adds	r1, r4, r0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	bf01      	itttt	eq
 8001e74:	6819      	ldreq	r1, [r3, #0]
 8001e76:	685b      	ldreq	r3, [r3, #4]
 8001e78:	1809      	addeq	r1, r1, r0
 8001e7a:	6021      	streq	r1, [r4, #0]
 8001e7c:	6063      	str	r3, [r4, #4]
 8001e7e:	6054      	str	r4, [r2, #4]
 8001e80:	e7cb      	b.n	8001e1a <_free_r+0x22>
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	200000dc 	.word	0x200000dc

08001e88 <sbrk_aligned>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	4e0e      	ldr	r6, [pc, #56]	; (8001ec4 <sbrk_aligned+0x3c>)
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	6831      	ldr	r1, [r6, #0]
 8001e90:	4605      	mov	r5, r0
 8001e92:	b911      	cbnz	r1, 8001e9a <sbrk_aligned+0x12>
 8001e94:	f000 f88c 	bl	8001fb0 <_sbrk_r>
 8001e98:	6030      	str	r0, [r6, #0]
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	f000 f887 	bl	8001fb0 <_sbrk_r>
 8001ea2:	1c43      	adds	r3, r0, #1
 8001ea4:	d00a      	beq.n	8001ebc <sbrk_aligned+0x34>
 8001ea6:	1cc4      	adds	r4, r0, #3
 8001ea8:	f024 0403 	bic.w	r4, r4, #3
 8001eac:	42a0      	cmp	r0, r4
 8001eae:	d007      	beq.n	8001ec0 <sbrk_aligned+0x38>
 8001eb0:	1a21      	subs	r1, r4, r0
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f000 f87c 	bl	8001fb0 <_sbrk_r>
 8001eb8:	3001      	adds	r0, #1
 8001eba:	d101      	bne.n	8001ec0 <sbrk_aligned+0x38>
 8001ebc:	f04f 34ff 	mov.w	r4, #4294967295
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	200000e0 	.word	0x200000e0

08001ec8 <_malloc_r>:
 8001ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ecc:	1ccd      	adds	r5, r1, #3
 8001ece:	f025 0503 	bic.w	r5, r5, #3
 8001ed2:	3508      	adds	r5, #8
 8001ed4:	2d0c      	cmp	r5, #12
 8001ed6:	bf38      	it	cc
 8001ed8:	250c      	movcc	r5, #12
 8001eda:	2d00      	cmp	r5, #0
 8001edc:	4607      	mov	r7, r0
 8001ede:	db01      	blt.n	8001ee4 <_malloc_r+0x1c>
 8001ee0:	42a9      	cmp	r1, r5
 8001ee2:	d905      	bls.n	8001ef0 <_malloc_r+0x28>
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	2600      	movs	r6, #0
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4630      	mov	r0, r6
 8001eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ef0:	4e2e      	ldr	r6, [pc, #184]	; (8001fac <_malloc_r+0xe4>)
 8001ef2:	f000 f907 	bl	8002104 <__malloc_lock>
 8001ef6:	6833      	ldr	r3, [r6, #0]
 8001ef8:	461c      	mov	r4, r3
 8001efa:	bb34      	cbnz	r4, 8001f4a <_malloc_r+0x82>
 8001efc:	4629      	mov	r1, r5
 8001efe:	4638      	mov	r0, r7
 8001f00:	f7ff ffc2 	bl	8001e88 <sbrk_aligned>
 8001f04:	1c43      	adds	r3, r0, #1
 8001f06:	4604      	mov	r4, r0
 8001f08:	d14d      	bne.n	8001fa6 <_malloc_r+0xde>
 8001f0a:	6834      	ldr	r4, [r6, #0]
 8001f0c:	4626      	mov	r6, r4
 8001f0e:	2e00      	cmp	r6, #0
 8001f10:	d140      	bne.n	8001f94 <_malloc_r+0xcc>
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	4631      	mov	r1, r6
 8001f16:	4638      	mov	r0, r7
 8001f18:	eb04 0803 	add.w	r8, r4, r3
 8001f1c:	f000 f848 	bl	8001fb0 <_sbrk_r>
 8001f20:	4580      	cmp	r8, r0
 8001f22:	d13a      	bne.n	8001f9a <_malloc_r+0xd2>
 8001f24:	6821      	ldr	r1, [r4, #0]
 8001f26:	3503      	adds	r5, #3
 8001f28:	1a6d      	subs	r5, r5, r1
 8001f2a:	f025 0503 	bic.w	r5, r5, #3
 8001f2e:	3508      	adds	r5, #8
 8001f30:	2d0c      	cmp	r5, #12
 8001f32:	bf38      	it	cc
 8001f34:	250c      	movcc	r5, #12
 8001f36:	4638      	mov	r0, r7
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7ff ffa5 	bl	8001e88 <sbrk_aligned>
 8001f3e:	3001      	adds	r0, #1
 8001f40:	d02b      	beq.n	8001f9a <_malloc_r+0xd2>
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	442b      	add	r3, r5
 8001f46:	6023      	str	r3, [r4, #0]
 8001f48:	e00e      	b.n	8001f68 <_malloc_r+0xa0>
 8001f4a:	6822      	ldr	r2, [r4, #0]
 8001f4c:	1b52      	subs	r2, r2, r5
 8001f4e:	d41e      	bmi.n	8001f8e <_malloc_r+0xc6>
 8001f50:	2a0b      	cmp	r2, #11
 8001f52:	d916      	bls.n	8001f82 <_malloc_r+0xba>
 8001f54:	1961      	adds	r1, r4, r5
 8001f56:	42a3      	cmp	r3, r4
 8001f58:	6025      	str	r5, [r4, #0]
 8001f5a:	bf18      	it	ne
 8001f5c:	6059      	strne	r1, [r3, #4]
 8001f5e:	6863      	ldr	r3, [r4, #4]
 8001f60:	bf08      	it	eq
 8001f62:	6031      	streq	r1, [r6, #0]
 8001f64:	5162      	str	r2, [r4, r5]
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	4638      	mov	r0, r7
 8001f6a:	f104 060b 	add.w	r6, r4, #11
 8001f6e:	f000 f8cf 	bl	8002110 <__malloc_unlock>
 8001f72:	f026 0607 	bic.w	r6, r6, #7
 8001f76:	1d23      	adds	r3, r4, #4
 8001f78:	1af2      	subs	r2, r6, r3
 8001f7a:	d0b6      	beq.n	8001eea <_malloc_r+0x22>
 8001f7c:	1b9b      	subs	r3, r3, r6
 8001f7e:	50a3      	str	r3, [r4, r2]
 8001f80:	e7b3      	b.n	8001eea <_malloc_r+0x22>
 8001f82:	6862      	ldr	r2, [r4, #4]
 8001f84:	42a3      	cmp	r3, r4
 8001f86:	bf0c      	ite	eq
 8001f88:	6032      	streq	r2, [r6, #0]
 8001f8a:	605a      	strne	r2, [r3, #4]
 8001f8c:	e7ec      	b.n	8001f68 <_malloc_r+0xa0>
 8001f8e:	4623      	mov	r3, r4
 8001f90:	6864      	ldr	r4, [r4, #4]
 8001f92:	e7b2      	b.n	8001efa <_malloc_r+0x32>
 8001f94:	4634      	mov	r4, r6
 8001f96:	6876      	ldr	r6, [r6, #4]
 8001f98:	e7b9      	b.n	8001f0e <_malloc_r+0x46>
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	f000 f8b6 	bl	8002110 <__malloc_unlock>
 8001fa4:	e7a1      	b.n	8001eea <_malloc_r+0x22>
 8001fa6:	6025      	str	r5, [r4, #0]
 8001fa8:	e7de      	b.n	8001f68 <_malloc_r+0xa0>
 8001faa:	bf00      	nop
 8001fac:	200000dc 	.word	0x200000dc

08001fb0 <_sbrk_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	4d05      	ldr	r5, [pc, #20]	; (8001fcc <_sbrk_r+0x1c>)
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	602b      	str	r3, [r5, #0]
 8001fbc:	f7fe fa00 	bl	80003c0 <_sbrk>
 8001fc0:	1c43      	adds	r3, r0, #1
 8001fc2:	d102      	bne.n	8001fca <_sbrk_r+0x1a>
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	b103      	cbz	r3, 8001fca <_sbrk_r+0x1a>
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	bd38      	pop	{r3, r4, r5, pc}
 8001fcc:	200000e4 	.word	0x200000e4

08001fd0 <__sread>:
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fd8:	f000 f8a0 	bl	800211c <_read_r>
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	bfab      	itete	ge
 8001fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8001fe4:	181b      	addge	r3, r3, r0
 8001fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fea:	bfac      	ite	ge
 8001fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fee:	81a3      	strhlt	r3, [r4, #12]
 8001ff0:	bd10      	pop	{r4, pc}

08001ff2 <__swrite>:
 8001ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff6:	461f      	mov	r7, r3
 8001ff8:	898b      	ldrh	r3, [r1, #12]
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	05db      	lsls	r3, r3, #23
 8001ffe:	460c      	mov	r4, r1
 8002000:	4616      	mov	r6, r2
 8002002:	d505      	bpl.n	8002010 <__swrite+0x1e>
 8002004:	2302      	movs	r3, #2
 8002006:	2200      	movs	r2, #0
 8002008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800200c:	f000 f868 	bl	80020e0 <_lseek_r>
 8002010:	89a3      	ldrh	r3, [r4, #12]
 8002012:	4632      	mov	r2, r6
 8002014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002018:	81a3      	strh	r3, [r4, #12]
 800201a:	4628      	mov	r0, r5
 800201c:	463b      	mov	r3, r7
 800201e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002026:	f000 b817 	b.w	8002058 <_write_r>

0800202a <__sseek>:
 800202a:	b510      	push	{r4, lr}
 800202c:	460c      	mov	r4, r1
 800202e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002032:	f000 f855 	bl	80020e0 <_lseek_r>
 8002036:	1c43      	adds	r3, r0, #1
 8002038:	89a3      	ldrh	r3, [r4, #12]
 800203a:	bf15      	itete	ne
 800203c:	6560      	strne	r0, [r4, #84]	; 0x54
 800203e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002046:	81a3      	strheq	r3, [r4, #12]
 8002048:	bf18      	it	ne
 800204a:	81a3      	strhne	r3, [r4, #12]
 800204c:	bd10      	pop	{r4, pc}

0800204e <__sclose>:
 800204e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002052:	f000 b813 	b.w	800207c <_close_r>
	...

08002058 <_write_r>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4604      	mov	r4, r0
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	2200      	movs	r2, #0
 8002062:	4d05      	ldr	r5, [pc, #20]	; (8002078 <_write_r+0x20>)
 8002064:	602a      	str	r2, [r5, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	f7fe f892 	bl	8000190 <_write>
 800206c:	1c43      	adds	r3, r0, #1
 800206e:	d102      	bne.n	8002076 <_write_r+0x1e>
 8002070:	682b      	ldr	r3, [r5, #0]
 8002072:	b103      	cbz	r3, 8002076 <_write_r+0x1e>
 8002074:	6023      	str	r3, [r4, #0]
 8002076:	bd38      	pop	{r3, r4, r5, pc}
 8002078:	200000e4 	.word	0x200000e4

0800207c <_close_r>:
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	2300      	movs	r3, #0
 8002080:	4d05      	ldr	r5, [pc, #20]	; (8002098 <_close_r+0x1c>)
 8002082:	4604      	mov	r4, r0
 8002084:	4608      	mov	r0, r1
 8002086:	602b      	str	r3, [r5, #0]
 8002088:	f7fe f96a 	bl	8000360 <_close>
 800208c:	1c43      	adds	r3, r0, #1
 800208e:	d102      	bne.n	8002096 <_close_r+0x1a>
 8002090:	682b      	ldr	r3, [r5, #0]
 8002092:	b103      	cbz	r3, 8002096 <_close_r+0x1a>
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	bd38      	pop	{r3, r4, r5, pc}
 8002098:	200000e4 	.word	0x200000e4

0800209c <_fstat_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	2300      	movs	r3, #0
 80020a0:	4d06      	ldr	r5, [pc, #24]	; (80020bc <_fstat_r+0x20>)
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	602b      	str	r3, [r5, #0]
 80020aa:	f7fe f964 	bl	8000376 <_fstat>
 80020ae:	1c43      	adds	r3, r0, #1
 80020b0:	d102      	bne.n	80020b8 <_fstat_r+0x1c>
 80020b2:	682b      	ldr	r3, [r5, #0]
 80020b4:	b103      	cbz	r3, 80020b8 <_fstat_r+0x1c>
 80020b6:	6023      	str	r3, [r4, #0]
 80020b8:	bd38      	pop	{r3, r4, r5, pc}
 80020ba:	bf00      	nop
 80020bc:	200000e4 	.word	0x200000e4

080020c0 <_isatty_r>:
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	2300      	movs	r3, #0
 80020c4:	4d05      	ldr	r5, [pc, #20]	; (80020dc <_isatty_r+0x1c>)
 80020c6:	4604      	mov	r4, r0
 80020c8:	4608      	mov	r0, r1
 80020ca:	602b      	str	r3, [r5, #0]
 80020cc:	f7fe f962 	bl	8000394 <_isatty>
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	d102      	bne.n	80020da <_isatty_r+0x1a>
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	b103      	cbz	r3, 80020da <_isatty_r+0x1a>
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	bd38      	pop	{r3, r4, r5, pc}
 80020dc:	200000e4 	.word	0x200000e4

080020e0 <_lseek_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4604      	mov	r4, r0
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	2200      	movs	r2, #0
 80020ea:	4d05      	ldr	r5, [pc, #20]	; (8002100 <_lseek_r+0x20>)
 80020ec:	602a      	str	r2, [r5, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f7fe f95a 	bl	80003a8 <_lseek>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	d102      	bne.n	80020fe <_lseek_r+0x1e>
 80020f8:	682b      	ldr	r3, [r5, #0]
 80020fa:	b103      	cbz	r3, 80020fe <_lseek_r+0x1e>
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
 8002100:	200000e4 	.word	0x200000e4

08002104 <__malloc_lock>:
 8002104:	4801      	ldr	r0, [pc, #4]	; (800210c <__malloc_lock+0x8>)
 8002106:	f7ff be0f 	b.w	8001d28 <__retarget_lock_acquire_recursive>
 800210a:	bf00      	nop
 800210c:	200000d8 	.word	0x200000d8

08002110 <__malloc_unlock>:
 8002110:	4801      	ldr	r0, [pc, #4]	; (8002118 <__malloc_unlock+0x8>)
 8002112:	f7ff be0a 	b.w	8001d2a <__retarget_lock_release_recursive>
 8002116:	bf00      	nop
 8002118:	200000d8 	.word	0x200000d8

0800211c <_read_r>:
 800211c:	b538      	push	{r3, r4, r5, lr}
 800211e:	4604      	mov	r4, r0
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	2200      	movs	r2, #0
 8002126:	4d05      	ldr	r5, [pc, #20]	; (800213c <_read_r+0x20>)
 8002128:	602a      	str	r2, [r5, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	f7fe f8fb 	bl	8000326 <_read>
 8002130:	1c43      	adds	r3, r0, #1
 8002132:	d102      	bne.n	800213a <_read_r+0x1e>
 8002134:	682b      	ldr	r3, [r5, #0]
 8002136:	b103      	cbz	r3, 800213a <_read_r+0x1e>
 8002138:	6023      	str	r3, [r4, #0]
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	200000e4 	.word	0x200000e4

08002140 <_init>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	bf00      	nop
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr

0800214c <_fini>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	bf00      	nop
 8002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002152:	bc08      	pop	{r3}
 8002154:	469e      	mov	lr, r3
 8002156:	4770      	bx	lr
