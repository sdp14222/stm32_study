
5. EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000294c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad8  08002ad8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad8  08002ad8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad8  08002ad8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08002b50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002b50  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006105  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179e  00000000  00000000  0002619e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00028020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e32  00000000  00000000  00028658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080fd  00000000  00000000  0002a48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825c3  00000000  00000000  00032587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd4  00000000  00000000  000b4b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a40 	.word	0x08002a40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002a40 	.word	0x08002a40

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b2e      	ldr	r3, [pc, #184]	; (800021c <MX_GPIO_Init+0xd0>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2d      	ldr	r2, [pc, #180]	; (800021c <MX_GPIO_Init+0xd0>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2b      	ldr	r3, [pc, #172]	; (800021c <MX_GPIO_Init+0xd0>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b28      	ldr	r3, [pc, #160]	; (800021c <MX_GPIO_Init+0xd0>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a27      	ldr	r2, [pc, #156]	; (800021c <MX_GPIO_Init+0xd0>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b25      	ldr	r3, [pc, #148]	; (800021c <MX_GPIO_Init+0xd0>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b22      	ldr	r3, [pc, #136]	; (800021c <MX_GPIO_Init+0xd0>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a21      	ldr	r2, [pc, #132]	; (800021c <MX_GPIO_Init+0xd0>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1f      	ldr	r3, [pc, #124]	; (800021c <MX_GPIO_Init+0xd0>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_3
 80001a8:	2200      	movs	r2, #0
 80001aa:	f240 412b 	movw	r1, #1067	; 0x42b
 80001ae:	481c      	ldr	r0, [pc, #112]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001b0:	f000 fe1a 	bl	8000de8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ba:	481a      	ldr	r0, [pc, #104]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001bc:	f000 fe14 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80001c0:	2390      	movs	r3, #144	; 0x90
 80001c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001c4:	4b18      	ldr	r3, [pc, #96]	; (8000228 <MX_GPIO_Init+0xdc>)
 80001c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001c8:	2300      	movs	r3, #0
 80001ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001cc:	f107 0310 	add.w	r3, r7, #16
 80001d0:	4619      	mov	r1, r3
 80001d2:	4814      	ldr	r0, [pc, #80]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001d4:	f000 fc84 	bl	8000ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB3
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_3
 80001d8:	f240 432b 	movw	r3, #1067	; 0x42b
 80001dc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001f2:	f000 fc75 	bl	8000ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80001f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fc:	2301      	movs	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	2300      	movs	r3, #0
 8000202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000204:	2302      	movs	r3, #2
 8000206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4805      	ldr	r0, [pc, #20]	; (8000224 <MX_GPIO_Init+0xd8>)
 8000210:	f000 fc66 	bl	8000ae0 <HAL_GPIO_Init>

}
 8000214:	bf00      	nop
 8000216:	3720      	adds	r7, #32
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40021000 	.word	0x40021000
 8000220:	40010c00 	.word	0x40010c00
 8000224:	40010800 	.word	0x40010800
 8000228:	10210000 	.word	0x10210000

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000230:	f000 fa12 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000234:	f000 f826 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000238:	f7ff ff88 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800023c:	f000 f972 	bl	8000524 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000240:	f000 f865 	bl	800030e <MX_NVIC_Init>
  volatile static char str[20];
  volatile static uint32_t cnt;

  while (1)
  {
	  sprintf(str, "Hello World!! : %d\n", cnt);
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <main+0x48>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	490b      	ldr	r1, [pc, #44]	; (8000278 <main+0x4c>)
 800024c:	480b      	ldr	r0, [pc, #44]	; (800027c <main+0x50>)
 800024e:	f001 ff7d 	bl	800214c <siprintf>
	  HAL_UART_Transmit(&huart2, str, sizeof(str), 10);
 8000252:	230a      	movs	r3, #10
 8000254:	2214      	movs	r2, #20
 8000256:	4909      	ldr	r1, [pc, #36]	; (800027c <main+0x50>)
 8000258:	4809      	ldr	r0, [pc, #36]	; (8000280 <main+0x54>)
 800025a:	f001 fa76 	bl	800174a <HAL_UART_Transmit>
	  cnt++;
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <main+0x48>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	3301      	adds	r3, #1
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <main+0x48>)
 8000266:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 8000268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026c:	f000 fa56 	bl	800071c <HAL_Delay>
	  sprintf(str, "Hello World!! : %d\n", cnt);
 8000270:	e7e8      	b.n	8000244 <main+0x18>
 8000272:	bf00      	nop
 8000274:	2000008c 	.word	0x2000008c
 8000278:	08002a58 	.word	0x08002a58
 800027c:	20000090 	.word	0x20000090
 8000280:	200000e0 	.word	0x200000e0

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	; 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	; 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 ff52 	bl	800213c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a6:	2301      	movs	r3, #1
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fdd5 	bl	8000e7c <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d8:	f000 f870 	bl	80003bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 f842 	bl	8001380 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000302:	f000 f85b 	bl	80003bc <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3740      	adds	r7, #64	; 0x40
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	2026      	movs	r0, #38	; 0x26
 8000318:	f000 fafb 	bl	8000912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800031c:	2026      	movs	r0, #38	; 0x26
 800031e:	f000 fb14 	bl	800094a <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2100      	movs	r1, #0
 8000326:	200a      	movs	r0, #10
 8000328:	f000 faf3 	bl	8000912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800032c:	200a      	movs	r0, #10
 800032e:	f000 fb0c 	bl	800094a <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2100      	movs	r1, #0
 8000336:	2017      	movs	r0, #23
 8000338:	f000 faeb 	bl	8000912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800033c:	2017      	movs	r0, #23
 800033e:	f000 fb04 	bl	800094a <HAL_NVIC_EnableIRQ>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <HAL_GPIO_EXTI_Callback>:
////		cnt++;
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
//	{
//		CLCD_Clear_Display();
//		isFirst = 0;
//	}

	if(GPIO_Pin == GPIO_PIN_4)
 8000352:	88fb      	ldrh	r3, [r7, #6]
 8000354:	2b10      	cmp	r3, #16
 8000356:	d10c      	bne.n	8000372 <HAL_GPIO_EXTI_Callback+0x2a>
//		CLCD_Write(CLCD_ADDR_SET, 0, 0, str);
//		cnt1++;
//		sprintf(str, "Button1 : %d\n", cnt1);
//		HAL_UART_Transmit_IT(&huart2, str, sizeof(str));
//		cnt1++;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000358:	2101      	movs	r1, #1
 800035a:	4813      	ldr	r0, [pc, #76]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x60>)
 800035c:	f000 fd5c 	bl	8000e18 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000360:	2102      	movs	r1, #2
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000364:	f000 fd58 	bl	8000e18 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036c:	480e      	ldr	r0, [pc, #56]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x60>)
 800036e:	f000 fd53 	bl	8000e18 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_7)
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	2b80      	cmp	r3, #128	; 0x80
 8000376:	d113      	bne.n	80003a0 <HAL_GPIO_EXTI_Callback+0x58>
	{
//		sprintf(str, "2 : %d", cnt2);
//		CLCD_Write(CLCD_ADDR_SET, 1, 0, str);
//		cnt2++;
		sprintf(str, "Button2 : %d\n", cnt2);
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_GPIO_EXTI_Callback+0x64>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	490b      	ldr	r1, [pc, #44]	; (80003b0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000384:	f001 fee2 	bl	800214c <siprintf>
		HAL_UART_Transmit_IT(&huart2, str, sizeof(str));
 8000388:	2232      	movs	r2, #50	; 0x32
 800038a:	490a      	ldr	r1, [pc, #40]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x6c>)
 800038c:	480a      	ldr	r0, [pc, #40]	; (80003b8 <HAL_GPIO_EXTI_Callback+0x70>)
 800038e:	f001 fa6e 	bl	800186e <HAL_UART_Transmit_IT>
		cnt2++;
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <HAL_GPIO_EXTI_Callback+0x64>)
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	b29b      	uxth	r3, r3
 8000398:	3301      	adds	r3, #1
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <HAL_GPIO_EXTI_Callback+0x64>)
 800039e:	801a      	strh	r2, [r3, #0]
	}
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	200000a4 	.word	0x200000a4
 80003b0:	08002a6c 	.word	0x08002a6c
 80003b4:	200000a8 	.word	0x200000a8
 80003b8:	200000e0 	.word	0x200000e0

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <Error_Handler+0x8>
	...

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000430:	e7fe      	b.n	8000430 <NMI_Handler+0x4>

08000432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000436:	e7fe      	b.n	8000436 <HardFault_Handler+0x4>

08000438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800043c:	e7fe      	b.n	800043c <MemManage_Handler+0x4>

0800043e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000442:	e7fe      	b.n	8000442 <BusFault_Handler+0x4>

08000444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <UsageFault_Handler+0x4>

0800044a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr

08000462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000472:	f000 f937 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}

0800047a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800047e:	2010      	movs	r0, #16
 8000480:	f000 fce4 	bl	8000e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800048c:	2080      	movs	r0, #128	; 0x80
 800048e:	f000 fcdd 	bl	8000e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <USART2_IRQHandler+0x10>)
 800049e:	f001 fa2b 	bl	80018f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000e0 	.word	0x200000e0

080004ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b4:	4a14      	ldr	r2, [pc, #80]	; (8000508 <_sbrk+0x5c>)
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <_sbrk+0x60>)
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <_sbrk+0x64>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	; (8000514 <_sbrk+0x68>)
 80004cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d207      	bcs.n	80004ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004dc:	f001 fe04 	bl	80020e8 <__errno>
 80004e0:	4603      	mov	r3, r0
 80004e2:	220c      	movs	r2, #12
 80004e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	e009      	b.n	8000500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <_sbrk+0x64>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <_sbrk+0x64>)
 80004fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20005000 	.word	0x20005000
 800050c:	00000400 	.word	0x00000400
 8000510:	200000dc 	.word	0x200000dc
 8000514:	20000138 	.word	0x20000138

08000518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <MX_USART2_UART_Init+0x50>)
 800052c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_USART2_UART_Init+0x4c>)
 800055c:	f001 f8a8 	bl	80016b0 <HAL_UART_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000566:	f7ff ff29 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000e0 	.word	0x200000e0
 8000574:	40004400 	.word	0x40004400

08000578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <HAL_UART_MspInit+0x88>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d12f      	bne.n	80005f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <HAL_UART_MspInit+0x8c>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	4a19      	ldr	r2, [pc, #100]	; (8000604 <HAL_UART_MspInit+0x8c>)
 800059e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a2:	61d3      	str	r3, [r2, #28]
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_UART_MspInit+0x8c>)
 80005a6:	69db      	ldr	r3, [r3, #28]
 80005a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_UART_MspInit+0x8c>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <HAL_UART_MspInit+0x8c>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_UART_MspInit+0x8c>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005c8:	2304      	movs	r3, #4
 80005ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <HAL_UART_MspInit+0x90>)
 80005dc:	f000 fa80 	bl	8000ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005e0:	2308      	movs	r3, #8
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_UART_MspInit+0x90>)
 80005f4:	f000 fa74 	bl	8000ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40004400 	.word	0x40004400
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060e:	490d      	ldr	r1, [pc, #52]	; (8000644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000624:	4c0a      	ldr	r4, [pc, #40]	; (8000650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000632:	f7ff ff71 	bl	8000518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f001 fd5d 	bl	80020f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fdf7 	bl	800022c <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000648:	08002ae0 	.word	0x08002ae0
  ldr r2, =_sbss
 800064c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000650:	20000138 	.word	0x20000138

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f947 	bl	80008fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	200f      	movs	r0, #15
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff fea8 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f95f 	bl	8000966 <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f927 	bl	8000912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x1c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <HAL_IncTick+0x20>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	20000008 	.word	0x20000008
 8000704:	20000124 	.word	0x20000124

08000708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000124 	.word	0x20000124

0800071c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000724:	f7ff fff0 	bl	8000708 <HAL_GetTick>
 8000728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000734:	d005      	beq.n	8000742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_Delay+0x44>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000742:	bf00      	nop
 8000744:	f7ff ffe0 	bl	8000708 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f7      	bhi.n	8000744 <HAL_Delay+0x28>
  {
  }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0b      	blt.n	80007f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <__NVIC_EnableIRQ+0x34>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c8:	d301      	bcc.n	80008ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00f      	b.n	80008ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <SysTick_Config+0x40>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d6:	210f      	movs	r1, #15
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f7ff ff90 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SysTick_Config+0x40>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SysTick_Config+0x40>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff2d 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000924:	f7ff ff42 	bl	80007ac <__NVIC_GetPriorityGrouping>
 8000928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff ff90 	bl	8000854 <NVIC_EncodePriority>
 8000934:	4602      	mov	r2, r0
 8000936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff5f 	bl	8000800 <__NVIC_SetPriority>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff35 	bl	80007c8 <__NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffa2 	bl	80008b8 <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800097e:	b480      	push	{r7}
 8000980:	b085      	sub	sp, #20
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000990:	2b02      	cmp	r3, #2
 8000992:	d008      	beq.n	80009a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2204      	movs	r2, #4
 8000998:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e020      	b.n	80009e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 020e 	bic.w	r2, r2, #14
 80009b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 0201 	bic.w	r2, r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2201      	movs	r2, #1
 80009da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
	...

080009f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d005      	beq.n	8000a16 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
 8000a14:	e051      	b.n	8000aba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f022 020e 	bic.w	r2, r2, #14
 8000a24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0201 	bic.w	r2, r2, #1
 8000a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a22      	ldr	r2, [pc, #136]	; (8000ac4 <HAL_DMA_Abort_IT+0xd0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d029      	beq.n	8000a94 <HAL_DMA_Abort_IT+0xa0>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <HAL_DMA_Abort_IT+0xd4>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d022      	beq.n	8000a90 <HAL_DMA_Abort_IT+0x9c>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_DMA_Abort_IT+0xd8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d01a      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x96>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_DMA_Abort_IT+0xdc>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d012      	beq.n	8000a84 <HAL_DMA_Abort_IT+0x90>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <HAL_DMA_Abort_IT+0xe0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d00a      	beq.n	8000a7e <HAL_DMA_Abort_IT+0x8a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_DMA_Abort_IT+0xe4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d102      	bne.n	8000a78 <HAL_DMA_Abort_IT+0x84>
 8000a72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a76:	e00e      	b.n	8000a96 <HAL_DMA_Abort_IT+0xa2>
 8000a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a7c:	e00b      	b.n	8000a96 <HAL_DMA_Abort_IT+0xa2>
 8000a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a82:	e008      	b.n	8000a96 <HAL_DMA_Abort_IT+0xa2>
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	e005      	b.n	8000a96 <HAL_DMA_Abort_IT+0xa2>
 8000a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8e:	e002      	b.n	8000a96 <HAL_DMA_Abort_IT+0xa2>
 8000a90:	2310      	movs	r3, #16
 8000a92:	e000      	b.n	8000a96 <HAL_DMA_Abort_IT+0xa2>
 8000a94:	2301      	movs	r3, #1
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <HAL_DMA_Abort_IT+0xe8>)
 8000a98:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	4798      	blx	r3
    } 
  }
  return status;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020008 	.word	0x40020008
 8000ac8:	4002001c 	.word	0x4002001c
 8000acc:	40020030 	.word	0x40020030
 8000ad0:	40020044 	.word	0x40020044
 8000ad4:	40020058 	.word	0x40020058
 8000ad8:	4002006c 	.word	0x4002006c
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b08b      	sub	sp, #44	; 0x2c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	e169      	b.n	8000dc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af4:	2201      	movs	r2, #1
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	4013      	ands	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	f040 8158 	bne.w	8000dc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	4a9a      	ldr	r2, [pc, #616]	; (8000d80 <HAL_GPIO_Init+0x2a0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d05e      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b1c:	4a98      	ldr	r2, [pc, #608]	; (8000d80 <HAL_GPIO_Init+0x2a0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d875      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b22:	4a98      	ldr	r2, [pc, #608]	; (8000d84 <HAL_GPIO_Init+0x2a4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d058      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b28:	4a96      	ldr	r2, [pc, #600]	; (8000d84 <HAL_GPIO_Init+0x2a4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d86f      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b2e:	4a96      	ldr	r2, [pc, #600]	; (8000d88 <HAL_GPIO_Init+0x2a8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d052      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b34:	4a94      	ldr	r2, [pc, #592]	; (8000d88 <HAL_GPIO_Init+0x2a8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d869      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b3a:	4a94      	ldr	r2, [pc, #592]	; (8000d8c <HAL_GPIO_Init+0x2ac>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d04c      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b40:	4a92      	ldr	r2, [pc, #584]	; (8000d8c <HAL_GPIO_Init+0x2ac>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d863      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b46:	4a92      	ldr	r2, [pc, #584]	; (8000d90 <HAL_GPIO_Init+0x2b0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d046      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b4c:	4a90      	ldr	r2, [pc, #576]	; (8000d90 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d85d      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b52:	2b12      	cmp	r3, #18
 8000b54:	d82a      	bhi.n	8000bac <HAL_GPIO_Init+0xcc>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d859      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <HAL_GPIO_Init+0x80>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000bdb 	.word	0x08000bdb
 8000b64:	08000bb5 	.word	0x08000bb5
 8000b68:	08000bc7 	.word	0x08000bc7
 8000b6c:	08000c09 	.word	0x08000c09
 8000b70:	08000c0f 	.word	0x08000c0f
 8000b74:	08000c0f 	.word	0x08000c0f
 8000b78:	08000c0f 	.word	0x08000c0f
 8000b7c:	08000c0f 	.word	0x08000c0f
 8000b80:	08000c0f 	.word	0x08000c0f
 8000b84:	08000c0f 	.word	0x08000c0f
 8000b88:	08000c0f 	.word	0x08000c0f
 8000b8c:	08000c0f 	.word	0x08000c0f
 8000b90:	08000c0f 	.word	0x08000c0f
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000c0f 	.word	0x08000c0f
 8000b9c:	08000c0f 	.word	0x08000c0f
 8000ba0:	08000c0f 	.word	0x08000c0f
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000bd1 	.word	0x08000bd1
 8000bac:	4a79      	ldr	r2, [pc, #484]	; (8000d94 <HAL_GPIO_Init+0x2b4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d013      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb2:	e02c      	b.n	8000c0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e029      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	e024      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	3308      	adds	r3, #8
 8000bcc:	623b      	str	r3, [r7, #32]
          break;
 8000bce:	e01f      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e01a      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be2:	2304      	movs	r3, #4
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e013      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d105      	bne.n	8000bfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	611a      	str	r2, [r3, #16]
          break;
 8000bfa:	e009      	b.n	8000c10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	615a      	str	r2, [r3, #20]
          break;
 8000c06:	e003      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e000      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          break;
 8000c0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	2bff      	cmp	r3, #255	; 0xff
 8000c14:	d801      	bhi.n	8000c1a <HAL_GPIO_Init+0x13a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	e001      	b.n	8000c1e <HAL_GPIO_Init+0x13e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d802      	bhi.n	8000c2c <HAL_GPIO_Init+0x14c>
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0x152>
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	3b08      	subs	r3, #8
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	210f      	movs	r1, #15
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	401a      	ands	r2, r3
 8000c44:	6a39      	ldr	r1, [r7, #32]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80b1 	beq.w	8000dc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c60:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a4c      	ldr	r2, [pc, #304]	; (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c78:	4a48      	ldr	r2, [pc, #288]	; (8000d9c <HAL_GPIO_Init+0x2bc>)
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <HAL_GPIO_Init+0x2c0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d013      	beq.n	8000ccc <HAL_GPIO_Init+0x1ec>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3f      	ldr	r2, [pc, #252]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d00d      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3e      	ldr	r2, [pc, #248]	; (8000da8 <HAL_GPIO_Init+0x2c8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x1e4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3d      	ldr	r2, [pc, #244]	; (8000dac <HAL_GPIO_Init+0x2cc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d101      	bne.n	8000cc0 <HAL_GPIO_Init+0x1e0>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e006      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e004      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	e002      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	4093      	lsls	r3, r2
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cde:	492f      	ldr	r1, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x2bc>)
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	492c      	ldr	r1, [pc, #176]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	600b      	str	r3, [r1, #0]
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4928      	ldr	r1, [pc, #160]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	4922      	ldr	r1, [pc, #136]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	604b      	str	r3, [r1, #4]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	491e      	ldr	r1, [pc, #120]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	4918      	ldr	r1, [pc, #96]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	608b      	str	r3, [r1, #8]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4914      	ldr	r1, [pc, #80]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d021      	beq.n	8000db4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	490e      	ldr	r1, [pc, #56]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60cb      	str	r3, [r1, #12]
 8000d7c:	e021      	b.n	8000dc2 <HAL_GPIO_Init+0x2e2>
 8000d7e:	bf00      	nop
 8000d80:	10320000 	.word	0x10320000
 8000d84:	10310000 	.word	0x10310000
 8000d88:	10220000 	.word	0x10220000
 8000d8c:	10210000 	.word	0x10210000
 8000d90:	10120000 	.word	0x10120000
 8000d94:	10110000 	.word	0x10110000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40010c00 	.word	0x40010c00
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40011400 	.word	0x40011400
 8000db0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_GPIO_Init+0x304>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4909      	ldr	r1, [pc, #36]	; (8000de4 <HAL_GPIO_Init+0x304>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f47f ae8e 	bne.w	8000af4 <HAL_GPIO_Init+0x14>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	372c      	adds	r7, #44	; 0x2c
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
 8000df4:	4613      	mov	r3, r2
 8000df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df8:	787b      	ldrb	r3, [r7, #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e04:	e003      	b.n	8000e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	041a      	lsls	r2, r3, #16
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	611a      	str	r2, [r3, #16]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	041a      	lsls	r2, r3, #16
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43d9      	mvns	r1, r3
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	400b      	ands	r3, r1
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	611a      	str	r2, [r3, #16]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fa6c 	bl	8000348 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e272      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8087 	beq.w	8000faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e9c:	4b92      	ldr	r3, [pc, #584]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d00c      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea8:	4b8f      	ldr	r3, [pc, #572]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d112      	bne.n	8000eda <HAL_RCC_OscConfig+0x5e>
 8000eb4:	4b8c      	ldr	r3, [pc, #560]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec0:	d10b      	bne.n	8000eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec2:	4b89      	ldr	r3, [pc, #548]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d06c      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x12c>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d168      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e24c      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x76>
 8000ee4:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a7f      	ldr	r2, [pc, #508]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e02e      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x98>
 8000efa:	4b7b      	ldr	r3, [pc, #492]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a7a      	ldr	r2, [pc, #488]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a77      	ldr	r2, [pc, #476]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e01d      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0xbc>
 8000f1e:	4b72      	ldr	r3, [pc, #456]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a71      	ldr	r2, [pc, #452]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a6e      	ldr	r2, [pc, #440]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e00b      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000f38:	4b6b      	ldr	r3, [pc, #428]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a6a      	ldr	r2, [pc, #424]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a67      	ldr	r2, [pc, #412]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fbd6 	bl	8000708 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fbd2 	bl	8000708 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e200      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f0      	beq.n	8000f60 <HAL_RCC_OscConfig+0xe4>
 8000f7e:	e014      	b.n	8000faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fbc2 	bl	8000708 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fbbe 	bl	8000708 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1ec      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x10c>
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d063      	beq.n	800107e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00b      	beq.n	8000fda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fc2:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d11c      	bne.n	8001008 <HAL_RCC_OscConfig+0x18c>
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d116      	bne.n	8001008 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x176>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d001      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e1c0      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4939      	ldr	r1, [pc, #228]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	e03a      	b.n	800107e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d020      	beq.n	8001052 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <HAL_RCC_OscConfig+0x270>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb77 	bl	8000708 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fb73 	bl	8000708 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e1a1      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4927      	ldr	r1, [pc, #156]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 800104c:	4313      	orrs	r3, r2
 800104e:	600b      	str	r3, [r1, #0]
 8001050:	e015      	b.n	800107e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_RCC_OscConfig+0x270>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fb56 	bl	8000708 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001060:	f7ff fb52 	bl	8000708 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e180      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d03a      	beq.n	8001100 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d019      	beq.n	80010c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_RCC_OscConfig+0x274>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001098:	f7ff fb36 	bl	8000708 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a0:	f7ff fb32 	bl	8000708 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e160      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 fad8 	bl	8001674 <RCC_Delay>
 80010c4:	e01c      	b.n	8001100 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_RCC_OscConfig+0x274>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010cc:	f7ff fb1c 	bl	8000708 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d2:	e00f      	b.n	80010f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d4:	f7ff fb18 	bl	8000708 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d908      	bls.n	80010f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e146      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	42420000 	.word	0x42420000
 80010f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f4:	4b92      	ldr	r3, [pc, #584]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e9      	bne.n	80010d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a6 	beq.w	800125a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001112:	4b8b      	ldr	r3, [pc, #556]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10d      	bne.n	800113a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b88      	ldr	r3, [pc, #544]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a87      	ldr	r2, [pc, #540]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b85      	ldr	r3, [pc, #532]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001136:	2301      	movs	r3, #1
 8001138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113a:	4b82      	ldr	r3, [pc, #520]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d118      	bne.n	8001178 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001146:	4b7f      	ldr	r3, [pc, #508]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7e      	ldr	r2, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001152:	f7ff fad9 	bl	8000708 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115a:	f7ff fad5 	bl	8000708 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b64      	cmp	r3, #100	; 0x64
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e103      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	4b75      	ldr	r3, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d106      	bne.n	800118e <HAL_RCC_OscConfig+0x312>
 8001180:	4b6f      	ldr	r3, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a6e      	ldr	r2, [pc, #440]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6213      	str	r3, [r2, #32]
 800118c:	e02d      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x334>
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a69      	ldr	r2, [pc, #420]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a66      	ldr	r2, [pc, #408]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	e01c      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d10c      	bne.n	80011d2 <HAL_RCC_OscConfig+0x356>
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a60      	ldr	r2, [pc, #384]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	4b5e      	ldr	r3, [pc, #376]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a5d      	ldr	r2, [pc, #372]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	e00b      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6213      	str	r3, [r2, #32]
 80011de:	4b58      	ldr	r3, [pc, #352]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a57      	ldr	r2, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d015      	beq.n	800121e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fa89 	bl	8000708 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fa85 	bl	8000708 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0b1      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ee      	beq.n	80011fa <HAL_RCC_OscConfig+0x37e>
 800121c:	e014      	b.n	8001248 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fa73 	bl	8000708 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fa6f 	bl	8000708 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e09b      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ee      	bne.n	8001226 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124e:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a3b      	ldr	r2, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001258:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8087 	beq.w	8001372 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b08      	cmp	r3, #8
 800126e:	d061      	beq.n	8001334 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d146      	bne.n	8001306 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fa43 	bl	8000708 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff fa3f 	bl	8000708 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e06d      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d108      	bne.n	80012c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	4921      	ldr	r1, [pc, #132]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a19      	ldr	r1, [r3, #32]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	430b      	orrs	r3, r1
 80012d2:	491b      	ldr	r1, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fa13 	bl	8000708 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff fa0f 	bl	8000708 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x46a>
 8001304:	e035      	b.n	8001372 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff f9fc 	bl	8000708 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff f9f8 	bl	8000708 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e026      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x498>
 8001332:	e01e      	b.n	8001372 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d107      	bne.n	800134c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e019      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
 8001340:	40021000 	.word	0x40021000
 8001344:	40007000 	.word	0x40007000
 8001348:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x500>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	429a      	cmp	r2, r3
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0d0      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d910      	bls.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0207 	bic.w	r2, r3, #7
 80013aa:	4965      	ldr	r1, [pc, #404]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0b8      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013dc:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	494d      	ldr	r1, [pc, #308]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d040      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d115      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e07f      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e073      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06b      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f023 0203 	bic.w	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4936      	ldr	r1, [pc, #216]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff f94a 	bl	8000708 <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	e00a      	b.n	800148e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	f7ff f946 	bl	8000708 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e053      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 020c 	and.w	r2, r3, #12
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d1eb      	bne.n	8001478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d210      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4922      	ldr	r1, [pc, #136]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e032      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4916      	ldr	r1, [pc, #88]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490e      	ldr	r1, [pc, #56]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f821 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490a      	ldr	r1, [pc, #40]	; (8001548 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1cc>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_ClockConfig+0x1d0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f8a8 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000
 8001544:	40021000 	.word	0x40021000
 8001548:	08002a8c 	.word	0x08002a8c
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	b490      	push	{r4, r7}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_RCC_GetSysClockFreq+0xac>)
 800155c:	1d3c      	adds	r4, r7, #4
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001564:	f240 2301 	movw	r3, #513	; 0x201
 8001568:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d002      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x40>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x46>
 8001592:	e02b      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001596:	623b      	str	r3, [r7, #32]
      break;
 8001598:	e02b      	b.n	80015f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3328      	adds	r3, #40	; 0x28
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	0c5b      	lsrs	r3, r3, #17
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	3328      	adds	r3, #40	; 0x28
 80015c2:	443b      	add	r3, r7
 80015c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ce:	fb03 f202 	mul.w	r2, r3, r2
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	e004      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	623b      	str	r3, [r7, #32]
      break;
 80015ea:	e002      	b.n	80015f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ee:	623b      	str	r3, [r7, #32]
      break;
 80015f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015f2:	6a3b      	ldr	r3, [r7, #32]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc90      	pop	{r4, r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	08002a7c 	.word	0x08002a7c
 8001604:	40021000 	.word	0x40021000
 8001608:	007a1200 	.word	0x007a1200
 800160c:	003d0900 	.word	0x003d0900

08001610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_RCC_GetHCLKFreq+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000000 	.word	0x20000000

08001624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001628:	f7ff fff2 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4903      	ldr	r1, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	08002a9c 	.word	0x08002a9c

0800164c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001650:	f7ff ffde 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 8001654:	4602      	mov	r2, r0
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	0adb      	lsrs	r3, r3, #11
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	4903      	ldr	r1, [pc, #12]	; (8001670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001662:	5ccb      	ldrb	r3, [r1, r3]
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001668:	4618      	mov	r0, r3
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	08002a9c 	.word	0x08002a9c

08001674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <RCC_Delay+0x34>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <RCC_Delay+0x38>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0a5b      	lsrs	r3, r3, #9
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001690:	bf00      	nop
  }
  while (Delay --);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	60fa      	str	r2, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f9      	bne.n	8001690 <RCC_Delay+0x1c>
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000000 	.word	0x20000000
 80016ac:	10624dd3 	.word	0x10624dd3

080016b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e03f      	b.n	8001742 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ff4e 	bl	8000578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2224      	movs	r2, #36	; 0x24
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fc69 	bl	8001fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2220      	movs	r2, #32
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b08a      	sub	sp, #40	; 0x28
 800174e:	af02      	add	r7, sp, #8
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4613      	mov	r3, r2
 8001758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b20      	cmp	r3, #32
 8001768:	d17c      	bne.n	8001864 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_UART_Transmit+0x2c>
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e075      	b.n	8001866 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_UART_Transmit+0x3e>
 8001784:	2302      	movs	r3, #2
 8001786:	e06e      	b.n	8001866 <HAL_UART_Transmit+0x11c>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2221      	movs	r2, #33	; 0x21
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800179e:	f7fe ffb3 	bl	8000708 <HAL_GetTick>
 80017a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	88fa      	ldrh	r2, [r7, #6]
 80017a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	88fa      	ldrh	r2, [r7, #6]
 80017ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b8:	d108      	bne.n	80017cc <HAL_UART_Transmit+0x82>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	e003      	b.n	80017d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80017dc:	e02a      	b.n	8001834 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2200      	movs	r2, #0
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 fa55 	bl	8001c98 <UART_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e036      	b.n	8001866 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10b      	bne.n	8001816 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800180c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	3302      	adds	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	e007      	b.n	8001826 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3301      	adds	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800182a:	b29b      	uxth	r3, r3
 800182c:	3b01      	subs	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1cf      	bne.n	80017de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 fa25 	bl	8001c98 <UART_WaitOnFlagUntilTimeout>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e006      	b.n	8001866 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2220      	movs	r2, #32
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001864:	2302      	movs	r3, #2
  }
}
 8001866:	4618      	mov	r0, r3
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	4613      	mov	r3, r2
 800187a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b20      	cmp	r3, #32
 8001886:	d130      	bne.n	80018ea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_UART_Transmit_IT+0x26>
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e029      	b.n	80018ec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_UART_Transmit_IT+0x38>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e022      	b.n	80018ec <HAL_UART_Transmit_IT+0x7e>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2221      	movs	r2, #33	; 0x21
 80018ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10d      	bne.n	800194a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_UART_IRQHandler+0x52>
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f003 0320 	and.w	r3, r3, #32
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fa99 	bl	8001e7a <UART_Receive_IT>
      return;
 8001948:	e17b      	b.n	8001c42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80b1 	beq.w	8001ab4 <HAL_UART_IRQHandler+0x1bc>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <HAL_UART_IRQHandler+0x70>
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80a6 	beq.w	8001ab4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00a      	beq.n	8001988 <HAL_UART_IRQHandler+0x90>
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <HAL_UART_IRQHandler+0xb0>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f043 0202 	orr.w	r2, r3, #2
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <HAL_UART_IRQHandler+0xd0>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f043 0204 	orr.w	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00f      	beq.n	80019f2 <HAL_UART_IRQHandler+0xfa>
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d104      	bne.n	80019e6 <HAL_UART_IRQHandler+0xee>
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f043 0208 	orr.w	r2, r3, #8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 811e 	beq.w	8001c38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_UART_IRQHandler+0x11e>
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fa32 	bl	8001e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <HAL_UART_IRQHandler+0x146>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d031      	beq.n	8001aa2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f974 	bl	8001d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d023      	beq.n	8001a9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d013      	beq.n	8001a92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	4a76      	ldr	r2, [pc, #472]	; (8001c48 <HAL_UART_IRQHandler+0x350>)
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe ffbc 	bl	80009f4 <HAL_DMA_Abort_IT>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d016      	beq.n	8001ab0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a90:	e00e      	b.n	8001ab0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8ec 	bl	8001c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a98:	e00a      	b.n	8001ab0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f8e8 	bl	8001c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aa0:	e006      	b.n	8001ab0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8e4 	bl	8001c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001aae:	e0c3      	b.n	8001c38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ab0:	bf00      	nop
    return;
 8001ab2:	e0c1      	b.n	8001c38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 80a1 	bne.w	8001c00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 809b 	beq.w	8001c00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8095 	beq.w	8001c00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d04e      	beq.n	8001b98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001b04:	8a3b      	ldrh	r3, [r7, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8098 	beq.w	8001c3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b10:	8a3a      	ldrh	r2, [r7, #16]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	f080 8092 	bcs.w	8001c3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	8a3a      	ldrh	r2, [r7, #16]
 8001b1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d02b      	beq.n	8001b80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0210 	bic.w	r2, r2, #16
 8001b74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe feff 	bl	800097e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f876 	bl	8001c82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001b96:	e051      	b.n	8001c3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d047      	beq.n	8001c40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001bb0:	8a7b      	ldrh	r3, [r7, #18]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d044      	beq.n	8001c40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001bc4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0210 	bic.w	r2, r2, #16
 8001bf2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001bf4:	8a7b      	ldrh	r3, [r7, #18]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f842 	bl	8001c82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001bfe:	e01f      	b.n	8001c40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <HAL_UART_IRQHandler+0x324>
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8c9 	bl	8001dac <UART_Transmit_IT>
    return;
 8001c1a:	e012      	b.n	8001c42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00d      	beq.n	8001c42 <HAL_UART_IRQHandler+0x34a>
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f90a 	bl	8001e4a <UART_EndTransmit_IT>
    return;
 8001c36:	e004      	b.n	8001c42 <HAL_UART_IRQHandler+0x34a>
    return;
 8001c38:	bf00      	nop
 8001c3a:	e002      	b.n	8001c42 <HAL_UART_IRQHandler+0x34a>
      return;
 8001c3c:	bf00      	nop
 8001c3e:	e000      	b.n	8001c42 <HAL_UART_IRQHandler+0x34a>
      return;
 8001c40:	bf00      	nop
  }
}
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	08001d85 	.word	0x08001d85

08001c4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ca8:	e02c      	b.n	8001d04 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d028      	beq.n	8001d04 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cb8:	f7fe fd26 	bl	8000708 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d21d      	bcs.n	8001d04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cd6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e00f      	b.n	8001d24 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d0c3      	beq.n	8001caa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0210 	bic.w	r2, r2, #16
 8001d6a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff ff66 	bl	8001c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b21      	cmp	r3, #33	; 0x21
 8001dbe:	d13e      	bne.n	8001e3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc8:	d114      	bne.n	8001df4 <UART_Transmit_IT+0x48>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d110      	bne.n	8001df4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001de6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	1c9a      	adds	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	621a      	str	r2, [r3, #32]
 8001df2:	e008      	b.n	8001e06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	1c59      	adds	r1, r3, #1
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6211      	str	r1, [r2, #32]
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4619      	mov	r1, r3
 8001e14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
  }
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff feee 	bl	8001c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b22      	cmp	r3, #34	; 0x22
 8001e8c:	f040 8099 	bne.w	8001fc2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e98:	d117      	bne.n	8001eca <UART_Receive_IT+0x50>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d113      	bne.n	8001eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	1c9a      	adds	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ec8:	e026      	b.n	8001f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001edc:	d007      	beq.n	8001eee <UART_Receive_IT+0x74>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10a      	bne.n	8001efc <UART_Receive_IT+0x82>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e008      	b.n	8001f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4619      	mov	r1, r3
 8001f26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d148      	bne.n	8001fbe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0220 	bic.w	r2, r2, #32
 8001f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d123      	bne.n	8001fb4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0210 	bic.w	r2, r2, #16
 8001f80:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d10a      	bne.n	8001fa6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff fe68 	bl	8001c82 <HAL_UARTEx_RxEventCallback>
 8001fb2:	e002      	b.n	8001fba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fe52 	bl	8001c5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e002      	b.n	8001fc4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002006:	f023 030c 	bic.w	r3, r3, #12
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	430b      	orrs	r3, r1
 8002012:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <UART_SetConfig+0x114>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d103      	bne.n	800203c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002034:	f7ff fb0a 	bl	800164c <HAL_RCC_GetPCLK2Freq>
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	e002      	b.n	8002042 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800203c:	f7ff faf2 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8002040:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009a      	lsls	r2, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <UART_SetConfig+0x118>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	0119      	lsls	r1, r3, #4
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009a      	lsls	r2, r3, #2
 800206c:	441a      	add	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fbb2 f2f3 	udiv	r2, r2, r3
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <UART_SetConfig+0x118>)
 800207a:	fba3 0302 	umull	r0, r3, r3, r2
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2064      	movs	r0, #100	; 0x64
 8002082:	fb00 f303 	mul.w	r3, r0, r3
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	3332      	adds	r3, #50	; 0x32
 800208c:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <UART_SetConfig+0x118>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002098:	4419      	add	r1, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	009a      	lsls	r2, r3, #2
 80020a4:	441a      	add	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <UART_SetConfig+0x118>)
 80020b2:	fba3 0302 	umull	r0, r3, r3, r2
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2064      	movs	r0, #100	; 0x64
 80020ba:	fb00 f303 	mul.w	r3, r0, r3
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	3332      	adds	r3, #50	; 0x32
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <UART_SetConfig+0x118>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	f003 020f 	and.w	r2, r3, #15
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	440a      	add	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40013800 	.word	0x40013800
 80020e4:	51eb851f 	.word	0x51eb851f

080020e8 <__errno>:
 80020e8:	4b01      	ldr	r3, [pc, #4]	; (80020f0 <__errno+0x8>)
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2000000c 	.word	0x2000000c

080020f4 <__libc_init_array>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	2600      	movs	r6, #0
 80020f8:	4d0c      	ldr	r5, [pc, #48]	; (800212c <__libc_init_array+0x38>)
 80020fa:	4c0d      	ldr	r4, [pc, #52]	; (8002130 <__libc_init_array+0x3c>)
 80020fc:	1b64      	subs	r4, r4, r5
 80020fe:	10a4      	asrs	r4, r4, #2
 8002100:	42a6      	cmp	r6, r4
 8002102:	d109      	bne.n	8002118 <__libc_init_array+0x24>
 8002104:	f000 fc9c 	bl	8002a40 <_init>
 8002108:	2600      	movs	r6, #0
 800210a:	4d0a      	ldr	r5, [pc, #40]	; (8002134 <__libc_init_array+0x40>)
 800210c:	4c0a      	ldr	r4, [pc, #40]	; (8002138 <__libc_init_array+0x44>)
 800210e:	1b64      	subs	r4, r4, r5
 8002110:	10a4      	asrs	r4, r4, #2
 8002112:	42a6      	cmp	r6, r4
 8002114:	d105      	bne.n	8002122 <__libc_init_array+0x2e>
 8002116:	bd70      	pop	{r4, r5, r6, pc}
 8002118:	f855 3b04 	ldr.w	r3, [r5], #4
 800211c:	4798      	blx	r3
 800211e:	3601      	adds	r6, #1
 8002120:	e7ee      	b.n	8002100 <__libc_init_array+0xc>
 8002122:	f855 3b04 	ldr.w	r3, [r5], #4
 8002126:	4798      	blx	r3
 8002128:	3601      	adds	r6, #1
 800212a:	e7f2      	b.n	8002112 <__libc_init_array+0x1e>
 800212c:	08002ad8 	.word	0x08002ad8
 8002130:	08002ad8 	.word	0x08002ad8
 8002134:	08002ad8 	.word	0x08002ad8
 8002138:	08002adc 	.word	0x08002adc

0800213c <memset>:
 800213c:	4603      	mov	r3, r0
 800213e:	4402      	add	r2, r0
 8002140:	4293      	cmp	r3, r2
 8002142:	d100      	bne.n	8002146 <memset+0xa>
 8002144:	4770      	bx	lr
 8002146:	f803 1b01 	strb.w	r1, [r3], #1
 800214a:	e7f9      	b.n	8002140 <memset+0x4>

0800214c <siprintf>:
 800214c:	b40e      	push	{r1, r2, r3}
 800214e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002152:	b500      	push	{lr}
 8002154:	b09c      	sub	sp, #112	; 0x70
 8002156:	ab1d      	add	r3, sp, #116	; 0x74
 8002158:	9002      	str	r0, [sp, #8]
 800215a:	9006      	str	r0, [sp, #24]
 800215c:	9107      	str	r1, [sp, #28]
 800215e:	9104      	str	r1, [sp, #16]
 8002160:	4808      	ldr	r0, [pc, #32]	; (8002184 <siprintf+0x38>)
 8002162:	4909      	ldr	r1, [pc, #36]	; (8002188 <siprintf+0x3c>)
 8002164:	f853 2b04 	ldr.w	r2, [r3], #4
 8002168:	9105      	str	r1, [sp, #20]
 800216a:	6800      	ldr	r0, [r0, #0]
 800216c:	a902      	add	r1, sp, #8
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	f000 f868 	bl	8002244 <_svfiprintf_r>
 8002174:	2200      	movs	r2, #0
 8002176:	9b02      	ldr	r3, [sp, #8]
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	b01c      	add	sp, #112	; 0x70
 800217c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002180:	b003      	add	sp, #12
 8002182:	4770      	bx	lr
 8002184:	2000000c 	.word	0x2000000c
 8002188:	ffff0208 	.word	0xffff0208

0800218c <__ssputs_r>:
 800218c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002190:	688e      	ldr	r6, [r1, #8]
 8002192:	4682      	mov	sl, r0
 8002194:	429e      	cmp	r6, r3
 8002196:	460c      	mov	r4, r1
 8002198:	4690      	mov	r8, r2
 800219a:	461f      	mov	r7, r3
 800219c:	d838      	bhi.n	8002210 <__ssputs_r+0x84>
 800219e:	898a      	ldrh	r2, [r1, #12]
 80021a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80021a4:	d032      	beq.n	800220c <__ssputs_r+0x80>
 80021a6:	6825      	ldr	r5, [r4, #0]
 80021a8:	6909      	ldr	r1, [r1, #16]
 80021aa:	3301      	adds	r3, #1
 80021ac:	eba5 0901 	sub.w	r9, r5, r1
 80021b0:	6965      	ldr	r5, [r4, #20]
 80021b2:	444b      	add	r3, r9
 80021b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80021bc:	106d      	asrs	r5, r5, #1
 80021be:	429d      	cmp	r5, r3
 80021c0:	bf38      	it	cc
 80021c2:	461d      	movcc	r5, r3
 80021c4:	0553      	lsls	r3, r2, #21
 80021c6:	d531      	bpl.n	800222c <__ssputs_r+0xa0>
 80021c8:	4629      	mov	r1, r5
 80021ca:	f000 fb6f 	bl	80028ac <_malloc_r>
 80021ce:	4606      	mov	r6, r0
 80021d0:	b950      	cbnz	r0, 80021e8 <__ssputs_r+0x5c>
 80021d2:	230c      	movs	r3, #12
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f8ca 3000 	str.w	r3, [sl]
 80021dc:	89a3      	ldrh	r3, [r4, #12]
 80021de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e2:	81a3      	strh	r3, [r4, #12]
 80021e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021e8:	464a      	mov	r2, r9
 80021ea:	6921      	ldr	r1, [r4, #16]
 80021ec:	f000 face 	bl	800278c <memcpy>
 80021f0:	89a3      	ldrh	r3, [r4, #12]
 80021f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fa:	81a3      	strh	r3, [r4, #12]
 80021fc:	6126      	str	r6, [r4, #16]
 80021fe:	444e      	add	r6, r9
 8002200:	6026      	str	r6, [r4, #0]
 8002202:	463e      	mov	r6, r7
 8002204:	6165      	str	r5, [r4, #20]
 8002206:	eba5 0509 	sub.w	r5, r5, r9
 800220a:	60a5      	str	r5, [r4, #8]
 800220c:	42be      	cmp	r6, r7
 800220e:	d900      	bls.n	8002212 <__ssputs_r+0x86>
 8002210:	463e      	mov	r6, r7
 8002212:	4632      	mov	r2, r6
 8002214:	4641      	mov	r1, r8
 8002216:	6820      	ldr	r0, [r4, #0]
 8002218:	f000 fac6 	bl	80027a8 <memmove>
 800221c:	68a3      	ldr	r3, [r4, #8]
 800221e:	2000      	movs	r0, #0
 8002220:	1b9b      	subs	r3, r3, r6
 8002222:	60a3      	str	r3, [r4, #8]
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	4433      	add	r3, r6
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	e7db      	b.n	80021e4 <__ssputs_r+0x58>
 800222c:	462a      	mov	r2, r5
 800222e:	f000 fbb1 	bl	8002994 <_realloc_r>
 8002232:	4606      	mov	r6, r0
 8002234:	2800      	cmp	r0, #0
 8002236:	d1e1      	bne.n	80021fc <__ssputs_r+0x70>
 8002238:	4650      	mov	r0, sl
 800223a:	6921      	ldr	r1, [r4, #16]
 800223c:	f000 face 	bl	80027dc <_free_r>
 8002240:	e7c7      	b.n	80021d2 <__ssputs_r+0x46>
	...

08002244 <_svfiprintf_r>:
 8002244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002248:	4698      	mov	r8, r3
 800224a:	898b      	ldrh	r3, [r1, #12]
 800224c:	4607      	mov	r7, r0
 800224e:	061b      	lsls	r3, r3, #24
 8002250:	460d      	mov	r5, r1
 8002252:	4614      	mov	r4, r2
 8002254:	b09d      	sub	sp, #116	; 0x74
 8002256:	d50e      	bpl.n	8002276 <_svfiprintf_r+0x32>
 8002258:	690b      	ldr	r3, [r1, #16]
 800225a:	b963      	cbnz	r3, 8002276 <_svfiprintf_r+0x32>
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	f000 fb25 	bl	80028ac <_malloc_r>
 8002262:	6028      	str	r0, [r5, #0]
 8002264:	6128      	str	r0, [r5, #16]
 8002266:	b920      	cbnz	r0, 8002272 <_svfiprintf_r+0x2e>
 8002268:	230c      	movs	r3, #12
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	e0d1      	b.n	8002416 <_svfiprintf_r+0x1d2>
 8002272:	2340      	movs	r3, #64	; 0x40
 8002274:	616b      	str	r3, [r5, #20]
 8002276:	2300      	movs	r3, #0
 8002278:	9309      	str	r3, [sp, #36]	; 0x24
 800227a:	2320      	movs	r3, #32
 800227c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002280:	2330      	movs	r3, #48	; 0x30
 8002282:	f04f 0901 	mov.w	r9, #1
 8002286:	f8cd 800c 	str.w	r8, [sp, #12]
 800228a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002430 <_svfiprintf_r+0x1ec>
 800228e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002292:	4623      	mov	r3, r4
 8002294:	469a      	mov	sl, r3
 8002296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800229a:	b10a      	cbz	r2, 80022a0 <_svfiprintf_r+0x5c>
 800229c:	2a25      	cmp	r2, #37	; 0x25
 800229e:	d1f9      	bne.n	8002294 <_svfiprintf_r+0x50>
 80022a0:	ebba 0b04 	subs.w	fp, sl, r4
 80022a4:	d00b      	beq.n	80022be <_svfiprintf_r+0x7a>
 80022a6:	465b      	mov	r3, fp
 80022a8:	4622      	mov	r2, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	4638      	mov	r0, r7
 80022ae:	f7ff ff6d 	bl	800218c <__ssputs_r>
 80022b2:	3001      	adds	r0, #1
 80022b4:	f000 80aa 	beq.w	800240c <_svfiprintf_r+0x1c8>
 80022b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022ba:	445a      	add	r2, fp
 80022bc:	9209      	str	r2, [sp, #36]	; 0x24
 80022be:	f89a 3000 	ldrb.w	r3, [sl]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80a2 	beq.w	800240c <_svfiprintf_r+0x1c8>
 80022c8:	2300      	movs	r3, #0
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295
 80022ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022d2:	f10a 0a01 	add.w	sl, sl, #1
 80022d6:	9304      	str	r3, [sp, #16]
 80022d8:	9307      	str	r3, [sp, #28]
 80022da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022de:	931a      	str	r3, [sp, #104]	; 0x68
 80022e0:	4654      	mov	r4, sl
 80022e2:	2205      	movs	r2, #5
 80022e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022e8:	4851      	ldr	r0, [pc, #324]	; (8002430 <_svfiprintf_r+0x1ec>)
 80022ea:	f000 fa41 	bl	8002770 <memchr>
 80022ee:	9a04      	ldr	r2, [sp, #16]
 80022f0:	b9d8      	cbnz	r0, 800232a <_svfiprintf_r+0xe6>
 80022f2:	06d0      	lsls	r0, r2, #27
 80022f4:	bf44      	itt	mi
 80022f6:	2320      	movmi	r3, #32
 80022f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022fc:	0711      	lsls	r1, r2, #28
 80022fe:	bf44      	itt	mi
 8002300:	232b      	movmi	r3, #43	; 0x2b
 8002302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002306:	f89a 3000 	ldrb.w	r3, [sl]
 800230a:	2b2a      	cmp	r3, #42	; 0x2a
 800230c:	d015      	beq.n	800233a <_svfiprintf_r+0xf6>
 800230e:	4654      	mov	r4, sl
 8002310:	2000      	movs	r0, #0
 8002312:	f04f 0c0a 	mov.w	ip, #10
 8002316:	9a07      	ldr	r2, [sp, #28]
 8002318:	4621      	mov	r1, r4
 800231a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800231e:	3b30      	subs	r3, #48	; 0x30
 8002320:	2b09      	cmp	r3, #9
 8002322:	d94e      	bls.n	80023c2 <_svfiprintf_r+0x17e>
 8002324:	b1b0      	cbz	r0, 8002354 <_svfiprintf_r+0x110>
 8002326:	9207      	str	r2, [sp, #28]
 8002328:	e014      	b.n	8002354 <_svfiprintf_r+0x110>
 800232a:	eba0 0308 	sub.w	r3, r0, r8
 800232e:	fa09 f303 	lsl.w	r3, r9, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	46a2      	mov	sl, r4
 8002336:	9304      	str	r3, [sp, #16]
 8002338:	e7d2      	b.n	80022e0 <_svfiprintf_r+0x9c>
 800233a:	9b03      	ldr	r3, [sp, #12]
 800233c:	1d19      	adds	r1, r3, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	9103      	str	r1, [sp, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	bfbb      	ittet	lt
 8002346:	425b      	neglt	r3, r3
 8002348:	f042 0202 	orrlt.w	r2, r2, #2
 800234c:	9307      	strge	r3, [sp, #28]
 800234e:	9307      	strlt	r3, [sp, #28]
 8002350:	bfb8      	it	lt
 8002352:	9204      	strlt	r2, [sp, #16]
 8002354:	7823      	ldrb	r3, [r4, #0]
 8002356:	2b2e      	cmp	r3, #46	; 0x2e
 8002358:	d10c      	bne.n	8002374 <_svfiprintf_r+0x130>
 800235a:	7863      	ldrb	r3, [r4, #1]
 800235c:	2b2a      	cmp	r3, #42	; 0x2a
 800235e:	d135      	bne.n	80023cc <_svfiprintf_r+0x188>
 8002360:	9b03      	ldr	r3, [sp, #12]
 8002362:	3402      	adds	r4, #2
 8002364:	1d1a      	adds	r2, r3, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	9203      	str	r2, [sp, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	bfb8      	it	lt
 800236e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002372:	9305      	str	r3, [sp, #20]
 8002374:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002434 <_svfiprintf_r+0x1f0>
 8002378:	2203      	movs	r2, #3
 800237a:	4650      	mov	r0, sl
 800237c:	7821      	ldrb	r1, [r4, #0]
 800237e:	f000 f9f7 	bl	8002770 <memchr>
 8002382:	b140      	cbz	r0, 8002396 <_svfiprintf_r+0x152>
 8002384:	2340      	movs	r3, #64	; 0x40
 8002386:	eba0 000a 	sub.w	r0, r0, sl
 800238a:	fa03 f000 	lsl.w	r0, r3, r0
 800238e:	9b04      	ldr	r3, [sp, #16]
 8002390:	3401      	adds	r4, #1
 8002392:	4303      	orrs	r3, r0
 8002394:	9304      	str	r3, [sp, #16]
 8002396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800239a:	2206      	movs	r2, #6
 800239c:	4826      	ldr	r0, [pc, #152]	; (8002438 <_svfiprintf_r+0x1f4>)
 800239e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023a2:	f000 f9e5 	bl	8002770 <memchr>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d038      	beq.n	800241c <_svfiprintf_r+0x1d8>
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <_svfiprintf_r+0x1f8>)
 80023ac:	bb1b      	cbnz	r3, 80023f6 <_svfiprintf_r+0x1b2>
 80023ae:	9b03      	ldr	r3, [sp, #12]
 80023b0:	3307      	adds	r3, #7
 80023b2:	f023 0307 	bic.w	r3, r3, #7
 80023b6:	3308      	adds	r3, #8
 80023b8:	9303      	str	r3, [sp, #12]
 80023ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023bc:	4433      	add	r3, r6
 80023be:	9309      	str	r3, [sp, #36]	; 0x24
 80023c0:	e767      	b.n	8002292 <_svfiprintf_r+0x4e>
 80023c2:	460c      	mov	r4, r1
 80023c4:	2001      	movs	r0, #1
 80023c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80023ca:	e7a5      	b.n	8002318 <_svfiprintf_r+0xd4>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f04f 0c0a 	mov.w	ip, #10
 80023d2:	4619      	mov	r1, r3
 80023d4:	3401      	adds	r4, #1
 80023d6:	9305      	str	r3, [sp, #20]
 80023d8:	4620      	mov	r0, r4
 80023da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023de:	3a30      	subs	r2, #48	; 0x30
 80023e0:	2a09      	cmp	r2, #9
 80023e2:	d903      	bls.n	80023ec <_svfiprintf_r+0x1a8>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0c5      	beq.n	8002374 <_svfiprintf_r+0x130>
 80023e8:	9105      	str	r1, [sp, #20]
 80023ea:	e7c3      	b.n	8002374 <_svfiprintf_r+0x130>
 80023ec:	4604      	mov	r4, r0
 80023ee:	2301      	movs	r3, #1
 80023f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80023f4:	e7f0      	b.n	80023d8 <_svfiprintf_r+0x194>
 80023f6:	ab03      	add	r3, sp, #12
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	462a      	mov	r2, r5
 80023fc:	4638      	mov	r0, r7
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_svfiprintf_r+0x1fc>)
 8002400:	a904      	add	r1, sp, #16
 8002402:	f3af 8000 	nop.w
 8002406:	1c42      	adds	r2, r0, #1
 8002408:	4606      	mov	r6, r0
 800240a:	d1d6      	bne.n	80023ba <_svfiprintf_r+0x176>
 800240c:	89ab      	ldrh	r3, [r5, #12]
 800240e:	065b      	lsls	r3, r3, #25
 8002410:	f53f af2c 	bmi.w	800226c <_svfiprintf_r+0x28>
 8002414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002416:	b01d      	add	sp, #116	; 0x74
 8002418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800241c:	ab03      	add	r3, sp, #12
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	462a      	mov	r2, r5
 8002422:	4638      	mov	r0, r7
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <_svfiprintf_r+0x1fc>)
 8002426:	a904      	add	r1, sp, #16
 8002428:	f000 f87c 	bl	8002524 <_printf_i>
 800242c:	e7eb      	b.n	8002406 <_svfiprintf_r+0x1c2>
 800242e:	bf00      	nop
 8002430:	08002aa4 	.word	0x08002aa4
 8002434:	08002aaa 	.word	0x08002aaa
 8002438:	08002aae 	.word	0x08002aae
 800243c:	00000000 	.word	0x00000000
 8002440:	0800218d 	.word	0x0800218d

08002444 <_printf_common>:
 8002444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002448:	4616      	mov	r6, r2
 800244a:	4699      	mov	r9, r3
 800244c:	688a      	ldr	r2, [r1, #8]
 800244e:	690b      	ldr	r3, [r1, #16]
 8002450:	4607      	mov	r7, r0
 8002452:	4293      	cmp	r3, r2
 8002454:	bfb8      	it	lt
 8002456:	4613      	movlt	r3, r2
 8002458:	6033      	str	r3, [r6, #0]
 800245a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800245e:	460c      	mov	r4, r1
 8002460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002464:	b10a      	cbz	r2, 800246a <_printf_common+0x26>
 8002466:	3301      	adds	r3, #1
 8002468:	6033      	str	r3, [r6, #0]
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	0699      	lsls	r1, r3, #26
 800246e:	bf42      	ittt	mi
 8002470:	6833      	ldrmi	r3, [r6, #0]
 8002472:	3302      	addmi	r3, #2
 8002474:	6033      	strmi	r3, [r6, #0]
 8002476:	6825      	ldr	r5, [r4, #0]
 8002478:	f015 0506 	ands.w	r5, r5, #6
 800247c:	d106      	bne.n	800248c <_printf_common+0x48>
 800247e:	f104 0a19 	add.w	sl, r4, #25
 8002482:	68e3      	ldr	r3, [r4, #12]
 8002484:	6832      	ldr	r2, [r6, #0]
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	42ab      	cmp	r3, r5
 800248a:	dc28      	bgt.n	80024de <_printf_common+0x9a>
 800248c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002490:	1e13      	subs	r3, r2, #0
 8002492:	6822      	ldr	r2, [r4, #0]
 8002494:	bf18      	it	ne
 8002496:	2301      	movne	r3, #1
 8002498:	0692      	lsls	r2, r2, #26
 800249a:	d42d      	bmi.n	80024f8 <_printf_common+0xb4>
 800249c:	4649      	mov	r1, r9
 800249e:	4638      	mov	r0, r7
 80024a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024a4:	47c0      	blx	r8
 80024a6:	3001      	adds	r0, #1
 80024a8:	d020      	beq.n	80024ec <_printf_common+0xa8>
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	68e5      	ldr	r5, [r4, #12]
 80024ae:	f003 0306 	and.w	r3, r3, #6
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf18      	it	ne
 80024b6:	2500      	movne	r5, #0
 80024b8:	6832      	ldr	r2, [r6, #0]
 80024ba:	f04f 0600 	mov.w	r6, #0
 80024be:	68a3      	ldr	r3, [r4, #8]
 80024c0:	bf08      	it	eq
 80024c2:	1aad      	subeq	r5, r5, r2
 80024c4:	6922      	ldr	r2, [r4, #16]
 80024c6:	bf08      	it	eq
 80024c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bfc4      	itt	gt
 80024d0:	1a9b      	subgt	r3, r3, r2
 80024d2:	18ed      	addgt	r5, r5, r3
 80024d4:	341a      	adds	r4, #26
 80024d6:	42b5      	cmp	r5, r6
 80024d8:	d11a      	bne.n	8002510 <_printf_common+0xcc>
 80024da:	2000      	movs	r0, #0
 80024dc:	e008      	b.n	80024f0 <_printf_common+0xac>
 80024de:	2301      	movs	r3, #1
 80024e0:	4652      	mov	r2, sl
 80024e2:	4649      	mov	r1, r9
 80024e4:	4638      	mov	r0, r7
 80024e6:	47c0      	blx	r8
 80024e8:	3001      	adds	r0, #1
 80024ea:	d103      	bne.n	80024f4 <_printf_common+0xb0>
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f4:	3501      	adds	r5, #1
 80024f6:	e7c4      	b.n	8002482 <_printf_common+0x3e>
 80024f8:	2030      	movs	r0, #48	; 0x30
 80024fa:	18e1      	adds	r1, r4, r3
 80024fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002506:	4422      	add	r2, r4
 8002508:	3302      	adds	r3, #2
 800250a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800250e:	e7c5      	b.n	800249c <_printf_common+0x58>
 8002510:	2301      	movs	r3, #1
 8002512:	4622      	mov	r2, r4
 8002514:	4649      	mov	r1, r9
 8002516:	4638      	mov	r0, r7
 8002518:	47c0      	blx	r8
 800251a:	3001      	adds	r0, #1
 800251c:	d0e6      	beq.n	80024ec <_printf_common+0xa8>
 800251e:	3601      	adds	r6, #1
 8002520:	e7d9      	b.n	80024d6 <_printf_common+0x92>
	...

08002524 <_printf_i>:
 8002524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002528:	7e0f      	ldrb	r7, [r1, #24]
 800252a:	4691      	mov	r9, r2
 800252c:	2f78      	cmp	r7, #120	; 0x78
 800252e:	4680      	mov	r8, r0
 8002530:	460c      	mov	r4, r1
 8002532:	469a      	mov	sl, r3
 8002534:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800253a:	d807      	bhi.n	800254c <_printf_i+0x28>
 800253c:	2f62      	cmp	r7, #98	; 0x62
 800253e:	d80a      	bhi.n	8002556 <_printf_i+0x32>
 8002540:	2f00      	cmp	r7, #0
 8002542:	f000 80d9 	beq.w	80026f8 <_printf_i+0x1d4>
 8002546:	2f58      	cmp	r7, #88	; 0x58
 8002548:	f000 80a4 	beq.w	8002694 <_printf_i+0x170>
 800254c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002554:	e03a      	b.n	80025cc <_printf_i+0xa8>
 8002556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800255a:	2b15      	cmp	r3, #21
 800255c:	d8f6      	bhi.n	800254c <_printf_i+0x28>
 800255e:	a101      	add	r1, pc, #4	; (adr r1, 8002564 <_printf_i+0x40>)
 8002560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002564:	080025bd 	.word	0x080025bd
 8002568:	080025d1 	.word	0x080025d1
 800256c:	0800254d 	.word	0x0800254d
 8002570:	0800254d 	.word	0x0800254d
 8002574:	0800254d 	.word	0x0800254d
 8002578:	0800254d 	.word	0x0800254d
 800257c:	080025d1 	.word	0x080025d1
 8002580:	0800254d 	.word	0x0800254d
 8002584:	0800254d 	.word	0x0800254d
 8002588:	0800254d 	.word	0x0800254d
 800258c:	0800254d 	.word	0x0800254d
 8002590:	080026df 	.word	0x080026df
 8002594:	08002601 	.word	0x08002601
 8002598:	080026c1 	.word	0x080026c1
 800259c:	0800254d 	.word	0x0800254d
 80025a0:	0800254d 	.word	0x0800254d
 80025a4:	08002701 	.word	0x08002701
 80025a8:	0800254d 	.word	0x0800254d
 80025ac:	08002601 	.word	0x08002601
 80025b0:	0800254d 	.word	0x0800254d
 80025b4:	0800254d 	.word	0x0800254d
 80025b8:	080026c9 	.word	0x080026c9
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	1d1a      	adds	r2, r3, #4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	602a      	str	r2, [r5, #0]
 80025c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0a4      	b.n	800271a <_printf_i+0x1f6>
 80025d0:	6820      	ldr	r0, [r4, #0]
 80025d2:	6829      	ldr	r1, [r5, #0]
 80025d4:	0606      	lsls	r6, r0, #24
 80025d6:	f101 0304 	add.w	r3, r1, #4
 80025da:	d50a      	bpl.n	80025f2 <_printf_i+0xce>
 80025dc:	680e      	ldr	r6, [r1, #0]
 80025de:	602b      	str	r3, [r5, #0]
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	da03      	bge.n	80025ec <_printf_i+0xc8>
 80025e4:	232d      	movs	r3, #45	; 0x2d
 80025e6:	4276      	negs	r6, r6
 80025e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ec:	230a      	movs	r3, #10
 80025ee:	485e      	ldr	r0, [pc, #376]	; (8002768 <_printf_i+0x244>)
 80025f0:	e019      	b.n	8002626 <_printf_i+0x102>
 80025f2:	680e      	ldr	r6, [r1, #0]
 80025f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025f8:	602b      	str	r3, [r5, #0]
 80025fa:	bf18      	it	ne
 80025fc:	b236      	sxthne	r6, r6
 80025fe:	e7ef      	b.n	80025e0 <_printf_i+0xbc>
 8002600:	682b      	ldr	r3, [r5, #0]
 8002602:	6820      	ldr	r0, [r4, #0]
 8002604:	1d19      	adds	r1, r3, #4
 8002606:	6029      	str	r1, [r5, #0]
 8002608:	0601      	lsls	r1, r0, #24
 800260a:	d501      	bpl.n	8002610 <_printf_i+0xec>
 800260c:	681e      	ldr	r6, [r3, #0]
 800260e:	e002      	b.n	8002616 <_printf_i+0xf2>
 8002610:	0646      	lsls	r6, r0, #25
 8002612:	d5fb      	bpl.n	800260c <_printf_i+0xe8>
 8002614:	881e      	ldrh	r6, [r3, #0]
 8002616:	2f6f      	cmp	r7, #111	; 0x6f
 8002618:	bf0c      	ite	eq
 800261a:	2308      	moveq	r3, #8
 800261c:	230a      	movne	r3, #10
 800261e:	4852      	ldr	r0, [pc, #328]	; (8002768 <_printf_i+0x244>)
 8002620:	2100      	movs	r1, #0
 8002622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002626:	6865      	ldr	r5, [r4, #4]
 8002628:	2d00      	cmp	r5, #0
 800262a:	bfa8      	it	ge
 800262c:	6821      	ldrge	r1, [r4, #0]
 800262e:	60a5      	str	r5, [r4, #8]
 8002630:	bfa4      	itt	ge
 8002632:	f021 0104 	bicge.w	r1, r1, #4
 8002636:	6021      	strge	r1, [r4, #0]
 8002638:	b90e      	cbnz	r6, 800263e <_printf_i+0x11a>
 800263a:	2d00      	cmp	r5, #0
 800263c:	d04d      	beq.n	80026da <_printf_i+0x1b6>
 800263e:	4615      	mov	r5, r2
 8002640:	fbb6 f1f3 	udiv	r1, r6, r3
 8002644:	fb03 6711 	mls	r7, r3, r1, r6
 8002648:	5dc7      	ldrb	r7, [r0, r7]
 800264a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800264e:	4637      	mov	r7, r6
 8002650:	42bb      	cmp	r3, r7
 8002652:	460e      	mov	r6, r1
 8002654:	d9f4      	bls.n	8002640 <_printf_i+0x11c>
 8002656:	2b08      	cmp	r3, #8
 8002658:	d10b      	bne.n	8002672 <_printf_i+0x14e>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	07de      	lsls	r6, r3, #31
 800265e:	d508      	bpl.n	8002672 <_printf_i+0x14e>
 8002660:	6923      	ldr	r3, [r4, #16]
 8002662:	6861      	ldr	r1, [r4, #4]
 8002664:	4299      	cmp	r1, r3
 8002666:	bfde      	ittt	le
 8002668:	2330      	movle	r3, #48	; 0x30
 800266a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800266e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002672:	1b52      	subs	r2, r2, r5
 8002674:	6122      	str	r2, [r4, #16]
 8002676:	464b      	mov	r3, r9
 8002678:	4621      	mov	r1, r4
 800267a:	4640      	mov	r0, r8
 800267c:	f8cd a000 	str.w	sl, [sp]
 8002680:	aa03      	add	r2, sp, #12
 8002682:	f7ff fedf 	bl	8002444 <_printf_common>
 8002686:	3001      	adds	r0, #1
 8002688:	d14c      	bne.n	8002724 <_printf_i+0x200>
 800268a:	f04f 30ff 	mov.w	r0, #4294967295
 800268e:	b004      	add	sp, #16
 8002690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002694:	4834      	ldr	r0, [pc, #208]	; (8002768 <_printf_i+0x244>)
 8002696:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800269a:	6829      	ldr	r1, [r5, #0]
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	f851 6b04 	ldr.w	r6, [r1], #4
 80026a2:	6029      	str	r1, [r5, #0]
 80026a4:	061d      	lsls	r5, r3, #24
 80026a6:	d514      	bpl.n	80026d2 <_printf_i+0x1ae>
 80026a8:	07df      	lsls	r7, r3, #31
 80026aa:	bf44      	itt	mi
 80026ac:	f043 0320 	orrmi.w	r3, r3, #32
 80026b0:	6023      	strmi	r3, [r4, #0]
 80026b2:	b91e      	cbnz	r6, 80026bc <_printf_i+0x198>
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	f023 0320 	bic.w	r3, r3, #32
 80026ba:	6023      	str	r3, [r4, #0]
 80026bc:	2310      	movs	r3, #16
 80026be:	e7af      	b.n	8002620 <_printf_i+0xfc>
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	6023      	str	r3, [r4, #0]
 80026c8:	2378      	movs	r3, #120	; 0x78
 80026ca:	4828      	ldr	r0, [pc, #160]	; (800276c <_printf_i+0x248>)
 80026cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026d0:	e7e3      	b.n	800269a <_printf_i+0x176>
 80026d2:	0659      	lsls	r1, r3, #25
 80026d4:	bf48      	it	mi
 80026d6:	b2b6      	uxthmi	r6, r6
 80026d8:	e7e6      	b.n	80026a8 <_printf_i+0x184>
 80026da:	4615      	mov	r5, r2
 80026dc:	e7bb      	b.n	8002656 <_printf_i+0x132>
 80026de:	682b      	ldr	r3, [r5, #0]
 80026e0:	6826      	ldr	r6, [r4, #0]
 80026e2:	1d18      	adds	r0, r3, #4
 80026e4:	6961      	ldr	r1, [r4, #20]
 80026e6:	6028      	str	r0, [r5, #0]
 80026e8:	0635      	lsls	r5, r6, #24
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	d501      	bpl.n	80026f2 <_printf_i+0x1ce>
 80026ee:	6019      	str	r1, [r3, #0]
 80026f0:	e002      	b.n	80026f8 <_printf_i+0x1d4>
 80026f2:	0670      	lsls	r0, r6, #25
 80026f4:	d5fb      	bpl.n	80026ee <_printf_i+0x1ca>
 80026f6:	8019      	strh	r1, [r3, #0]
 80026f8:	2300      	movs	r3, #0
 80026fa:	4615      	mov	r5, r2
 80026fc:	6123      	str	r3, [r4, #16]
 80026fe:	e7ba      	b.n	8002676 <_printf_i+0x152>
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	2100      	movs	r1, #0
 8002704:	1d1a      	adds	r2, r3, #4
 8002706:	602a      	str	r2, [r5, #0]
 8002708:	681d      	ldr	r5, [r3, #0]
 800270a:	6862      	ldr	r2, [r4, #4]
 800270c:	4628      	mov	r0, r5
 800270e:	f000 f82f 	bl	8002770 <memchr>
 8002712:	b108      	cbz	r0, 8002718 <_printf_i+0x1f4>
 8002714:	1b40      	subs	r0, r0, r5
 8002716:	6060      	str	r0, [r4, #4]
 8002718:	6863      	ldr	r3, [r4, #4]
 800271a:	6123      	str	r3, [r4, #16]
 800271c:	2300      	movs	r3, #0
 800271e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002722:	e7a8      	b.n	8002676 <_printf_i+0x152>
 8002724:	462a      	mov	r2, r5
 8002726:	4649      	mov	r1, r9
 8002728:	4640      	mov	r0, r8
 800272a:	6923      	ldr	r3, [r4, #16]
 800272c:	47d0      	blx	sl
 800272e:	3001      	adds	r0, #1
 8002730:	d0ab      	beq.n	800268a <_printf_i+0x166>
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	079b      	lsls	r3, r3, #30
 8002736:	d413      	bmi.n	8002760 <_printf_i+0x23c>
 8002738:	68e0      	ldr	r0, [r4, #12]
 800273a:	9b03      	ldr	r3, [sp, #12]
 800273c:	4298      	cmp	r0, r3
 800273e:	bfb8      	it	lt
 8002740:	4618      	movlt	r0, r3
 8002742:	e7a4      	b.n	800268e <_printf_i+0x16a>
 8002744:	2301      	movs	r3, #1
 8002746:	4632      	mov	r2, r6
 8002748:	4649      	mov	r1, r9
 800274a:	4640      	mov	r0, r8
 800274c:	47d0      	blx	sl
 800274e:	3001      	adds	r0, #1
 8002750:	d09b      	beq.n	800268a <_printf_i+0x166>
 8002752:	3501      	adds	r5, #1
 8002754:	68e3      	ldr	r3, [r4, #12]
 8002756:	9903      	ldr	r1, [sp, #12]
 8002758:	1a5b      	subs	r3, r3, r1
 800275a:	42ab      	cmp	r3, r5
 800275c:	dcf2      	bgt.n	8002744 <_printf_i+0x220>
 800275e:	e7eb      	b.n	8002738 <_printf_i+0x214>
 8002760:	2500      	movs	r5, #0
 8002762:	f104 0619 	add.w	r6, r4, #25
 8002766:	e7f5      	b.n	8002754 <_printf_i+0x230>
 8002768:	08002ab5 	.word	0x08002ab5
 800276c:	08002ac6 	.word	0x08002ac6

08002770 <memchr>:
 8002770:	4603      	mov	r3, r0
 8002772:	b510      	push	{r4, lr}
 8002774:	b2c9      	uxtb	r1, r1
 8002776:	4402      	add	r2, r0
 8002778:	4293      	cmp	r3, r2
 800277a:	4618      	mov	r0, r3
 800277c:	d101      	bne.n	8002782 <memchr+0x12>
 800277e:	2000      	movs	r0, #0
 8002780:	e003      	b.n	800278a <memchr+0x1a>
 8002782:	7804      	ldrb	r4, [r0, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	428c      	cmp	r4, r1
 8002788:	d1f6      	bne.n	8002778 <memchr+0x8>
 800278a:	bd10      	pop	{r4, pc}

0800278c <memcpy>:
 800278c:	440a      	add	r2, r1
 800278e:	4291      	cmp	r1, r2
 8002790:	f100 33ff 	add.w	r3, r0, #4294967295
 8002794:	d100      	bne.n	8002798 <memcpy+0xc>
 8002796:	4770      	bx	lr
 8002798:	b510      	push	{r4, lr}
 800279a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800279e:	4291      	cmp	r1, r2
 80027a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027a4:	d1f9      	bne.n	800279a <memcpy+0xe>
 80027a6:	bd10      	pop	{r4, pc}

080027a8 <memmove>:
 80027a8:	4288      	cmp	r0, r1
 80027aa:	b510      	push	{r4, lr}
 80027ac:	eb01 0402 	add.w	r4, r1, r2
 80027b0:	d902      	bls.n	80027b8 <memmove+0x10>
 80027b2:	4284      	cmp	r4, r0
 80027b4:	4623      	mov	r3, r4
 80027b6:	d807      	bhi.n	80027c8 <memmove+0x20>
 80027b8:	1e43      	subs	r3, r0, #1
 80027ba:	42a1      	cmp	r1, r4
 80027bc:	d008      	beq.n	80027d0 <memmove+0x28>
 80027be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027c6:	e7f8      	b.n	80027ba <memmove+0x12>
 80027c8:	4601      	mov	r1, r0
 80027ca:	4402      	add	r2, r0
 80027cc:	428a      	cmp	r2, r1
 80027ce:	d100      	bne.n	80027d2 <memmove+0x2a>
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80027d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80027da:	e7f7      	b.n	80027cc <memmove+0x24>

080027dc <_free_r>:
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4605      	mov	r5, r0
 80027e0:	2900      	cmp	r1, #0
 80027e2:	d040      	beq.n	8002866 <_free_r+0x8a>
 80027e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027e8:	1f0c      	subs	r4, r1, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bfb8      	it	lt
 80027ee:	18e4      	addlt	r4, r4, r3
 80027f0:	f000 f910 	bl	8002a14 <__malloc_lock>
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <_free_r+0x8c>)
 80027f6:	6813      	ldr	r3, [r2, #0]
 80027f8:	b933      	cbnz	r3, 8002808 <_free_r+0x2c>
 80027fa:	6063      	str	r3, [r4, #4]
 80027fc:	6014      	str	r4, [r2, #0]
 80027fe:	4628      	mov	r0, r5
 8002800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002804:	f000 b90c 	b.w	8002a20 <__malloc_unlock>
 8002808:	42a3      	cmp	r3, r4
 800280a:	d908      	bls.n	800281e <_free_r+0x42>
 800280c:	6820      	ldr	r0, [r4, #0]
 800280e:	1821      	adds	r1, r4, r0
 8002810:	428b      	cmp	r3, r1
 8002812:	bf01      	itttt	eq
 8002814:	6819      	ldreq	r1, [r3, #0]
 8002816:	685b      	ldreq	r3, [r3, #4]
 8002818:	1809      	addeq	r1, r1, r0
 800281a:	6021      	streq	r1, [r4, #0]
 800281c:	e7ed      	b.n	80027fa <_free_r+0x1e>
 800281e:	461a      	mov	r2, r3
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	b10b      	cbz	r3, 8002828 <_free_r+0x4c>
 8002824:	42a3      	cmp	r3, r4
 8002826:	d9fa      	bls.n	800281e <_free_r+0x42>
 8002828:	6811      	ldr	r1, [r2, #0]
 800282a:	1850      	adds	r0, r2, r1
 800282c:	42a0      	cmp	r0, r4
 800282e:	d10b      	bne.n	8002848 <_free_r+0x6c>
 8002830:	6820      	ldr	r0, [r4, #0]
 8002832:	4401      	add	r1, r0
 8002834:	1850      	adds	r0, r2, r1
 8002836:	4283      	cmp	r3, r0
 8002838:	6011      	str	r1, [r2, #0]
 800283a:	d1e0      	bne.n	80027fe <_free_r+0x22>
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4401      	add	r1, r0
 8002842:	6011      	str	r1, [r2, #0]
 8002844:	6053      	str	r3, [r2, #4]
 8002846:	e7da      	b.n	80027fe <_free_r+0x22>
 8002848:	d902      	bls.n	8002850 <_free_r+0x74>
 800284a:	230c      	movs	r3, #12
 800284c:	602b      	str	r3, [r5, #0]
 800284e:	e7d6      	b.n	80027fe <_free_r+0x22>
 8002850:	6820      	ldr	r0, [r4, #0]
 8002852:	1821      	adds	r1, r4, r0
 8002854:	428b      	cmp	r3, r1
 8002856:	bf01      	itttt	eq
 8002858:	6819      	ldreq	r1, [r3, #0]
 800285a:	685b      	ldreq	r3, [r3, #4]
 800285c:	1809      	addeq	r1, r1, r0
 800285e:	6021      	streq	r1, [r4, #0]
 8002860:	6063      	str	r3, [r4, #4]
 8002862:	6054      	str	r4, [r2, #4]
 8002864:	e7cb      	b.n	80027fe <_free_r+0x22>
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	20000128 	.word	0x20000128

0800286c <sbrk_aligned>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	4e0e      	ldr	r6, [pc, #56]	; (80028a8 <sbrk_aligned+0x3c>)
 8002870:	460c      	mov	r4, r1
 8002872:	6831      	ldr	r1, [r6, #0]
 8002874:	4605      	mov	r5, r0
 8002876:	b911      	cbnz	r1, 800287e <sbrk_aligned+0x12>
 8002878:	f000 f8bc 	bl	80029f4 <_sbrk_r>
 800287c:	6030      	str	r0, [r6, #0]
 800287e:	4621      	mov	r1, r4
 8002880:	4628      	mov	r0, r5
 8002882:	f000 f8b7 	bl	80029f4 <_sbrk_r>
 8002886:	1c43      	adds	r3, r0, #1
 8002888:	d00a      	beq.n	80028a0 <sbrk_aligned+0x34>
 800288a:	1cc4      	adds	r4, r0, #3
 800288c:	f024 0403 	bic.w	r4, r4, #3
 8002890:	42a0      	cmp	r0, r4
 8002892:	d007      	beq.n	80028a4 <sbrk_aligned+0x38>
 8002894:	1a21      	subs	r1, r4, r0
 8002896:	4628      	mov	r0, r5
 8002898:	f000 f8ac 	bl	80029f4 <_sbrk_r>
 800289c:	3001      	adds	r0, #1
 800289e:	d101      	bne.n	80028a4 <sbrk_aligned+0x38>
 80028a0:	f04f 34ff 	mov.w	r4, #4294967295
 80028a4:	4620      	mov	r0, r4
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
 80028a8:	2000012c 	.word	0x2000012c

080028ac <_malloc_r>:
 80028ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b0:	1ccd      	adds	r5, r1, #3
 80028b2:	f025 0503 	bic.w	r5, r5, #3
 80028b6:	3508      	adds	r5, #8
 80028b8:	2d0c      	cmp	r5, #12
 80028ba:	bf38      	it	cc
 80028bc:	250c      	movcc	r5, #12
 80028be:	2d00      	cmp	r5, #0
 80028c0:	4607      	mov	r7, r0
 80028c2:	db01      	blt.n	80028c8 <_malloc_r+0x1c>
 80028c4:	42a9      	cmp	r1, r5
 80028c6:	d905      	bls.n	80028d4 <_malloc_r+0x28>
 80028c8:	230c      	movs	r3, #12
 80028ca:	2600      	movs	r6, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4630      	mov	r0, r6
 80028d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d4:	4e2e      	ldr	r6, [pc, #184]	; (8002990 <_malloc_r+0xe4>)
 80028d6:	f000 f89d 	bl	8002a14 <__malloc_lock>
 80028da:	6833      	ldr	r3, [r6, #0]
 80028dc:	461c      	mov	r4, r3
 80028de:	bb34      	cbnz	r4, 800292e <_malloc_r+0x82>
 80028e0:	4629      	mov	r1, r5
 80028e2:	4638      	mov	r0, r7
 80028e4:	f7ff ffc2 	bl	800286c <sbrk_aligned>
 80028e8:	1c43      	adds	r3, r0, #1
 80028ea:	4604      	mov	r4, r0
 80028ec:	d14d      	bne.n	800298a <_malloc_r+0xde>
 80028ee:	6834      	ldr	r4, [r6, #0]
 80028f0:	4626      	mov	r6, r4
 80028f2:	2e00      	cmp	r6, #0
 80028f4:	d140      	bne.n	8002978 <_malloc_r+0xcc>
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	4631      	mov	r1, r6
 80028fa:	4638      	mov	r0, r7
 80028fc:	eb04 0803 	add.w	r8, r4, r3
 8002900:	f000 f878 	bl	80029f4 <_sbrk_r>
 8002904:	4580      	cmp	r8, r0
 8002906:	d13a      	bne.n	800297e <_malloc_r+0xd2>
 8002908:	6821      	ldr	r1, [r4, #0]
 800290a:	3503      	adds	r5, #3
 800290c:	1a6d      	subs	r5, r5, r1
 800290e:	f025 0503 	bic.w	r5, r5, #3
 8002912:	3508      	adds	r5, #8
 8002914:	2d0c      	cmp	r5, #12
 8002916:	bf38      	it	cc
 8002918:	250c      	movcc	r5, #12
 800291a:	4638      	mov	r0, r7
 800291c:	4629      	mov	r1, r5
 800291e:	f7ff ffa5 	bl	800286c <sbrk_aligned>
 8002922:	3001      	adds	r0, #1
 8002924:	d02b      	beq.n	800297e <_malloc_r+0xd2>
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	442b      	add	r3, r5
 800292a:	6023      	str	r3, [r4, #0]
 800292c:	e00e      	b.n	800294c <_malloc_r+0xa0>
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	1b52      	subs	r2, r2, r5
 8002932:	d41e      	bmi.n	8002972 <_malloc_r+0xc6>
 8002934:	2a0b      	cmp	r2, #11
 8002936:	d916      	bls.n	8002966 <_malloc_r+0xba>
 8002938:	1961      	adds	r1, r4, r5
 800293a:	42a3      	cmp	r3, r4
 800293c:	6025      	str	r5, [r4, #0]
 800293e:	bf18      	it	ne
 8002940:	6059      	strne	r1, [r3, #4]
 8002942:	6863      	ldr	r3, [r4, #4]
 8002944:	bf08      	it	eq
 8002946:	6031      	streq	r1, [r6, #0]
 8002948:	5162      	str	r2, [r4, r5]
 800294a:	604b      	str	r3, [r1, #4]
 800294c:	4638      	mov	r0, r7
 800294e:	f104 060b 	add.w	r6, r4, #11
 8002952:	f000 f865 	bl	8002a20 <__malloc_unlock>
 8002956:	f026 0607 	bic.w	r6, r6, #7
 800295a:	1d23      	adds	r3, r4, #4
 800295c:	1af2      	subs	r2, r6, r3
 800295e:	d0b6      	beq.n	80028ce <_malloc_r+0x22>
 8002960:	1b9b      	subs	r3, r3, r6
 8002962:	50a3      	str	r3, [r4, r2]
 8002964:	e7b3      	b.n	80028ce <_malloc_r+0x22>
 8002966:	6862      	ldr	r2, [r4, #4]
 8002968:	42a3      	cmp	r3, r4
 800296a:	bf0c      	ite	eq
 800296c:	6032      	streq	r2, [r6, #0]
 800296e:	605a      	strne	r2, [r3, #4]
 8002970:	e7ec      	b.n	800294c <_malloc_r+0xa0>
 8002972:	4623      	mov	r3, r4
 8002974:	6864      	ldr	r4, [r4, #4]
 8002976:	e7b2      	b.n	80028de <_malloc_r+0x32>
 8002978:	4634      	mov	r4, r6
 800297a:	6876      	ldr	r6, [r6, #4]
 800297c:	e7b9      	b.n	80028f2 <_malloc_r+0x46>
 800297e:	230c      	movs	r3, #12
 8002980:	4638      	mov	r0, r7
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	f000 f84c 	bl	8002a20 <__malloc_unlock>
 8002988:	e7a1      	b.n	80028ce <_malloc_r+0x22>
 800298a:	6025      	str	r5, [r4, #0]
 800298c:	e7de      	b.n	800294c <_malloc_r+0xa0>
 800298e:	bf00      	nop
 8002990:	20000128 	.word	0x20000128

08002994 <_realloc_r>:
 8002994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002998:	4680      	mov	r8, r0
 800299a:	4614      	mov	r4, r2
 800299c:	460e      	mov	r6, r1
 800299e:	b921      	cbnz	r1, 80029aa <_realloc_r+0x16>
 80029a0:	4611      	mov	r1, r2
 80029a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029a6:	f7ff bf81 	b.w	80028ac <_malloc_r>
 80029aa:	b92a      	cbnz	r2, 80029b8 <_realloc_r+0x24>
 80029ac:	f7ff ff16 	bl	80027dc <_free_r>
 80029b0:	4625      	mov	r5, r4
 80029b2:	4628      	mov	r0, r5
 80029b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b8:	f000 f838 	bl	8002a2c <_malloc_usable_size_r>
 80029bc:	4284      	cmp	r4, r0
 80029be:	4607      	mov	r7, r0
 80029c0:	d802      	bhi.n	80029c8 <_realloc_r+0x34>
 80029c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80029c6:	d812      	bhi.n	80029ee <_realloc_r+0x5a>
 80029c8:	4621      	mov	r1, r4
 80029ca:	4640      	mov	r0, r8
 80029cc:	f7ff ff6e 	bl	80028ac <_malloc_r>
 80029d0:	4605      	mov	r5, r0
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d0ed      	beq.n	80029b2 <_realloc_r+0x1e>
 80029d6:	42bc      	cmp	r4, r7
 80029d8:	4622      	mov	r2, r4
 80029da:	4631      	mov	r1, r6
 80029dc:	bf28      	it	cs
 80029de:	463a      	movcs	r2, r7
 80029e0:	f7ff fed4 	bl	800278c <memcpy>
 80029e4:	4631      	mov	r1, r6
 80029e6:	4640      	mov	r0, r8
 80029e8:	f7ff fef8 	bl	80027dc <_free_r>
 80029ec:	e7e1      	b.n	80029b2 <_realloc_r+0x1e>
 80029ee:	4635      	mov	r5, r6
 80029f0:	e7df      	b.n	80029b2 <_realloc_r+0x1e>
	...

080029f4 <_sbrk_r>:
 80029f4:	b538      	push	{r3, r4, r5, lr}
 80029f6:	2300      	movs	r3, #0
 80029f8:	4d05      	ldr	r5, [pc, #20]	; (8002a10 <_sbrk_r+0x1c>)
 80029fa:	4604      	mov	r4, r0
 80029fc:	4608      	mov	r0, r1
 80029fe:	602b      	str	r3, [r5, #0]
 8002a00:	f7fd fd54 	bl	80004ac <_sbrk>
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	d102      	bne.n	8002a0e <_sbrk_r+0x1a>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	b103      	cbz	r3, 8002a0e <_sbrk_r+0x1a>
 8002a0c:	6023      	str	r3, [r4, #0]
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	20000130 	.word	0x20000130

08002a14 <__malloc_lock>:
 8002a14:	4801      	ldr	r0, [pc, #4]	; (8002a1c <__malloc_lock+0x8>)
 8002a16:	f000 b811 	b.w	8002a3c <__retarget_lock_acquire_recursive>
 8002a1a:	bf00      	nop
 8002a1c:	20000134 	.word	0x20000134

08002a20 <__malloc_unlock>:
 8002a20:	4801      	ldr	r0, [pc, #4]	; (8002a28 <__malloc_unlock+0x8>)
 8002a22:	f000 b80c 	b.w	8002a3e <__retarget_lock_release_recursive>
 8002a26:	bf00      	nop
 8002a28:	20000134 	.word	0x20000134

08002a2c <_malloc_usable_size_r>:
 8002a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a30:	1f18      	subs	r0, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bfbc      	itt	lt
 8002a36:	580b      	ldrlt	r3, [r1, r0]
 8002a38:	18c0      	addlt	r0, r0, r3
 8002a3a:	4770      	bx	lr

08002a3c <__retarget_lock_acquire_recursive>:
 8002a3c:	4770      	bx	lr

08002a3e <__retarget_lock_release_recursive>:
 8002a3e:	4770      	bx	lr

08002a40 <_init>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	bf00      	nop
 8002a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a46:	bc08      	pop	{r3}
 8002a48:	469e      	mov	lr, r3
 8002a4a:	4770      	bx	lr

08002a4c <_fini>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	bf00      	nop
 8002a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a52:	bc08      	pop	{r3}
 8002a54:	469e      	mov	lr, r3
 8002a56:	4770      	bx	lr
