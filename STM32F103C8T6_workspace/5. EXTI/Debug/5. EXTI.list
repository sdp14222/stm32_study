
5. EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080020ac  080020ac  000120ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002158  08002158  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002158  08002158  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002158  08002158  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800215c  0800215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000074  080021d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080021d4  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037f3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000126c  00000000  00000000  00023890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00024b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  00024fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eee  00000000  00000000  000253c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c23  00000000  00000000  0003c2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080275  00000000  00000000  00041ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c214e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001450  00000000  00000000  000c21a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002094 	.word	0x08002094

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002094 	.word	0x08002094

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CLCD_Pin_Set_Exec>:
static void CLCD_Read_Busy_Flag_And_Address(void);
static void CLCD_Write_Data_To_CG_OR_DDRAM(uint16_t data);
static void CLCD_Read_Data_From_CG_OR_DDRAM(void);

static void CLCD_Pin_Set_Exec(CLCD_PIN_S clcd_pin)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
#if CLCD_I_FS_D_L == 1
	CLCD_GPIO_Set(clcd_pin);
	CLCD_Inst_Exec();
#else
	CLCD_PIN_S tmp_pin;
	CLCD_GPIO_Set(clcd_pin);
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	4618      	mov	r0, r3
 800016a:	f000 f819 	bl	80001a0 <CLCD_GPIO_Set>
	CLCD_Inst_Exec();
 800016e:	f000 f897 	bl	80002a0 <CLCD_Inst_Exec>

	tmp_pin = (clcd_pin & 0x00f) << 4;
 8000172:	88fb      	ldrh	r3, [r7, #6]
 8000174:	011b      	lsls	r3, r3, #4
 8000176:	b29b      	uxth	r3, r3
 8000178:	b2db      	uxtb	r3, r3
 800017a:	81fb      	strh	r3, [r7, #14]
	clcd_pin &= 0x600;
 800017c:	88fb      	ldrh	r3, [r7, #6]
 800017e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000182:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= tmp_pin;
 8000184:	88fa      	ldrh	r2, [r7, #6]
 8000186:	89fb      	ldrh	r3, [r7, #14]
 8000188:	4313      	orrs	r3, r2
 800018a:	80fb      	strh	r3, [r7, #6]
	CLCD_GPIO_Set(clcd_pin);
 800018c:	88fb      	ldrh	r3, [r7, #6]
 800018e:	4618      	mov	r0, r3
 8000190:	f000 f806 	bl	80001a0 <CLCD_GPIO_Set>
	CLCD_Inst_Exec();
 8000194:	f000 f884 	bl	80002a0 <CLCD_Inst_Exec>
#endif
}
 8000198:	bf00      	nop
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}

080001a0 <CLCD_GPIO_Set>:

static void CLCD_GPIO_Set(CLCD_PIN_S select_pin)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b084      	sub	sp, #16
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	80fb      	strh	r3, [r7, #6]
	int16_t i;
#if CLCD_I_FS_D_L == 1
	for(i = 10; i >= 0; i--)
#else
	select_pin = select_pin >> 4;
 80001aa:	88fb      	ldrh	r3, [r7, #6]
 80001ac:	091b      	lsrs	r3, r3, #4
 80001ae:	80fb      	strh	r3, [r7, #6]
	for(i = 6; i >= 0; i--)
 80001b0:	2306      	movs	r3, #6
 80001b2:	81fb      	strh	r3, [r7, #14]
 80001b4:	e033      	b.n	800021e <CLCD_GPIO_Set+0x7e>
#endif
	{
		if((select_pin >> i) & 0x001)
 80001b6:	88fa      	ldrh	r2, [r7, #6]
 80001b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001bc:	fa42 f303 	asr.w	r3, r2, r3
 80001c0:	f003 0301 	and.w	r3, r3, #1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d012      	beq.n	80001ee <CLCD_GPIO_Set+0x4e>
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_SET);
 80001c8:	4b19      	ldr	r3, [pc, #100]	; (8000230 <CLCD_GPIO_Set+0x90>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001d0:	00db      	lsls	r3, r3, #3
 80001d2:	4413      	add	r3, r2
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	4b16      	ldr	r3, [pc, #88]	; (8000230 <CLCD_GPIO_Set+0x90>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001de:	00db      	lsls	r3, r3, #3
 80001e0:	4413      	add	r3, r2
 80001e2:	889b      	ldrh	r3, [r3, #4]
 80001e4:	2201      	movs	r2, #1
 80001e6:	4619      	mov	r1, r3
 80001e8:	f000 fe90 	bl	8000f0c <HAL_GPIO_WritePin>
 80001ec:	e011      	b.n	8000212 <CLCD_GPIO_Set+0x72>
		else
			HAL_GPIO_WritePin(clcd_pin[i].lcd_gpio_type, clcd_pin[i].pin_num, GPIO_PIN_RESET);
 80001ee:	4b10      	ldr	r3, [pc, #64]	; (8000230 <CLCD_GPIO_Set+0x90>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001f6:	00db      	lsls	r3, r3, #3
 80001f8:	4413      	add	r3, r2
 80001fa:	6818      	ldr	r0, [r3, #0]
 80001fc:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <CLCD_GPIO_Set+0x90>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	4413      	add	r3, r2
 8000208:	889b      	ldrh	r3, [r3, #4]
 800020a:	2200      	movs	r2, #0
 800020c:	4619      	mov	r1, r3
 800020e:	f000 fe7d 	bl	8000f0c <HAL_GPIO_WritePin>
	for(i = 6; i >= 0; i--)
 8000212:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000216:	b29b      	uxth	r3, r3
 8000218:	3b01      	subs	r3, #1
 800021a:	b29b      	uxth	r3, r3
 800021c:	81fb      	strh	r3, [r7, #14]
 800021e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000222:	2b00      	cmp	r3, #0
 8000224:	dac7      	bge.n	80001b6 <CLCD_GPIO_Set+0x16>
	}
}
 8000226:	bf00      	nop
 8000228:	bf00      	nop
 800022a:	3710      	adds	r7, #16
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	2000009c 	.word	0x2000009c

08000234 <CLCD_Config_Init>:

static void CLCD_Config_Init()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
		{ CLCD_PIN_E_TYPE , CLCD_PIN_E_NUM  },  // idx =  8, 4
		{ CLCD_PIN_RW_TYPE, CLCD_PIN_RW_NUM },	// idx =  9, 5
		{ CLCD_PIN_RS_TYPE, CLCD_PIN_RS_NUM },  // idx = 10, 6
	};

	clcd_pin = clcd_pin_sc;
 8000238:	4b14      	ldr	r3, [pc, #80]	; (800028c <CLCD_Config_Init+0x58>)
 800023a:	4a15      	ldr	r2, [pc, #84]	; (8000290 <CLCD_Config_Init+0x5c>)
 800023c:	601a      	str	r2, [r3, #0]

	ems_ctrl.i_d = CLCD_I_EMS_I_D;
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <CLCD_Config_Init+0x60>)
 8000240:	7813      	ldrb	r3, [r2, #0]
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	7013      	strb	r3, [r2, #0]
	ems_ctrl.s = CLCD_I_EMS_S;
 8000248:	4a12      	ldr	r2, [pc, #72]	; (8000294 <CLCD_Config_Init+0x60>)
 800024a:	7813      	ldrb	r3, [r2, #0]
 800024c:	f36f 0341 	bfc	r3, #1, #1
 8000250:	7013      	strb	r3, [r2, #0]

	doc_ctrl.d = CLCD_I_DOC_D;
 8000252:	4a11      	ldr	r2, [pc, #68]	; (8000298 <CLCD_Config_Init+0x64>)
 8000254:	7813      	ldrb	r3, [r2, #0]
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	7013      	strb	r3, [r2, #0]
	doc_ctrl.c = CLCD_I_DOC_C;
 800025c:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <CLCD_Config_Init+0x64>)
 800025e:	7813      	ldrb	r3, [r2, #0]
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	7013      	strb	r3, [r2, #0]
	doc_ctrl.b = CLCD_I_DOC_B;
 8000266:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <CLCD_Config_Init+0x64>)
 8000268:	7813      	ldrb	r3, [r2, #0]
 800026a:	f36f 0382 	bfc	r3, #2, #1
 800026e:	7013      	strb	r3, [r2, #0]

	cods_ctrl.s_c = CLCD_I_CODS_S_C;
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <CLCD_Config_Init+0x68>)
 8000272:	7813      	ldrb	r3, [r2, #0]
 8000274:	f36f 0300 	bfc	r3, #0, #1
 8000278:	7013      	strb	r3, [r2, #0]
	cods_ctrl.r_l = CLCD_I_CODS_R_L;
 800027a:	4a08      	ldr	r2, [pc, #32]	; (800029c <CLCD_Config_Init+0x68>)
 800027c:	7813      	ldrb	r3, [r2, #0]
 800027e:	f36f 0341 	bfc	r3, #1, #1
 8000282:	7013      	strb	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	2000009c 	.word	0x2000009c
 8000290:	080020dc 	.word	0x080020dc
 8000294:	20000090 	.word	0x20000090
 8000298:	20000094 	.word	0x20000094
 800029c:	20000098 	.word	0x20000098

080002a0 <CLCD_Inst_Exec>:

static void CLCD_Inst_Exec(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLCD_PIN_E_TYPE, CLCD_PIN_E_NUM, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <CLCD_Inst_Exec+0x2c>)
 80002ac:	f000 fe2e 	bl	8000f0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 fb75 	bl	80009a0 <HAL_Delay>
	HAL_GPIO_WritePin(CLCD_PIN_E_TYPE, CLCD_PIN_E_NUM, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <CLCD_Inst_Exec+0x2c>)
 80002be:	f000 fe25 	bl	8000f0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 fb6c 	bl	80009a0 <HAL_Delay>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40010800 	.word	0x40010800

080002d0 <CLCD_Init>:

void CLCD_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	CLCD_Config_Init();
 80002d4:	f7ff ffae 	bl	8000234 <CLCD_Config_Init>
	HAL_Delay(40);
 80002d8:	2028      	movs	r0, #40	; 0x28
 80002da:	f000 fb61 	bl	80009a0 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 80002de:	2030      	movs	r0, #48	; 0x30
 80002e0:	f7ff ff3c 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(5);
 80002e4:	2005      	movs	r0, #5
 80002e6:	f000 fb5b 	bl	80009a0 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 80002ea:	2030      	movs	r0, #48	; 0x30
 80002ec:	f7ff ff36 	bl	800015c <CLCD_Pin_Set_Exec>
	HAL_Delay(1);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fb55 	bl	80009a0 <HAL_Delay>
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB5 | CLCD_PIN_S_DB4);
 80002f6:	2030      	movs	r0, #48	; 0x30
 80002f8:	f7ff ff30 	bl	800015c <CLCD_Pin_Set_Exec>
#if CLCD_I_FS_D_L == 0
	CLCD_GPIO_Set(CLCD_PIN_S_DB5);
 80002fc:	2020      	movs	r0, #32
 80002fe:	f7ff ff4f 	bl	80001a0 <CLCD_GPIO_Set>
	CLCD_Inst_Exec();
 8000302:	f7ff ffcd 	bl	80002a0 <CLCD_Inst_Exec>
#endif
	CLCD_Function_Set();
 8000306:	f000 f87d 	bl	8000404 <CLCD_Function_Set>
	CLCD_Display_ON_OFF_Control(CLCD_DOC_E_NONE);
 800030a:	2000      	movs	r0, #0
 800030c:	f000 f840 	bl	8000390 <CLCD_Display_ON_OFF_Control>
	CLCD_Clear_Display();
 8000310:	f000 f808 	bl	8000324 <CLCD_Clear_Display>
	CLCD_Entry_Mode_Set(CLCD_EMS_E_INIT);
 8000314:	2001      	movs	r0, #1
 8000316:	f000 f80d 	bl	8000334 <CLCD_Entry_Mode_Set>
	// Initialization Ends

	CLCD_Display_ON_OFF_Control(CLCD_DOC_E_INIT);
 800031a:	2003      	movs	r0, #3
 800031c:	f000 f838 	bl	8000390 <CLCD_Display_ON_OFF_Control>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <CLCD_Clear_Display>:

void CLCD_Clear_Display(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB0);
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ff17 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <CLCD_Entry_Mode_Set>:
	CLCD_Pin_Set_Exec(CLCD_PIN_S_DB1);
	HAL_Delay(1);
}

void CLCD_Entry_Mode_Set(CLCD_EMS_E select)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	CLCD_EMS_E clcd_pin = CLCD_PIN_S_DB2;
 800033e:	2304      	movs	r3, #4
 8000340:	73fb      	strb	r3, [r7, #15]

	ems_ctrl.bits = select;
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <CLCD_Entry_Mode_Set+0x58>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	7013      	strb	r3, [r2, #0]
	clcd_pin |= (ems_ctrl.i_d ? CLCD_PIN_S_DB1 : 0);
 8000348:	4b10      	ldr	r3, [pc, #64]	; (800038c <CLCD_Entry_Mode_Set+0x58>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	b25b      	sxtb	r3, r3
 8000350:	f003 0302 	and.w	r3, r3, #2
 8000354:	b25a      	sxtb	r2, r3
 8000356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800035a:	4313      	orrs	r3, r2
 800035c:	b25b      	sxtb	r3, r3
 800035e:	73fb      	strb	r3, [r7, #15]
	clcd_pin |= (ems_ctrl.s ? CLCD_PIN_S_DB0 : 0);
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <CLCD_Entry_Mode_Set+0x58>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	085b      	lsrs	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	b25b      	sxtb	r3, r3
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	b25a      	sxtb	r2, r3
 8000370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000374:	4313      	orrs	r3, r2
 8000376:	b25b      	sxtb	r3, r3
 8000378:	73fb      	strb	r3, [r7, #15]

	CLCD_Pin_Set_Exec(clcd_pin);
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	b29b      	uxth	r3, r3
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff feec 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000090 	.word	0x20000090

08000390 <CLCD_Display_ON_OFF_Control>:

static void CLCD_Display_ON_OFF_Control(CLCD_DOC_E select)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	CLCD_DOC_E clcd_pin = CLCD_PIN_S_DB3;
 800039a:	2308      	movs	r3, #8
 800039c:	73fb      	strb	r3, [r7, #15]

	doc_ctrl.bits = select;
 800039e:	4a18      	ldr	r2, [pc, #96]	; (8000400 <CLCD_Display_ON_OFF_Control+0x70>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	7013      	strb	r3, [r2, #0]
	clcd_pin |= (doc_ctrl.d ? CLCD_PIN_S_DB2 : 0);
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <CLCD_Display_ON_OFF_Control+0x70>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	b25b      	sxtb	r3, r3
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	b25a      	sxtb	r2, r3
 80003b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003b6:	4313      	orrs	r3, r2
 80003b8:	b25b      	sxtb	r3, r3
 80003ba:	73fb      	strb	r3, [r7, #15]
	clcd_pin |= (doc_ctrl.c ? CLCD_PIN_S_DB1 : 0);
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <CLCD_Display_ON_OFF_Control+0x70>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	b25b      	sxtb	r3, r3
 80003c2:	f003 0302 	and.w	r3, r3, #2
 80003c6:	b25a      	sxtb	r2, r3
 80003c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	73fb      	strb	r3, [r7, #15]
	clcd_pin |= (doc_ctrl.b ? CLCD_PIN_S_DB0 : 0);
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <CLCD_Display_ON_OFF_Control+0x70>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	b25a      	sxtb	r2, r3
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	b25b      	sxtb	r3, r3
 80003ea:	73fb      	strb	r3, [r7, #15]

	CLCD_Pin_Set_Exec(clcd_pin);
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff feb3 	bl	800015c <CLCD_Pin_Set_Exec>
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000094 	.word	0x20000094

08000404 <CLCD_Function_Set>:

	CLCD_Pin_Set_Exec(clcd_pin);
}

static void CLCD_Function_Set(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
	uint16_t clcd_pin = CLCD_PIN_S_DB5;
 800040a:	2320      	movs	r3, #32
 800040c:	80fb      	strh	r3, [r7, #6]

	clcd_pin |= (CLCD_I_FS_D_L ? CLCD_PIN_S_DB4 : 0);
	clcd_pin |= (CLCD_I_FS_N ? CLCD_PIN_S_DB3 : 0);
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	f043 0308 	orr.w	r3, r3, #8
 8000414:	80fb      	strh	r3, [r7, #6]
	clcd_pin |= (CLCD_I_FS_F ? CLCD_PIN_S_DB2 : 0);

	CLCD_Pin_Set_Exec(clcd_pin);
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff fe9f 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <CLCD_Set_DDRAM_address>:
{

}

static void CLCD_Set_DDRAM_address(uint16_t row, uint16_t col)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b084      	sub	sp, #16
 800042a:	af00      	add	r7, sp, #0
 800042c:	4603      	mov	r3, r0
 800042e:	460a      	mov	r2, r1
 8000430:	80fb      	strh	r3, [r7, #6]
 8000432:	4613      	mov	r3, r2
 8000434:	80bb      	strh	r3, [r7, #4]
	uint16_t pin_s = CLCD_PIN_S_DB7;
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	81fb      	strh	r3, [r7, #14]

#if CLCD_I_FS_N == 1
	if(row)
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <CLCD_Set_DDRAM_address+0x1e>
		row = 0x40;
 8000440:	2340      	movs	r3, #64	; 0x40
 8000442:	80fb      	strh	r3, [r7, #6]
	pin_s |= (row | col);
 8000444:	88fa      	ldrh	r2, [r7, #6]
 8000446:	88bb      	ldrh	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29a      	uxth	r2, r3
 800044c:	89fb      	ldrh	r3, [r7, #14]
 800044e:	4313      	orrs	r3, r2
 8000450:	81fb      	strh	r3, [r7, #14]
		return;
	else
		pin_s |= col;
	}
#endif
	CLCD_Pin_Set_Exec(pin_s);
 8000452:	89fb      	ldrh	r3, [r7, #14]
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff fe81 	bl	800015c <CLCD_Pin_Set_Exec>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <CLCD_Write_Data_To_CG_OR_DDRAM>:
{

}

static void CLCD_Write_Data_To_CG_OR_DDRAM(uint16_t data)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b084      	sub	sp, #16
 8000466:	af00      	add	r7, sp, #0
 8000468:	4603      	mov	r3, r0
 800046a:	80fb      	strh	r3, [r7, #6]
	uint16_t pin_s = CLCD_PIN_S_RS;
 800046c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000470:	81fb      	strh	r3, [r7, #14]
	pin_s |= data;
 8000472:	89fa      	ldrh	r2, [r7, #14]
 8000474:	88fb      	ldrh	r3, [r7, #6]
 8000476:	4313      	orrs	r3, r2
 8000478:	81fb      	strh	r3, [r7, #14]
	CLCD_Pin_Set_Exec(pin_s);
 800047a:	89fb      	ldrh	r3, [r7, #14]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fe6d 	bl	800015c <CLCD_Pin_Set_Exec>
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <CLCD_Write>:
{

}

void CLCD_Write(CLCD_ADDR_SET_BOOL addr_set, uint16_t row, uint16_t col, const char* str)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b086      	sub	sp, #24
 800048e:	af00      	add	r7, sp, #0
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	4603      	mov	r3, r0
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	460b      	mov	r3, r1
 8000498:	81bb      	strh	r3, [r7, #12]
 800049a:	4613      	mov	r3, r2
 800049c:	817b      	strh	r3, [r7, #10]
	int16_t i;
	int32_t str_size;
	str_size = strlen(str);
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff fe54 	bl	800014c <strlen>
 80004a4:	4603      	mov	r3, r0
 80004a6:	613b      	str	r3, [r7, #16]

	if(str_size > 16)
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	2b10      	cmp	r3, #16
 80004ac:	dd01      	ble.n	80004b2 <CLCD_Write+0x28>
		str_size = 16;
 80004ae:	2310      	movs	r3, #16
 80004b0:	613b      	str	r3, [r7, #16]

	if(addr_set)
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d005      	beq.n	80004c4 <CLCD_Write+0x3a>
		CLCD_Set_DDRAM_address(row, col);
 80004b8:	897a      	ldrh	r2, [r7, #10]
 80004ba:	89bb      	ldrh	r3, [r7, #12]
 80004bc:	4611      	mov	r1, r2
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ffb1 	bl	8000426 <CLCD_Set_DDRAM_address>

	for(i = 0; i < str_size; i++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	82fb      	strh	r3, [r7, #22]
 80004c8:	e00e      	b.n	80004e8 <CLCD_Write+0x5e>
		CLCD_Write_Data_To_CG_OR_DDRAM(str[i]);
 80004ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ffc3 	bl	8000462 <CLCD_Write_Data_To_CG_OR_DDRAM>
	for(i = 0; i < str_size; i++)
 80004dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	3301      	adds	r3, #1
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	82fb      	strh	r3, [r7, #22]
 80004e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004ec:	693a      	ldr	r2, [r7, #16]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dceb      	bgt.n	80004ca <CLCD_Write+0x40>
}
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0320 	and.w	r3, r3, #32
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a20      	ldr	r2, [pc, #128]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0308 	and.w	r3, r3, #8
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	211b      	movs	r1, #27
 800055c:	481b      	ldr	r0, [pc, #108]	; (80005cc <MX_GPIO_Init+0xd0>)
 800055e:	f000 fcd5 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000568:	4819      	ldr	r0, [pc, #100]	; (80005d0 <MX_GPIO_Init+0xd4>)
 800056a:	f000 fccf 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800056e:	23a0      	movs	r3, #160	; 0xa0
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_GPIO_Init+0xd8>)
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	4619      	mov	r1, r3
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_GPIO_Init+0xd4>)
 8000582:	f000 fb3f 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000586:	231b      	movs	r3, #27
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2302      	movs	r3, #2
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <MX_GPIO_Init+0xd0>)
 800059e:	f000 fb31 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80005a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80005a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_GPIO_Init+0xd4>)
 80005bc:	f000 fb22 	bl	8000c04 <HAL_GPIO_Init>

}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	40010800 	.word	0x40010800
 80005d4:	10210000 	.word	0x10210000

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 f97e 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f810 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f7ff ff8a 	bl	80004fc <MX_GPIO_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005e8:	f000 f851 	bl	800068e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CLCD_Init();
 80005ec:	f7ff fe70 	bl	80002d0 <CLCD_Init>
//  HAL_TIM_Base_Start_IT(&htim2);
  CLCD_Write(CLCD_ADDR_SET, 0, 0, "Hello World!!");
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <main+0x28>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff ff47 	bl	800048a <CLCD_Write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x24>
 80005fe:	bf00      	nop
 8000600:	080020ac 	.word	0x080020ac

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b090      	sub	sp, #64	; 0x40
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f8bc 	bl	8001790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000642:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fc8d 	bl	8000f6c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000658:	f000 f874 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fefa 	bl	8001470 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000682:	f000 f85f 	bl	8000744 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	; 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	210f      	movs	r1, #15
 8000696:	2017      	movs	r0, #23
 8000698:	f000 fa7d 	bl	8000b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800069c:	2017      	movs	r0, #23
 800069e:	f000 fa96 	bl	8000bce <HAL_NVIC_EnableIRQ>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <HAL_GPIO_EXTI_Callback>:
////		cnt++;
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]
	static uint16_t cnt1;
	static uint16_t cnt2;
	char str[16];
	static uint8_t isFirst = 1;

	if(isFirst)
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <HAL_GPIO_EXTI_Callback+0x88>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d004      	beq.n	80006c4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		CLCD_Clear_Display();
 80006ba:	f7ff fe33 	bl	8000324 <CLCD_Clear_Display>
		isFirst = 0;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <HAL_GPIO_EXTI_Callback+0x88>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_5)
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	2b20      	cmp	r3, #32
 80006c8:	d115      	bne.n	80006f6 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		sprintf(str, "1 : %d", cnt1);
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <HAL_GPIO_EXTI_Callback+0x8c>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4918      	ldr	r1, [pc, #96]	; (8000738 <HAL_GPIO_EXTI_Callback+0x90>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f862 	bl	80017a0 <siprintf>
		CLCD_Write(CLCD_ADDR_SET, 0, 0, str);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fed0 	bl	800048a <CLCD_Write>
		cnt1++;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_GPIO_EXTI_Callback+0x8c>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_GPIO_EXTI_Callback+0x8c>)
 80006f4:	801a      	strh	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_7)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	2b80      	cmp	r3, #128	; 0x80
 80006fa:	d115      	bne.n	8000728 <HAL_GPIO_EXTI_Callback+0x80>
	{
		sprintf(str, "2 : %d", cnt2);
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_GPIO_EXTI_Callback+0x94>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	490e      	ldr	r1, [pc, #56]	; (8000740 <HAL_GPIO_EXTI_Callback+0x98>)
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f849 	bl	80017a0 <siprintf>
		CLCD_Write(CLCD_ADDR_SET, 1, 0, str);
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	2001      	movs	r0, #1
 8000718:	f7ff feb7 	bl	800048a <CLCD_Write>
		cnt2++;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <HAL_GPIO_EXTI_Callback+0x94>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_GPIO_EXTI_Callback+0x94>)
 8000726:	801a      	strh	r2, [r3, #0]
	}
}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	200000a0 	.word	0x200000a0
 8000738:	080020bc 	.word	0x080020bc
 800073c:	200000a2 	.word	0x200000a2
 8000740:	080020c4 	.word	0x080020c4

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <HAL_MspInit+0x5c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_MspInit+0x5c>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_MspInit+0x5c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x5c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_MspInit+0x60>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_MspInit+0x60>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010000 	.word	0x40010000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f8b5 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}

08000802 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000806:	2020      	movs	r0, #32
 8000808:	f000 fb98 	bl	8000f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800080c:	2080      	movs	r0, #128	; 0x80
 800080e:	f000 fb95 	bl	8000f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f000 ff78 	bl	800173c <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20005000 	.word	0x20005000
 8000878:	00000400 	.word	0x00000400
 800087c:	200000a4 	.word	0x200000a4
 8000880:	200000c0 	.word	0x200000c0

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	; (80008c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	; (80008d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b6:	f7ff ffe5 	bl	8000884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f000 ff45 	bl	8001748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fe8b 	bl	80005d8 <main>
  bx lr
 80008c2:	4770      	bx	lr
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008cc:	08002160 	.word	0x08002160
  ldr r2, =_sbss
 80008d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008d4:	200000bc 	.word	0x200000bc

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_Init+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_Init+0x28>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f947 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	200e      	movs	r0, #14
 80008f4:	f000 f808 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff ff2a 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f95f 	bl	8000bea <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f927 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000004 	.word	0x20000004
 8000960:	2000000c 	.word	0x2000000c
 8000964:	20000008 	.word	0x20000008

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x1c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_IncTick+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a03      	ldr	r2, [pc, #12]	; (8000988 <HAL_IncTick+0x20>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	2000000c 	.word	0x2000000c
 8000988:	200000a8 	.word	0x200000a8

0800098c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <HAL_GetTick+0x10>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	200000a8 	.word	0x200000a8

080009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff fff0 	bl	800098c <HAL_GetTick>
 80009ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d005      	beq.n	80009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_Delay+0x44>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c6:	bf00      	nop
 80009c8:	f7ff ffe0 	bl	800098c <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f7      	bhi.n	80009c8 <HAL_Delay+0x28>
  {
  }
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000000c 	.word	0x2000000c

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4906      	ldr	r1, [pc, #24]	; (8000a80 <__NVIC_EnableIRQ+0x34>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff90 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff2d 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff42 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff90 	bl	8000ad8 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5f 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff35 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffa2 	bl	8000b3c <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b08b      	sub	sp, #44	; 0x2c
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e169      	b.n	8000eec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 8158 	bne.w	8000ee6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a9a      	ldr	r2, [pc, #616]	; (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d05e      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c40:	4a98      	ldr	r2, [pc, #608]	; (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d875      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c46:	4a98      	ldr	r2, [pc, #608]	; (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d058      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c4c:	4a96      	ldr	r2, [pc, #600]	; (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d86f      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c52:	4a96      	ldr	r2, [pc, #600]	; (8000eac <HAL_GPIO_Init+0x2a8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d052      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c58:	4a94      	ldr	r2, [pc, #592]	; (8000eac <HAL_GPIO_Init+0x2a8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d869      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c5e:	4a94      	ldr	r2, [pc, #592]	; (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d04c      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c64:	4a92      	ldr	r2, [pc, #584]	; (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d863      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c6a:	4a92      	ldr	r2, [pc, #584]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d046      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c70:	4a90      	ldr	r2, [pc, #576]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d85d      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d82a      	bhi.n	8000cd0 <HAL_GPIO_Init+0xcc>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d859      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <HAL_GPIO_Init+0x80>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000cff 	.word	0x08000cff
 8000c88:	08000cd9 	.word	0x08000cd9
 8000c8c:	08000ceb 	.word	0x08000ceb
 8000c90:	08000d2d 	.word	0x08000d2d
 8000c94:	08000d33 	.word	0x08000d33
 8000c98:	08000d33 	.word	0x08000d33
 8000c9c:	08000d33 	.word	0x08000d33
 8000ca0:	08000d33 	.word	0x08000d33
 8000ca4:	08000d33 	.word	0x08000d33
 8000ca8:	08000d33 	.word	0x08000d33
 8000cac:	08000d33 	.word	0x08000d33
 8000cb0:	08000d33 	.word	0x08000d33
 8000cb4:	08000d33 	.word	0x08000d33
 8000cb8:	08000d33 	.word	0x08000d33
 8000cbc:	08000d33 	.word	0x08000d33
 8000cc0:	08000d33 	.word	0x08000d33
 8000cc4:	08000d33 	.word	0x08000d33
 8000cc8:	08000ce1 	.word	0x08000ce1
 8000ccc:	08000cf5 	.word	0x08000cf5
 8000cd0:	4a79      	ldr	r2, [pc, #484]	; (8000eb8 <HAL_GPIO_Init+0x2b4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cd6:	e02c      	b.n	8000d32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e029      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e024      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	3308      	adds	r3, #8
 8000cf0:	623b      	str	r3, [r7, #32]
          break;
 8000cf2:	e01f      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e01a      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d06:	2304      	movs	r3, #4
 8000d08:	623b      	str	r3, [r7, #32]
          break;
 8000d0a:	e013      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d105      	bne.n	8000d20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d14:	2308      	movs	r3, #8
 8000d16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	611a      	str	r2, [r3, #16]
          break;
 8000d1e:	e009      	b.n	8000d34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d20:	2308      	movs	r3, #8
 8000d22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	615a      	str	r2, [r3, #20]
          break;
 8000d2a:	e003      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          break;
 8000d32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d801      	bhi.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	e001      	b.n	8000d42 <HAL_GPIO_Init+0x13e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3304      	adds	r3, #4
 8000d42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2bff      	cmp	r3, #255	; 0xff
 8000d48:	d802      	bhi.n	8000d50 <HAL_GPIO_Init+0x14c>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x152>
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	3b08      	subs	r3, #8
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	401a      	ands	r2, r3
 8000d68:	6a39      	ldr	r1, [r7, #32]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	431a      	orrs	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 80b1 	beq.w	8000ee6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d84:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d9c:	4a48      	ldr	r2, [pc, #288]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x1ec>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3f      	ldr	r2, [pc, #252]	; (8000ec8 <HAL_GPIO_Init+0x2c4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x1e8>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ecc <HAL_GPIO_Init+0x2c8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x1e4>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a3d      	ldr	r2, [pc, #244]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x1e0>
 8000de0:	2303      	movs	r3, #3
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000de4:	2304      	movs	r3, #4
 8000de6:	e004      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000df0:	2300      	movs	r3, #0
 8000df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df4:	f002 0203 	and.w	r2, r2, #3
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	4093      	lsls	r3, r2
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e02:	492f      	ldr	r1, [pc, #188]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	492c      	ldr	r1, [pc, #176]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4928      	ldr	r1, [pc, #160]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4922      	ldr	r1, [pc, #136]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	491e      	ldr	r1, [pc, #120]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	4918      	ldr	r1, [pc, #96]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	608b      	str	r3, [r1, #8]
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d021      	beq.n	8000ed8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	60cb      	str	r3, [r1, #12]
 8000ea0:	e021      	b.n	8000ee6 <HAL_GPIO_Init+0x2e2>
 8000ea2:	bf00      	nop
 8000ea4:	10320000 	.word	0x10320000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	10220000 	.word	0x10220000
 8000eb0:	10210000 	.word	0x10210000
 8000eb4:	10120000 	.word	0x10120000
 8000eb8:	10110000 	.word	0x10110000
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	40011400 	.word	0x40011400
 8000ed4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4909      	ldr	r1, [pc, #36]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f47f ae8e 	bne.w	8000c18 <HAL_GPIO_Init+0x14>
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	372c      	adds	r7, #44	; 0x2c
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	611a      	str	r2, [r3, #16]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f48:	695a      	ldr	r2, [r3, #20]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fba4 	bl	80006a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e272      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8087 	beq.w	800109a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f8c:	4b92      	ldr	r3, [pc, #584]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f98:	4b8f      	ldr	r3, [pc, #572]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d112      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
 8000fa4:	4b8c      	ldr	r3, [pc, #560]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb0:	d10b      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb2:	4b89      	ldr	r3, [pc, #548]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d06c      	beq.n	8001098 <HAL_RCC_OscConfig+0x12c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d168      	bne.n	8001098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e24c      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x76>
 8000fd4:	4b80      	ldr	r3, [pc, #512]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a7f      	ldr	r2, [pc, #508]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e02e      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x98>
 8000fea:	4b7b      	ldr	r3, [pc, #492]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7a      	ldr	r2, [pc, #488]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b78      	ldr	r3, [pc, #480]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a77      	ldr	r2, [pc, #476]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0xbc>
 800100e:	4b72      	ldr	r3, [pc, #456]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a71      	ldr	r2, [pc, #452]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a6e      	ldr	r2, [pc, #440]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001028:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a6a      	ldr	r2, [pc, #424]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b68      	ldr	r3, [pc, #416]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a67      	ldr	r2, [pc, #412]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fca0 	bl	800098c <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fc9c 	bl	800098c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e200      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xe4>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fc8c 	bl	800098c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fc88 	bl	800098c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1ec      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x10c>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d063      	beq.n	800116e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18c>
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e1c0      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4939      	ldr	r1, [pc, #228]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e03a      	b.n	800116e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d020      	beq.n	8001142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_RCC_OscConfig+0x270>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fc41 	bl	800098c <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fc3d 	bl	800098c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1a1      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4927      	ldr	r1, [pc, #156]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_RCC_OscConfig+0x270>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc20 	bl	800098c <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fc1c 	bl	800098c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e180      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d03a      	beq.n	80011f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d019      	beq.n	80011b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_RCC_OscConfig+0x274>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001188:	f7ff fc00 	bl	800098c <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fbfc 	bl	800098c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e160      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 faa6 	bl	8001700 <RCC_Delay>
 80011b4:	e01c      	b.n	80011f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_RCC_OscConfig+0x274>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fbe6 	bl	800098c <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c2:	e00f      	b.n	80011e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fbe2 	bl	800098c <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d908      	bls.n	80011e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e146      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	42420000 	.word	0x42420000
 80011e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	4b92      	ldr	r3, [pc, #584]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e9      	bne.n	80011c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a6 	beq.w	800134a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b8b      	ldr	r3, [pc, #556]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a87      	ldr	r2, [pc, #540]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b85      	ldr	r3, [pc, #532]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122a:	4b82      	ldr	r3, [pc, #520]	; (8001434 <HAL_RCC_OscConfig+0x4c8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d118      	bne.n	8001268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001236:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x4c8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a7e      	ldr	r2, [pc, #504]	; (8001434 <HAL_RCC_OscConfig+0x4c8>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fba3 	bl	800098c <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fb9f 	bl	800098c <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	; 0x64
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e103      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4b75      	ldr	r3, [pc, #468]	; (8001434 <HAL_RCC_OscConfig+0x4c8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x312>
 8001270:	4b6f      	ldr	r3, [pc, #444]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a6e      	ldr	r2, [pc, #440]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e02d      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x334>
 8001286:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a69      	ldr	r2, [pc, #420]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a66      	ldr	r2, [pc, #408]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x356>
 80012a8:	4b61      	ldr	r3, [pc, #388]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a60      	ldr	r2, [pc, #384]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a5d      	ldr	r2, [pc, #372]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6213      	str	r3, [r2, #32]
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a5a      	ldr	r2, [pc, #360]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6213      	str	r3, [r2, #32]
 80012ce:	4b58      	ldr	r3, [pc, #352]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a57      	ldr	r2, [pc, #348]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	f023 0304 	bic.w	r3, r3, #4
 80012d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d015      	beq.n	800130e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fb53 	bl	800098c <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fb4f 	bl	800098c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0b1      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ee      	beq.n	80012ea <HAL_RCC_OscConfig+0x37e>
 800130c:	e014      	b.n	8001338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fb3d 	bl	800098c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fb39 	bl	800098c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e09b      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	4b40      	ldr	r3, [pc, #256]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ee      	bne.n	8001316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d105      	bne.n	800134a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133e:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a3b      	ldr	r2, [pc, #236]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8087 	beq.w	8001462 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001354:	4b36      	ldr	r3, [pc, #216]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	d061      	beq.n	8001424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d146      	bne.n	80013f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b33      	ldr	r3, [pc, #204]	; (8001438 <HAL_RCC_OscConfig+0x4cc>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fb0d 	bl	800098c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff fb09 	bl	800098c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e06d      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800139e:	4b24      	ldr	r3, [pc, #144]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4921      	ldr	r1, [pc, #132]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a19      	ldr	r1, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	430b      	orrs	r3, r1
 80013c2:	491b      	ldr	r1, [pc, #108]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_RCC_OscConfig+0x4cc>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fadd 	bl	800098c <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff fad9 	bl	800098c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e03d      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x46a>
 80013f4:	e035      	b.n	8001462 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_RCC_OscConfig+0x4cc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fac6 	bl	800098c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fac2 	bl	800098c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e026      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x498>
 8001422:	e01e      	b.n	8001462 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d107      	bne.n	800143c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e019      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
 8001430:	40021000 	.word	0x40021000
 8001434:	40007000 	.word	0x40007000
 8001438:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_OscConfig+0x500>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	429a      	cmp	r2, r3
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0d0      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001484:	4b6a      	ldr	r3, [pc, #424]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d910      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	4b67      	ldr	r3, [pc, #412]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 0207 	bic.w	r2, r3, #7
 800149a:	4965      	ldr	r1, [pc, #404]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0b8      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014cc:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	494d      	ldr	r1, [pc, #308]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d040      	beq.n	8001590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d115      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e07f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e073      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e06b      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154e:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f023 0203 	bic.w	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4936      	ldr	r1, [pc, #216]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001560:	f7ff fa14 	bl	800098c <HAL_GetTick>
 8001564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	e00a      	b.n	800157e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001568:	f7ff fa10 	bl	800098c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e053      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 020c 	and.w	r2, r3, #12
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	429a      	cmp	r2, r3
 800158e:	d1eb      	bne.n	8001568 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d210      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 0207 	bic.w	r2, r3, #7
 80015a6:	4922      	ldr	r1, [pc, #136]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e032      	b.n	8001626 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4916      	ldr	r1, [pc, #88]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015fe:	f000 f821 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 8001602:	4602      	mov	r2, r0
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	490a      	ldr	r1, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001610:	5ccb      	ldrb	r3, [r1, r3]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1cc>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1d0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f972 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000
 8001634:	40021000 	.word	0x40021000
 8001638:	08002114 	.word	0x08002114
 800163c:	20000004 	.word	0x20000004
 8001640:	20000008 	.word	0x20000008

08001644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	b490      	push	{r4, r7}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800164c:	1d3c      	adds	r4, r7, #4
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001654:	f240 2301 	movw	r3, #513	; 0x201
 8001658:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b04      	cmp	r3, #4
 800167c:	d002      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x40>
 800167e:	2b08      	cmp	r3, #8
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x46>
 8001682:	e02b      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001686:	623b      	str	r3, [r7, #32]
      break;
 8001688:	e02b      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3328      	adds	r3, #40	; 0x28
 8001694:	443b      	add	r3, r7
 8001696:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800169a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d012      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	0c5b      	lsrs	r3, r3, #17
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	3328      	adds	r3, #40	; 0x28
 80016b2:	443b      	add	r3, r7
 80016b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016be:	fb03 f202 	mul.w	r2, r3, r2
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	e004      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	623b      	str	r3, [r7, #32]
      break;
 80016da:	e002      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016de:	623b      	str	r3, [r7, #32]
      break;
 80016e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e2:	6a3b      	ldr	r3, [r7, #32]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3728      	adds	r7, #40	; 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc90      	pop	{r4, r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	080020cc 	.word	0x080020cc
 80016f4:	40021000 	.word	0x40021000
 80016f8:	007a1200 	.word	0x007a1200
 80016fc:	003d0900 	.word	0x003d0900

08001700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <RCC_Delay+0x34>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <RCC_Delay+0x38>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0a5b      	lsrs	r3, r3, #9
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800171c:	bf00      	nop
  }
  while (Delay --);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1e5a      	subs	r2, r3, #1
 8001722:	60fa      	str	r2, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f9      	bne.n	800171c <RCC_Delay+0x1c>
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000004 	.word	0x20000004
 8001738:	10624dd3 	.word	0x10624dd3

0800173c <__errno>:
 800173c:	4b01      	ldr	r3, [pc, #4]	; (8001744 <__errno+0x8>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000010 	.word	0x20000010

08001748 <__libc_init_array>:
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	2600      	movs	r6, #0
 800174c:	4d0c      	ldr	r5, [pc, #48]	; (8001780 <__libc_init_array+0x38>)
 800174e:	4c0d      	ldr	r4, [pc, #52]	; (8001784 <__libc_init_array+0x3c>)
 8001750:	1b64      	subs	r4, r4, r5
 8001752:	10a4      	asrs	r4, r4, #2
 8001754:	42a6      	cmp	r6, r4
 8001756:	d109      	bne.n	800176c <__libc_init_array+0x24>
 8001758:	f000 fc9c 	bl	8002094 <_init>
 800175c:	2600      	movs	r6, #0
 800175e:	4d0a      	ldr	r5, [pc, #40]	; (8001788 <__libc_init_array+0x40>)
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <__libc_init_array+0x44>)
 8001762:	1b64      	subs	r4, r4, r5
 8001764:	10a4      	asrs	r4, r4, #2
 8001766:	42a6      	cmp	r6, r4
 8001768:	d105      	bne.n	8001776 <__libc_init_array+0x2e>
 800176a:	bd70      	pop	{r4, r5, r6, pc}
 800176c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001770:	4798      	blx	r3
 8001772:	3601      	adds	r6, #1
 8001774:	e7ee      	b.n	8001754 <__libc_init_array+0xc>
 8001776:	f855 3b04 	ldr.w	r3, [r5], #4
 800177a:	4798      	blx	r3
 800177c:	3601      	adds	r6, #1
 800177e:	e7f2      	b.n	8001766 <__libc_init_array+0x1e>
 8001780:	08002158 	.word	0x08002158
 8001784:	08002158 	.word	0x08002158
 8001788:	08002158 	.word	0x08002158
 800178c:	0800215c 	.word	0x0800215c

08001790 <memset>:
 8001790:	4603      	mov	r3, r0
 8001792:	4402      	add	r2, r0
 8001794:	4293      	cmp	r3, r2
 8001796:	d100      	bne.n	800179a <memset+0xa>
 8001798:	4770      	bx	lr
 800179a:	f803 1b01 	strb.w	r1, [r3], #1
 800179e:	e7f9      	b.n	8001794 <memset+0x4>

080017a0 <siprintf>:
 80017a0:	b40e      	push	{r1, r2, r3}
 80017a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80017a6:	b500      	push	{lr}
 80017a8:	b09c      	sub	sp, #112	; 0x70
 80017aa:	ab1d      	add	r3, sp, #116	; 0x74
 80017ac:	9002      	str	r0, [sp, #8]
 80017ae:	9006      	str	r0, [sp, #24]
 80017b0:	9107      	str	r1, [sp, #28]
 80017b2:	9104      	str	r1, [sp, #16]
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <siprintf+0x38>)
 80017b6:	4909      	ldr	r1, [pc, #36]	; (80017dc <siprintf+0x3c>)
 80017b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80017bc:	9105      	str	r1, [sp, #20]
 80017be:	6800      	ldr	r0, [r0, #0]
 80017c0:	a902      	add	r1, sp, #8
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f000 f868 	bl	8001898 <_svfiprintf_r>
 80017c8:	2200      	movs	r2, #0
 80017ca:	9b02      	ldr	r3, [sp, #8]
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	b01c      	add	sp, #112	; 0x70
 80017d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80017d4:	b003      	add	sp, #12
 80017d6:	4770      	bx	lr
 80017d8:	20000010 	.word	0x20000010
 80017dc:	ffff0208 	.word	0xffff0208

080017e0 <__ssputs_r>:
 80017e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017e4:	688e      	ldr	r6, [r1, #8]
 80017e6:	4682      	mov	sl, r0
 80017e8:	429e      	cmp	r6, r3
 80017ea:	460c      	mov	r4, r1
 80017ec:	4690      	mov	r8, r2
 80017ee:	461f      	mov	r7, r3
 80017f0:	d838      	bhi.n	8001864 <__ssputs_r+0x84>
 80017f2:	898a      	ldrh	r2, [r1, #12]
 80017f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017f8:	d032      	beq.n	8001860 <__ssputs_r+0x80>
 80017fa:	6825      	ldr	r5, [r4, #0]
 80017fc:	6909      	ldr	r1, [r1, #16]
 80017fe:	3301      	adds	r3, #1
 8001800:	eba5 0901 	sub.w	r9, r5, r1
 8001804:	6965      	ldr	r5, [r4, #20]
 8001806:	444b      	add	r3, r9
 8001808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800180c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001810:	106d      	asrs	r5, r5, #1
 8001812:	429d      	cmp	r5, r3
 8001814:	bf38      	it	cc
 8001816:	461d      	movcc	r5, r3
 8001818:	0553      	lsls	r3, r2, #21
 800181a:	d531      	bpl.n	8001880 <__ssputs_r+0xa0>
 800181c:	4629      	mov	r1, r5
 800181e:	f000 fb6f 	bl	8001f00 <_malloc_r>
 8001822:	4606      	mov	r6, r0
 8001824:	b950      	cbnz	r0, 800183c <__ssputs_r+0x5c>
 8001826:	230c      	movs	r3, #12
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f8ca 3000 	str.w	r3, [sl]
 8001830:	89a3      	ldrh	r3, [r4, #12]
 8001832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001836:	81a3      	strh	r3, [r4, #12]
 8001838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800183c:	464a      	mov	r2, r9
 800183e:	6921      	ldr	r1, [r4, #16]
 8001840:	f000 face 	bl	8001de0 <memcpy>
 8001844:	89a3      	ldrh	r3, [r4, #12]
 8001846:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800184a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184e:	81a3      	strh	r3, [r4, #12]
 8001850:	6126      	str	r6, [r4, #16]
 8001852:	444e      	add	r6, r9
 8001854:	6026      	str	r6, [r4, #0]
 8001856:	463e      	mov	r6, r7
 8001858:	6165      	str	r5, [r4, #20]
 800185a:	eba5 0509 	sub.w	r5, r5, r9
 800185e:	60a5      	str	r5, [r4, #8]
 8001860:	42be      	cmp	r6, r7
 8001862:	d900      	bls.n	8001866 <__ssputs_r+0x86>
 8001864:	463e      	mov	r6, r7
 8001866:	4632      	mov	r2, r6
 8001868:	4641      	mov	r1, r8
 800186a:	6820      	ldr	r0, [r4, #0]
 800186c:	f000 fac6 	bl	8001dfc <memmove>
 8001870:	68a3      	ldr	r3, [r4, #8]
 8001872:	2000      	movs	r0, #0
 8001874:	1b9b      	subs	r3, r3, r6
 8001876:	60a3      	str	r3, [r4, #8]
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	4433      	add	r3, r6
 800187c:	6023      	str	r3, [r4, #0]
 800187e:	e7db      	b.n	8001838 <__ssputs_r+0x58>
 8001880:	462a      	mov	r2, r5
 8001882:	f000 fbb1 	bl	8001fe8 <_realloc_r>
 8001886:	4606      	mov	r6, r0
 8001888:	2800      	cmp	r0, #0
 800188a:	d1e1      	bne.n	8001850 <__ssputs_r+0x70>
 800188c:	4650      	mov	r0, sl
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	f000 face 	bl	8001e30 <_free_r>
 8001894:	e7c7      	b.n	8001826 <__ssputs_r+0x46>
	...

08001898 <_svfiprintf_r>:
 8001898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800189c:	4698      	mov	r8, r3
 800189e:	898b      	ldrh	r3, [r1, #12]
 80018a0:	4607      	mov	r7, r0
 80018a2:	061b      	lsls	r3, r3, #24
 80018a4:	460d      	mov	r5, r1
 80018a6:	4614      	mov	r4, r2
 80018a8:	b09d      	sub	sp, #116	; 0x74
 80018aa:	d50e      	bpl.n	80018ca <_svfiprintf_r+0x32>
 80018ac:	690b      	ldr	r3, [r1, #16]
 80018ae:	b963      	cbnz	r3, 80018ca <_svfiprintf_r+0x32>
 80018b0:	2140      	movs	r1, #64	; 0x40
 80018b2:	f000 fb25 	bl	8001f00 <_malloc_r>
 80018b6:	6028      	str	r0, [r5, #0]
 80018b8:	6128      	str	r0, [r5, #16]
 80018ba:	b920      	cbnz	r0, 80018c6 <_svfiprintf_r+0x2e>
 80018bc:	230c      	movs	r3, #12
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	e0d1      	b.n	8001a6a <_svfiprintf_r+0x1d2>
 80018c6:	2340      	movs	r3, #64	; 0x40
 80018c8:	616b      	str	r3, [r5, #20]
 80018ca:	2300      	movs	r3, #0
 80018cc:	9309      	str	r3, [sp, #36]	; 0x24
 80018ce:	2320      	movs	r3, #32
 80018d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018d4:	2330      	movs	r3, #48	; 0x30
 80018d6:	f04f 0901 	mov.w	r9, #1
 80018da:	f8cd 800c 	str.w	r8, [sp, #12]
 80018de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001a84 <_svfiprintf_r+0x1ec>
 80018e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018e6:	4623      	mov	r3, r4
 80018e8:	469a      	mov	sl, r3
 80018ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018ee:	b10a      	cbz	r2, 80018f4 <_svfiprintf_r+0x5c>
 80018f0:	2a25      	cmp	r2, #37	; 0x25
 80018f2:	d1f9      	bne.n	80018e8 <_svfiprintf_r+0x50>
 80018f4:	ebba 0b04 	subs.w	fp, sl, r4
 80018f8:	d00b      	beq.n	8001912 <_svfiprintf_r+0x7a>
 80018fa:	465b      	mov	r3, fp
 80018fc:	4622      	mov	r2, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	4638      	mov	r0, r7
 8001902:	f7ff ff6d 	bl	80017e0 <__ssputs_r>
 8001906:	3001      	adds	r0, #1
 8001908:	f000 80aa 	beq.w	8001a60 <_svfiprintf_r+0x1c8>
 800190c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800190e:	445a      	add	r2, fp
 8001910:	9209      	str	r2, [sp, #36]	; 0x24
 8001912:	f89a 3000 	ldrb.w	r3, [sl]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80a2 	beq.w	8001a60 <_svfiprintf_r+0x1c8>
 800191c:	2300      	movs	r3, #0
 800191e:	f04f 32ff 	mov.w	r2, #4294967295
 8001922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001926:	f10a 0a01 	add.w	sl, sl, #1
 800192a:	9304      	str	r3, [sp, #16]
 800192c:	9307      	str	r3, [sp, #28]
 800192e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001932:	931a      	str	r3, [sp, #104]	; 0x68
 8001934:	4654      	mov	r4, sl
 8001936:	2205      	movs	r2, #5
 8001938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800193c:	4851      	ldr	r0, [pc, #324]	; (8001a84 <_svfiprintf_r+0x1ec>)
 800193e:	f000 fa41 	bl	8001dc4 <memchr>
 8001942:	9a04      	ldr	r2, [sp, #16]
 8001944:	b9d8      	cbnz	r0, 800197e <_svfiprintf_r+0xe6>
 8001946:	06d0      	lsls	r0, r2, #27
 8001948:	bf44      	itt	mi
 800194a:	2320      	movmi	r3, #32
 800194c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001950:	0711      	lsls	r1, r2, #28
 8001952:	bf44      	itt	mi
 8001954:	232b      	movmi	r3, #43	; 0x2b
 8001956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800195a:	f89a 3000 	ldrb.w	r3, [sl]
 800195e:	2b2a      	cmp	r3, #42	; 0x2a
 8001960:	d015      	beq.n	800198e <_svfiprintf_r+0xf6>
 8001962:	4654      	mov	r4, sl
 8001964:	2000      	movs	r0, #0
 8001966:	f04f 0c0a 	mov.w	ip, #10
 800196a:	9a07      	ldr	r2, [sp, #28]
 800196c:	4621      	mov	r1, r4
 800196e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001972:	3b30      	subs	r3, #48	; 0x30
 8001974:	2b09      	cmp	r3, #9
 8001976:	d94e      	bls.n	8001a16 <_svfiprintf_r+0x17e>
 8001978:	b1b0      	cbz	r0, 80019a8 <_svfiprintf_r+0x110>
 800197a:	9207      	str	r2, [sp, #28]
 800197c:	e014      	b.n	80019a8 <_svfiprintf_r+0x110>
 800197e:	eba0 0308 	sub.w	r3, r0, r8
 8001982:	fa09 f303 	lsl.w	r3, r9, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	46a2      	mov	sl, r4
 800198a:	9304      	str	r3, [sp, #16]
 800198c:	e7d2      	b.n	8001934 <_svfiprintf_r+0x9c>
 800198e:	9b03      	ldr	r3, [sp, #12]
 8001990:	1d19      	adds	r1, r3, #4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	9103      	str	r1, [sp, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bfbb      	ittet	lt
 800199a:	425b      	neglt	r3, r3
 800199c:	f042 0202 	orrlt.w	r2, r2, #2
 80019a0:	9307      	strge	r3, [sp, #28]
 80019a2:	9307      	strlt	r3, [sp, #28]
 80019a4:	bfb8      	it	lt
 80019a6:	9204      	strlt	r2, [sp, #16]
 80019a8:	7823      	ldrb	r3, [r4, #0]
 80019aa:	2b2e      	cmp	r3, #46	; 0x2e
 80019ac:	d10c      	bne.n	80019c8 <_svfiprintf_r+0x130>
 80019ae:	7863      	ldrb	r3, [r4, #1]
 80019b0:	2b2a      	cmp	r3, #42	; 0x2a
 80019b2:	d135      	bne.n	8001a20 <_svfiprintf_r+0x188>
 80019b4:	9b03      	ldr	r3, [sp, #12]
 80019b6:	3402      	adds	r4, #2
 80019b8:	1d1a      	adds	r2, r3, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	9203      	str	r2, [sp, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bfb8      	it	lt
 80019c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80019c6:	9305      	str	r3, [sp, #20]
 80019c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001a88 <_svfiprintf_r+0x1f0>
 80019cc:	2203      	movs	r2, #3
 80019ce:	4650      	mov	r0, sl
 80019d0:	7821      	ldrb	r1, [r4, #0]
 80019d2:	f000 f9f7 	bl	8001dc4 <memchr>
 80019d6:	b140      	cbz	r0, 80019ea <_svfiprintf_r+0x152>
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	eba0 000a 	sub.w	r0, r0, sl
 80019de:	fa03 f000 	lsl.w	r0, r3, r0
 80019e2:	9b04      	ldr	r3, [sp, #16]
 80019e4:	3401      	adds	r4, #1
 80019e6:	4303      	orrs	r3, r0
 80019e8:	9304      	str	r3, [sp, #16]
 80019ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ee:	2206      	movs	r2, #6
 80019f0:	4826      	ldr	r0, [pc, #152]	; (8001a8c <_svfiprintf_r+0x1f4>)
 80019f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019f6:	f000 f9e5 	bl	8001dc4 <memchr>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d038      	beq.n	8001a70 <_svfiprintf_r+0x1d8>
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <_svfiprintf_r+0x1f8>)
 8001a00:	bb1b      	cbnz	r3, 8001a4a <_svfiprintf_r+0x1b2>
 8001a02:	9b03      	ldr	r3, [sp, #12]
 8001a04:	3307      	adds	r3, #7
 8001a06:	f023 0307 	bic.w	r3, r3, #7
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	9303      	str	r3, [sp, #12]
 8001a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a10:	4433      	add	r3, r6
 8001a12:	9309      	str	r3, [sp, #36]	; 0x24
 8001a14:	e767      	b.n	80018e6 <_svfiprintf_r+0x4e>
 8001a16:	460c      	mov	r4, r1
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a1e:	e7a5      	b.n	800196c <_svfiprintf_r+0xd4>
 8001a20:	2300      	movs	r3, #0
 8001a22:	f04f 0c0a 	mov.w	ip, #10
 8001a26:	4619      	mov	r1, r3
 8001a28:	3401      	adds	r4, #1
 8001a2a:	9305      	str	r3, [sp, #20]
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a32:	3a30      	subs	r2, #48	; 0x30
 8001a34:	2a09      	cmp	r2, #9
 8001a36:	d903      	bls.n	8001a40 <_svfiprintf_r+0x1a8>
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0c5      	beq.n	80019c8 <_svfiprintf_r+0x130>
 8001a3c:	9105      	str	r1, [sp, #20]
 8001a3e:	e7c3      	b.n	80019c8 <_svfiprintf_r+0x130>
 8001a40:	4604      	mov	r4, r0
 8001a42:	2301      	movs	r3, #1
 8001a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a48:	e7f0      	b.n	8001a2c <_svfiprintf_r+0x194>
 8001a4a:	ab03      	add	r3, sp, #12
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	462a      	mov	r2, r5
 8001a50:	4638      	mov	r0, r7
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_svfiprintf_r+0x1fc>)
 8001a54:	a904      	add	r1, sp, #16
 8001a56:	f3af 8000 	nop.w
 8001a5a:	1c42      	adds	r2, r0, #1
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	d1d6      	bne.n	8001a0e <_svfiprintf_r+0x176>
 8001a60:	89ab      	ldrh	r3, [r5, #12]
 8001a62:	065b      	lsls	r3, r3, #25
 8001a64:	f53f af2c 	bmi.w	80018c0 <_svfiprintf_r+0x28>
 8001a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a6a:	b01d      	add	sp, #116	; 0x74
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a70:	ab03      	add	r3, sp, #12
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	462a      	mov	r2, r5
 8001a76:	4638      	mov	r0, r7
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <_svfiprintf_r+0x1fc>)
 8001a7a:	a904      	add	r1, sp, #16
 8001a7c:	f000 f87c 	bl	8001b78 <_printf_i>
 8001a80:	e7eb      	b.n	8001a5a <_svfiprintf_r+0x1c2>
 8001a82:	bf00      	nop
 8001a84:	08002124 	.word	0x08002124
 8001a88:	0800212a 	.word	0x0800212a
 8001a8c:	0800212e 	.word	0x0800212e
 8001a90:	00000000 	.word	0x00000000
 8001a94:	080017e1 	.word	0x080017e1

08001a98 <_printf_common>:
 8001a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a9c:	4616      	mov	r6, r2
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	688a      	ldr	r2, [r1, #8]
 8001aa2:	690b      	ldr	r3, [r1, #16]
 8001aa4:	4607      	mov	r7, r0
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	bfb8      	it	lt
 8001aaa:	4613      	movlt	r3, r2
 8001aac:	6033      	str	r3, [r6, #0]
 8001aae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ab8:	b10a      	cbz	r2, 8001abe <_printf_common+0x26>
 8001aba:	3301      	adds	r3, #1
 8001abc:	6033      	str	r3, [r6, #0]
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	0699      	lsls	r1, r3, #26
 8001ac2:	bf42      	ittt	mi
 8001ac4:	6833      	ldrmi	r3, [r6, #0]
 8001ac6:	3302      	addmi	r3, #2
 8001ac8:	6033      	strmi	r3, [r6, #0]
 8001aca:	6825      	ldr	r5, [r4, #0]
 8001acc:	f015 0506 	ands.w	r5, r5, #6
 8001ad0:	d106      	bne.n	8001ae0 <_printf_common+0x48>
 8001ad2:	f104 0a19 	add.w	sl, r4, #25
 8001ad6:	68e3      	ldr	r3, [r4, #12]
 8001ad8:	6832      	ldr	r2, [r6, #0]
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	42ab      	cmp	r3, r5
 8001ade:	dc28      	bgt.n	8001b32 <_printf_common+0x9a>
 8001ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ae4:	1e13      	subs	r3, r2, #0
 8001ae6:	6822      	ldr	r2, [r4, #0]
 8001ae8:	bf18      	it	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	0692      	lsls	r2, r2, #26
 8001aee:	d42d      	bmi.n	8001b4c <_printf_common+0xb4>
 8001af0:	4649      	mov	r1, r9
 8001af2:	4638      	mov	r0, r7
 8001af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001af8:	47c0      	blx	r8
 8001afa:	3001      	adds	r0, #1
 8001afc:	d020      	beq.n	8001b40 <_printf_common+0xa8>
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	68e5      	ldr	r5, [r4, #12]
 8001b02:	f003 0306 	and.w	r3, r3, #6
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf18      	it	ne
 8001b0a:	2500      	movne	r5, #0
 8001b0c:	6832      	ldr	r2, [r6, #0]
 8001b0e:	f04f 0600 	mov.w	r6, #0
 8001b12:	68a3      	ldr	r3, [r4, #8]
 8001b14:	bf08      	it	eq
 8001b16:	1aad      	subeq	r5, r5, r2
 8001b18:	6922      	ldr	r2, [r4, #16]
 8001b1a:	bf08      	it	eq
 8001b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bfc4      	itt	gt
 8001b24:	1a9b      	subgt	r3, r3, r2
 8001b26:	18ed      	addgt	r5, r5, r3
 8001b28:	341a      	adds	r4, #26
 8001b2a:	42b5      	cmp	r5, r6
 8001b2c:	d11a      	bne.n	8001b64 <_printf_common+0xcc>
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e008      	b.n	8001b44 <_printf_common+0xac>
 8001b32:	2301      	movs	r3, #1
 8001b34:	4652      	mov	r2, sl
 8001b36:	4649      	mov	r1, r9
 8001b38:	4638      	mov	r0, r7
 8001b3a:	47c0      	blx	r8
 8001b3c:	3001      	adds	r0, #1
 8001b3e:	d103      	bne.n	8001b48 <_printf_common+0xb0>
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b48:	3501      	adds	r5, #1
 8001b4a:	e7c4      	b.n	8001ad6 <_printf_common+0x3e>
 8001b4c:	2030      	movs	r0, #48	; 0x30
 8001b4e:	18e1      	adds	r1, r4, r3
 8001b50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b5a:	4422      	add	r2, r4
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b62:	e7c5      	b.n	8001af0 <_printf_common+0x58>
 8001b64:	2301      	movs	r3, #1
 8001b66:	4622      	mov	r2, r4
 8001b68:	4649      	mov	r1, r9
 8001b6a:	4638      	mov	r0, r7
 8001b6c:	47c0      	blx	r8
 8001b6e:	3001      	adds	r0, #1
 8001b70:	d0e6      	beq.n	8001b40 <_printf_common+0xa8>
 8001b72:	3601      	adds	r6, #1
 8001b74:	e7d9      	b.n	8001b2a <_printf_common+0x92>
	...

08001b78 <_printf_i>:
 8001b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b7c:	7e0f      	ldrb	r7, [r1, #24]
 8001b7e:	4691      	mov	r9, r2
 8001b80:	2f78      	cmp	r7, #120	; 0x78
 8001b82:	4680      	mov	r8, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	469a      	mov	sl, r3
 8001b88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b8e:	d807      	bhi.n	8001ba0 <_printf_i+0x28>
 8001b90:	2f62      	cmp	r7, #98	; 0x62
 8001b92:	d80a      	bhi.n	8001baa <_printf_i+0x32>
 8001b94:	2f00      	cmp	r7, #0
 8001b96:	f000 80d9 	beq.w	8001d4c <_printf_i+0x1d4>
 8001b9a:	2f58      	cmp	r7, #88	; 0x58
 8001b9c:	f000 80a4 	beq.w	8001ce8 <_printf_i+0x170>
 8001ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ba8:	e03a      	b.n	8001c20 <_printf_i+0xa8>
 8001baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001bae:	2b15      	cmp	r3, #21
 8001bb0:	d8f6      	bhi.n	8001ba0 <_printf_i+0x28>
 8001bb2:	a101      	add	r1, pc, #4	; (adr r1, 8001bb8 <_printf_i+0x40>)
 8001bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001bb8:	08001c11 	.word	0x08001c11
 8001bbc:	08001c25 	.word	0x08001c25
 8001bc0:	08001ba1 	.word	0x08001ba1
 8001bc4:	08001ba1 	.word	0x08001ba1
 8001bc8:	08001ba1 	.word	0x08001ba1
 8001bcc:	08001ba1 	.word	0x08001ba1
 8001bd0:	08001c25 	.word	0x08001c25
 8001bd4:	08001ba1 	.word	0x08001ba1
 8001bd8:	08001ba1 	.word	0x08001ba1
 8001bdc:	08001ba1 	.word	0x08001ba1
 8001be0:	08001ba1 	.word	0x08001ba1
 8001be4:	08001d33 	.word	0x08001d33
 8001be8:	08001c55 	.word	0x08001c55
 8001bec:	08001d15 	.word	0x08001d15
 8001bf0:	08001ba1 	.word	0x08001ba1
 8001bf4:	08001ba1 	.word	0x08001ba1
 8001bf8:	08001d55 	.word	0x08001d55
 8001bfc:	08001ba1 	.word	0x08001ba1
 8001c00:	08001c55 	.word	0x08001c55
 8001c04:	08001ba1 	.word	0x08001ba1
 8001c08:	08001ba1 	.word	0x08001ba1
 8001c0c:	08001d1d 	.word	0x08001d1d
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	1d1a      	adds	r2, r3, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	602a      	str	r2, [r5, #0]
 8001c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0a4      	b.n	8001d6e <_printf_i+0x1f6>
 8001c24:	6820      	ldr	r0, [r4, #0]
 8001c26:	6829      	ldr	r1, [r5, #0]
 8001c28:	0606      	lsls	r6, r0, #24
 8001c2a:	f101 0304 	add.w	r3, r1, #4
 8001c2e:	d50a      	bpl.n	8001c46 <_printf_i+0xce>
 8001c30:	680e      	ldr	r6, [r1, #0]
 8001c32:	602b      	str	r3, [r5, #0]
 8001c34:	2e00      	cmp	r6, #0
 8001c36:	da03      	bge.n	8001c40 <_printf_i+0xc8>
 8001c38:	232d      	movs	r3, #45	; 0x2d
 8001c3a:	4276      	negs	r6, r6
 8001c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c40:	230a      	movs	r3, #10
 8001c42:	485e      	ldr	r0, [pc, #376]	; (8001dbc <_printf_i+0x244>)
 8001c44:	e019      	b.n	8001c7a <_printf_i+0x102>
 8001c46:	680e      	ldr	r6, [r1, #0]
 8001c48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c4c:	602b      	str	r3, [r5, #0]
 8001c4e:	bf18      	it	ne
 8001c50:	b236      	sxthne	r6, r6
 8001c52:	e7ef      	b.n	8001c34 <_printf_i+0xbc>
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	6820      	ldr	r0, [r4, #0]
 8001c58:	1d19      	adds	r1, r3, #4
 8001c5a:	6029      	str	r1, [r5, #0]
 8001c5c:	0601      	lsls	r1, r0, #24
 8001c5e:	d501      	bpl.n	8001c64 <_printf_i+0xec>
 8001c60:	681e      	ldr	r6, [r3, #0]
 8001c62:	e002      	b.n	8001c6a <_printf_i+0xf2>
 8001c64:	0646      	lsls	r6, r0, #25
 8001c66:	d5fb      	bpl.n	8001c60 <_printf_i+0xe8>
 8001c68:	881e      	ldrh	r6, [r3, #0]
 8001c6a:	2f6f      	cmp	r7, #111	; 0x6f
 8001c6c:	bf0c      	ite	eq
 8001c6e:	2308      	moveq	r3, #8
 8001c70:	230a      	movne	r3, #10
 8001c72:	4852      	ldr	r0, [pc, #328]	; (8001dbc <_printf_i+0x244>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c7a:	6865      	ldr	r5, [r4, #4]
 8001c7c:	2d00      	cmp	r5, #0
 8001c7e:	bfa8      	it	ge
 8001c80:	6821      	ldrge	r1, [r4, #0]
 8001c82:	60a5      	str	r5, [r4, #8]
 8001c84:	bfa4      	itt	ge
 8001c86:	f021 0104 	bicge.w	r1, r1, #4
 8001c8a:	6021      	strge	r1, [r4, #0]
 8001c8c:	b90e      	cbnz	r6, 8001c92 <_printf_i+0x11a>
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d04d      	beq.n	8001d2e <_printf_i+0x1b6>
 8001c92:	4615      	mov	r5, r2
 8001c94:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c98:	fb03 6711 	mls	r7, r3, r1, r6
 8001c9c:	5dc7      	ldrb	r7, [r0, r7]
 8001c9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ca2:	4637      	mov	r7, r6
 8001ca4:	42bb      	cmp	r3, r7
 8001ca6:	460e      	mov	r6, r1
 8001ca8:	d9f4      	bls.n	8001c94 <_printf_i+0x11c>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d10b      	bne.n	8001cc6 <_printf_i+0x14e>
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	07de      	lsls	r6, r3, #31
 8001cb2:	d508      	bpl.n	8001cc6 <_printf_i+0x14e>
 8001cb4:	6923      	ldr	r3, [r4, #16]
 8001cb6:	6861      	ldr	r1, [r4, #4]
 8001cb8:	4299      	cmp	r1, r3
 8001cba:	bfde      	ittt	le
 8001cbc:	2330      	movle	r3, #48	; 0x30
 8001cbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cc6:	1b52      	subs	r2, r2, r5
 8001cc8:	6122      	str	r2, [r4, #16]
 8001cca:	464b      	mov	r3, r9
 8001ccc:	4621      	mov	r1, r4
 8001cce:	4640      	mov	r0, r8
 8001cd0:	f8cd a000 	str.w	sl, [sp]
 8001cd4:	aa03      	add	r2, sp, #12
 8001cd6:	f7ff fedf 	bl	8001a98 <_printf_common>
 8001cda:	3001      	adds	r0, #1
 8001cdc:	d14c      	bne.n	8001d78 <_printf_i+0x200>
 8001cde:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce2:	b004      	add	sp, #16
 8001ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ce8:	4834      	ldr	r0, [pc, #208]	; (8001dbc <_printf_i+0x244>)
 8001cea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001cee:	6829      	ldr	r1, [r5, #0]
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	f851 6b04 	ldr.w	r6, [r1], #4
 8001cf6:	6029      	str	r1, [r5, #0]
 8001cf8:	061d      	lsls	r5, r3, #24
 8001cfa:	d514      	bpl.n	8001d26 <_printf_i+0x1ae>
 8001cfc:	07df      	lsls	r7, r3, #31
 8001cfe:	bf44      	itt	mi
 8001d00:	f043 0320 	orrmi.w	r3, r3, #32
 8001d04:	6023      	strmi	r3, [r4, #0]
 8001d06:	b91e      	cbnz	r6, 8001d10 <_printf_i+0x198>
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	f023 0320 	bic.w	r3, r3, #32
 8001d0e:	6023      	str	r3, [r4, #0]
 8001d10:	2310      	movs	r3, #16
 8001d12:	e7af      	b.n	8001c74 <_printf_i+0xfc>
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	f043 0320 	orr.w	r3, r3, #32
 8001d1a:	6023      	str	r3, [r4, #0]
 8001d1c:	2378      	movs	r3, #120	; 0x78
 8001d1e:	4828      	ldr	r0, [pc, #160]	; (8001dc0 <_printf_i+0x248>)
 8001d20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d24:	e7e3      	b.n	8001cee <_printf_i+0x176>
 8001d26:	0659      	lsls	r1, r3, #25
 8001d28:	bf48      	it	mi
 8001d2a:	b2b6      	uxthmi	r6, r6
 8001d2c:	e7e6      	b.n	8001cfc <_printf_i+0x184>
 8001d2e:	4615      	mov	r5, r2
 8001d30:	e7bb      	b.n	8001caa <_printf_i+0x132>
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	6826      	ldr	r6, [r4, #0]
 8001d36:	1d18      	adds	r0, r3, #4
 8001d38:	6961      	ldr	r1, [r4, #20]
 8001d3a:	6028      	str	r0, [r5, #0]
 8001d3c:	0635      	lsls	r5, r6, #24
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	d501      	bpl.n	8001d46 <_printf_i+0x1ce>
 8001d42:	6019      	str	r1, [r3, #0]
 8001d44:	e002      	b.n	8001d4c <_printf_i+0x1d4>
 8001d46:	0670      	lsls	r0, r6, #25
 8001d48:	d5fb      	bpl.n	8001d42 <_printf_i+0x1ca>
 8001d4a:	8019      	strh	r1, [r3, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4615      	mov	r5, r2
 8001d50:	6123      	str	r3, [r4, #16]
 8001d52:	e7ba      	b.n	8001cca <_printf_i+0x152>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	2100      	movs	r1, #0
 8001d58:	1d1a      	adds	r2, r3, #4
 8001d5a:	602a      	str	r2, [r5, #0]
 8001d5c:	681d      	ldr	r5, [r3, #0]
 8001d5e:	6862      	ldr	r2, [r4, #4]
 8001d60:	4628      	mov	r0, r5
 8001d62:	f000 f82f 	bl	8001dc4 <memchr>
 8001d66:	b108      	cbz	r0, 8001d6c <_printf_i+0x1f4>
 8001d68:	1b40      	subs	r0, r0, r5
 8001d6a:	6060      	str	r0, [r4, #4]
 8001d6c:	6863      	ldr	r3, [r4, #4]
 8001d6e:	6123      	str	r3, [r4, #16]
 8001d70:	2300      	movs	r3, #0
 8001d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d76:	e7a8      	b.n	8001cca <_printf_i+0x152>
 8001d78:	462a      	mov	r2, r5
 8001d7a:	4649      	mov	r1, r9
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	6923      	ldr	r3, [r4, #16]
 8001d80:	47d0      	blx	sl
 8001d82:	3001      	adds	r0, #1
 8001d84:	d0ab      	beq.n	8001cde <_printf_i+0x166>
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	079b      	lsls	r3, r3, #30
 8001d8a:	d413      	bmi.n	8001db4 <_printf_i+0x23c>
 8001d8c:	68e0      	ldr	r0, [r4, #12]
 8001d8e:	9b03      	ldr	r3, [sp, #12]
 8001d90:	4298      	cmp	r0, r3
 8001d92:	bfb8      	it	lt
 8001d94:	4618      	movlt	r0, r3
 8001d96:	e7a4      	b.n	8001ce2 <_printf_i+0x16a>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4632      	mov	r2, r6
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	4640      	mov	r0, r8
 8001da0:	47d0      	blx	sl
 8001da2:	3001      	adds	r0, #1
 8001da4:	d09b      	beq.n	8001cde <_printf_i+0x166>
 8001da6:	3501      	adds	r5, #1
 8001da8:	68e3      	ldr	r3, [r4, #12]
 8001daa:	9903      	ldr	r1, [sp, #12]
 8001dac:	1a5b      	subs	r3, r3, r1
 8001dae:	42ab      	cmp	r3, r5
 8001db0:	dcf2      	bgt.n	8001d98 <_printf_i+0x220>
 8001db2:	e7eb      	b.n	8001d8c <_printf_i+0x214>
 8001db4:	2500      	movs	r5, #0
 8001db6:	f104 0619 	add.w	r6, r4, #25
 8001dba:	e7f5      	b.n	8001da8 <_printf_i+0x230>
 8001dbc:	08002135 	.word	0x08002135
 8001dc0:	08002146 	.word	0x08002146

08001dc4 <memchr>:
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b510      	push	{r4, lr}
 8001dc8:	b2c9      	uxtb	r1, r1
 8001dca:	4402      	add	r2, r0
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	d101      	bne.n	8001dd6 <memchr+0x12>
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e003      	b.n	8001dde <memchr+0x1a>
 8001dd6:	7804      	ldrb	r4, [r0, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	428c      	cmp	r4, r1
 8001ddc:	d1f6      	bne.n	8001dcc <memchr+0x8>
 8001dde:	bd10      	pop	{r4, pc}

08001de0 <memcpy>:
 8001de0:	440a      	add	r2, r1
 8001de2:	4291      	cmp	r1, r2
 8001de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001de8:	d100      	bne.n	8001dec <memcpy+0xc>
 8001dea:	4770      	bx	lr
 8001dec:	b510      	push	{r4, lr}
 8001dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001df2:	4291      	cmp	r1, r2
 8001df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001df8:	d1f9      	bne.n	8001dee <memcpy+0xe>
 8001dfa:	bd10      	pop	{r4, pc}

08001dfc <memmove>:
 8001dfc:	4288      	cmp	r0, r1
 8001dfe:	b510      	push	{r4, lr}
 8001e00:	eb01 0402 	add.w	r4, r1, r2
 8001e04:	d902      	bls.n	8001e0c <memmove+0x10>
 8001e06:	4284      	cmp	r4, r0
 8001e08:	4623      	mov	r3, r4
 8001e0a:	d807      	bhi.n	8001e1c <memmove+0x20>
 8001e0c:	1e43      	subs	r3, r0, #1
 8001e0e:	42a1      	cmp	r1, r4
 8001e10:	d008      	beq.n	8001e24 <memmove+0x28>
 8001e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e1a:	e7f8      	b.n	8001e0e <memmove+0x12>
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	4402      	add	r2, r0
 8001e20:	428a      	cmp	r2, r1
 8001e22:	d100      	bne.n	8001e26 <memmove+0x2a>
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e2e:	e7f7      	b.n	8001e20 <memmove+0x24>

08001e30 <_free_r>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4605      	mov	r5, r0
 8001e34:	2900      	cmp	r1, #0
 8001e36:	d040      	beq.n	8001eba <_free_r+0x8a>
 8001e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e3c:	1f0c      	subs	r4, r1, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bfb8      	it	lt
 8001e42:	18e4      	addlt	r4, r4, r3
 8001e44:	f000 f910 	bl	8002068 <__malloc_lock>
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <_free_r+0x8c>)
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	b933      	cbnz	r3, 8001e5c <_free_r+0x2c>
 8001e4e:	6063      	str	r3, [r4, #4]
 8001e50:	6014      	str	r4, [r2, #0]
 8001e52:	4628      	mov	r0, r5
 8001e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e58:	f000 b90c 	b.w	8002074 <__malloc_unlock>
 8001e5c:	42a3      	cmp	r3, r4
 8001e5e:	d908      	bls.n	8001e72 <_free_r+0x42>
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	1821      	adds	r1, r4, r0
 8001e64:	428b      	cmp	r3, r1
 8001e66:	bf01      	itttt	eq
 8001e68:	6819      	ldreq	r1, [r3, #0]
 8001e6a:	685b      	ldreq	r3, [r3, #4]
 8001e6c:	1809      	addeq	r1, r1, r0
 8001e6e:	6021      	streq	r1, [r4, #0]
 8001e70:	e7ed      	b.n	8001e4e <_free_r+0x1e>
 8001e72:	461a      	mov	r2, r3
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	b10b      	cbz	r3, 8001e7c <_free_r+0x4c>
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	d9fa      	bls.n	8001e72 <_free_r+0x42>
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	1850      	adds	r0, r2, r1
 8001e80:	42a0      	cmp	r0, r4
 8001e82:	d10b      	bne.n	8001e9c <_free_r+0x6c>
 8001e84:	6820      	ldr	r0, [r4, #0]
 8001e86:	4401      	add	r1, r0
 8001e88:	1850      	adds	r0, r2, r1
 8001e8a:	4283      	cmp	r3, r0
 8001e8c:	6011      	str	r1, [r2, #0]
 8001e8e:	d1e0      	bne.n	8001e52 <_free_r+0x22>
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4401      	add	r1, r0
 8001e96:	6011      	str	r1, [r2, #0]
 8001e98:	6053      	str	r3, [r2, #4]
 8001e9a:	e7da      	b.n	8001e52 <_free_r+0x22>
 8001e9c:	d902      	bls.n	8001ea4 <_free_r+0x74>
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	602b      	str	r3, [r5, #0]
 8001ea2:	e7d6      	b.n	8001e52 <_free_r+0x22>
 8001ea4:	6820      	ldr	r0, [r4, #0]
 8001ea6:	1821      	adds	r1, r4, r0
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	bf01      	itttt	eq
 8001eac:	6819      	ldreq	r1, [r3, #0]
 8001eae:	685b      	ldreq	r3, [r3, #4]
 8001eb0:	1809      	addeq	r1, r1, r0
 8001eb2:	6021      	streq	r1, [r4, #0]
 8001eb4:	6063      	str	r3, [r4, #4]
 8001eb6:	6054      	str	r4, [r2, #4]
 8001eb8:	e7cb      	b.n	8001e52 <_free_r+0x22>
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
 8001ebc:	200000ac 	.word	0x200000ac

08001ec0 <sbrk_aligned>:
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	4e0e      	ldr	r6, [pc, #56]	; (8001efc <sbrk_aligned+0x3c>)
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	6831      	ldr	r1, [r6, #0]
 8001ec8:	4605      	mov	r5, r0
 8001eca:	b911      	cbnz	r1, 8001ed2 <sbrk_aligned+0x12>
 8001ecc:	f000 f8bc 	bl	8002048 <_sbrk_r>
 8001ed0:	6030      	str	r0, [r6, #0]
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f000 f8b7 	bl	8002048 <_sbrk_r>
 8001eda:	1c43      	adds	r3, r0, #1
 8001edc:	d00a      	beq.n	8001ef4 <sbrk_aligned+0x34>
 8001ede:	1cc4      	adds	r4, r0, #3
 8001ee0:	f024 0403 	bic.w	r4, r4, #3
 8001ee4:	42a0      	cmp	r0, r4
 8001ee6:	d007      	beq.n	8001ef8 <sbrk_aligned+0x38>
 8001ee8:	1a21      	subs	r1, r4, r0
 8001eea:	4628      	mov	r0, r5
 8001eec:	f000 f8ac 	bl	8002048 <_sbrk_r>
 8001ef0:	3001      	adds	r0, #1
 8001ef2:	d101      	bne.n	8001ef8 <sbrk_aligned+0x38>
 8001ef4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ef8:	4620      	mov	r0, r4
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	200000b0 	.word	0x200000b0

08001f00 <_malloc_r>:
 8001f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f04:	1ccd      	adds	r5, r1, #3
 8001f06:	f025 0503 	bic.w	r5, r5, #3
 8001f0a:	3508      	adds	r5, #8
 8001f0c:	2d0c      	cmp	r5, #12
 8001f0e:	bf38      	it	cc
 8001f10:	250c      	movcc	r5, #12
 8001f12:	2d00      	cmp	r5, #0
 8001f14:	4607      	mov	r7, r0
 8001f16:	db01      	blt.n	8001f1c <_malloc_r+0x1c>
 8001f18:	42a9      	cmp	r1, r5
 8001f1a:	d905      	bls.n	8001f28 <_malloc_r+0x28>
 8001f1c:	230c      	movs	r3, #12
 8001f1e:	2600      	movs	r6, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4630      	mov	r0, r6
 8001f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f28:	4e2e      	ldr	r6, [pc, #184]	; (8001fe4 <_malloc_r+0xe4>)
 8001f2a:	f000 f89d 	bl	8002068 <__malloc_lock>
 8001f2e:	6833      	ldr	r3, [r6, #0]
 8001f30:	461c      	mov	r4, r3
 8001f32:	bb34      	cbnz	r4, 8001f82 <_malloc_r+0x82>
 8001f34:	4629      	mov	r1, r5
 8001f36:	4638      	mov	r0, r7
 8001f38:	f7ff ffc2 	bl	8001ec0 <sbrk_aligned>
 8001f3c:	1c43      	adds	r3, r0, #1
 8001f3e:	4604      	mov	r4, r0
 8001f40:	d14d      	bne.n	8001fde <_malloc_r+0xde>
 8001f42:	6834      	ldr	r4, [r6, #0]
 8001f44:	4626      	mov	r6, r4
 8001f46:	2e00      	cmp	r6, #0
 8001f48:	d140      	bne.n	8001fcc <_malloc_r+0xcc>
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	4631      	mov	r1, r6
 8001f4e:	4638      	mov	r0, r7
 8001f50:	eb04 0803 	add.w	r8, r4, r3
 8001f54:	f000 f878 	bl	8002048 <_sbrk_r>
 8001f58:	4580      	cmp	r8, r0
 8001f5a:	d13a      	bne.n	8001fd2 <_malloc_r+0xd2>
 8001f5c:	6821      	ldr	r1, [r4, #0]
 8001f5e:	3503      	adds	r5, #3
 8001f60:	1a6d      	subs	r5, r5, r1
 8001f62:	f025 0503 	bic.w	r5, r5, #3
 8001f66:	3508      	adds	r5, #8
 8001f68:	2d0c      	cmp	r5, #12
 8001f6a:	bf38      	it	cc
 8001f6c:	250c      	movcc	r5, #12
 8001f6e:	4638      	mov	r0, r7
 8001f70:	4629      	mov	r1, r5
 8001f72:	f7ff ffa5 	bl	8001ec0 <sbrk_aligned>
 8001f76:	3001      	adds	r0, #1
 8001f78:	d02b      	beq.n	8001fd2 <_malloc_r+0xd2>
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	442b      	add	r3, r5
 8001f7e:	6023      	str	r3, [r4, #0]
 8001f80:	e00e      	b.n	8001fa0 <_malloc_r+0xa0>
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	1b52      	subs	r2, r2, r5
 8001f86:	d41e      	bmi.n	8001fc6 <_malloc_r+0xc6>
 8001f88:	2a0b      	cmp	r2, #11
 8001f8a:	d916      	bls.n	8001fba <_malloc_r+0xba>
 8001f8c:	1961      	adds	r1, r4, r5
 8001f8e:	42a3      	cmp	r3, r4
 8001f90:	6025      	str	r5, [r4, #0]
 8001f92:	bf18      	it	ne
 8001f94:	6059      	strne	r1, [r3, #4]
 8001f96:	6863      	ldr	r3, [r4, #4]
 8001f98:	bf08      	it	eq
 8001f9a:	6031      	streq	r1, [r6, #0]
 8001f9c:	5162      	str	r2, [r4, r5]
 8001f9e:	604b      	str	r3, [r1, #4]
 8001fa0:	4638      	mov	r0, r7
 8001fa2:	f104 060b 	add.w	r6, r4, #11
 8001fa6:	f000 f865 	bl	8002074 <__malloc_unlock>
 8001faa:	f026 0607 	bic.w	r6, r6, #7
 8001fae:	1d23      	adds	r3, r4, #4
 8001fb0:	1af2      	subs	r2, r6, r3
 8001fb2:	d0b6      	beq.n	8001f22 <_malloc_r+0x22>
 8001fb4:	1b9b      	subs	r3, r3, r6
 8001fb6:	50a3      	str	r3, [r4, r2]
 8001fb8:	e7b3      	b.n	8001f22 <_malloc_r+0x22>
 8001fba:	6862      	ldr	r2, [r4, #4]
 8001fbc:	42a3      	cmp	r3, r4
 8001fbe:	bf0c      	ite	eq
 8001fc0:	6032      	streq	r2, [r6, #0]
 8001fc2:	605a      	strne	r2, [r3, #4]
 8001fc4:	e7ec      	b.n	8001fa0 <_malloc_r+0xa0>
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	6864      	ldr	r4, [r4, #4]
 8001fca:	e7b2      	b.n	8001f32 <_malloc_r+0x32>
 8001fcc:	4634      	mov	r4, r6
 8001fce:	6876      	ldr	r6, [r6, #4]
 8001fd0:	e7b9      	b.n	8001f46 <_malloc_r+0x46>
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	f000 f84c 	bl	8002074 <__malloc_unlock>
 8001fdc:	e7a1      	b.n	8001f22 <_malloc_r+0x22>
 8001fde:	6025      	str	r5, [r4, #0]
 8001fe0:	e7de      	b.n	8001fa0 <_malloc_r+0xa0>
 8001fe2:	bf00      	nop
 8001fe4:	200000ac 	.word	0x200000ac

08001fe8 <_realloc_r>:
 8001fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fec:	4680      	mov	r8, r0
 8001fee:	4614      	mov	r4, r2
 8001ff0:	460e      	mov	r6, r1
 8001ff2:	b921      	cbnz	r1, 8001ffe <_realloc_r+0x16>
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffa:	f7ff bf81 	b.w	8001f00 <_malloc_r>
 8001ffe:	b92a      	cbnz	r2, 800200c <_realloc_r+0x24>
 8002000:	f7ff ff16 	bl	8001e30 <_free_r>
 8002004:	4625      	mov	r5, r4
 8002006:	4628      	mov	r0, r5
 8002008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800200c:	f000 f838 	bl	8002080 <_malloc_usable_size_r>
 8002010:	4284      	cmp	r4, r0
 8002012:	4607      	mov	r7, r0
 8002014:	d802      	bhi.n	800201c <_realloc_r+0x34>
 8002016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800201a:	d812      	bhi.n	8002042 <_realloc_r+0x5a>
 800201c:	4621      	mov	r1, r4
 800201e:	4640      	mov	r0, r8
 8002020:	f7ff ff6e 	bl	8001f00 <_malloc_r>
 8002024:	4605      	mov	r5, r0
 8002026:	2800      	cmp	r0, #0
 8002028:	d0ed      	beq.n	8002006 <_realloc_r+0x1e>
 800202a:	42bc      	cmp	r4, r7
 800202c:	4622      	mov	r2, r4
 800202e:	4631      	mov	r1, r6
 8002030:	bf28      	it	cs
 8002032:	463a      	movcs	r2, r7
 8002034:	f7ff fed4 	bl	8001de0 <memcpy>
 8002038:	4631      	mov	r1, r6
 800203a:	4640      	mov	r0, r8
 800203c:	f7ff fef8 	bl	8001e30 <_free_r>
 8002040:	e7e1      	b.n	8002006 <_realloc_r+0x1e>
 8002042:	4635      	mov	r5, r6
 8002044:	e7df      	b.n	8002006 <_realloc_r+0x1e>
	...

08002048 <_sbrk_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	2300      	movs	r3, #0
 800204c:	4d05      	ldr	r5, [pc, #20]	; (8002064 <_sbrk_r+0x1c>)
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	602b      	str	r3, [r5, #0]
 8002054:	f7fe fbe0 	bl	8000818 <_sbrk>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d102      	bne.n	8002062 <_sbrk_r+0x1a>
 800205c:	682b      	ldr	r3, [r5, #0]
 800205e:	b103      	cbz	r3, 8002062 <_sbrk_r+0x1a>
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	200000b4 	.word	0x200000b4

08002068 <__malloc_lock>:
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <__malloc_lock+0x8>)
 800206a:	f000 b811 	b.w	8002090 <__retarget_lock_acquire_recursive>
 800206e:	bf00      	nop
 8002070:	200000b8 	.word	0x200000b8

08002074 <__malloc_unlock>:
 8002074:	4801      	ldr	r0, [pc, #4]	; (800207c <__malloc_unlock+0x8>)
 8002076:	f000 b80c 	b.w	8002092 <__retarget_lock_release_recursive>
 800207a:	bf00      	nop
 800207c:	200000b8 	.word	0x200000b8

08002080 <_malloc_usable_size_r>:
 8002080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002084:	1f18      	subs	r0, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	bfbc      	itt	lt
 800208a:	580b      	ldrlt	r3, [r1, r0]
 800208c:	18c0      	addlt	r0, r0, r3
 800208e:	4770      	bx	lr

08002090 <__retarget_lock_acquire_recursive>:
 8002090:	4770      	bx	lr

08002092 <__retarget_lock_release_recursive>:
 8002092:	4770      	bx	lr

08002094 <_init>:
 8002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002096:	bf00      	nop
 8002098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209a:	bc08      	pop	{r3}
 800209c:	469e      	mov	lr, r3
 800209e:	4770      	bx	lr

080020a0 <_fini>:
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	bf00      	nop
 80020a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a6:	bc08      	pop	{r3}
 80020a8:	469e      	mov	lr, r3
 80020aa:	4770      	bx	lr
