
6. PWM_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002364  08002364  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002364  08002364  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002364  08002364  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800236c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002378  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002378  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098c5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e6  00000000  00000000  000298fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002be80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f27  00000000  00000000  0002c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c150  00000000  00000000  0004388f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086223  00000000  00000000  0004f9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5c02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  000d5c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002324 	.word	0x08002324

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002324 	.word	0x08002324

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ae:	f000 fae5 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b2:	f000 f843 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b6:	f7ff ffc9 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ba:	f000 f8e9 	bl	8000390 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80001be:	f000 fa41 	bl	8000644 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80001c2:	f000 f95b 	bl	800047c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // SG90 Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // CW End(0.2ms)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4819      	ldr	r0, [pc, #100]	; (8000230 <main+0x88>)
 80001ca:	f001 fa7d 	bl	80016c8 <HAL_TIM_PWM_Start>

  // Buzzer(500Hz)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001ce:	2100      	movs	r1, #0
 80001d0:	4818      	ldr	r0, [pc, #96]	; (8000234 <main+0x8c>)
 80001d2:	f001 fa79 	bl	80016c8 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f000 fb31 	bl	8000840 <HAL_Delay>
  TIM2->CCR1 = 1500; // CCW End(3ms)
 80001de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001e6:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint16_t arr = 1000;
  uint16_t psc = 1000;
 80001e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ec:	80fb      	strh	r3, [r7, #6]
  uint8_t ud_flag = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	717b      	strb	r3, [r7, #5]
  while (1)
  {
	  // Buzzer 500Hz ~ 200Hz repeat
	  if(ud_flag == 0)
 80001f2:	797b      	ldrb	r3, [r7, #5]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d10a      	bne.n	800020e <main+0x66>
	  {
		  psc++;
 80001f8:	88fb      	ldrh	r3, [r7, #6]
 80001fa:	3301      	adds	r3, #1
 80001fc:	80fb      	strh	r3, [r7, #6]
		  if(psc >= 2500) ud_flag = 1;
 80001fe:	88fb      	ldrh	r3, [r7, #6]
 8000200:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000204:	4293      	cmp	r3, r2
 8000206:	d90b      	bls.n	8000220 <main+0x78>
 8000208:	2301      	movs	r3, #1
 800020a:	717b      	strb	r3, [r7, #5]
 800020c:	e008      	b.n	8000220 <main+0x78>
	  }
	  else
	  {
		  psc--;
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	3b01      	subs	r3, #1
 8000212:	80fb      	strh	r3, [r7, #6]
		  if(psc <= 1000) ud_flag = 0;
 8000214:	88fb      	ldrh	r3, [r7, #6]
 8000216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800021a:	d801      	bhi.n	8000220 <main+0x78>
 800021c:	2300      	movs	r3, #0
 800021e:	717b      	strb	r3, [r7, #5]
	  }

	  TIM3->PSC = psc;
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <main+0x90>)
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	6293      	str	r3, [r2, #40]	; 0x28
//	  TIM3->CCR1 = TIM3->ARR / 2;

	  HAL_Delay(1);
 8000226:	2001      	movs	r0, #1
 8000228:	f000 fb0a 	bl	8000840 <HAL_Delay>
	  if(ud_flag == 0)
 800022c:	e7e1      	b.n	80001f2 <main+0x4a>
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028
 8000234:	20000070 	.word	0x20000070
 8000238:	40000400 	.word	0x40000400

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	; 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f002 f862 	bl	8002314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025e:	2301      	movs	r3, #1
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	2302      	movs	r3, #2
 8000272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fd67 	bl	8000d58 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000290:	f000 f819 	bl	80002c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 ffd4 	bl	800125c <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f804 	bl	80002c6 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ca:	b672      	cpsid	i
}
 80002cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ce:	e7fe      	b.n	80002ce <Error_Handler+0x8>

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <HAL_MspInit+0x5c>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a14      	ldr	r2, [pc, #80]	; (800032c <HAL_MspInit+0x5c>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <HAL_MspInit+0x5c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <HAL_MspInit+0x5c>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <HAL_MspInit+0x5c>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f8:	61d3      	str	r3, [r2, #28]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <HAL_MspInit+0x5c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <HAL_MspInit+0x60>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_MspInit+0x60>)
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000
 8000330:	40010000 	.word	0x40010000

08000334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000338:	e7fe      	b.n	8000338 <NMI_Handler+0x4>

0800033a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033e:	e7fe      	b.n	800033e <HardFault_Handler+0x4>

08000340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <MemManage_Handler+0x4>

08000346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <BusFault_Handler+0x4>

0800034c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <UsageFault_Handler+0x4>

08000352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr

08000376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037a:	f000 fa45 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}

08000382 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
	...

08000390 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08e      	sub	sp, #56	; 0x38
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
 80003bc:	615a      	str	r2, [r3, #20]
 80003be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c0:	4b2d      	ldr	r3, [pc, #180]	; (8000478 <MX_TIM2_Init+0xe8>)
 80003c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <MX_TIM2_Init+0xe8>)
 80003ca:	228f      	movs	r2, #143	; 0x8f
 80003cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ce:	4b2a      	ldr	r3, [pc, #168]	; (8000478 <MX_TIM2_Init+0xe8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <MX_TIM2_Init+0xe8>)
 80003d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80003da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003dc:	4b26      	ldr	r3, [pc, #152]	; (8000478 <MX_TIM2_Init+0xe8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e2:	4b25      	ldr	r3, [pc, #148]	; (8000478 <MX_TIM2_Init+0xe8>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003e8:	4823      	ldr	r0, [pc, #140]	; (8000478 <MX_TIM2_Init+0xe8>)
 80003ea:	f001 f8cf 	bl	800158c <HAL_TIM_Base_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003f4:	f7ff ff67 	bl	80002c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	4619      	mov	r1, r3
 8000404:	481c      	ldr	r0, [pc, #112]	; (8000478 <MX_TIM2_Init+0xe8>)
 8000406:	f001 fabf 	bl	8001988 <HAL_TIM_ConfigClockSource>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000410:	f7ff ff59 	bl	80002c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000414:	4818      	ldr	r0, [pc, #96]	; (8000478 <MX_TIM2_Init+0xe8>)
 8000416:	f001 f908 	bl	800162a <HAL_TIM_PWM_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000420:	f7ff ff51 	bl	80002c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800042c:	f107 0320 	add.w	r3, r7, #32
 8000430:	4619      	mov	r1, r3
 8000432:	4811      	ldr	r0, [pc, #68]	; (8000478 <MX_TIM2_Init+0xe8>)
 8000434:	f001 fe10 	bl	8002058 <HAL_TIMEx_MasterConfigSynchronization>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800043e:	f7ff ff42 	bl	80002c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000442:	2360      	movs	r3, #96	; 0x60
 8000444:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000446:	2364      	movs	r3, #100	; 0x64
 8000448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	4807      	ldr	r0, [pc, #28]	; (8000478 <MX_TIM2_Init+0xe8>)
 800045a:	f001 f9d7 	bl	800180c <HAL_TIM_PWM_ConfigChannel>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000464:	f7ff ff2f 	bl	80002c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <MX_TIM2_Init+0xe8>)
 800046a:	f000 f89b 	bl	80005a4 <HAL_TIM_MspPostInit>

}
 800046e:	bf00      	nop
 8000470:	3738      	adds	r7, #56	; 0x38
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000028 	.word	0x20000028

0800047c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000482:	f107 0320 	add.w	r3, r7, #32
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800049e:	4b22      	ldr	r3, [pc, #136]	; (8000528 <MX_TIM3_Init+0xac>)
 80004a0:	4a22      	ldr	r2, [pc, #136]	; (800052c <MX_TIM3_Init+0xb0>)
 80004a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 80004a4:	4b20      	ldr	r3, [pc, #128]	; (8000528 <MX_TIM3_Init+0xac>)
 80004a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_TIM3_Init+0xac>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 144-1;
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <MX_TIM3_Init+0xac>)
 80004b4:	228f      	movs	r2, #143	; 0x8f
 80004b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_TIM3_Init+0xac>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_TIM3_Init+0xac>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004c4:	4818      	ldr	r0, [pc, #96]	; (8000528 <MX_TIM3_Init+0xac>)
 80004c6:	f001 f8b0 	bl	800162a <HAL_TIM_PWM_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80004d0:	f7ff fef9 	bl	80002c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004dc:	f107 0320 	add.w	r3, r7, #32
 80004e0:	4619      	mov	r1, r3
 80004e2:	4811      	ldr	r0, [pc, #68]	; (8000528 <MX_TIM3_Init+0xac>)
 80004e4:	f001 fdb8 	bl	8002058 <HAL_TIMEx_MasterConfigSynchronization>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80004ee:	f7ff feea 	bl	80002c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f2:	2360      	movs	r3, #96	; 0x60
 80004f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72;
 80004f6:	2348      	movs	r3, #72	; 0x48
 80004f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	4619      	mov	r1, r3
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <MX_TIM3_Init+0xac>)
 800050a:	f001 f97f 	bl	800180c <HAL_TIM_PWM_ConfigChannel>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000514:	f7ff fed7 	bl	80002c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <MX_TIM3_Init+0xac>)
 800051a:	f000 f843 	bl	80005a4 <HAL_TIM_MspPostInit>

}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000070 	.word	0x20000070
 800052c:	40000400 	.word	0x40000400

08000530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000540:	d10b      	bne.n	800055a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_TIM_Base_MspInit+0x34>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <HAL_TIM_Base_MspInit+0x34>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_TIM_Base_MspInit+0x34>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <HAL_TIM_PWM_MspInit+0x34>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d10b      	bne.n	8000592 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_TIM_PWM_MspInit+0x38>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <HAL_TIM_PWM_MspInit+0x38>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_TIM_PWM_MspInit+0x38>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40000400 	.word	0x40000400
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005c2:	d118      	bne.n	80005f6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <HAL_TIM_MspPostInit+0x94>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <HAL_TIM_MspPostInit+0x94>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_TIM_MspPostInit+0x94>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <HAL_TIM_MspPostInit+0x98>)
 80005f0:	f000 fa2e 	bl	8000a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005f4:	e01c      	b.n	8000630 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <HAL_TIM_MspPostInit+0x9c>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d117      	bne.n	8000630 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <HAL_TIM_MspPostInit+0x94>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <HAL_TIM_MspPostInit+0x94>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_TIM_MspPostInit+0x94>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2302      	movs	r3, #2
 8000622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <HAL_TIM_MspPostInit+0x98>)
 800062c:	f000 fa10 	bl	8000a50 <HAL_GPIO_Init>
}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800
 8000640:	40000400 	.word	0x40000400

08000644 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_USART3_UART_Init+0x50>)
 800064c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART3_UART_Init+0x4c>)
 800067c:	f001 fd4a 	bl	8002114 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000686:	f7ff fe1e 	bl	80002c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000b8 	.word	0x200000b8
 8000694:	40004800 	.word	0x40004800

08000698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d131      	bne.n	800071c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <HAL_UART_MspInit+0x94>)
 80006fe:	f000 f9a7 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_UART_MspInit+0x94>)
 8000718:	f000 f99a 	bl	8000a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40004800 	.word	0x40004800
 8000728:	40021000 	.word	0x40021000
 800072c:	40010c00 	.word	0x40010c00

08000730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000748:	4c0a      	ldr	r4, [pc, #40]	; (8000774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000756:	f7ff fe14 	bl	8000382 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075a:	f001 fdb7 	bl	80022cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff fd23 	bl	80001a8 <main>
  bx lr
 8000762:	4770      	bx	lr
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800076c:	0800236c 	.word	0x0800236c
  ldr r2, =_sbss
 8000770:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000774:	20000100 	.word	0x20000100

08000778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC1_2_IRQHandler>
	...

0800077c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_Init+0x28>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <HAL_Init+0x28>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 f92b 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000792:	200f      	movs	r0, #15
 8000794:	f000 f808 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff fd9a 	bl	80002d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40022000 	.word	0x40022000

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x54>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x58>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f935 	bl	8000a36 <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 f90b 	bl	80009fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x5c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x1c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x20>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <HAL_IncTick+0x20>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000008 	.word	0x20000008
 8000828:	200000fc 	.word	0x200000fc

0800082c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <HAL_GetTick+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	200000fc 	.word	0x200000fc

08000840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff fff0 	bl	800082c <HAL_GetTick>
 800084c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d005      	beq.n	8000866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_Delay+0x44>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000866:	bf00      	nop
 8000868:	f7ff ffe0 	bl	800082c <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f7      	bhi.n	8000868 <HAL_Delay+0x28>
  {
  }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	; 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	; 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b4:	d301      	bcc.n	80009ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00f      	b.n	80009da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <SysTick_Config+0x40>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c2:	210f      	movs	r1, #15
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f7ff ff90 	bl	80008ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SysTick_Config+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SysTick_Config+0x40>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff49 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a10:	f7ff ff5e 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff ff90 	bl	8000940 <NVIC_EncodePriority>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff5f 	bl	80008ec <__NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffb0 	bl	80009a4 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b08b      	sub	sp, #44	; 0x2c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	e169      	b.n	8000d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a64:	2201      	movs	r2, #1
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f040 8158 	bne.w	8000d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4a9a      	ldr	r2, [pc, #616]	; (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d05e      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a8c:	4a98      	ldr	r2, [pc, #608]	; (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d875      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a92:	4a98      	ldr	r2, [pc, #608]	; (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d058      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a98:	4a96      	ldr	r2, [pc, #600]	; (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d86f      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a9e:	4a96      	ldr	r2, [pc, #600]	; (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d052      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000aa4:	4a94      	ldr	r2, [pc, #592]	; (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d869      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aaa:	4a94      	ldr	r2, [pc, #592]	; (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d04c      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000ab0:	4a92      	ldr	r2, [pc, #584]	; (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d863      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ab6:	4a92      	ldr	r2, [pc, #584]	; (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d046      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000abc:	4a90      	ldr	r2, [pc, #576]	; (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d85d      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d82a      	bhi.n	8000b1c <HAL_GPIO_Init+0xcc>
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d859      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aca:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <HAL_GPIO_Init+0x80>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000b4b 	.word	0x08000b4b
 8000ad4:	08000b25 	.word	0x08000b25
 8000ad8:	08000b37 	.word	0x08000b37
 8000adc:	08000b79 	.word	0x08000b79
 8000ae0:	08000b7f 	.word	0x08000b7f
 8000ae4:	08000b7f 	.word	0x08000b7f
 8000ae8:	08000b7f 	.word	0x08000b7f
 8000aec:	08000b7f 	.word	0x08000b7f
 8000af0:	08000b7f 	.word	0x08000b7f
 8000af4:	08000b7f 	.word	0x08000b7f
 8000af8:	08000b7f 	.word	0x08000b7f
 8000afc:	08000b7f 	.word	0x08000b7f
 8000b00:	08000b7f 	.word	0x08000b7f
 8000b04:	08000b7f 	.word	0x08000b7f
 8000b08:	08000b7f 	.word	0x08000b7f
 8000b0c:	08000b7f 	.word	0x08000b7f
 8000b10:	08000b7f 	.word	0x08000b7f
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000b41 	.word	0x08000b41
 8000b1c:	4a79      	ldr	r2, [pc, #484]	; (8000d04 <HAL_GPIO_Init+0x2b4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b22:	e02c      	b.n	8000b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e029      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	3304      	adds	r3, #4
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e024      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e01f      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e01a      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b52:	2304      	movs	r3, #4
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e013      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	2308      	movs	r3, #8
 8000b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	611a      	str	r2, [r3, #16]
          break;
 8000b6a:	e009      	b.n	8000b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	615a      	str	r2, [r3, #20]
          break;
 8000b76:	e003      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          break;
 8000b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2bff      	cmp	r3, #255	; 0xff
 8000b84:	d801      	bhi.n	8000b8a <HAL_GPIO_Init+0x13a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	e001      	b.n	8000b8e <HAL_GPIO_Init+0x13e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d802      	bhi.n	8000b9c <HAL_GPIO_Init+0x14c>
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	3b08      	subs	r3, #8
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	210f      	movs	r1, #15
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	6a39      	ldr	r1, [r7, #32]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 80b1 	beq.w	8000d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be8:	4a48      	ldr	r2, [pc, #288]	; (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <HAL_GPIO_Init+0x2c0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1ec>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1e8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	; (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3d      	ldr	r2, [pc, #244]	; (8000d1c <HAL_GPIO_Init+0x2cc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1e0>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e006      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c30:	2304      	movs	r3, #4
 8000c32:	e004      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	4093      	lsls	r3, r2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c4e:	492f      	ldr	r1, [pc, #188]	; (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	492c      	ldr	r1, [pc, #176]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4928      	ldr	r1, [pc, #160]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4922      	ldr	r1, [pc, #136]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	491e      	ldr	r1, [pc, #120]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	4918      	ldr	r1, [pc, #96]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4914      	ldr	r1, [pc, #80]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d021      	beq.n	8000d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	490e      	ldr	r1, [pc, #56]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60cb      	str	r3, [r1, #12]
 8000cec:	e021      	b.n	8000d32 <HAL_GPIO_Init+0x2e2>
 8000cee:	bf00      	nop
 8000cf0:	10320000 	.word	0x10320000
 8000cf4:	10310000 	.word	0x10310000
 8000cf8:	10220000 	.word	0x10220000
 8000cfc:	10210000 	.word	0x10210000
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10110000 	.word	0x10110000
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40011400 	.word	0x40011400
 8000d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_GPIO_Init+0x304>)
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4909      	ldr	r1, [pc, #36]	; (8000d54 <HAL_GPIO_Init+0x304>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	3301      	adds	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f47f ae8e 	bne.w	8000a64 <HAL_GPIO_Init+0x14>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	372c      	adds	r7, #44	; 0x2c
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e272      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 8087 	beq.w	8000e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d78:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d00c      	beq.n	8000d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d84:	4b8f      	ldr	r3, [pc, #572]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d112      	bne.n	8000db6 <HAL_RCC_OscConfig+0x5e>
 8000d90:	4b8c      	ldr	r3, [pc, #560]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9c:	d10b      	bne.n	8000db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9e:	4b89      	ldr	r3, [pc, #548]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d06c      	beq.n	8000e84 <HAL_RCC_OscConfig+0x12c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d168      	bne.n	8000e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e24c      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbe:	d106      	bne.n	8000dce <HAL_RCC_OscConfig+0x76>
 8000dc0:	4b80      	ldr	r3, [pc, #512]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a7f      	ldr	r2, [pc, #508]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	e02e      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x98>
 8000dd6:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a7a      	ldr	r2, [pc, #488]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b78      	ldr	r3, [pc, #480]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a77      	ldr	r2, [pc, #476]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e01d      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0xbc>
 8000dfa:	4b72      	ldr	r3, [pc, #456]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a71      	ldr	r2, [pc, #452]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b6f      	ldr	r3, [pc, #444]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a6e      	ldr	r2, [pc, #440]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e00b      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000e14:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a6a      	ldr	r2, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b68      	ldr	r3, [pc, #416]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a67      	ldr	r2, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d013      	beq.n	8000e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fcfa 	bl	800082c <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fcf6 	bl	800082c <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e200      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0xe4>
 8000e5a:	e014      	b.n	8000e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fce6 	bl	800082c <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fce2 	bl	800082c <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1ec      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x10c>
 8000e82:	e000      	b.n	8000e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d063      	beq.n	8000f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e92:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e9e:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d11c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x18c>
 8000eaa:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d116      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <HAL_RCC_OscConfig+0x176>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d001      	beq.n	8000ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e1c0      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4939      	ldr	r1, [pc, #228]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee2:	e03a      	b.n	8000f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d020      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_RCC_OscConfig+0x270>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fc9b 	bl	800082c <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fc97 	bl	800082c <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e1a1      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4927      	ldr	r1, [pc, #156]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_RCC_OscConfig+0x270>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc7a 	bl	800082c <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fc76 	bl	800082c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e180      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d03a      	beq.n	8000fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d019      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_RCC_OscConfig+0x274>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f74:	f7ff fc5a 	bl	800082c <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc56 	bl	800082c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e160      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f000 fad8 	bl	8001550 <RCC_Delay>
 8000fa0:	e01c      	b.n	8000fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_RCC_OscConfig+0x274>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fc40 	bl	800082c <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fae:	e00f      	b.n	8000fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc3c 	bl	800082c <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d908      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e146      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	42420000 	.word	0x42420000
 8000fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd0:	4b92      	ldr	r3, [pc, #584]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e9      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80a6 	beq.w	8001136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fee:	4b8b      	ldr	r3, [pc, #556]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10d      	bne.n	8001016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a87      	ldr	r2, [pc, #540]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b85      	ldr	r3, [pc, #532]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001016:	4b82      	ldr	r3, [pc, #520]	; (8001220 <HAL_RCC_OscConfig+0x4c8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	2b00      	cmp	r3, #0
 8001020:	d118      	bne.n	8001054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001022:	4b7f      	ldr	r3, [pc, #508]	; (8001220 <HAL_RCC_OscConfig+0x4c8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7e      	ldr	r2, [pc, #504]	; (8001220 <HAL_RCC_OscConfig+0x4c8>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102e:	f7ff fbfd 	bl	800082c <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001036:	f7ff fbf9 	bl	800082c <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e103      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	4b75      	ldr	r3, [pc, #468]	; (8001220 <HAL_RCC_OscConfig+0x4c8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x312>
 800105c:	4b6f      	ldr	r3, [pc, #444]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4a6e      	ldr	r2, [pc, #440]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	e02d      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x334>
 8001072:	4b6a      	ldr	r3, [pc, #424]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a69      	ldr	r2, [pc, #420]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6213      	str	r3, [r2, #32]
 800107e:	4b67      	ldr	r3, [pc, #412]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a66      	ldr	r2, [pc, #408]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f023 0304 	bic.w	r3, r3, #4
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	e01c      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b05      	cmp	r3, #5
 8001092:	d10c      	bne.n	80010ae <HAL_RCC_OscConfig+0x356>
 8001094:	4b61      	ldr	r3, [pc, #388]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a60      	ldr	r2, [pc, #384]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	4b5e      	ldr	r3, [pc, #376]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4a5d      	ldr	r2, [pc, #372]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6213      	str	r3, [r2, #32]
 80010ac:	e00b      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 80010ae:	4b5b      	ldr	r3, [pc, #364]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a5a      	ldr	r2, [pc, #360]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6213      	str	r3, [r2, #32]
 80010ba:	4b58      	ldr	r3, [pc, #352]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a57      	ldr	r2, [pc, #348]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d015      	beq.n	80010fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fbad 	bl	800082c <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d4:	e00a      	b.n	80010ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff fba9 	bl	800082c <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e0b1      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ee      	beq.n	80010d6 <HAL_RCC_OscConfig+0x37e>
 80010f8:	e014      	b.n	8001124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fb97 	bl	800082c <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001100:	e00a      	b.n	8001118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001102:	f7ff fb93 	bl	800082c <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001110:	4293      	cmp	r3, r2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e09b      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001118:	4b40      	ldr	r3, [pc, #256]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1ee      	bne.n	8001102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d105      	bne.n	8001136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112a:	4b3c      	ldr	r3, [pc, #240]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a3b      	ldr	r2, [pc, #236]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8087 	beq.w	800124e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b08      	cmp	r3, #8
 800114a:	d061      	beq.n	8001210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d146      	bne.n	80011e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <HAL_RCC_OscConfig+0x4cc>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fb67 	bl	800082c <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff fb63 	bl	800082c <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e06d      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f0      	bne.n	8001162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d108      	bne.n	800119c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4921      	ldr	r1, [pc, #132]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a19      	ldr	r1, [r3, #32]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	430b      	orrs	r3, r1
 80011ae:	491b      	ldr	r1, [pc, #108]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_RCC_OscConfig+0x4cc>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fb37 	bl	800082c <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fb33 	bl	800082c <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e03d      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x46a>
 80011e0:	e035      	b.n	800124e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_RCC_OscConfig+0x4cc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fb20 	bl	800082c <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff fb1c 	bl	800082c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e026      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x498>
 800120e:	e01e      	b.n	800124e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d107      	bne.n	8001228 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e019      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
 800121c:	40021000 	.word	0x40021000
 8001220:	40007000 	.word	0x40007000
 8001224:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_OscConfig+0x500>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	429a      	cmp	r2, r3
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	429a      	cmp	r2, r3
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0d0      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d910      	bls.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0207 	bic.w	r2, r3, #7
 8001286:	4965      	ldr	r1, [pc, #404]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b63      	ldr	r3, [pc, #396]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0b8      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d020      	beq.n	80012ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a58      	ldr	r2, [pc, #352]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012dc:	4b50      	ldr	r3, [pc, #320]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	494d      	ldr	r1, [pc, #308]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d040      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d115      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e07f      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e073      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e06b      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4936      	ldr	r1, [pc, #216]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fa6e 	bl	800082c <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff fa6a 	bl	800082c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e053      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d210      	bcs.n	80013ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 0207 	bic.w	r2, r3, #7
 8001392:	4922      	ldr	r1, [pc, #136]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e032      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4916      	ldr	r1, [pc, #88]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	490e      	ldr	r1, [pc, #56]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ea:	f000 f821 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	490a      	ldr	r1, [pc, #40]	; (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 80013fc:	5ccb      	ldrb	r3, [r1, r3]
 80013fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x1cc>)
 8001404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_ClockConfig+0x1d0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f9cc 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40022000 	.word	0x40022000
 8001420:	40021000 	.word	0x40021000
 8001424:	0800234c 	.word	0x0800234c
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001430:	b490      	push	{r4, r7}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_RCC_GetSysClockFreq+0xac>)
 8001438:	1d3c      	adds	r4, r7, #4
 800143a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001440:	f240 2301 	movw	r3, #513	; 0x201
 8001444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d002      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x40>
 800146a:	2b08      	cmp	r3, #8
 800146c:	d003      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x46>
 800146e:	e02b      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001472:	623b      	str	r3, [r7, #32]
      break;
 8001474:	e02b      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3328      	adds	r3, #40	; 0x28
 8001480:	443b      	add	r3, r7
 8001482:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001486:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d012      	beq.n	80014b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	0c5b      	lsrs	r3, r3, #17
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	3328      	adds	r3, #40	; 0x28
 800149e:	443b      	add	r3, r7
 80014a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014aa:	fb03 f202 	mul.w	r2, r3, r2
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	e004      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	623b      	str	r3, [r7, #32]
      break;
 80014c6:	e002      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014ca:	623b      	str	r3, [r7, #32]
      break;
 80014cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ce:	6a3b      	ldr	r3, [r7, #32]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc90      	pop	{r4, r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	0800233c 	.word	0x0800233c
 80014e0:	40021000 	.word	0x40021000
 80014e4:	007a1200 	.word	0x007a1200
 80014e8:	003d0900 	.word	0x003d0900

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <HAL_RCC_GetHCLKFreq+0x10>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001504:	f7ff fff2 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001508:	4602      	mov	r2, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4903      	ldr	r1, [pc, #12]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	0800235c 	.word	0x0800235c

08001528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800152c:	f7ff ffde 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001530:	4602      	mov	r2, r0
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0adb      	lsrs	r3, r3, #11
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	4903      	ldr	r1, [pc, #12]	; (800154c <HAL_RCC_GetPCLK2Freq+0x24>)
 800153e:	5ccb      	ldrb	r3, [r1, r3]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	0800235c 	.word	0x0800235c

08001550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <RCC_Delay+0x34>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <RCC_Delay+0x38>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0a5b      	lsrs	r3, r3, #9
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800156c:	bf00      	nop
  }
  while (Delay --);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	60fa      	str	r2, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <RCC_Delay+0x1c>
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20000000 	.word	0x20000000
 8001588:	10624dd3 	.word	0x10624dd3

0800158c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e041      	b.n	8001622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7fe ffbc 	bl	8000530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3304      	adds	r3, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f000 faa0 	bl	8001b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e041      	b.n	80016c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7fe ff89 	bl	8000568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3304      	adds	r3, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f000 fa51 	bl	8001b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <HAL_TIM_PWM_Start+0x24>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	bf14      	ite	ne
 80016e4:	2301      	movne	r3, #1
 80016e6:	2300      	moveq	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e022      	b.n	8001732 <HAL_TIM_PWM_Start+0x6a>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d109      	bne.n	8001706 <HAL_TIM_PWM_Start+0x3e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	bf14      	ite	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	2300      	moveq	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	e015      	b.n	8001732 <HAL_TIM_PWM_Start+0x6a>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d109      	bne.n	8001720 <HAL_TIM_PWM_Start+0x58>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	bf14      	ite	ne
 8001718:	2301      	movne	r3, #1
 800171a:	2300      	moveq	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	e008      	b.n	8001732 <HAL_TIM_PWM_Start+0x6a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e05e      	b.n	80017f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d104      	bne.n	800174a <HAL_TIM_PWM_Start+0x82>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001748:	e013      	b.n	8001772 <HAL_TIM_PWM_Start+0xaa>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d104      	bne.n	800175a <HAL_TIM_PWM_Start+0x92>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001758:	e00b      	b.n	8001772 <HAL_TIM_PWM_Start+0xaa>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b08      	cmp	r3, #8
 800175e:	d104      	bne.n	800176a <HAL_TIM_PWM_Start+0xa2>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001768:	e003      	b.n	8001772 <HAL_TIM_PWM_Start+0xaa>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2202      	movs	r2, #2
 800176e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2201      	movs	r2, #1
 8001778:	6839      	ldr	r1, [r7, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fc48 	bl	8002010 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_TIM_PWM_Start+0x138>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d107      	bne.n	800179a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <HAL_TIM_PWM_Start+0x138>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00e      	beq.n	80017c2 <HAL_TIM_PWM_Start+0xfa>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d009      	beq.n	80017c2 <HAL_TIM_PWM_Start+0xfa>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <HAL_TIM_PWM_Start+0x13c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d004      	beq.n	80017c2 <HAL_TIM_PWM_Start+0xfa>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_TIM_PWM_Start+0x140>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d111      	bne.n	80017e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b06      	cmp	r3, #6
 80017d2:	d010      	beq.n	80017f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e4:	e007      	b.n	80017f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40012c00 	.word	0x40012c00
 8001804:	40000400 	.word	0x40000400
 8001808:	40000800 	.word	0x40000800

0800180c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001822:	2302      	movs	r3, #2
 8001824:	e0ac      	b.n	8001980 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	f200 809f 	bhi.w	8001974 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	08001871 	.word	0x08001871
 8001840:	08001975 	.word	0x08001975
 8001844:	08001975 	.word	0x08001975
 8001848:	08001975 	.word	0x08001975
 800184c:	080018b1 	.word	0x080018b1
 8001850:	08001975 	.word	0x08001975
 8001854:	08001975 	.word	0x08001975
 8001858:	08001975 	.word	0x08001975
 800185c:	080018f3 	.word	0x080018f3
 8001860:	08001975 	.word	0x08001975
 8001864:	08001975 	.word	0x08001975
 8001868:	08001975 	.word	0x08001975
 800186c:	08001933 	.word	0x08001933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f9ac 	bl	8001bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0208 	orr.w	r2, r2, #8
 800188a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0204 	bic.w	r2, r2, #4
 800189a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6999      	ldr	r1, [r3, #24]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	619a      	str	r2, [r3, #24]
      break;
 80018ae:	e062      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f9f2 	bl	8001ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6999      	ldr	r1, [r3, #24]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	021a      	lsls	r2, r3, #8
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	619a      	str	r2, [r3, #24]
      break;
 80018f0:	e041      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fa3b 	bl	8001d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69da      	ldr	r2, [r3, #28]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0208 	orr.w	r2, r2, #8
 800190c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69da      	ldr	r2, [r3, #28]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0204 	bic.w	r2, r2, #4
 800191c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69d9      	ldr	r1, [r3, #28]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	61da      	str	r2, [r3, #28]
      break;
 8001930:	e021      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fa85 	bl	8001e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800194c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69da      	ldr	r2, [r3, #28]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69d9      	ldr	r1, [r3, #28]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	021a      	lsls	r2, r3, #8
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	61da      	str	r2, [r3, #28]
      break;
 8001972:	e000      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001974:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_TIM_ConfigClockSource+0x18>
 800199c:	2302      	movs	r3, #2
 800199e:	e0b3      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x180>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d8:	d03e      	beq.n	8001a58 <HAL_TIM_ConfigClockSource+0xd0>
 80019da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019de:	f200 8087 	bhi.w	8001af0 <HAL_TIM_ConfigClockSource+0x168>
 80019e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e6:	f000 8085 	beq.w	8001af4 <HAL_TIM_ConfigClockSource+0x16c>
 80019ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ee:	d87f      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x168>
 80019f0:	2b70      	cmp	r3, #112	; 0x70
 80019f2:	d01a      	beq.n	8001a2a <HAL_TIM_ConfigClockSource+0xa2>
 80019f4:	2b70      	cmp	r3, #112	; 0x70
 80019f6:	d87b      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x168>
 80019f8:	2b60      	cmp	r3, #96	; 0x60
 80019fa:	d050      	beq.n	8001a9e <HAL_TIM_ConfigClockSource+0x116>
 80019fc:	2b60      	cmp	r3, #96	; 0x60
 80019fe:	d877      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x168>
 8001a00:	2b50      	cmp	r3, #80	; 0x50
 8001a02:	d03c      	beq.n	8001a7e <HAL_TIM_ConfigClockSource+0xf6>
 8001a04:	2b50      	cmp	r3, #80	; 0x50
 8001a06:	d873      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x168>
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d058      	beq.n	8001abe <HAL_TIM_ConfigClockSource+0x136>
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d86f      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x168>
 8001a10:	2b30      	cmp	r3, #48	; 0x30
 8001a12:	d064      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x156>
 8001a14:	2b30      	cmp	r3, #48	; 0x30
 8001a16:	d86b      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x168>
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d060      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x156>
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	d867      	bhi.n	8001af0 <HAL_TIM_ConfigClockSource+0x168>
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d05c      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x156>
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d05a      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001a28:	e062      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f000 faca 	bl	8001fd2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	609a      	str	r2, [r3, #8]
      break;
 8001a56:	e04e      	b.n	8001af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f000 fab3 	bl	8001fd2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a7a:	609a      	str	r2, [r3, #8]
      break;
 8001a7c:	e03b      	b.n	8001af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f000 fa2a 	bl	8001ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2150      	movs	r1, #80	; 0x50
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fa81 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001a9c:	e02b      	b.n	8001af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f000 fa48 	bl	8001f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2160      	movs	r1, #96	; 0x60
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fa71 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001abc:	e01b      	b.n	8001af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f000 fa0a 	bl	8001ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fa61 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001adc:	e00b      	b.n	8001af6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4610      	mov	r0, r2
 8001aea:	f000 fa58 	bl	8001f9e <TIM_ITRx_SetConfig>
        break;
 8001aee:	e002      	b.n	8001af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001af0:	bf00      	nop
 8001af2:	e000      	b.n	8001af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001af4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <TIM_Base_SetConfig+0xb8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00b      	beq.n	8001b40 <TIM_Base_SetConfig+0x30>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2e:	d007      	beq.n	8001b40 <TIM_Base_SetConfig+0x30>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <TIM_Base_SetConfig+0xbc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d003      	beq.n	8001b40 <TIM_Base_SetConfig+0x30>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <TIM_Base_SetConfig+0xc0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d108      	bne.n	8001b52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <TIM_Base_SetConfig+0xb8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00b      	beq.n	8001b72 <TIM_Base_SetConfig+0x62>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b60:	d007      	beq.n	8001b72 <TIM_Base_SetConfig+0x62>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <TIM_Base_SetConfig+0xbc>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d003      	beq.n	8001b72 <TIM_Base_SetConfig+0x62>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <TIM_Base_SetConfig+0xc0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d108      	bne.n	8001b84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <TIM_Base_SetConfig+0xb8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d103      	bne.n	8001bb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	615a      	str	r2, [r3, #20]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40012c00 	.word	0x40012c00
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	40000800 	.word	0x40000800

08001bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	f023 0201 	bic.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f023 0303 	bic.w	r3, r3, #3
 8001c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f023 0302 	bic.w	r3, r3, #2
 8001c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <TIM_OC1_SetConfig+0xc8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d10c      	bne.n	8001c4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f023 0308 	bic.w	r3, r3, #8
 8001c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <TIM_OC1_SetConfig+0xc8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d111      	bne.n	8001c76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	621a      	str	r2, [r3, #32]
}
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	f023 0210 	bic.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f023 0320 	bic.w	r3, r3, #32
 8001cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <TIM_OC2_SetConfig+0xd0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d10d      	bne.n	8001d1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <TIM_OC2_SetConfig+0xd0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d113      	bne.n	8001d4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	621a      	str	r2, [r3, #32]
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40012c00 	.word	0x40012c00

08001d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <TIM_OC3_SetConfig+0xd0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10d      	bne.n	8001dee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <TIM_OC3_SetConfig+0xd0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d113      	bne.n	8001e1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	621a      	str	r2, [r3, #32]
}
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40012c00 	.word	0x40012c00

08001e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	031b      	lsls	r3, r3, #12
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <TIM_OC4_SetConfig+0x98>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d109      	bne.n	8001ebc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	019b      	lsls	r3, r3, #6
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	621a      	str	r2, [r3, #32]
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40012c00 	.word	0x40012c00

08001ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f023 0201 	bic.w	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f023 030a 	bic.w	r3, r3, #10
 8001f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	621a      	str	r2, [r3, #32]
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f023 0210 	bic.w	r2, r3, #16
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	621a      	str	r2, [r3, #32]
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f043 0307 	orr.w	r3, r3, #7
 8001fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	609a      	str	r2, [r3, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b087      	sub	sp, #28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	021a      	lsls	r2, r3, #8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	609a      	str	r2, [r3, #8]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2201      	movs	r2, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a1a      	ldr	r2, [r3, #32]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a1a      	ldr	r2, [r3, #32]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	431a      	orrs	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	621a      	str	r2, [r3, #32]
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800206c:	2302      	movs	r3, #2
 800206e:	e046      	b.n	80020fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a16      	ldr	r2, [pc, #88]	; (8002108 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00e      	beq.n	80020d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	d009      	beq.n	80020d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d004      	beq.n	80020d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10c      	bne.n	80020ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40012c00 	.word	0x40012c00
 800210c:	40000400 	.word	0x40000400
 8002110:	40000800 	.word	0x40000800

08002114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e03f      	b.n	80021a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe faac 	bl	8000698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2224      	movs	r2, #36	; 0x24
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f829 	bl	80021b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800216c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800217c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800218c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021ea:	f023 030c 	bic.w	r3, r3, #12
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <UART_SetConfig+0x114>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002218:	f7ff f986 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	e002      	b.n	8002226 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002220:	f7ff f96e 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8002224:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <UART_SetConfig+0x118>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	0119      	lsls	r1, r3, #4
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	009a      	lsls	r2, r3, #2
 8002250:	441a      	add	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fbb2 f2f3 	udiv	r2, r2, r3
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <UART_SetConfig+0x118>)
 800225e:	fba3 0302 	umull	r0, r3, r3, r2
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2064      	movs	r0, #100	; 0x64
 8002266:	fb00 f303 	mul.w	r3, r0, r3
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	3332      	adds	r3, #50	; 0x32
 8002270:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <UART_SetConfig+0x118>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227c:	4419      	add	r1, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009a      	lsls	r2, r3, #2
 8002288:	441a      	add	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fbb2 f2f3 	udiv	r2, r2, r3
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <UART_SetConfig+0x118>)
 8002296:	fba3 0302 	umull	r0, r3, r3, r2
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2064      	movs	r0, #100	; 0x64
 800229e:	fb00 f303 	mul.w	r3, r0, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	3332      	adds	r3, #50	; 0x32
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <UART_SetConfig+0x118>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	f003 020f 	and.w	r2, r3, #15
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	440a      	add	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40013800 	.word	0x40013800
 80022c8:	51eb851f 	.word	0x51eb851f

080022cc <__libc_init_array>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	2600      	movs	r6, #0
 80022d0:	4d0c      	ldr	r5, [pc, #48]	; (8002304 <__libc_init_array+0x38>)
 80022d2:	4c0d      	ldr	r4, [pc, #52]	; (8002308 <__libc_init_array+0x3c>)
 80022d4:	1b64      	subs	r4, r4, r5
 80022d6:	10a4      	asrs	r4, r4, #2
 80022d8:	42a6      	cmp	r6, r4
 80022da:	d109      	bne.n	80022f0 <__libc_init_array+0x24>
 80022dc:	f000 f822 	bl	8002324 <_init>
 80022e0:	2600      	movs	r6, #0
 80022e2:	4d0a      	ldr	r5, [pc, #40]	; (800230c <__libc_init_array+0x40>)
 80022e4:	4c0a      	ldr	r4, [pc, #40]	; (8002310 <__libc_init_array+0x44>)
 80022e6:	1b64      	subs	r4, r4, r5
 80022e8:	10a4      	asrs	r4, r4, #2
 80022ea:	42a6      	cmp	r6, r4
 80022ec:	d105      	bne.n	80022fa <__libc_init_array+0x2e>
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
 80022f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f4:	4798      	blx	r3
 80022f6:	3601      	adds	r6, #1
 80022f8:	e7ee      	b.n	80022d8 <__libc_init_array+0xc>
 80022fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80022fe:	4798      	blx	r3
 8002300:	3601      	adds	r6, #1
 8002302:	e7f2      	b.n	80022ea <__libc_init_array+0x1e>
 8002304:	08002364 	.word	0x08002364
 8002308:	08002364 	.word	0x08002364
 800230c:	08002364 	.word	0x08002364
 8002310:	08002368 	.word	0x08002368

08002314 <memset>:
 8002314:	4603      	mov	r3, r0
 8002316:	4402      	add	r2, r0
 8002318:	4293      	cmp	r3, r2
 800231a:	d100      	bne.n	800231e <memset+0xa>
 800231c:	4770      	bx	lr
 800231e:	f803 1b01 	strb.w	r1, [r3], #1
 8002322:	e7f9      	b.n	8002318 <memset+0x4>

08002324 <_init>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr

08002330 <_fini>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr
